; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\probe_com.o --depend=.\rvmdk\probe_com.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\probe_com.crf ..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ProbeCom_Init PROC
;;;369    
;;;370    void  ProbeCom_Init (void)
000000  48ea              LDR      r0,|L1.940|
;;;371    {
;;;372    #if (PROBE_COM_SUPPORT_STR  == DEF_TRUE)
;;;373        ProbeCom_StrBufWrIx     = 0;
;;;374        ProbeCom_StrBufRdIx     = 0;
;;;375    
;;;376        ProbeCom_OS_Init();
;;;377    #endif
;;;378    
;;;379    #if (PROBE_COM_STAT_EN      == DEF_ENABLED)
;;;380        ProbeCom_RxPktCtr       = 0;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]  ; ProbeCom_RxPktCtr
;;;381        ProbeCom_TxPktCtr       = 0;
000006  6041              STR      r1,[r0,#4]  ; ProbeCom_TxPktCtr
;;;382        ProbeCom_TxSymCtr       = 0;
000008  6081              STR      r1,[r0,#8]  ; ProbeCom_TxSymCtr
;;;383        ProbeCom_TxSymByteCtr   = 0;
00000a  60c1              STR      r1,[r0,#0xc]  ; ProbeCom_TxSymByteCtr
;;;384        ProbeCom_ErrPktCtr      = 0;
00000c  6101              STR      r1,[r0,#0x10]  ; ProbeCom_ErrPktCtr
;;;385    
;;;386    #if (PROBE_COM_SUPPORT_STR  == DEF_TRUE)
;;;387        ProbeCom_TxStrCtr       = 0;
;;;388    #endif
;;;389    
;;;390    #if (PROBE_COM_SUPPORT_WR   == DEF_TRUE)
;;;391        ProbeCom_RxSymCtr       = 0;
;;;392        ProbeCom_RxSymByteCtr   = 0;
;;;393    #endif
;;;394    #endif
;;;395    
;;;396        ProbeCom_EndiannessTest = 0x12345678L;
00000e  4ae8              LDR      r2,|L1.944|
000010  6142              STR      r2,[r0,#0x14]  ; ProbeCom_EndiannessTest
;;;397    
;;;398        ProbeCom_InfoHndlr      = (PROBE_COM_INFO_HDNLR_FNCT)0;
000012  6181              STR      r1,[r0,#0x18]  ; ProbeCom_InfoHndlr
;;;399    #if (PROBE_COM_SUPPORT_STR  == DEF_TRUE)
;;;400        ProbeCom_StrHndlr       = (PROBE_COM_STR_HDNLR_FNCT )0;
;;;401    #endif
;;;402    }
000014  4770              BX       lr
;;;403    
                          ENDP

                  ProbeCom_PktModifier PROC
;;;738    
;;;739    static  CPU_INT08U  ProbeCom_PktModifier (void)
000016  2000              MOVS     r0,#0
;;;740    {
;;;741        CPU_INT08U  mod;
;;;742    
;;;743    
;;;744        mod = PROBE_COM_MODIFIER_NONE;
;;;745    
;;;746    #if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
;;;747        if (ProbeCom_StrRdy() == DEF_TRUE) {
;;;748            DEF_BIT_SET(mod, PROBE_COM_MODIFIER_STR_HAVE);
;;;749        }
;;;750    #endif
;;;751    
;;;752        return (mod);
;;;753    }
000018  4770              BX       lr
;;;754    
                          ENDP

                  ProbeCom_StoINT8U PROC
;;;1902   
;;;1903   static  void  ProbeCom_StoINT8U (CPU_INT08U **pbuf, CPU_INT08U data)
00001a  6802              LDR      r2,[r0,#0]
;;;1904   {
;;;1905       *((*pbuf)++) = data;
00001c  1c53              ADDS     r3,r2,#1
00001e  6003              STR      r3,[r0,#0]
000020  7011              STRB     r1,[r2,#0]
;;;1906   }
000022  4770              BX       lr
;;;1907   
                          ENDP

                  ProbeCom_StoINT16U PROC
;;;1908   
;;;1909   static  void  ProbeCom_StoINT16U (CPU_INT08U **pbuf, CPU_INT16U data)
000024  b570              PUSH     {r4-r6,lr}
;;;1910   {
000026  4605              MOV      r5,r0
000028  460c              MOV      r4,r1
;;;1911       ProbeCom_StoINT8U(pbuf, (CPU_INT08U)(data & 0x00FF));
00002a  b2e1              UXTB     r1,r4
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       ProbeCom_StoINT8U
;;;1912       ProbeCom_StoINT8U(pbuf, (CPU_INT08U)(data >> 8));
000032  0a21              LSRS     r1,r4,#8
000034  4628              MOV      r0,r5
000036  e8bd4070          POP      {r4-r6,lr}
00003a  e7fe              B        ProbeCom_StoINT8U
;;;1913   }
;;;1914   
                          ENDP

                  ProbeCom_CmdErr PROC
;;;782    
;;;783    static  CPU_INT16U  ProbeCom_CmdErr (CPU_INT08U  *ptx_buf,
00003c  b513              PUSH     {r0,r1,r4,lr}
;;;784                                         CPU_INT08U   comm_err)
;;;785    {
00003e  460c              MOV      r4,r1
;;;786    #if (PROBE_COM_STAT_EN == DEF_ENABLED)
;;;787        ProbeCom_ErrPktCtr++;
000040  48da              LDR      r0,|L1.940|
000042  6902              LDR      r2,[r0,#0x10]  ; ProbeCom_ErrPktCtr
000044  1c52              ADDS     r2,r2,#1
000046  6102              STR      r2,[r0,#0x10]  ; ProbeCom_ErrPktCtr
;;;788    #endif
;;;789    
;;;790        ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_ERROR);       /* TX pkt format.                                  */
000048  f44f4100          MOV      r1,#0x8000
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       ProbeCom_StoINT16U
;;;791        ProbeCom_StoINT8U( &ptx_buf, comm_err);                     /* Target status.                                  */
000052  4621              MOV      r1,r4
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       ProbeCom_StoINT8U
;;;792        ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /* Modifier.                                       */
00005a  f7fffffe          BL       ProbeCom_PktModifier
00005e  4601              MOV      r1,r0
000060  4668              MOV      r0,sp
000062  f7fffffe          BL       ProbeCom_StoINT8U
;;;793        return (PROBE_COM_SIZE_TX_HDR);                             /* Rtn TX data segment size =  4 (= Tx hdr size).  */
;;;794    }
000066  b002              ADD      sp,sp,#8
000068  2004              MOVS     r0,#4                 ;793
00006a  bd10              POP      {r4,pc}
;;;795    
                          ENDP

                  ProbeCom_CmdMultipleRd PROC
;;;1219   
;;;1220   static  CPU_INT16U  ProbeCom_CmdMultipleRd (CPU_INT08U  *prx_buf,
00006c  e92d4fff          PUSH     {r0-r11,lr}
;;;1221                                               CPU_INT08U  *ptx_buf,
;;;1222                                               CPU_INT16U   rx_pkt_size,
;;;1223                                               CPU_INT16U   tx_buf_size)
;;;1224   {
000070  b081              SUB      sp,sp,#4
000072  4604              MOV      r4,r0
000074  460d              MOV      r5,r1
000076  4692              MOV      r10,r2
;;;1225       CPU_INT08U  *ptx_buf_start;
;;;1226       CPU_INT16U   tx_len;
;;;1227   
;;;1228       CPU_ADDR     addr;
;;;1229       CPU_INT16U   nbytes;
;;;1230       CPU_INT16U   rx_pkt_ix;
;;;1231   
;;;1232   #if (PROBE_COM_STAT_EN == DEF_ENABLED)
;;;1233       CPU_INT16U   sym_ctr;
;;;1234       CPU_INT16U   sym_byte_ctr;
;;;1235   #endif
;;;1236   
;;;1237   
;;;1238                                                                   /* ------------------- CHK PKT SIZE ------------------- */
;;;1239                                                                   /* Expected size >= 2 (= Rx header size )               */
;;;1240                                                                   /*                + 5 (= 1 item descriptor).            */
;;;1241       if (rx_pkt_size  < 7) {
000078  f1ba0f07          CMP      r10,#7
00007c  d205              BCS      |L1.138|
;;;1242           return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
00007e  b005              ADD      sp,sp,#0x14
000080  4628              MOV      r0,r5
000082  e8bd4ff0          POP      {r4-r11,lr}
000086  21fe              MOVS     r1,#0xfe
000088  e7fe              B        ProbeCom_CmdErr
                  |L1.138|
;;;1243       }
;;;1244   
;;;1245                                                                   /* -------------------- HANDLE RD --------------------- */
;;;1246       ptx_buf_start = ptx_buf;                                    /* Save ptr to TX buf in case pkt is too long for buf.  */
00008a  9500              STR      r5,[sp,#0]
;;;1247       tx_len        = PROBE_COM_SIZE_TX_HDR;                      /* Initial TX pkt len = 4 = size of hdr.                */
00008c  2604              MOVS     r6,#4
;;;1248   
;;;1249                                                                   /* Store TX pkt hdr :                                   */
;;;1250       ptx_buf[0]    = PROBE_COM_FMT_TX_MULTIPLE_RD_LO;            /* (a) TX pkt format.                                   */
00008e  2007              MOVS     r0,#7
000090  7028              STRB     r0,[r5,#0]
;;;1251       ptx_buf[1]    = PROBE_COM_FMT_TX_MULTIPLE_RD_HI;
000092  2080              MOVS     r0,#0x80
000094  7068              STRB     r0,[r5,#1]
;;;1252       ptx_buf[2]    = PROBE_COM_STATUS_OK;                        /* (b) Target status.                                   */
000096  2001              MOVS     r0,#1
000098  70a8              STRB     r0,[r5,#2]
;;;1253       ptx_buf[3]    = ProbeCom_PktModifier();                     /* (c) Modifier.                                        */
00009a  f7fffffe          BL       ProbeCom_PktModifier
00009e  70e8              STRB     r0,[r5,#3]
;;;1254       ptx_buf      += PROBE_COM_SIZE_TX_HDR;
0000a0  f1050b04          ADD      r11,r5,#4
;;;1255   
;;;1256       rx_pkt_ix     = 7;                                          /* Recv pkt ix after 1st item = 2 (= Rx header size   ) */
0000a4  2707              MOVS     r7,#7
;;;1257                                                                   /*                            + 5 (= 1 item descriptor).*/
;;;1258   
;;;1259   #if (PROBE_COM_STAT_EN == DEF_ENABLED)
;;;1260       sym_ctr      = 0;
0000a6  f04f0800          MOV      r8,#0
;;;1261       sym_byte_ctr = 0;
0000aa  f04f0900          MOV      r9,#0
                  |L1.174|
;;;1262   #endif
;;;1263                                                                   /* Store data for each item.                            */
;;;1264       while (rx_pkt_ix <= rx_pkt_size) {
;;;1265           nbytes     =  prx_buf[0];                               /* (a) Get nbr of bytes to read.                        */
0000ae  7825              LDRB     r5,[r4,#0]
;;;1266   
;;;1267                                                                   /* (b) Get read addr.                                   */
;;;1268   #if ((!defined(CPU_CFG_ADDR_SIZE)) || \
;;;1269        ((defined(CPU_CFG_ADDR_SIZE)) && \
;;;1270                 (CPU_CFG_ADDR_SIZE   != CPU_WORD_SIZE_16)))
;;;1271           addr       = (prx_buf[4] << 8) + prx_buf[3];
0000b0  78e0              LDRB     r0,[r4,#3]
0000b2  7921              LDRB     r1,[r4,#4]
0000b4  eb002001          ADD      r0,r0,r1,LSL #8
;;;1272           addr       = (addr       << 8) + prx_buf[2];
0000b8  78a1              LDRB     r1,[r4,#2]
0000ba  eb012000          ADD      r0,r1,r0,LSL #8
;;;1273           addr       = (addr       << 8) + prx_buf[1];
0000be  7861              LDRB     r1,[r4,#1]
0000c0  eb012100          ADD      r1,r1,r0,LSL #8
;;;1274   #else
;;;1275           addr       = (prx_buf[2] << 8) + prx_buf[1];
;;;1276   #endif
;;;1277   
;;;1278           prx_buf   += 5;
0000c4  1d64              ADDS     r4,r4,#5
;;;1279           rx_pkt_ix += 5;
0000c6  1d78              ADDS     r0,r7,#5
0000c8  b287              UXTH     r7,r0
;;;1280   
;;;1281           tx_len    += nbytes;                                    /* (c) Add nbr of bytes to pkt len.                     */
0000ca  1970              ADDS     r0,r6,r5
0000cc  b286              UXTH     r6,r0
;;;1282   
;;;1283           if (tx_len > tx_buf_size) {                             /* (d) Will pkt be too long for TX buf? ...             */
0000ce  9804              LDR      r0,[sp,#0x10]
0000d0  4286              CMP      r6,r0
0000d2  d905              BLS      |L1.224|
;;;1284               ptx_buf = ptx_buf_start;                            /*     ... rtn err.                                     */
0000d4  9800              LDR      r0,[sp,#0]
;;;1285               return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_TX_PKT_TOO_LARGE));
0000d6  b005              ADD      sp,sp,#0x14
0000d8  21fd              MOVS     r1,#0xfd
0000da  e8bd4ff0          POP      {r4-r11,lr}
0000de  e7fe              B        ProbeCom_CmdErr
                  |L1.224|
;;;1286           }
;;;1287   
;;;1288   #if (PROBE_COM_STAT_EN == DEF_ENABLED)
;;;1289           sym_ctr++;                                              /* (e) Inc local sym ctr.                               */
0000e0  f1080001          ADD      r0,r8,#1
0000e4  fa1ff880          UXTH     r8,r0
;;;1290           sym_byte_ctr += nbytes;
0000e8  eb090005          ADD      r0,r9,r5
0000ec  fa1ff980          UXTH     r9,r0
;;;1291   #endif
;;;1292                                                                   /* (f) Otherwise, save TX data.                         */
;;;1293           Mem_Copy((void     *)ptx_buf,
0000f0  462a              MOV      r2,r5
0000f2  4658              MOV      r0,r11
0000f4  f7fffffe          BL       Mem_Copy
;;;1294                    (void     *)addr,
;;;1295                    (CPU_SIZE_T)nbytes);
;;;1296   
;;;1297           ptx_buf += nbytes;
0000f8  44ab              ADD      r11,r11,r5
0000fa  4557              CMP      r7,r10                ;1264
0000fc  d9d7              BLS      |L1.174|
;;;1298       }
;;;1299   
;;;1300   #if (PROBE_COM_STAT_EN == DEF_ENABLED)
;;;1301       ProbeCom_TxSymCtr     += sym_ctr;                           /* Inc global sym ctr.                                  */
0000fe  48ab              LDR      r0,|L1.940|
000100  6881              LDR      r1,[r0,#8]  ; ProbeCom_TxSymCtr
000102  4441              ADD      r1,r1,r8
000104  6081              STR      r1,[r0,#8]  ; ProbeCom_TxSymCtr
;;;1302       ProbeCom_TxSymByteCtr += sym_byte_ctr;
000106  68c1              LDR      r1,[r0,#0xc]  ; ProbeCom_TxSymByteCtr
000108  4449              ADD      r1,r1,r9
00010a  60c1              STR      r1,[r0,#0xc]  ; ProbeCom_TxSymByteCtr
;;;1303   #endif
;;;1304   
;;;1305                                                                   /* ------------------ RTN TX PKT SIZE ----------------- */
;;;1306       return (tx_len);
;;;1307   }
00010c  b005              ADD      sp,sp,#0x14
00010e  4630              MOV      r0,r6                 ;1306
000110  e8bd8ff0          POP      {r4-r11,pc}
;;;1308   
                          ENDP

                  ProbeCom_GetINT8U PROC
;;;1853   
;;;1854   static  CPU_INT08U  ProbeCom_GetINT8U (CPU_INT08U **pbuf)
000114  6801              LDR      r1,[r0,#0]
;;;1855   {
;;;1856       return (*((*pbuf)++));
000116  1c4a              ADDS     r2,r1,#1
000118  6002              STR      r2,[r0,#0]
00011a  7808              LDRB     r0,[r1,#0]
;;;1857   }
00011c  4770              BX       lr
;;;1858   
                          ENDP

                  ProbeCom_GetINT16U PROC
;;;1859   
;;;1860   static  CPU_INT16U  ProbeCom_GetINT16U (CPU_INT08U **pbuf)
00011e  b570              PUSH     {r4-r6,lr}
;;;1861   {
000120  4605              MOV      r5,r0
;;;1862       CPU_INT16U  lowbyte;
;;;1863       CPU_INT16U  highbyte;
;;;1864   
;;;1865   
;;;1866       lowbyte  = ProbeCom_GetINT8U(pbuf);
000122  4628              MOV      r0,r5
000124  f7fffffe          BL       ProbeCom_GetINT8U
000128  4604              MOV      r4,r0
;;;1867       highbyte = ProbeCom_GetINT8U(pbuf);
00012a  4628              MOV      r0,r5
00012c  f7fffffe          BL       ProbeCom_GetINT8U
;;;1868       return ((CPU_INT16U)((CPU_INT16U)(highbyte << 8) | (CPU_INT16U)lowbyte));
000130  ea442000          ORR      r0,r4,r0,LSL #8
;;;1869   }
000134  bd70              POP      {r4-r6,pc}
;;;1870   
                          ENDP

                  ProbeCom_GetINT32U PROC
;;;1871   static  CPU_INT32U  ProbeCom_GetINT32U (CPU_INT08U **pbuf)
000136  b570              PUSH     {r4-r6,lr}
;;;1872   {
000138  4605              MOV      r5,r0
;;;1873       CPU_INT32U  highword;
;;;1874       CPU_INT32U  lowword;
;;;1875   
;;;1876   
;;;1877       lowword  = ProbeCom_GetINT16U(pbuf);
00013a  4628              MOV      r0,r5
00013c  f7fffffe          BL       ProbeCom_GetINT16U
000140  4604              MOV      r4,r0
;;;1878       highword = ProbeCom_GetINT16U(pbuf);
000142  4628              MOV      r0,r5
000144  f7fffffe          BL       ProbeCom_GetINT16U
;;;1879       return ((CPU_INT32U)((highword << 16) | lowword));
000148  ea444000          ORR      r0,r4,r0,LSL #16
;;;1880   }
00014c  bd70              POP      {r4-r6,pc}
;;;1881   
                          ENDP

                  ProbeCom_CmdSimpleRd PROC
;;;1083   
;;;1084   static  CPU_INT16U  ProbeCom_CmdSimpleRd (CPU_INT08U  *prx_buf,
00014e  e92d41ff          PUSH     {r0-r8,lr}
;;;1085                                             CPU_INT08U  *ptx_buf,
;;;1086                                             CPU_INT16U   rx_pkt_size,
;;;1087                                             CPU_INT16U   tx_buf_size)
;;;1088   {
000152  461e              MOV      r6,r3
;;;1089       CPU_ADDR    addr;
;;;1090       CPU_INT16U  nbytes;
;;;1091   
;;;1092   
;;;1093       addr   = 0;
;;;1094       nbytes = 0;
;;;1095   
;;;1096                                                                   /* ------------------- CHK PKT SIZE ------------------- */
;;;1097                                                                   /* Expected size = 2 (= Rx header size )                */
;;;1098                                                                   /*               + 2 (= Number of bytes)                */
;;;1099                                                                   /*               + 4 (= Address        ).               */
;;;1100       if (rx_pkt_size != 8) {
000154  2a08              CMP      r2,#8
000156  d006              BEQ      |L1.358|
;;;1101           return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
000158  21fe              MOVS     r1,#0xfe
00015a  9801              LDR      r0,[sp,#4]
00015c  f7fffffe          BL       ProbeCom_CmdErr
;;;1102       }
;;;1103   
;;;1104   
;;;1105                                                                   /* -------------------- HANDLE RD --------------------- */
;;;1106       nbytes = ProbeCom_GetINT16U(&prx_buf);                      /* Get nbr of bytes to read.                            */
;;;1107   
;;;1108                                                                   /* Get read addr.                                       */
;;;1109   #if ((!defined(CPU_CFG_ADDR_SIZE)) || \
;;;1110        ((defined(CPU_CFG_ADDR_SIZE)) && \
;;;1111                 (CPU_CFG_ADDR_SIZE   != CPU_WORD_SIZE_16)))
;;;1112       addr   = (CPU_ADDR)ProbeCom_GetINT32U(&prx_buf);
;;;1113   #else
;;;1114       addr   = (CPU_ADDR)ProbeCom_GetINT16U(&prx_buf);
;;;1115   #endif
;;;1116   
;;;1117       if (nbytes + PROBE_COM_SIZE_TX_HDR > tx_buf_size) {         /* If TX pkt will NOT fit in buf, rtn err.            */
;;;1118           return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_TX_PKT_TOO_LARGE));
;;;1119       }
;;;1120   
;;;1121   #if (PROBE_COM_STAT_EN == DEF_ENABLED)
;;;1122       ProbeCom_TxSymCtr++;                                        /* Increment transmit symbol counter.                   */
;;;1123       ProbeCom_TxSymByteCtr += nbytes;
;;;1124   #endif
;;;1125   
;;;1126                                                                   /* Store TX pkt hdr :                                   */
;;;1127       ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_SIMPLE_RD);   /*  (a) TX pkt format.                                  */
;;;1128       ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /*  (b) Target status.                                  */
;;;1129       ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /*  (c) Modifier.                                       */
;;;1130   
;;;1131       Mem_Copy((void     *)ptx_buf,                               /* Save TX data segment data.                           */
;;;1132                (void     *)addr,
;;;1133                (CPU_SIZE_T)nbytes);
;;;1134   
;;;1135                                                                   /* ------------------ RTN TX PKT SIZE ----------------- */
;;;1136       return ((CPU_INT16U)(nbytes + PROBE_COM_SIZE_TX_HDR));      /* TX pkt size = nbytes (= Tx data   size)              */
;;;1137                                                                   /*             + 4      (= Tx header size).             */
;;;1138   }
000160  b004              ADD      sp,sp,#0x10
000162  e8bd81f0          POP      {r4-r8,pc}
                  |L1.358|
000166  4668              MOV      r0,sp                 ;1106
000168  f7fffffe          BL       ProbeCom_GetINT16U
00016c  4605              MOV      r5,r0                 ;1106
00016e  4668              MOV      r0,sp                 ;1112
000170  f7fffffe          BL       ProbeCom_GetINT32U
000174  4607              MOV      r7,r0                 ;1112
000176  1d2c              ADDS     r4,r5,#4              ;1117
000178  42b4              CMP      r4,r6                 ;1117
00017a  d906              BLS      |L1.394|
00017c  21fd              MOVS     r1,#0xfd              ;1118
00017e  9801              LDR      r0,[sp,#4]            ;1118
000180  f7fffffe          BL       ProbeCom_CmdErr
000184  b004              ADD      sp,sp,#0x10
000186  e8bd81f0          POP      {r4-r8,pc}
                  |L1.394|
00018a  4888              LDR      r0,|L1.940|
00018c  6881              LDR      r1,[r0,#8]            ;1122  ; ProbeCom_TxSymCtr
00018e  1c49              ADDS     r1,r1,#1              ;1122
000190  6081              STR      r1,[r0,#8]            ;1122  ; ProbeCom_TxSymCtr
000192  68c1              LDR      r1,[r0,#0xc]          ;1123  ; ProbeCom_TxSymByteCtr
000194  4429              ADD      r1,r1,r5              ;1123
000196  60c1              STR      r1,[r0,#0xc]          ;1123  ; ProbeCom_TxSymByteCtr
000198  f2480102          MOV      r1,#0x8002            ;1127
00019c  a801              ADD      r0,sp,#4              ;1127
00019e  f7fffffe          BL       ProbeCom_StoINT16U
0001a2  2101              MOVS     r1,#1                 ;1128
0001a4  a801              ADD      r0,sp,#4              ;1128
0001a6  f7fffffe          BL       ProbeCom_StoINT8U
0001aa  f7fffffe          BL       ProbeCom_PktModifier
0001ae  4601              MOV      r1,r0                 ;1129
0001b0  a801              ADD      r0,sp,#4              ;1129
0001b2  f7fffffe          BL       ProbeCom_StoINT8U
0001b6  462a              MOV      r2,r5                 ;1131
0001b8  4639              MOV      r1,r7                 ;1131
0001ba  9801              LDR      r0,[sp,#4]            ;1131
0001bc  f7fffffe          BL       Mem_Copy
0001c0  b004              ADD      sp,sp,#0x10
0001c2  b2a0              UXTH     r0,r4                 ;1136
0001c4  e8bd81f0          POP      {r4-r8,pc}
;;;1139   
                          ENDP

                  ProbeCom_CmdInfo PROC
;;;992    
;;;993    static  CPU_INT16U  ProbeCom_CmdInfo (CPU_INT08U  *prx_buf,
0001c8  b57f              PUSH     {r0-r6,lr}
;;;994                                          CPU_INT08U  *ptx_buf,
;;;995                                          CPU_INT16U   rx_pkt_size,
;;;996                                          CPU_INT16U   tx_buf_size)
;;;997    {
;;;998        CPU_INT16U                 info;
;;;999        CPU_INT32U                 data;
;;;1000       PROBE_COM_INFO_HDNLR_FNCT  hndlr;
;;;1001   #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;1002       CPU_SR                     cpu_sr;
;;;1003   #endif
;;;1004   
;;;1005   
;;;1006                                                                   /* ------------------- CHK PKT SIZE ------------------- */
;;;1007                                                                   /* Expected size = 2 (= Rx header size)                 */
;;;1008                                                                   /*               + 2 (= Info          )                 */
;;;1009                                                                   /*               + 4 (= Data          ).                */
;;;1010       if (rx_pkt_size != 8) {
0001ca  2a08              CMP      r2,#8
0001cc  d005              BEQ      |L1.474|
;;;1011           return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
0001ce  21fe              MOVS     r1,#0xfe
0001d0  9801              LDR      r0,[sp,#4]
0001d2  f7fffffe          BL       ProbeCom_CmdErr
;;;1012       }
;;;1013                                                                   /* ------------------- HANDLE INFO -------------------- */
;;;1014       CPU_CRITICAL_ENTER();
;;;1015       hndlr = ProbeCom_InfoHndlr;
;;;1016       CPU_CRITICAL_EXIT();
;;;1017       if (hndlr != (PROBE_COM_INFO_HDNLR_FNCT)0) {                /* Invoke callback if callback is set.                  */
;;;1018           info = ProbeCom_GetINT16U(&prx_buf);
;;;1019           data = ProbeCom_GetINT32U(&prx_buf);
;;;1020           hndlr(info, data);
;;;1021       }
;;;1022   
;;;1023                                                                   /* Store TX pkt hdr :                                   */
;;;1024       ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_INFO);        /*  (a) TX pkt format.                                  */
;;;1025       ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /*  (b) Target status.                                  */
;;;1026       ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /*  (c) Modifier.                                       */
;;;1027   
;;;1028                                                                   /* ------------------ RTN TX PKT SIZE ----------------- */
;;;1029       return ((CPU_INT16U)(PROBE_COM_SIZE_TX_HDR));               /* Tx pkt size = 4 (= Tx header size).                  */
;;;1030   }
0001d6  b004              ADD      sp,sp,#0x10
0001d8  bd70              POP      {r4-r6,pc}
                  |L1.474|
0001da  f7fffffe          BL       CPU_SR_Save
0001de  4973              LDR      r1,|L1.940|
0001e0  698c              LDR      r4,[r1,#0x18]         ;1015  ; ProbeCom_InfoHndlr
0001e2  f7fffffe          BL       CPU_SR_Restore
0001e6  b14c              CBZ      r4,|L1.508|
0001e8  4668              MOV      r0,sp                 ;1018
0001ea  f7fffffe          BL       ProbeCom_GetINT16U
0001ee  4605              MOV      r5,r0                 ;1018
0001f0  4668              MOV      r0,sp                 ;1019
0001f2  f7fffffe          BL       ProbeCom_GetINT32U
0001f6  4601              MOV      r1,r0                 ;1020
0001f8  4628              MOV      r0,r5                 ;1020
0001fa  47a0              BLX      r4                    ;1020
                  |L1.508|
0001fc  f2480104          MOV      r1,#0x8004            ;1024
000200  a801              ADD      r0,sp,#4              ;1024
000202  f7fffffe          BL       ProbeCom_StoINT16U
000206  2101              MOVS     r1,#1                 ;1025
000208  a801              ADD      r0,sp,#4              ;1025
00020a  f7fffffe          BL       ProbeCom_StoINT8U
00020e  f7fffffe          BL       ProbeCom_PktModifier
000212  4601              MOV      r1,r0                 ;1026
000214  a801              ADD      r0,sp,#4              ;1026
000216  f7fffffe          BL       ProbeCom_StoINT8U
00021a  b004              ADD      sp,sp,#0x10
00021c  2004              MOVS     r0,#4                 ;1029
00021e  bd70              POP      {r4-r6,pc}
;;;1031   
                          ENDP

                  ProbeCom_CmdQuery PROC
;;;843    
;;;844    static  CPU_INT16U  ProbeCom_CmdQuery (CPU_INT08U  *prx_buf,
000220  b53f              PUSH     {r0-r5,lr}
;;;845                                           CPU_INT08U  *ptx_buf,
;;;846                                           CPU_INT16U   rx_pkt_size,
;;;847                                           CPU_INT16U   tx_buf_size)
;;;848    {
000222  b081              SUB      sp,sp,#4
;;;849        CPU_INT16U  query;
;;;850        CPU_INT16U  nbytes;
;;;851        CPU_INT32U  version;
;;;852    
;;;853    
;;;854        query  = 0;
;;;855        nbytes = 0;
000224  2400              MOVS     r4,#0
;;;856    
;;;857                                                                    /* ------------------- CHK PKT SIZE ------------------- */
;;;858                                                                    /* Expected size =  2 (= Rx header size)                */
;;;859                                                                    /*               +  2 (= Query         ).               */
;;;860        if (rx_pkt_size != 4) {
000226  2a04              CMP      r2,#4
000228  d005              BEQ      |L1.566|
;;;861            return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
00022a  21fe              MOVS     r1,#0xfe
00022c  9802              LDR      r0,[sp,#8]
00022e  f7fffffe          BL       ProbeCom_CmdErr
;;;862        }
;;;863    
;;;864                                                                    /* ------------------- HANDLE QUERY ------------------- */
;;;865        query = ProbeCom_GetINT16U(&prx_buf);                       /* Read the query.                                      */
;;;866    
;;;867        switch (query) {
;;;868            case PROBE_COM_QUERY_MAX_RX_SIZE:
;;;869            case PROBE_COM_QUERY_MAX_TX_SIZE:
;;;870            case PROBE_COM_QUERY_FMT_SUPPORT:
;;;871            case PROBE_COM_QUERY_ENDIANNESS_TEST:
;;;872                 break;
;;;873    
;;;874            default:
;;;875                 return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_QUERY_NOT_SUPPORTED));
;;;876        }
;;;877    
;;;878                                                                    /* Store TX pkt header :                                */
;;;879        ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_QUERY);       /*  (a) TX pkt format.                                  */
;;;880        ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /*  (b) Target status.                                  */
;;;881        ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /*  (c) Modifier.                                       */
;;;882    
;;;883                                                                    /* Store TX data segment data.                          */
;;;884        switch (query) {
;;;885    
;;;886            case PROBE_COM_QUERY_MAX_RX_SIZE:
;;;887                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_RX_MAX_SIZE);
;;;888                 ProbeCom_StoINT16U(&ptx_buf, 0);
;;;889                 nbytes  = 4;
;;;890                 break;
;;;891    
;;;892            case PROBE_COM_QUERY_MAX_TX_SIZE:
;;;893                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_TX_MAX_SIZE);
;;;894                 ProbeCom_StoINT16U(&ptx_buf, 0);
;;;895                 nbytes  = 4;
;;;896                 break;
;;;897    
;;;898            case PROBE_COM_QUERY_FMT_SUPPORT:
;;;899                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_QUERY      );
;;;900                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_INFO       );
;;;901                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_SIMPLE_RD  );
;;;902                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_MULTIPLE_RD);
;;;903                 nbytes  = 8;
;;;904    #if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
;;;905                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_SIMPLE_WR  );
;;;906                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_MULTIPLE_WR);
;;;907                 nbytes += 4;
;;;908    #endif
;;;909    #if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
;;;910                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_STR_RD);
;;;911                 ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_STR_WR);
;;;912                 nbytes += 4;
;;;913    #endif
;;;914                 break;
;;;915    
;;;916            case PROBE_COM_QUERY_ENDIANNESS_TEST:
;;;917                 ProbeCom_EndiannessTest = 0x12345678;
;;;918                 Mem_Copy((void     *) ptx_buf,
;;;919                          (void     *)&ProbeCom_EndiannessTest,
;;;920                          (CPU_SIZE_T) 4);
;;;921                 nbytes  = 4;
;;;922                 break;
;;;923    
;;;924    
;;;925            case PROBE_COM_QUERY_VERSION:
;;;926                 version = PROBE_COM_VERSION;
;;;927                 Mem_Copy((void     *) ptx_buf,
;;;928                          (void     *)&version,
;;;929                          (CPU_SIZE_T) 4);
;;;930                 nbytes  = 4;
;;;931                 break;
;;;932    
;;;933            default:
;;;934                 nbytes  = 0;
;;;935                 break;
;;;936        }
;;;937    
;;;938                                                                    /* ------------------ RTN TX PKT SIZE ----------------- */
;;;939        return ((CPU_INT16U)(nbytes + PROBE_COM_SIZE_TX_HDR));      /* TX pkt size = nbytes (= Tx data   size)              */
;;;940                                                                    /*             + 4      (= Tx header size).             */
;;;941    }
000232  b005              ADD      sp,sp,#0x14
000234  bd30              POP      {r4,r5,pc}
                  |L1.566|
000236  a801              ADD      r0,sp,#4              ;865
000238  f7fffffe          BL       ProbeCom_GetINT16U
00023c  4605              MOV      r5,r0                 ;865
00023e  f5a57080          SUB      r0,r5,#0x100          ;867
000242  3801              SUBS     r0,#1                 ;867
000244  d00d              BEQ      |L1.610|
000246  2801              CMP      r0,#1                 ;867
000248  d00b              BEQ      |L1.610|
00024a  f5b07f80          CMP      r0,#0x100             ;867
00024e  d008              BEQ      |L1.610|
000250  f5b06f70          CMP      r0,#0xf00             ;867
000254  d005              BEQ      |L1.610|
000256  21fc              MOVS     r1,#0xfc              ;875
000258  9802              LDR      r0,[sp,#8]            ;875
00025a  f7fffffe          BL       ProbeCom_CmdErr
00025e  b005              ADD      sp,sp,#0x14
000260  bd30              POP      {r4,r5,pc}
                  |L1.610|
000262  f2480101          MOV      r1,#0x8001            ;879
000266  a802              ADD      r0,sp,#8              ;879
000268  f7fffffe          BL       ProbeCom_StoINT16U
00026c  2101              MOVS     r1,#1                 ;880
00026e  a802              ADD      r0,sp,#8              ;880
000270  f7fffffe          BL       ProbeCom_StoINT8U
000274  f7fffffe          BL       ProbeCom_PktModifier
000278  4601              MOV      r1,r0                 ;881
00027a  a802              ADD      r0,sp,#8              ;881
00027c  f7fffffe          BL       ProbeCom_StoINT8U
000280  f2402101          MOV      r1,#0x201             ;884
000284  f2a52001          SUB      r0,r5,#0x201          ;884
000288  428d              CMP      r5,r1                 ;884
00028a  d034              BEQ      |L1.758|
00028c  dc05              BGT      |L1.666|
00028e  f5107080          ADDS     r0,r0,#0x100          ;884
000292  d00a              BEQ      |L1.682|
000294  2801              CMP      r0,#1                 ;884
000296  d140              BNE      |L1.794|
000298  e011              B        |L1.702|
                  |L1.666|
00029a  f5b06f60          CMP      r0,#0xe00             ;884
00029e  d018              BEQ      |L1.722|
0002a0  f5a06060          SUB      r0,r0,#0xe00          ;884
0002a4  3801              SUBS     r0,#1                 ;884
0002a6  d138              BNE      |L1.794|
0002a8  e02f              B        |L1.778|
                  |L1.682|
0002aa  2180              MOVS     r1,#0x80              ;887
0002ac  a802              ADD      r0,sp,#8              ;887
0002ae  f7fffffe          BL       ProbeCom_StoINT16U
0002b2  2100              MOVS     r1,#0                 ;888
0002b4  a802              ADD      r0,sp,#8              ;888
0002b6  f7fffffe          BL       ProbeCom_StoINT16U
0002ba  2404              MOVS     r4,#4                 ;889
0002bc  e02d              B        |L1.794|
                  |L1.702|
0002be  2180              MOVS     r1,#0x80              ;893
0002c0  a802              ADD      r0,sp,#8              ;893
0002c2  f7fffffe          BL       ProbeCom_StoINT16U
0002c6  2100              MOVS     r1,#0                 ;894
0002c8  a802              ADD      r0,sp,#8              ;894
0002ca  f7fffffe          BL       ProbeCom_StoINT16U
0002ce  2404              MOVS     r4,#4                 ;895
0002d0  e023              B        |L1.794|
                  |L1.722|
0002d2  2101              MOVS     r1,#1                 ;899
0002d4  a802              ADD      r0,sp,#8              ;899
0002d6  f7fffffe          BL       ProbeCom_StoINT16U
0002da  2104              MOVS     r1,#4                 ;900
0002dc  a802              ADD      r0,sp,#8              ;900
0002de  f7fffffe          BL       ProbeCom_StoINT16U
0002e2  2102              MOVS     r1,#2                 ;901
0002e4  a802              ADD      r0,sp,#8              ;901
0002e6  f7fffffe          BL       ProbeCom_StoINT16U
0002ea  2107              MOVS     r1,#7                 ;902
0002ec  a802              ADD      r0,sp,#8              ;902
0002ee  f7fffffe          BL       ProbeCom_StoINT16U
0002f2  2408              MOVS     r4,#8                 ;903
0002f4  e011              B        |L1.794|
                  |L1.758|
0002f6  492d              LDR      r1,|L1.940|
0002f8  482d              LDR      r0,|L1.944|
0002fa  6148              STR      r0,[r1,#0x14]         ;917  ; ProbeCom_EndiannessTest
0002fc  2204              MOVS     r2,#4                 ;918
0002fe  3114              ADDS     r1,r1,#0x14           ;918
000300  9802              LDR      r0,[sp,#8]            ;918
000302  f7fffffe          BL       Mem_Copy
000306  2404              MOVS     r4,#4                 ;921
000308  e007              B        |L1.794|
                  |L1.778|
00030a  20c8              MOVS     r0,#0xc8              ;926
00030c  9000              STR      r0,[sp,#0]            ;926
00030e  2204              MOVS     r2,#4                 ;927
000310  4669              MOV      r1,sp                 ;927
000312  9802              LDR      r0,[sp,#8]            ;927
000314  f7fffffe          BL       Mem_Copy
000318  2404              MOVS     r4,#4                 ;930
                  |L1.794|
00031a  1d20              ADDS     r0,r4,#4              ;939
00031c  b005              ADD      sp,sp,#0x14
00031e  b280              UXTH     r0,r0                 ;939
000320  bd30              POP      {r4,r5,pc}
;;;942    
                          ENDP

                  ProbeCom_ParseRxPkt PROC
;;;427    
;;;428    CPU_INT16U  ProbeCom_ParseRxPkt (void        *prx_pkt,
000322  b430              PUSH     {r4,r5}
;;;429                                     void        *ptx_pkt,
;;;430                                     CPU_INT16U   rx_pkt_size,
;;;431                                     CPU_INT16U   tx_buf_size)
;;;432    {
000324  4684              MOV      r12,r0
000326  4608              MOV      r0,r1
;;;433        CPU_INT16U   tx_buf_wr;
;;;434        CPU_INT16U   format;
;;;435        CPU_INT08U  *prx_pkt_08;
;;;436        CPU_INT08U  *ptx_pkt_08;
;;;437    
;;;438    
;;;439        if (rx_pkt_size < 2) {
000328  2a02              CMP      r2,#2
00032a  d202              BCS      |L1.818|
;;;440            return (0);
;;;441        }
;;;442    
;;;443        prx_pkt_08  = (CPU_INT08U *)prx_pkt;
;;;444        ptx_pkt_08  = (CPU_INT08U *)ptx_pkt;
;;;445        format      = (prx_pkt_08[1] << 8) + prx_pkt_08[0];
;;;446        prx_pkt_08 += 2;
;;;447    
;;;448    #if (PROBE_COM_STAT_EN == DEF_ENABLED)
;;;449        ProbeCom_RxPktCtr++;
;;;450        ProbeCom_TxPktCtr++;
;;;451    #endif
;;;452    
;;;453        switch (format) {
;;;454            case PROBE_COM_FMT_RX_QUERY:
;;;455                 tx_buf_wr = ProbeCom_CmdQuery(       prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
;;;456                 break;
;;;457    
;;;458            case PROBE_COM_FMT_RX_INFO:
;;;459                 tx_buf_wr = ProbeCom_CmdInfo(        prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
;;;460                 break;
;;;461    
;;;462            case PROBE_COM_FMT_RX_SIMPLE_RD:
;;;463                 tx_buf_wr = ProbeCom_CmdSimpleRd(    prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
;;;464                 break;
;;;465    
;;;466            case PROBE_COM_FMT_RX_MULTIPLE_RD:
;;;467                 tx_buf_wr = ProbeCom_CmdMultipleRd(  prx_pkt_08, ptx_pkt_08,  rx_pkt_size, tx_buf_size);
;;;468                 break;
;;;469    
;;;470    #if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
;;;471            case PROBE_COM_FMT_RX_SIMPLE_WR:
;;;472                 tx_buf_wr = ProbeCom_CmdSimpleWr(    prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
;;;473                 break;
;;;474    
;;;475            case PROBE_COM_FMT_RX_MULTIPLE_WR:
;;;476                 tx_buf_wr = ProbeCom_CmdMultipleWr(  prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
;;;477                 break;
;;;478    #endif
;;;479    
;;;480    #if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
;;;481            case PROBE_COM_FMT_RX_STR_RD:
;;;482                 tx_buf_wr = ProbeCom_CmdStrRd(       prx_pkt_08, ptx_pkt_08,  rx_pkt_size, tx_buf_size);
;;;483                 break;
;;;484    
;;;485            case PROBE_COM_FMT_RX_STR_WR:
;;;486                 tx_buf_wr = ProbeCom_CmdStrWr(       prx_pkt_08, ptx_pkt_08,  rx_pkt_size, tx_buf_size);
;;;487                 break;
;;;488    #endif
;;;489    
;;;490            default:
;;;491                 tx_buf_wr = ProbeCom_CmdErr(                     ptx_pkt_08,  PROBE_COM_STATUS_UNKNOWN_REQUEST);
;;;492                 break;
;;;493        }
;;;494    
;;;495        return (tx_buf_wr);
;;;496    }
00032c  bc30              POP      {r4,r5}
00032e  2000              MOVS     r0,#0                 ;440
000330  4770              BX       lr
                  |L1.818|
000332  4604              MOV      r4,r0                 ;444
000334  f89c0000          LDRB     r0,[r12,#0]           ;445
000338  f89c1001          LDRB     r1,[r12,#1]           ;445
00033c  eb002001          ADD      r0,r0,r1,LSL #8       ;445
000340  b280              UXTH     r0,r0                 ;445
000342  f10c0502          ADD      r5,r12,#2             ;446
000346  f8dfc064          LDR      r12,|L1.940|
00034a  f8dc1000          LDR      r1,[r12,#0]           ;449  ; ProbeCom_RxPktCtr
00034e  1c49              ADDS     r1,r1,#1              ;449
000350  f8cc1000          STR      r1,[r12,#0]           ;449  ; ProbeCom_RxPktCtr
000354  f8dc1004          LDR      r1,[r12,#4]           ;450  ; ProbeCom_TxPktCtr
000358  1c49              ADDS     r1,r1,#1              ;450
00035a  f8cc1004          STR      r1,[r12,#4]           ;450  ; ProbeCom_TxPktCtr
00035e  2801              CMP      r0,#1                 ;453
000360  d009              BEQ      |L1.886|
000362  2802              CMP      r0,#2                 ;453
000364  d00f              BEQ      |L1.902|
000366  2804              CMP      r0,#4                 ;453
000368  d009              BEQ      |L1.894|
00036a  2807              CMP      r0,#7                 ;453
00036c  d00f              BEQ      |L1.910|
00036e  4620              MOV      r0,r4                 ;491
000370  bc30              POP      {r4,r5}               ;491
000372  21f9              MOVS     r1,#0xf9              ;491
000374  e7fe              B        ProbeCom_CmdErr
                  |L1.886|
000376  4621              MOV      r1,r4                 ;455
000378  4628              MOV      r0,r5                 ;455
00037a  bc30              POP      {r4,r5}               ;455
00037c  e7fe              B        ProbeCom_CmdQuery
                  |L1.894|
00037e  4621              MOV      r1,r4                 ;459
000380  4628              MOV      r0,r5                 ;459
000382  bc30              POP      {r4,r5}               ;459
000384  e7fe              B        ProbeCom_CmdInfo
                  |L1.902|
000386  4621              MOV      r1,r4                 ;463
000388  4628              MOV      r0,r5                 ;463
00038a  bc30              POP      {r4,r5}               ;463
00038c  e7fe              B        ProbeCom_CmdSimpleRd
                  |L1.910|
00038e  4621              MOV      r1,r4                 ;467
000390  4628              MOV      r0,r5                 ;467
000392  bc30              POP      {r4,r5}               ;467
000394  e7fe              B        ProbeCom_CmdMultipleRd
;;;497    
                          ENDP

                  ProbeCom_InfoHndlrSet PROC
;;;514    
;;;515    void  ProbeCom_InfoHndlrSet (PROBE_COM_INFO_HDNLR_FNCT  hndlr)
000396  b510              PUSH     {r4,lr}
;;;516    {
000398  4604              MOV      r4,r0
;;;517    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;518        CPU_SR  cpu_sr;
;;;519    #endif
;;;520    
;;;521    
;;;522        CPU_CRITICAL_ENTER();
00039a  f7fffffe          BL       CPU_SR_Save
;;;523        ProbeCom_InfoHndlr = hndlr;
00039e  4903              LDR      r1,|L1.940|
0003a0  618c              STR      r4,[r1,#0x18]  ; ProbeCom_InfoHndlr
;;;524        CPU_CRITICAL_EXIT();
0003a2  e8bd4010          POP      {r4,lr}
0003a6  f7ffbffe          B.W      CPU_SR_Restore
;;;525    }
;;;526    
                          ENDP

0003aa  0000              DCW      0x0000
                  |L1.940|
                          DCD      ||.data||
                  |L1.944|
                          DCD      0x12345678

                          AREA ||.data||, DATA, ALIGN=2

                  ProbeCom_RxPktCtr
                          DCD      0x00000000
                  ProbeCom_TxPktCtr
                          DCD      0x00000000
                  ProbeCom_TxSymCtr
                          DCD      0x00000000
                  ProbeCom_TxSymByteCtr
                          DCD      0x00000000
                  ProbeCom_ErrPktCtr
                          DCD      0x00000000
                  ProbeCom_EndiannessTest
                          DCD      0x00000000
                  ProbeCom_InfoHndlr
                          DCD      0x00000000
