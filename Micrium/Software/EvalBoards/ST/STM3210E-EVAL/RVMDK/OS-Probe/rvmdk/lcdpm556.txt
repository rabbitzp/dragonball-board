; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcdpm556.o --depend=.\rvmdk\lcdpm556.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcdpm556.crf ..\..\..\..\..\uCGUI\GUI\ConvertColor\LCDPM556.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_Color2Index_M556 PROC
;;;48     */
;;;49     unsigned LCD_Color2Index_M556(LCD_COLOR Color) {
000000  f3c00185          UBFX     r1,r0,#2,#6
;;;50       int r,g,b;
;;;51       r = (Color>> (8  - R_BITS)) & R_MASK;
;;;52       g = (Color>> (16 - G_BITS)) & G_MASK;
000004  f3c022c4          UBFX     r2,r0,#11,#5
;;;53       b = (Color>> (24 - B_BITS)) & B_MASK;
000008  f3c040c4          UBFX     r0,r0,#19,#5
;;;54       return b + (g << B_BITS) + (r << (G_BITS + B_BITS));
00000c  eb001042          ADD      r0,r0,r2,LSL #5
000010  eb002081          ADD      r0,r0,r1,LSL #10
;;;55     }
000014  4770              BX       lr
;;;56     
                          ENDP

                  LCD_Index2Color_M556 PROC
;;;60     */
;;;61     LCD_COLOR LCD_Index2Color_M556(int Index) {
000016  b410              PUSH     {r4}
;;;62       unsigned int r,g,b;
;;;63       /* Seperate the color masks */
;;;64       b = Index                                  & B_MASK;
000018  f000011f          AND      r1,r0,#0x1f
;;;65       g = (Index >> B_BITS)                      & G_MASK;
00001c  f3c01244          UBFX     r2,r0,#5,#5
;;;66       r = ((unsigned)Index >> (B_BITS + G_BITS)) & R_MASK;
000020  f3c02085          UBFX     r0,r0,#10,#6
;;;67       /* Convert the color masks */
;;;68       r = r * 255 / R_MASK;
000024  4c10              LDR      r4,|L1.104|
000026  ebc02c00          RSB      r12,r0,r0,LSL #8
00002a  4623              MOV      r3,r4
00002c  2000              MOVS     r0,#0
00002e  fbec3004          UMLAL    r3,r0,r12,r4
000032  0903              LSRS     r3,r0,#4
;;;69       g = g * 255 / G_MASK;
000034  f8dfc034          LDR      r12,|L1.108|
000038  ebc22402          RSB      r4,r2,r2,LSL #8
00003c  4662              MOV      r2,r12
00003e  2000              MOVS     r0,#0
000040  fbe4200c          UMLAL    r2,r0,r4,r12
000044  08c2              LSRS     r2,r0,#3
;;;70       b = b * 255 / B_MASK;
000046  ebc12401          RSB      r4,r1,r1,LSL #8
00004a  4661              MOV      r1,r12
00004c  2000              MOVS     r0,#0
00004e  fbe4100c          UMLAL    r1,r0,r4,r12
000052  08c0              LSRS     r0,r0,#3
;;;71       return r + (g<<8) + (((U32)b)<<16);
000054  eb032102          ADD      r1,r3,r2,LSL #8
;;;72     }
000058  bc10              POP      {r4}
00005a  eb014000          ADD      r0,r1,r0,LSL #16      ;71
00005e  4770              BX       lr
;;;73     
                          ENDP

                  LCD_GetIndexMask_M556 PROC
;;;77     */
;;;78     unsigned LCD_GetIndexMask_M556(void) {
000060  f64f70ff          MOV      r0,#0xffff
;;;79       return 0xffff;
;;;80     }
000064  4770              BX       lr
;;;81     
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      0x41041041
                  |L1.108|
                          DCD      0x42108421
