; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\cpu_c.o --depend=.\rvmdk\cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\cpu_c.crf ..\..\..\..\..\uC-CPU\ARM-Cortex-M3\RealView\cpu_c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CPU_BitBandClr PROC
;;;129    
;;;130    void  CPU_BitBandClr (CPU_ADDR    addr,
000000  f1a05200          SUB      r2,r0,#0x20000000
;;;131                          CPU_INT08U  bit_nbr)
;;;132    {
;;;133        CPU_ADDR  bit_word_off;
;;;134        CPU_ADDR  bit_word_addr;
;;;135    
;;;136    
;;;137        if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
;;;138            (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
;;;139            bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO) * 32) + (bit_nbr * 4);
;;;140            bit_word_addr = CPU_BIT_BAND_SRAM_BASE + bit_word_off;
;;;141    
;;;142           *(volatile CPU_INT32U *)(bit_word_addr) = 0;
000004  2300              MOVS     r3,#0
000006  f5b21f80          CMP      r2,#0x100000          ;137
00000a  d206              BCS      |L1.26|
00000c  0150              LSLS     r0,r2,#5              ;139
00000e  eb000081          ADD      r0,r0,r1,LSL #2       ;139
000012  f1005008          ADD      r0,r0,#0x22000000     ;140
000016  6003              STR      r3,[r0,#0]
                  |L1.24|
;;;143    
;;;144        } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
;;;145                   (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
;;;146            bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
;;;147            bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
;;;148    
;;;149           *(volatile CPU_INT32U *)(bit_word_addr) = 0;
;;;150        }
;;;151    }
000018  4770              BX       lr
                  |L1.26|
00001a  f1a04080          SUB      r0,r0,#0x40000000     ;144
00001e  f5b01f80          CMP      r0,#0x100000          ;144
000022  d2f9              BCS      |L1.24|
000024  0140              LSLS     r0,r0,#5              ;146
000026  eb000081          ADD      r0,r0,r1,LSL #2       ;146
00002a  f1004084          ADD      r0,r0,#0x42000000     ;147
00002e  6003              STR      r3,[r0,#0]            ;149
000030  4770              BX       lr
;;;152    
                          ENDP

                  CPU_BitBandSet PROC
;;;171    
;;;172    void  CPU_BitBandSet (CPU_ADDR    addr,
000032  f1a05200          SUB      r2,r0,#0x20000000
;;;173                          CPU_INT08U  bit_nbr)
;;;174    {
;;;175        CPU_ADDR  bit_word_off;
;;;176        CPU_ADDR  bit_word_addr;
;;;177    
;;;178    
;;;179        if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
;;;180            (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
;;;181            bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO) * 32) + (bit_nbr * 4);
;;;182            bit_word_addr = CPU_BIT_BAND_SRAM_BASE + bit_word_off;
;;;183    
;;;184           *(volatile CPU_INT32U *)(bit_word_addr) = 1;
000036  2301              MOVS     r3,#1
000038  f5b21f80          CMP      r2,#0x100000          ;179
00003c  d206              BCS      |L1.76|
00003e  0150              LSLS     r0,r2,#5              ;181
000040  eb000081          ADD      r0,r0,r1,LSL #2       ;181
000044  f1005008          ADD      r0,r0,#0x22000000     ;182
000048  6003              STR      r3,[r0,#0]
                  |L1.74|
;;;185    
;;;186        } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
;;;187                   (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
;;;188            bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
;;;189            bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
;;;190    
;;;191           *(volatile CPU_INT32U *)(bit_word_addr) = 1;
;;;192        }
;;;193    }
00004a  4770              BX       lr
                  |L1.76|
00004c  f1a04080          SUB      r0,r0,#0x40000000     ;186
000050  f5b01f80          CMP      r0,#0x100000          ;186
000054  d2f9              BCS      |L1.74|
000056  0140              LSLS     r0,r0,#5              ;188
000058  eb000081          ADD      r0,r0,r1,LSL #2       ;188
00005c  f1004084          ADD      r0,r0,#0x42000000     ;189
000060  6003              STR      r3,[r0,#0]            ;191
000062  4770              BX       lr
;;;194    
                          ENDP

                  CPU_IntSrcDis PROC
;;;244    
;;;245    void  CPU_IntSrcDis (CPU_INT08U  pos)
000064  e92d41f0          PUSH     {r4-r8,lr}
;;;246    {
;;;247    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;248        CPU_SR      cpu_sr;
;;;249    #endif
;;;250        CPU_INT08U  group;
;;;251        CPU_INT08U  pos_max;
;;;252        CPU_INT08U  nbr;
;;;253    
;;;254    
;;;255        switch (pos) {
000068  2810              CMP      r0,#0x10
00006a  d236              BCS      |L1.218|
00006c  e8dff000          TBB      [pc,r0]
000070  56565656          DCB      0x56,0x56,0x56,0x56
000074  08131e56          DCB      0x08,0x13,0x1e,0x56
000078  56565656          DCB      0x56,0x56,0x56,0x56
00007c  56565629          DCB      0x56,0x56,0x56,0x29
;;;256            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;257            case CPU_INT_RSVD_07:
;;;258            case CPU_INT_RSVD_08:
;;;259            case CPU_INT_RSVD_09:
;;;260            case CPU_INT_RSVD_10:
;;;261            case CPU_INT_RSVD_13:
;;;262                 break;
;;;263    
;;;264    
;;;265                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;266            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;267            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;268            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;269            case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
;;;270            case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
;;;271            case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
;;;272                 break;
;;;273    
;;;274            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;275                 CPU_CRITICAL_ENTER();
000080  f7fffffe          BL       CPU_SR_Save
;;;276                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_MEMFAULTENA;
000084  49e8              LDR      r1,|L1.1064|
000086  680a              LDR      r2,[r1,#0]
000088  f4223280          BIC      r2,r2,#0x10000
00008c  600a              STR      r2,[r1,#0]
;;;277                 CPU_CRITICAL_EXIT();
00008e  e8bd41f0          POP      {r4-r8,lr}
000092  f7ffbffe          B.W      CPU_SR_Restore
;;;278                 break;
;;;279    
;;;280            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;281                 CPU_CRITICAL_ENTER();
000096  f7fffffe          BL       CPU_SR_Save
;;;282                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_BUSFAULTENA;
00009a  49e3              LDR      r1,|L1.1064|
00009c  680a              LDR      r2,[r1,#0]
00009e  f4223200          BIC      r2,r2,#0x20000
0000a2  600a              STR      r2,[r1,#0]
;;;283                 CPU_CRITICAL_EXIT();
0000a4  e8bd41f0          POP      {r4-r8,lr}
0000a8  f7ffbffe          B.W      CPU_SR_Restore
;;;284                 break;
;;;285    
;;;286            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;287                 CPU_CRITICAL_ENTER();
0000ac  f7fffffe          BL       CPU_SR_Save
;;;288                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_USGFAULTENA;
0000b0  49dd              LDR      r1,|L1.1064|
0000b2  680a              LDR      r2,[r1,#0]
0000b4  f4222280          BIC      r2,r2,#0x40000
0000b8  600a              STR      r2,[r1,#0]
;;;289                 CPU_CRITICAL_EXIT();
0000ba  e8bd41f0          POP      {r4-r8,lr}
0000be  f7ffbffe          B.W      CPU_SR_Restore
;;;290                 break;
;;;291    
;;;292            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;293                 CPU_CRITICAL_ENTER();
0000c2  f7fffffe          BL       CPU_SR_Save
;;;294                 CPU_REG_NVIC_ST_CTRL &= ~CPU_REG_NVIC_ST_CTRL_ENABLE;
0000c6  f04f21e0          MOV      r1,#0xe000e000
0000ca  690a              LDR      r2,[r1,#0x10]
0000cc  f0220201          BIC      r2,r2,#1
0000d0  610a              STR      r2,[r1,#0x10]
;;;295                 CPU_CRITICAL_EXIT();
0000d2  e8bd41f0          POP      {r4-r8,lr}
0000d6  f7ffbffe          B.W      CPU_SR_Restore
                  |L1.218|
;;;296                 break;
;;;297    
;;;298    
;;;299                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;300            default:
;;;301                pos_max = CPU_INT_SRC_POS_MAX;
0000da  f04f26e0          MOV      r6,#0xe000e000
0000de  6871              LDR      r1,[r6,#4]
0000e0  1c49              ADDS     r1,r1,#1
0000e2  2701              MOVS     r7,#1
0000e4  eb071141          ADD      r1,r7,r1,LSL #5
0000e8  b2c9              UXTB     r1,r1
;;;302                if (pos < pos_max) {                                /* See Note #3.                                         */
0000ea  4288              CMP      r0,r1
0000ec  d216              BCS      |L1.284|
;;;303                     group = (pos - 16) / 32;
0000ee  f1a00110          SUB      r1,r0,#0x10
0000f2  17ca              ASRS     r2,r1,#31
0000f4  eb0161d2          ADD      r1,r1,r2,LSR #27
0000f8  f3c11547          UBFX     r5,r1,#5,#8
;;;304                     nbr   = (pos - 16) % 32;
0000fc  3810              SUBS     r0,r0,#0x10
0000fe  f021011f          BIC      r1,r1,#0x1f
000102  1a44              SUBS     r4,r0,r1
;;;305    
;;;306                     CPU_CRITICAL_ENTER();
000104  f7fffffe          BL       CPU_SR_Save
;;;307                     CPU_REG_NVIC_CLREN(group) = DEF_BIT(nbr);
000108  eb060285          ADD      r2,r6,r5,LSL #2
00010c  fa07f104          LSL      r1,r7,r4
000110  f8c21180          STR      r1,[r2,#0x180]
;;;308                     CPU_CRITICAL_EXIT();
000114  e8bd41f0          POP      {r4-r8,lr}
000118  f7ffbffe          B.W      CPU_SR_Restore
                  |L1.284|
;;;309                 }
;;;310                 break;
;;;311        }
;;;312    }
00011c  e8bd81f0          POP      {r4-r8,pc}
;;;313    
                          ENDP

                  CPU_IntSrcEn PROC
;;;334    
;;;335    void  CPU_IntSrcEn (CPU_INT08U  pos)
000120  e92d41f0          PUSH     {r4-r8,lr}
;;;336    {
;;;337    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;338        CPU_SR      cpu_sr;
;;;339    #endif
;;;340        CPU_INT08U  group;
;;;341        CPU_INT08U  nbr;
;;;342        CPU_INT08U  pos_max;
;;;343    
;;;344    
;;;345        switch (pos) {
000124  2810              CMP      r0,#0x10
000126  d236              BCS      |L1.406|
000128  e8dff000          TBB      [pc,r0]
00012c  56565656          DCB      0x56,0x56,0x56,0x56
000130  08131e56          DCB      0x08,0x13,0x1e,0x56
000134  56565656          DCB      0x56,0x56,0x56,0x56
000138  56565629          DCB      0x56,0x56,0x56,0x29
;;;346            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;347            case CPU_INT_RSVD_07:
;;;348            case CPU_INT_RSVD_08:
;;;349            case CPU_INT_RSVD_09:
;;;350            case CPU_INT_RSVD_10:
;;;351            case CPU_INT_RSVD_13:
;;;352                 break;
;;;353    
;;;354    
;;;355                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;356            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;357            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;358            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;359            case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
;;;360            case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
;;;361            case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
;;;362                 break;
;;;363    
;;;364            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;365                 CPU_CRITICAL_ENTER();
00013c  f7fffffe          BL       CPU_SR_Save
;;;366                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
000140  49b9              LDR      r1,|L1.1064|
000142  680a              LDR      r2,[r1,#0]
000144  f4423280          ORR      r2,r2,#0x10000
000148  600a              STR      r2,[r1,#0]
;;;367                 CPU_CRITICAL_EXIT();
00014a  e8bd41f0          POP      {r4-r8,lr}
00014e  f7ffbffe          B.W      CPU_SR_Restore
;;;368                 break;
;;;369    
;;;370            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;371                 CPU_CRITICAL_ENTER();
000152  f7fffffe          BL       CPU_SR_Save
;;;372                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
000156  49b4              LDR      r1,|L1.1064|
000158  680a              LDR      r2,[r1,#0]
00015a  f4423200          ORR      r2,r2,#0x20000
00015e  600a              STR      r2,[r1,#0]
;;;373                 CPU_CRITICAL_EXIT();
000160  e8bd41f0          POP      {r4-r8,lr}
000164  f7ffbffe          B.W      CPU_SR_Restore
;;;374                 break;
;;;375    
;;;376            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;377                 CPU_CRITICAL_ENTER();
000168  f7fffffe          BL       CPU_SR_Save
;;;378                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
00016c  49ae              LDR      r1,|L1.1064|
00016e  680a              LDR      r2,[r1,#0]
000170  f4422280          ORR      r2,r2,#0x40000
000174  600a              STR      r2,[r1,#0]
;;;379                 CPU_CRITICAL_EXIT();
000176  e8bd41f0          POP      {r4-r8,lr}
00017a  f7ffbffe          B.W      CPU_SR_Restore
;;;380                 break;
;;;381    
;;;382            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;383                 CPU_CRITICAL_ENTER();
00017e  f7fffffe          BL       CPU_SR_Save
;;;384                 CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
000182  f04f21e0          MOV      r1,#0xe000e000
000186  690a              LDR      r2,[r1,#0x10]
000188  f0420201          ORR      r2,r2,#1
00018c  610a              STR      r2,[r1,#0x10]
;;;385                 CPU_CRITICAL_EXIT();
00018e  e8bd41f0          POP      {r4-r8,lr}
000192  f7ffbffe          B.W      CPU_SR_Restore
                  |L1.406|
;;;386                 break;
;;;387    
;;;388    
;;;389                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;390            default:
;;;391                pos_max = CPU_INT_SRC_POS_MAX;
000196  f04f26e0          MOV      r6,#0xe000e000
00019a  6871              LDR      r1,[r6,#4]
00019c  1c49              ADDS     r1,r1,#1
00019e  2701              MOVS     r7,#1
0001a0  eb071141          ADD      r1,r7,r1,LSL #5
0001a4  b2c9              UXTB     r1,r1
;;;392                if (pos < pos_max) {                                /* See Note #3.                                         */
0001a6  4288              CMP      r0,r1
0001a8  d216              BCS      |L1.472|
;;;393                     group = (pos - 16) / 32;
0001aa  f1a00110          SUB      r1,r0,#0x10
0001ae  17ca              ASRS     r2,r1,#31
0001b0  eb0161d2          ADD      r1,r1,r2,LSR #27
0001b4  f3c11547          UBFX     r5,r1,#5,#8
;;;394                     nbr   = (pos - 16) % 32;
0001b8  3810              SUBS     r0,r0,#0x10
0001ba  f021011f          BIC      r1,r1,#0x1f
0001be  1a44              SUBS     r4,r0,r1
;;;395    
;;;396                     CPU_CRITICAL_ENTER();
0001c0  f7fffffe          BL       CPU_SR_Save
;;;397                     CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
0001c4  eb060285          ADD      r2,r6,r5,LSL #2
0001c8  fa07f104          LSL      r1,r7,r4
0001cc  f8c21100          STR      r1,[r2,#0x100]
;;;398                     CPU_CRITICAL_EXIT();
0001d0  e8bd41f0          POP      {r4-r8,lr}
0001d4  f7ffbffe          B.W      CPU_SR_Restore
                  |L1.472|
;;;399                 }
;;;400                 break;
;;;401        }
;;;402    }
0001d8  e8bd81f0          POP      {r4-r8,pc}
;;;403    
                          ENDP

                  CPU_IntSrcPrioSet PROC
;;;430    
;;;431    void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
0001dc  e92d41f0          PUSH     {r4-r8,lr}
;;;432                             CPU_INT08U  prio)
;;;433    {
0001e0  4605              MOV      r5,r0
0001e2  4608              MOV      r0,r1
;;;434    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;435        CPU_SR      cpu_sr;
;;;436    #endif
;;;437        CPU_INT08U  group;
;;;438        CPU_INT08U  nbr;
;;;439        CPU_INT08U  pos_max;
;;;440        CPU_INT32U  prio_32;
;;;441        CPU_INT32U  temp;
;;;442    
;;;443    
;;;444        prio_32 = CPU_RevBits((CPU_INT08U)prio);
0001e4  f7fffffe          BL       CPU_RevBits
;;;445        prio    = (CPU_INT08U)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
0001e8  0e04              LSRS     r4,r0,#24
;;;446    
;;;447        switch (pos) {
0001ea  2d10              CMP      r5,#0x10
0001ec  d264              BCS      |L1.696|
0001ee  e8dff005          TBB      [pc,r5]
0001f2  8f8f              DCB      0x8f,0x8f
0001f4  8f8f0815          DCB      0x8f,0x8f,0x08,0x15
0001f8  228f8f8f          DCB      0x22,0x8f,0x8f,0x8f
0001fc  8f2f3c8f          DCB      0x8f,0x2f,0x3c,0x8f
000200  4956              DCB      0x49,0x56
;;;448            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;449            case CPU_INT_RSVD_07:
;;;450            case CPU_INT_RSVD_08:
;;;451            case CPU_INT_RSVD_09:
;;;452            case CPU_INT_RSVD_10:
;;;453            case CPU_INT_RSVD_13:
;;;454                 break;
;;;455    
;;;456    
;;;457                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;458            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;459            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;460            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;461                 break;
;;;462    
;;;463            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;464                 CPU_CRITICAL_ENTER();
000202  f7fffffe          BL       CPU_SR_Save
;;;465                 temp                 = CPU_REG_NVIC_SHPRI1;
000206  4a89              LDR      r2,|L1.1068|
000208  6811              LDR      r1,[r2,#0]
;;;466                 temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
00020a  f02101ff          BIC      r1,r1,#0xff
;;;467                 temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
00020e  ea410104          ORR      r1,r1,r4
;;;468                 CPU_REG_NVIC_SHPRI1  = temp;
000212  6011              STR      r1,[r2,#0]
;;;469                 CPU_CRITICAL_EXIT();
000214  e8bd41f0          POP      {r4-r8,lr}
000218  f7ffbffe          B.W      CPU_SR_Restore
;;;470                 break;
;;;471    
;;;472            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;473                 CPU_CRITICAL_ENTER();
00021c  f7fffffe          BL       CPU_SR_Save
;;;474                 temp                 = CPU_REG_NVIC_SHPRI1;
000220  4a82              LDR      r2,|L1.1068|
000222  6811              LDR      r1,[r2,#0]
;;;475                 temp                &= ~(DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
000224  f421417f          BIC      r1,r1,#0xff00
;;;476                 temp                |=  (prio           << (1 * DEF_OCTET_NBR_BITS));
000228  ea412104          ORR      r1,r1,r4,LSL #8
;;;477                 CPU_REG_NVIC_SHPRI1  = temp;
00022c  6011              STR      r1,[r2,#0]
;;;478                 CPU_CRITICAL_EXIT();
00022e  e8bd41f0          POP      {r4-r8,lr}
000232  f7ffbffe          B.W      CPU_SR_Restore
;;;479                 break;
;;;480    
;;;481            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;482                 CPU_CRITICAL_ENTER();
000236  f7fffffe          BL       CPU_SR_Save
;;;483                 temp                 = CPU_REG_NVIC_SHPRI1;
00023a  4a7c              LDR      r2,|L1.1068|
00023c  6811              LDR      r1,[r2,#0]
;;;484                 temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
00023e  f421017f          BIC      r1,r1,#0xff0000
;;;485                 temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
000242  ea414104          ORR      r1,r1,r4,LSL #16
;;;486                 CPU_REG_NVIC_SHPRI1  = temp;
000246  6011              STR      r1,[r2,#0]
;;;487                 CPU_CRITICAL_EXIT();
000248  e8bd41f0          POP      {r4-r8,lr}
00024c  f7ffbffe          B.W      CPU_SR_Restore
;;;488                 break;
;;;489    
;;;490            case CPU_INT_SVCALL:                                    /* SVCall.                                              */
;;;491                 CPU_CRITICAL_ENTER();
000250  f7fffffe          BL       CPU_SR_Save
;;;492                 temp                 = CPU_REG_NVIC_SHPRI2;
000254  4a76              LDR      r2,|L1.1072|
000256  6811              LDR      r1,[r2,#0]
;;;493                 temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
000258  f021417f          BIC      r1,r1,#0xff000000
;;;494                 temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
00025c  ea416104          ORR      r1,r1,r4,LSL #24
;;;495                 CPU_REG_NVIC_SHPRI2  = temp;
000260  6011              STR      r1,[r2,#0]
;;;496                 CPU_CRITICAL_EXIT();
000262  e8bd41f0          POP      {r4-r8,lr}
000266  f7ffbffe          B.W      CPU_SR_Restore
;;;497                 break;
;;;498    
;;;499            case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
;;;500                 CPU_CRITICAL_ENTER();
00026a  f7fffffe          BL       CPU_SR_Save
;;;501                 temp                = CPU_REG_NVIC_SHPRI3;
00026e  4a71              LDR      r2,|L1.1076|
000270  6811              LDR      r1,[r2,#0]
;;;502                 temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
000272  f02101ff          BIC      r1,r1,#0xff
;;;503                 temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
000276  ea410104          ORR      r1,r1,r4
;;;504                 CPU_REG_NVIC_SHPRI3  = temp;
00027a  6011              STR      r1,[r2,#0]
;;;505                 CPU_CRITICAL_EXIT();
00027c  e8bd41f0          POP      {r4-r8,lr}
000280  f7ffbffe          B.W      CPU_SR_Restore
;;;506                 break;
;;;507    
;;;508            case CPU_INT_PENDSV:                                    /* PendSV.                                              */
;;;509                 CPU_CRITICAL_ENTER();
000284  f7fffffe          BL       CPU_SR_Save
;;;510                 temp                 = CPU_REG_NVIC_SHPRI3;
000288  4a6a              LDR      r2,|L1.1076|
00028a  6811              LDR      r1,[r2,#0]
;;;511                 temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
00028c  f421017f          BIC      r1,r1,#0xff0000
;;;512                 temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
000290  ea414104          ORR      r1,r1,r4,LSL #16
;;;513                 CPU_REG_NVIC_SHPRI3  = temp;
000294  6011              STR      r1,[r2,#0]
;;;514                 CPU_CRITICAL_EXIT();
000296  e8bd41f0          POP      {r4-r8,lr}
00029a  f7ffbffe          B.W      CPU_SR_Restore
;;;515                 break;
;;;516    
;;;517            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;518                 CPU_CRITICAL_ENTER();
00029e  f7fffffe          BL       CPU_SR_Save
;;;519                 temp                 = CPU_REG_NVIC_SHPRI3;
0002a2  4a64              LDR      r2,|L1.1076|
0002a4  6811              LDR      r1,[r2,#0]
;;;520                 temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
0002a6  f021417f          BIC      r1,r1,#0xff000000
;;;521                 temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
0002aa  ea416104          ORR      r1,r1,r4,LSL #24
;;;522                 CPU_REG_NVIC_SHPRI3  = temp;
0002ae  6011              STR      r1,[r2,#0]
;;;523                 CPU_CRITICAL_EXIT();
0002b0  e8bd41f0          POP      {r4-r8,lr}
0002b4  f7ffbffe          B.W      CPU_SR_Restore
                  |L1.696|
;;;524                 break;
;;;525    
;;;526    
;;;527                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;528            default:
;;;529                pos_max = CPU_INT_SRC_POS_MAX;
0002b8  f04f27e0          MOV      r7,#0xe000e000
0002bc  6878              LDR      r0,[r7,#4]
0002be  1c40              ADDS     r0,r0,#1
0002c0  2101              MOVS     r1,#1
0002c2  eb011040          ADD      r0,r1,r0,LSL #5
0002c6  b2c0              UXTB     r0,r0
;;;530                if (pos < pos_max) {                                /* See Note #3.                                         */
0002c8  4285              CMP      r5,r0
0002ca  d221              BCS      |L1.784|
;;;531                     group                    = (pos - 16) / 4;
0002cc  f1a50010          SUB      r0,r5,#0x10
0002d0  17c1              ASRS     r1,r0,#31
0002d2  eb007091          ADD      r0,r0,r1,LSR #30
0002d6  f3c00687          UBFX     r6,r0,#2,#8
;;;532                     nbr                      = (pos - 16) % 4;
0002da  f1a50110          SUB      r1,r5,#0x10
0002de  f0200003          BIC      r0,r0,#3
0002e2  1a0d              SUBS     r5,r1,r0
;;;533    
;;;534                     CPU_CRITICAL_ENTER();
0002e4  f7fffffe          BL       CPU_SR_Save
;;;535                     temp                     = CPU_REG_NVIC_PRIO(group);
0002e8  eb070186          ADD      r1,r7,r6,LSL #2
0002ec  f8d13400          LDR      r3,[r1,#0x400]
;;;536                     temp                    &= ~(DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
0002f0  00ea              LSLS     r2,r5,#3
0002f2  f04f0cff          MOV      r12,#0xff
0002f6  fa0cfc02          LSL      r12,r12,r2
0002fa  ea23030c          BIC      r3,r3,r12
;;;537                     temp                    |=  (prio           << (nbr * DEF_OCTET_NBR_BITS));
0002fe  fa04f202          LSL      r2,r4,r2
000302  431a              ORRS     r2,r2,r3
;;;538                     CPU_REG_NVIC_PRIO(group) = temp;
000304  f8c12400          STR      r2,[r1,#0x400]
;;;539                     CPU_CRITICAL_EXIT();
000308  e8bd41f0          POP      {r4-r8,lr}
00030c  f7ffbffe          B.W      CPU_SR_Restore
                  |L1.784|
;;;540                 }
;;;541                 break;
;;;542        }
;;;543    }
000310  e8bd81f0          POP      {r4-r8,pc}
;;;544    
                          ENDP

                  CPU_IntSrcPrioGet PROC
;;;566    
;;;567    CPU_INT16S  CPU_IntSrcPrioGet (CPU_INT08U  pos)
000314  b570              PUSH     {r4-r6,lr}
;;;568    {
;;;569    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;570        CPU_SR      cpu_sr;
;;;571    #endif
;;;572        CPU_INT08U  group;
;;;573        CPU_INT08U  nbr;
;;;574        CPU_INT08U  pos_max;
;;;575        CPU_INT16S  prio;
;;;576        CPU_INT32U  prio_32;
;;;577        CPU_INT32U  temp;
;;;578    
;;;579    
;;;580        switch (pos) {
000316  2810              CMP      r0,#0x10
000318  d25b              BCS      |L1.978|
00031a  e8dff000          TBB      [pc,r0]
00031e  080a              DCB      0x08,0x0a
000320  0d10131d          DCB      0x0d,0x10,0x13,0x1d
000324  28080808          DCB      0x28,0x08,0x08,0x08
000328  082f3a08          DCB      0x08,0x2f,0x3a,0x08
00032c  444f              DCB      0x44,0x4f
;;;581            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;582            case CPU_INT_RSVD_07:
;;;583            case CPU_INT_RSVD_08:
;;;584            case CPU_INT_RSVD_09:
;;;585            case CPU_INT_RSVD_10:
;;;586            case CPU_INT_RSVD_13:
;;;587                 prio = DEF_INT_16S_MIN_VAL;
00032e  4c42              LDR      r4,|L1.1080|
;;;588                 break;
000330  e072              B        |L1.1048|
;;;589    
;;;590    
;;;591                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;592            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;593                 prio = -3;
000332  f06f0402          MVN      r4,#2
;;;594                 break;
000336  e06f              B        |L1.1048|
;;;595    
;;;596            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;597                 prio = -2;
000338  f06f0401          MVN      r4,#1
;;;598                 break;
00033c  e06c              B        |L1.1048|
;;;599    
;;;600            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;601                 prio = -1;
00033e  f04f34ff          MOV      r4,#0xffffffff
;;;602                 break;
000342  e069              B        |L1.1048|
;;;603    
;;;604    
;;;605            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;606                 CPU_CRITICAL_ENTER();
000344  f7fffffe          BL       CPU_SR_Save
000348  4601              MOV      r1,r0
;;;607                 temp = CPU_REG_NVIC_SHPRI1;
00034a  4838              LDR      r0,|L1.1068|
00034c  6800              LDR      r0,[r0,#0]
;;;608                 prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
00034e  b2c4              UXTB     r4,r0
;;;609                 CPU_CRITICAL_EXIT();
000350  4608              MOV      r0,r1
000352  f7fffffe          BL       CPU_SR_Restore
;;;610                 break;
000356  e05f              B        |L1.1048|
;;;611    
;;;612    
;;;613            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;614                 CPU_CRITICAL_ENTER();
000358  f7fffffe          BL       CPU_SR_Save
00035c  4601              MOV      r1,r0
;;;615                 temp = CPU_REG_NVIC_SHPRI1;
00035e  4833              LDR      r0,|L1.1068|
000360  6800              LDR      r0,[r0,#0]
;;;616                 prio = (temp >> (1 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000362  f3c02407          UBFX     r4,r0,#8,#8
;;;617                 CPU_CRITICAL_EXIT();
000366  4608              MOV      r0,r1
000368  f7fffffe          BL       CPU_SR_Restore
;;;618                 break;
00036c  e054              B        |L1.1048|
;;;619    
;;;620    
;;;621            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;622                 CPU_CRITICAL_ENTER();
00036e  f7fffffe          BL       CPU_SR_Save
;;;623                 temp = CPU_REG_NVIC_SHPRI1;
000372  482e              LDR      r0,|L1.1068|
000374  6800              LDR      r0,[r0,#0]
;;;624                 prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000376  f3c04407          UBFX     r4,r0,#16,#8
;;;625                 break;
00037a  e04d              B        |L1.1048|
;;;626    
;;;627            case CPU_INT_SVCALL:                                    /* SVCall.                                              */
;;;628                 CPU_CRITICAL_ENTER();
00037c  f7fffffe          BL       CPU_SR_Save
000380  4601              MOV      r1,r0
;;;629                 temp = CPU_REG_NVIC_SHPRI2;
000382  482b              LDR      r0,|L1.1072|
000384  6800              LDR      r0,[r0,#0]
;;;630                 prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000386  ea4f6410          LSR      r4,r0,#24
;;;631                 CPU_CRITICAL_EXIT();
00038a  4608              MOV      r0,r1
00038c  f7fffffe          BL       CPU_SR_Restore
;;;632                 break;
000390  e042              B        |L1.1048|
;;;633    
;;;634            case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
;;;635                 CPU_CRITICAL_ENTER();
000392  f7fffffe          BL       CPU_SR_Save
000396  4601              MOV      r1,r0
;;;636                 temp = CPU_REG_NVIC_SHPRI3;
000398  4826              LDR      r0,|L1.1076|
00039a  6800              LDR      r0,[r0,#0]
;;;637                 prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
00039c  b2c4              UXTB     r4,r0
;;;638                 CPU_CRITICAL_EXIT();
00039e  4608              MOV      r0,r1
0003a0  f7fffffe          BL       CPU_SR_Restore
;;;639                 break;
0003a4  e038              B        |L1.1048|
;;;640    
;;;641            case CPU_INT_PENDSV:                                    /* PendSV.                                              */
;;;642                 CPU_CRITICAL_ENTER();
0003a6  f7fffffe          BL       CPU_SR_Save
0003aa  4601              MOV      r1,r0
;;;643                 temp = CPU_REG_NVIC_SHPRI3;
0003ac  4821              LDR      r0,|L1.1076|
0003ae  6800              LDR      r0,[r0,#0]
;;;644                 prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
0003b0  f3c04407          UBFX     r4,r0,#16,#8
;;;645                 CPU_CRITICAL_EXIT();
0003b4  4608              MOV      r0,r1
0003b6  f7fffffe          BL       CPU_SR_Restore
;;;646                 break;
0003ba  e02d              B        |L1.1048|
;;;647    
;;;648            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;649                 CPU_CRITICAL_ENTER();
0003bc  f7fffffe          BL       CPU_SR_Save
0003c0  4601              MOV      r1,r0
;;;650                 temp = CPU_REG_NVIC_SHPRI3;
0003c2  481c              LDR      r0,|L1.1076|
0003c4  6800              LDR      r0,[r0,#0]
;;;651                 prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
0003c6  ea4f6410          LSR      r4,r0,#24
;;;652                 CPU_CRITICAL_EXIT();
0003ca  4608              MOV      r0,r1
0003cc  f7fffffe          BL       CPU_SR_Restore
;;;653                 break;
0003d0  e022              B        |L1.1048|
                  |L1.978|
;;;654    
;;;655    
;;;656                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;657            default:
;;;658                pos_max = CPU_INT_SRC_POS_MAX;
0003d2  f04f26e0          MOV      r6,#0xe000e000
0003d6  6871              LDR      r1,[r6,#4]
0003d8  1c49              ADDS     r1,r1,#1
0003da  2201              MOVS     r2,#1
0003dc  eb021141          ADD      r1,r2,r1,LSL #5
0003e0  b2c9              UXTB     r1,r1
;;;659                if (pos < pos_max) {                                /* See Note #3.                                         */
0003e2  4288              CMP      r0,r1
0003e4  d217              BCS      |L1.1046|
;;;660                     group = (pos - 16) / 4;
0003e6  f1a00110          SUB      r1,r0,#0x10
0003ea  17ca              ASRS     r2,r1,#31
0003ec  eb017192          ADD      r1,r1,r2,LSR #30
0003f0  f3c10587          UBFX     r5,r1,#2,#8
;;;661                     nbr   = (pos - 16) % 4;
0003f4  3810              SUBS     r0,r0,#0x10
0003f6  f0210103          BIC      r1,r1,#3
0003fa  1a44              SUBS     r4,r0,r1
;;;662    
;;;663                     CPU_CRITICAL_ENTER();
0003fc  f7fffffe          BL       CPU_SR_Save
;;;664                     temp  = CPU_REG_NVIC_PRIO(group);
000400  eb060185          ADD      r1,r6,r5,LSL #2
000404  f8d15400          LDR      r5,[r1,#0x400]
;;;665                     CPU_CRITICAL_EXIT();
000408  f7fffffe          BL       CPU_SR_Restore
;;;666    
;;;667                     prio  = (temp >> (nbr * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
00040c  00e0              LSLS     r0,r4,#3
00040e  fa25f000          LSR      r0,r5,r0
000412  b2c4              UXTB     r4,r0
000414  e000              B        |L1.1048|
                  |L1.1046|
;;;668                 } else {
;;;669                     prio  = DEF_INT_16S_MIN_VAL;
000416  4c08              LDR      r4,|L1.1080|
                  |L1.1048|
;;;670                 }
;;;671                 break;
;;;672        }
;;;673    
;;;674        if (prio >= 0) {
000418  2c00              CMP      r4,#0
00041a  db03              BLT      |L1.1060|
;;;675            prio_32 = CPU_RevBits((CPU_INT32U)prio);
00041c  4620              MOV      r0,r4
00041e  f7fffffe          BL       CPU_RevBits
;;;676            prio    = (CPU_INT16S)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
000422  0e04              LSRS     r4,r0,#24
                  |L1.1060|
;;;677        }
;;;678    
;;;679        return (prio);
000424  4620              MOV      r0,r4
;;;680    }
000426  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.1064|
                          DCD      0xe000ed24
                  |L1.1068|
                          DCD      0xe000ed18
                  |L1.1072|
                          DCD      0xe000ed1c
                  |L1.1076|
                          DCD      0xe000ed20
                  |L1.1080|
                          DCD      0xffff8000
