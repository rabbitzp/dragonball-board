; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guidev_1.o --depend=.\rvmdk\guidev_1.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guidev_1.crf ..\..\..\..\..\uCGUI\GUI\MemDev\GUIDEV_1.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _XY2PTR_BITOFFSET PROC
;;;70     */
;;;71     static U8* _XY2PTR_BITOFFSET(int x, int y, int* pBitOffset) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;72       GUI_ALLOC_DATATYPE_U Offset;
;;;73       GUI_MEMDEV* pDev;
;;;74       U8* pData;
;;;75       pDev  = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000008  48ff              LDR      r0,|L1.1032|
00000a  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
;;;76       pData = (U8*)(pDev + 1);
000012  f100022c          ADD      r2,r0,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds", x, y);
;;;80         }
;;;81       #endif
;;;82       x -= pDev->x0;
000016  f9b01000          LDRSH    r1,[r0,#0]
00001a  1a73              SUBS     r3,r6,r1
;;;83       y -= pDev->y0;
00001c  8841              LDRH     r1,[r0,#2]
00001e  1a69              SUBS     r1,r5,r1
;;;84       Offset = (GUI_ALLOC_DATATYPE_U)(y) * (GUI_ALLOC_DATATYPE_U)(pDev->BytesPerLine) + (x >> 3);
000020  68c0              LDR      r0,[r0,#0xc]
000022  4348              MULS     r0,r1,r0
000024  eb0000e3          ADD      r0,r0,r3,ASR #3
000028  b280              UXTH     r0,r0
;;;85       if (pBitOffset) {
00002a  b124              CBZ      r4,|L1.54|
;;;86         *pBitOffset = 7 - (x & 7);
00002c  f0030107          AND      r1,r3,#7
000030  f1c10107          RSB      r1,r1,#7
000034  6021              STR      r1,[r4,#0]
                  |L1.54|
;;;87       }
;;;88       return pData + Offset;
000036  4410              ADD      r0,r0,r2
;;;89     }
000038  bd70              POP      {r4-r6,pc}
;;;90     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;94     */
;;;95     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
00003a  e92d5ff0          PUSH     {r4-r12,lr}
;;;96                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;97     {
00003e  460e              MOV      r6,r1
000040  f8dda030          LDR      r10,[sp,#0x30]
000044  f8dd9034          LDR      r9,[sp,#0x34]
000048  9f0b              LDR      r7,[sp,#0x2c]
00004a  980a              LDR      r0,[sp,#0x28]
00004c  4693              MOV      r11,r2
00004e  4698              MOV      r8,r3
;;;98       PIXELINDEX pixels;
;;;99       PIXELINDEX Index1;
;;;100      unsigned int PixelCnt;
;;;101      GUI_USE_PARA(pUsage);
;;;102      PixelCnt = 8 - (Diff & 7);
000050  f0000007          AND      r0,r0,#7
000054  f1c00408          RSB      r4,r0,#8
;;;103      pixels = (*p) << (Diff & 7);
000058  f8981000          LDRB     r1,[r8,#0]
00005c  fa01f000          LSL      r0,r1,r0
000060  b2c5              UXTB     r5,r0
;;;104      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d"
;;;105                        ,x,pDev->x0, GUI_Context.ClipRect.x0);
;;;106      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000062  48e9              LDR      r0,|L1.1032|
000064  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000066  f0100003          ANDS     r0,r0,#3
00006a  d024              BEQ      |L1.182|
00006c  2801              CMP      r0,#1
00006e  d03a              BEQ      |L1.230|
000070  2802              CMP      r0,#2
000072  d150              BNE      |L1.278|
;;;107      case 0:    /* Write mode */
;;;108        do {
;;;109          /* Prepare loop */
;;;110          if (PixelCnt > xsize) {
;;;111            PixelCnt = xsize;
;;;112          }
;;;113          xsize -= PixelCnt;
;;;114          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;115          do {
;;;116            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + ((U8)pixels >> 7)));
;;;117            pixels <<= 1;
;;;118          } while (--PixelCnt);
;;;119          /* Check if an other Source byte needs to be loaded */
;;;120          if (xsize == 0) {
;;;121            return;
;;;122          }
;;;123          PixelCnt = 8;
;;;124          pixels = *(++p);
;;;125        } while (1);
;;;126      case LCD_DRAWMODE_TRANS:
;;;127        Index1 = *(pTrans + 1);
000074  f8ba0002          LDRH     r0,[r10,#2]
000078  f0000aff          AND      r10,r0,#0xff
                  |L1.124|
;;;128        do {
;;;129          /* Prepare loop */
;;;130          if (PixelCnt > xsize) {
00007c  42bc              CMP      r4,r7
00007e  d900              BLS      |L1.130|
;;;131            PixelCnt = xsize;
000080  463c              MOV      r4,r7
                  |L1.130|
;;;132          }
;;;133          xsize -= PixelCnt;
000082  1b3f              SUBS     r7,r7,r4
;;;134          while (pixels) {
000084  b185              CBZ      r5,|L1.168|
                  |L1.134|
;;;135            if ((pixels & 0x80)) {
000086  f0150f80          TST      r5,#0x80
00008a  d006              BEQ      |L1.154|
;;;136              (*pDev->pAPIList->pfSetPixelIndex)(x, y, Index1);
00008c  f8d90028          LDR      r0,[r9,#0x28]
000090  4652              MOV      r2,r10
000092  4659              MOV      r1,r11
000094  6a43              LDR      r3,[r0,#0x24]
000096  4630              MOV      r0,r6
000098  4798              BLX      r3
                  |L1.154|
;;;137            }
;;;138            x++;
00009a  1c76              ADDS     r6,r6,#1
;;;139            pixels <<= 1;
00009c  0668              LSLS     r0,r5,#25
00009e  0e05              LSRS     r5,r0,#24
;;;140            if (--PixelCnt == 0) {
0000a0  1e64              SUBS     r4,r4,#1
0000a2  d001              BEQ      |L1.168|
0000a4  2d00              CMP      r5,#0                 ;134
0000a6  d1ee              BNE      |L1.134|
                  |L1.168|
;;;141              break;
;;;142            }
;;;143          }
;;;144          /* Check if an other Source byte needs to be loaded */
;;;145          if (xsize == 0) {
0000a8  2f00              CMP      r7,#0
0000aa  d034              BEQ      |L1.278|
;;;146            return;
;;;147          }
;;;148          x += PixelCnt;
0000ac  4426              ADD      r6,r6,r4
;;;149          PixelCnt = 8;
0000ae  2408              MOVS     r4,#8
;;;150          pixels = *(++p);
0000b0  f8185f01          LDRB     r5,[r8,#1]!
;;;151        } while (1);
0000b4  e7e2              B        |L1.124|
                  |L1.182|
0000b6  42bc              CMP      r4,r7                 ;110
0000b8  d900              BLS      |L1.188|
0000ba  463c              MOV      r4,r7                 ;111
                  |L1.188|
0000bc  1b3f              SUBS     r7,r7,r4              ;113
                  |L1.190|
0000be  09e8              LSRS     r0,r5,#7              ;116
0000c0  f8d91028          LDR      r1,[r9,#0x28]         ;116
0000c4  f83a2010          LDRH     r2,[r10,r0,LSL #1]    ;116
0000c8  4630              MOV      r0,r6                 ;116
0000ca  6a4b              LDR      r3,[r1,#0x24]         ;116
0000cc  1c76              ADDS     r6,r6,#1              ;116
0000ce  4659              MOV      r1,r11                ;116
0000d0  4798              BLX      r3                    ;116
0000d2  0668              LSLS     r0,r5,#25             ;117
0000d4  0e05              LSRS     r5,r0,#24             ;117
0000d6  1e64              SUBS     r4,r4,#1              ;118
0000d8  d1f1              BNE      |L1.190|
0000da  2f00              CMP      r7,#0                 ;120
0000dc  d01b              BEQ      |L1.278|
0000de  2408              MOVS     r4,#8                 ;123
0000e0  f8185f01          LDRB     r5,[r8,#1]!           ;124
0000e4  e7e7              B        |L1.182|
                  |L1.230|
;;;152      case LCD_DRAWMODE_XOR:;
;;;153      PixelLoopXor:
;;;154        if (PixelCnt > xsize) {
0000e6  42bc              CMP      r4,r7
0000e8  d900              BLS      |L1.236|
;;;155          PixelCnt = xsize;
0000ea  463c              MOV      r4,r7
                  |L1.236|
;;;156        }
;;;157        xsize -= PixelCnt;
0000ec  1b3f              SUBS     r7,r7,r4
                  |L1.238|
;;;158        do {
;;;159          if ((pixels & 0x80)) {
0000ee  f0150f80          TST      r5,#0x80
0000f2  d005              BEQ      |L1.256|
;;;160            (*pDev->pAPIList->pfXorPixel)(x, y);
0000f4  f8d90028          LDR      r0,[r9,#0x28]
0000f8  4659              MOV      r1,r11
0000fa  6a82              LDR      r2,[r0,#0x28]
0000fc  4630              MOV      r0,r6
0000fe  4790              BLX      r2
                  |L1.256|
;;;161          }
;;;162          x++;
000100  1c76              ADDS     r6,r6,#1
;;;163          pDest++;
;;;164          pixels <<= 1;
000102  0668              LSLS     r0,r5,#25
000104  0e05              LSRS     r5,r0,#24
;;;165        } while (--PixelCnt);
000106  1e64              SUBS     r4,r4,#1
000108  d1f1              BNE      |L1.238|
;;;166        if (xsize) {
00010a  2f00              CMP      r7,#0
00010c  d003              BEQ      |L1.278|
;;;167          PixelCnt = 8;
00010e  2408              MOVS     r4,#8
;;;168          pixels = *(++p);
000110  f8185f01          LDRB     r5,[r8,#1]!
;;;169          goto PixelLoopXor;
000114  e7e7              B        |L1.230|
                  |L1.278|
;;;170        }
;;;171        break;
;;;172      }
;;;173    }
000116  e8bd9ff0          POP      {r4-r12,pc}
;;;174    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;178    */
;;;179    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
00011a  e92d5ff0          PUSH     {r4-r12,lr}
;;;180                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;181    {
00011e  a80a              ADD      r0,sp,#0x28
000120  460f              MOV      r7,r1
000122  e8900641          LDM      r0,{r0,r6,r9,r10}
000126  4693              MOV      r11,r2
000128  4698              MOV      r8,r3
;;;182      U8 pixels;
;;;183      U8  PixelCnt;
;;;184      GUI_USE_PARA(pUsage);
;;;185      GUI_USE_PARA(pDest);
;;;186      PixelCnt = 4 - (Diff & 3);
00012a  f0000003          AND      r0,r0,#3
00012e  f1c00404          RSB      r4,r0,#4
;;;187      pixels = (*p) << ((Diff & 3) << 1);
000132  f8981000          LDRB     r1,[r8,#0]
000136  0040              LSLS     r0,r0,#1
000138  fa01f000          LSL      r0,r1,r0
00013c  b2c5              UXTB     r5,r0
;;;188      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00013e  48b2              LDR      r0,|L1.1032|
000140  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000142  f0100003          ANDS     r0,r0,#3
000146  d002              BEQ      |L1.334|
000148  2802              CMP      r0,#2
00014a  d137              BNE      |L1.444|
00014c  e019              B        |L1.386|
                  |L1.334|
;;;189      case 0:    /* Write mode */
;;;190      PixelLoopWrite:
;;;191        if (PixelCnt > xsize) {
00014e  42b4              CMP      r4,r6
000150  dd00              BLE      |L1.340|
;;;192          PixelCnt = xsize;
000152  b2f4              UXTB     r4,r6
                  |L1.340|
;;;193        }
;;;194        xsize -= PixelCnt;
000154  1b36              SUBS     r6,r6,r4
                  |L1.342|
;;;195        do {
;;;196          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 6)));
000156  09a8              LSRS     r0,r5,#6
000158  f8da1028          LDR      r1,[r10,#0x28]
00015c  f8392010          LDRH     r2,[r9,r0,LSL #1]
000160  4638              MOV      r0,r7
000162  6a4b              LDR      r3,[r1,#0x24]
000164  1c7f              ADDS     r7,r7,#1
000166  4659              MOV      r1,r11
000168  4798              BLX      r3
;;;197          pixels <<= 2;
00016a  06a8              LSLS     r0,r5,#26
00016c  0e05              LSRS     r5,r0,#24
;;;198        } while (--PixelCnt);
00016e  1e60              SUBS     r0,r4,#1
000170  f01004ff          ANDS     r4,r0,#0xff
000174  d1ef              BNE      |L1.342|
;;;199        if (xsize) {
000176  2e00              CMP      r6,#0
000178  d020              BEQ      |L1.444|
;;;200          PixelCnt = 4;
00017a  2404              MOVS     r4,#4
;;;201          pixels = *(++p);
00017c  f8185f01          LDRB     r5,[r8,#1]!
;;;202          goto PixelLoopWrite;
000180  e7e5              B        |L1.334|
                  |L1.386|
;;;203        }
;;;204        break;
;;;205      case LCD_DRAWMODE_TRANS:
;;;206      PixelLoopTrans:
;;;207        if (PixelCnt > xsize)
000182  42b4              CMP      r4,r6
000184  dd00              BLE      |L1.392|
;;;208          PixelCnt = xsize;
000186  b2f4              UXTB     r4,r6
                  |L1.392|
;;;209        xsize -= PixelCnt;
000188  1b36              SUBS     r6,r6,r4
                  |L1.394|
;;;210        do {
;;;211          if (pixels & 0xc0) {
00018a  f0150fc0          TST      r5,#0xc0
00018e  d008              BEQ      |L1.418|
;;;212            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 6)));
000190  09a8              LSRS     r0,r5,#6
000192  4659              MOV      r1,r11
000194  f8392010          LDRH     r2,[r9,r0,LSL #1]
000198  f8da0028          LDR      r0,[r10,#0x28]
00019c  6a43              LDR      r3,[r0,#0x24]
00019e  4638              MOV      r0,r7
0001a0  4798              BLX      r3
                  |L1.418|
;;;213          }
;;;214          x++;
0001a2  1c7f              ADDS     r7,r7,#1
;;;215          pixels <<= 2;
0001a4  06a8              LSLS     r0,r5,#26
0001a6  0e05              LSRS     r5,r0,#24
;;;216        } while (--PixelCnt);
0001a8  1e60              SUBS     r0,r4,#1
0001aa  f01004ff          ANDS     r4,r0,#0xff
0001ae  d1ec              BNE      |L1.394|
;;;217        if (xsize) {
0001b0  2e00              CMP      r6,#0
0001b2  d003              BEQ      |L1.444|
;;;218          PixelCnt = 4;
0001b4  2404              MOVS     r4,#4
;;;219          pixels = *(++p);
0001b6  f8185f01          LDRB     r5,[r8,#1]!
;;;220          goto PixelLoopTrans;
0001ba  e7e2              B        |L1.386|
                  |L1.444|
;;;221        }
;;;222        break;
;;;223      }
;;;224    }
0001bc  e8bd9ff0          POP      {r4-r12,pc}
;;;225    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;229    */
;;;230    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
0001c0  e92d5ff0          PUSH     {r4-r12,lr}
;;;231                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;232    {
0001c4  a80a              ADD      r0,sp,#0x28
0001c6  460d              MOV      r5,r1
0001c8  e8900341          LDM      r0,{r0,r6,r8,r9}
0001cc  4693              MOV      r11,r2
0001ce  461f              MOV      r7,r3
;;;233      U8 pixels;
;;;234      GUI_USE_PARA(pUsage);
;;;235      GUI_USE_PARA(pDest);
;;;236      pixels = (*p) << ((Diff & 1) << 2);
0001d0  07c2              LSLS     r2,r0,#31
0001d2  7839              LDRB     r1,[r7,#0]
0001d4  0f52              LSRS     r2,r2,#29
0001d6  4091              LSLS     r1,r1,r2
0001d8  b2cc              UXTB     r4,r1
;;;237      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0001da  498b              LDR      r1,|L1.1032|
0001dc  7c09              LDRB     r1,[r1,#0x10]  ; GUI_Context
0001de  f0110103          ANDS     r1,r1,#3
0001e2  d03f              BEQ      |L1.612|
0001e4  2902              CMP      r1,#2
0001e6  d179              BNE      |L1.732|
;;;238    /*
;;;239              * Write mode *
;;;240    */
;;;241      case 0:
;;;242        /* Draw incomplete bytes to the left of center area */
;;;243        if (Diff) {
;;;244          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
;;;245          xsize--;
;;;246          pixels = *++p;
;;;247        }
;;;248        /* Draw center area (2 pixels in one byte) */
;;;249        if (xsize >= 2) {
;;;250          int i = xsize >> 1;
;;;251          xsize &= 1;
;;;252          do {
;;;253            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >>  4)));
;;;254            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels  & 15)));
;;;255            pixels = *++p;
;;;256          } while (--i);
;;;257        }
;;;258        /* Draw incomplete bytes to the right of center area */
;;;259        if (xsize) {
;;;260          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
;;;261        }
;;;262        break;
;;;263    /*
;;;264              * Transparent draw mode *
;;;265    */
;;;266      case LCD_DRAWMODE_TRANS:
;;;267        /* Draw incomplete bytes to the left of center area */
;;;268        if (Diff) {
0001e8  b178              CBZ      r0,|L1.522|
;;;269          if (pixels & 0xF0) {
0001ea  f0140ff0          TST      r4,#0xf0
0001ee  d008              BEQ      |L1.514|
;;;270            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
0001f0  0920              LSRS     r0,r4,#4
0001f2  4659              MOV      r1,r11
0001f4  f8382010          LDRH     r2,[r8,r0,LSL #1]
0001f8  f8d90028          LDR      r0,[r9,#0x28]
0001fc  6a43              LDR      r3,[r0,#0x24]
0001fe  4628              MOV      r0,r5
000200  4798              BLX      r3
                  |L1.514|
;;;271          }
;;;272          x++;
000202  1c6d              ADDS     r5,r5,#1
;;;273          xsize--;
000204  1e76              SUBS     r6,r6,#1
;;;274          pixels = *++p;
000206  f8174f01          LDRB     r4,[r7,#1]!
                  |L1.522|
;;;275        }
;;;276        /* Draw center area (2 pixels in one byte) */
;;;277        while (xsize >= 2) {
00020a  2e02              CMP      r6,#2
00020c  db1c              BLT      |L1.584|
                  |L1.526|
;;;278          /* Draw 1. (left) pixel */
;;;279          if (pixels & 0xF0) {
00020e  f0140ff0          TST      r4,#0xf0
000212  d008              BEQ      |L1.550|
;;;280            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
000214  0920              LSRS     r0,r4,#4
000216  4659              MOV      r1,r11
000218  f8382010          LDRH     r2,[r8,r0,LSL #1]
00021c  f8d90028          LDR      r0,[r9,#0x28]
000220  6a43              LDR      r3,[r0,#0x24]
000222  4628              MOV      r0,r5
000224  4798              BLX      r3
                  |L1.550|
;;;281          }
;;;282          /* Draw 2. (right) pixel */
;;;283          if (pixels &= 15) {
000226  f014000f          ANDS     r0,r4,#0xf
00022a  d007              BEQ      |L1.572|
;;;284            (*pDev->pAPIList->pfSetPixelIndex)(x + 1, y, *(pTrans + pixels));
00022c  f8382010          LDRH     r2,[r8,r0,LSL #1]
000230  f8d90028          LDR      r0,[r9,#0x28]
000234  4659              MOV      r1,r11
000236  6a43              LDR      r3,[r0,#0x24]
000238  1c68              ADDS     r0,r5,#1
00023a  4798              BLX      r3
                  |L1.572|
;;;285          }
;;;286          x += 2;
00023c  1cad              ADDS     r5,r5,#2
;;;287          xsize -= 2;
00023e  1eb6              SUBS     r6,r6,#2
;;;288          pixels = *++p;
000240  f8174f01          LDRB     r4,[r7,#1]!
000244  2e02              CMP      r6,#2                 ;277
000246  dae2              BGE      |L1.526|
                  |L1.584|
;;;289        }
;;;290        /* Draw incomplete bytes to the right of center area */
;;;291        if (xsize) {
000248  2e00              CMP      r6,#0
00024a  d047              BEQ      |L1.732|
;;;292          if (pixels >>= 4) {
00024c  0920              LSRS     r0,r4,#4
00024e  d045              BEQ      |L1.732|
;;;293            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + pixels));
000250  f8382010          LDRH     r2,[r8,r0,LSL #1]
000254  f8d90028          LDR      r0,[r9,#0x28]
000258  4659              MOV      r1,r11
00025a  6a43              LDR      r3,[r0,#0x24]
00025c  4628              MOV      r0,r5
00025e  e8bd5ff0          POP      {r4-r12,lr}
000262  4718              BX       r3
                  |L1.612|
000264  b160              CBZ      r0,|L1.640|
000266  0920              LSRS     r0,r4,#4              ;244
000268  f8d91028          LDR      r1,[r9,#0x28]         ;244
00026c  f8382010          LDRH     r2,[r8,r0,LSL #1]     ;244
000270  4628              MOV      r0,r5                 ;244
000272  6a4b              LDR      r3,[r1,#0x24]         ;244
000274  1c6d              ADDS     r5,r5,#1              ;244
000276  4659              MOV      r1,r11                ;244
000278  4798              BLX      r3                    ;244
00027a  1e76              SUBS     r6,r6,#1              ;245
00027c  f8174f01          LDRB     r4,[r7,#1]!           ;246
                  |L1.640|
000280  2e02              CMP      r6,#2                 ;249
000282  db1d              BLT      |L1.704|
000284  ea4f0a66          ASR      r10,r6,#1             ;250
000288  f0060601          AND      r6,r6,#1              ;251
                  |L1.652|
00028c  0920              LSRS     r0,r4,#4              ;253
00028e  f8d91028          LDR      r1,[r9,#0x28]         ;253
000292  f8382010          LDRH     r2,[r8,r0,LSL #1]     ;253
000296  4628              MOV      r0,r5                 ;253
000298  6a4b              LDR      r3,[r1,#0x24]         ;253
00029a  1c6d              ADDS     r5,r5,#1              ;253
00029c  4659              MOV      r1,r11                ;253
00029e  4798              BLX      r3                    ;253
0002a0  f004000f          AND      r0,r4,#0xf            ;254
0002a4  f8d91028          LDR      r1,[r9,#0x28]         ;254
0002a8  f8382010          LDRH     r2,[r8,r0,LSL #1]     ;254
0002ac  4628              MOV      r0,r5                 ;254
0002ae  6a4b              LDR      r3,[r1,#0x24]         ;254
0002b0  1c6d              ADDS     r5,r5,#1              ;254
0002b2  4659              MOV      r1,r11                ;254
0002b4  4798              BLX      r3                    ;254
0002b6  f8174f01          LDRB     r4,[r7,#1]!           ;255
0002ba  f1ba0a01          SUBS     r10,r10,#1            ;256
0002be  d1e5              BNE      |L1.652|
                  |L1.704|
0002c0  2e00              CMP      r6,#0                 ;259
0002c2  d00b              BEQ      |L1.732|
0002c4  f8d91028          LDR      r1,[r9,#0x28]         ;260
0002c8  0920              LSRS     r0,r4,#4              ;260
0002ca  f8382010          LDRH     r2,[r8,r0,LSL #1]     ;260
0002ce  6a4b              LDR      r3,[r1,#0x24]         ;260
0002d0  4659              MOV      r1,r11                ;260
0002d2  4628              MOV      r0,r5                 ;260
0002d4  e8bd5ff0          POP      {r4-r12,lr}           ;260
0002d8  4718              BX       r3                    ;260
0002da  e7ff              B        |L1.732|
                  |L1.732|
;;;294          }
;;;295        }
;;;296        break;
;;;297      }
;;;298    }
0002dc  e8bd9ff0          POP      {r4-r12,pc}
;;;299    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;303    */
;;;304    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
0002e0  e92d47f0          PUSH     {r4-r10,lr}
;;;305                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest) {
0002e4  460d              MOV      r5,r1
0002e6  f8dd8028          LDR      r8,[sp,#0x28]
0002ea  9f09              LDR      r7,[sp,#0x24]
0002ec  9e08              LDR      r6,[sp,#0x20]
0002ee  4691              MOV      r9,r2
0002f0  461c              MOV      r4,r3
;;;306      GUI_USE_PARA(pUsage);
;;;307      GUI_USE_PARA(pDest);
;;;308      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0002f2  4845              LDR      r0,|L1.1032|
0002f4  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0002f6  f0100003          ANDS     r0,r0,#3
0002fa  d002              BEQ      |L1.770|
0002fc  2802              CMP      r0,#2
0002fe  d10d              BNE      |L1.796|
000300  e00e              B        |L1.800|
                  |L1.770|
;;;309      case 0:    /* Write mode */
;;;310        do {
;;;311          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + *pSrc));
000302  7820              LDRB     r0,[r4,#0]
000304  f8d81028          LDR      r1,[r8,#0x28]
000308  f8372010          LDRH     r2,[r7,r0,LSL #1]
00030c  4628              MOV      r0,r5
00030e  6a4b              LDR      r3,[r1,#0x24]
000310  1c6d              ADDS     r5,r5,#1
000312  4649              MOV      r1,r9
000314  4798              BLX      r3
;;;312          pSrc++;
000316  1c64              ADDS     r4,r4,#1
;;;313        } while (--xsize);
000318  1e76              SUBS     r6,r6,#1
00031a  d1f2              BNE      |L1.770|
                  |L1.796|
;;;314        break;
;;;315      case LCD_DRAWMODE_TRANS:
;;;316        do {
;;;317          if (*pSrc) {
;;;318            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + *pSrc));
;;;319          }
;;;320          x++;
;;;321          pSrc++;
;;;322        } while (--xsize);
;;;323        break;
;;;324      }
;;;325    }
00031c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.800|
000320  7820              LDRB     r0,[r4,#0]            ;317
000322  b138              CBZ      r0,|L1.820|
000324  f8372010          LDRH     r2,[r7,r0,LSL #1]     ;318
000328  f8d80028          LDR      r0,[r8,#0x28]         ;318
00032c  4649              MOV      r1,r9                 ;318
00032e  6a43              LDR      r3,[r0,#0x24]         ;318
000330  4628              MOV      r0,r5                 ;318
000332  4798              BLX      r3                    ;318
                  |L1.820|
000334  1c6d              ADDS     r5,r5,#1              ;320
000336  1c64              ADDS     r4,r4,#1              ;321
000338  1e76              SUBS     r6,r6,#1              ;322
00033a  d1f1              BNE      |L1.800|
00033c  e8bd87f0          POP      {r4-r10,pc}
;;;326    
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;330    */
;;;331    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, GUI_MEMDEV* pDev, PIXELINDEX* pDest) {
000340  e92d41f0          PUSH     {r4-r8,lr}
000344  460d              MOV      r5,r1
000346  9f07              LDR      r7,[sp,#0x1c]
000348  9e06              LDR      r6,[sp,#0x18]
00034a  4690              MOV      r8,r2
00034c  461c              MOV      r4,r3
;;;332      GUI_USE_PARA(pUsage);
;;;333      GUI_USE_PARA(pDest);
;;;334      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00034e  482e              LDR      r0,|L1.1032|
000350  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000352  f0100003          ANDS     r0,r0,#3
000356  d002              BEQ      |L1.862|
000358  2802              CMP      r0,#2
00035a  d10a              BNE      |L1.882|
00035c  e00b              B        |L1.886|
                  |L1.862|
;;;335      case 0:    /* Write mode */
;;;336        do {
;;;337          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *pSrc);
00035e  6ab9              LDR      r1,[r7,#0x28]
000360  4628              MOV      r0,r5
000362  7822              LDRB     r2,[r4,#0]
000364  6a4b              LDR      r3,[r1,#0x24]
000366  1c6d              ADDS     r5,r5,#1
000368  4641              MOV      r1,r8
00036a  4798              BLX      r3
;;;338          pSrc++;
00036c  1c64              ADDS     r4,r4,#1
;;;339        } while (--xsize);
00036e  1e76              SUBS     r6,r6,#1
000370  d1f5              BNE      |L1.862|
                  |L1.882|
;;;340        break;
;;;341      case LCD_DRAWMODE_TRANS:
;;;342        do {
;;;343          if (*pSrc) {
;;;344            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *pSrc);
;;;345          }
;;;346          x++;
;;;347          pSrc++;
;;;348        } while (--xsize);
;;;349        break;
;;;350      }
;;;351    }
000372  e8bd81f0          POP      {r4-r8,pc}
                  |L1.886|
000376  7822              LDRB     r2,[r4,#0]            ;343
000378  b122              CBZ      r2,|L1.900|
00037a  6ab8              LDR      r0,[r7,#0x28]         ;344
00037c  4641              MOV      r1,r8                 ;344
00037e  6a43              LDR      r3,[r0,#0x24]         ;344
000380  4628              MOV      r0,r5                 ;344
000382  4798              BLX      r3                    ;344
                  |L1.900|
000384  1c6d              ADDS     r5,r5,#1              ;346
000386  1c64              ADDS     r4,r4,#1              ;347
000388  1e76              SUBS     r6,r6,#1              ;348
00038a  d1f4              BNE      |L1.886|
00038c  e8bd81f0          POP      {r4-r8,pc}
;;;352    
                          ENDP

                  _DrawBitmap PROC
;;;356    */
;;;357    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000390  e92d4fff          PUSH     {r0-r11,lr}
;;;358                            int BitsPerPixel, int BytesPerLine,
;;;359                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;360    {
000394  b087              SUB      sp,sp,#0x1c
000396  4607              MOV      r7,r0
000398  f8ddb054          LDR      r11,[sp,#0x54]
00039c  f8dd9060          LDR      r9,[sp,#0x60]
0003a0  9e16              LDR      r6,[sp,#0x58]
0003a2  460d              MOV      r5,r1
0003a4  4698              MOV      r8,r3
;;;361      int i;
;;;362      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0003a6  4c18              LDR      r4,|L1.1032|
0003a8  f9b40050          LDRSH    r0,[r4,#0x50]  ; GUI_Context
0003ac  f7fffffe          BL       GUI_ALLOC_h2p
0003b0  9006              STR      r0,[sp,#0x18]
;;;363      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
0003b2  9806              LDR      r0,[sp,#0x18]
0003b4  f9b00018          LDRSH    r0,[r0,#0x18]
0003b8  b110              CBZ      r0,|L1.960|
0003ba  f7fffffe          BL       GUI_ALLOC_h2p
0003be  e000              B        |L1.962|
                  |L1.960|
0003c0  2000              MOVS     r0,#0
                  |L1.962|
0003c2  9005              STR      r0,[sp,#0x14]
;;;364      unsigned    BytesPerLineDest;
;;;365      PIXELINDEX* pDest;
;;;366      BytesPerLineDest = pDev->BytesPerLine;
0003c4  9806              LDR      r0,[sp,#0x18]
0003c6  f8d0a00c          LDR      r10,[r0,#0xc]
;;;367      x0 += Diff;
0003ca  9817              LDR      r0,[sp,#0x5c]
0003cc  4438              ADD      r0,r0,r7
0003ce  9007              STR      r0,[sp,#0x1c]
;;;368      /* Mark all affected pixels dirty unless transparency is set */
;;;369      if (pUsage) {
0003d0  9805              LDR      r0,[sp,#0x14]
0003d2  b158              CBZ      r0,|L1.1004|
;;;370        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
0003d4  7c20              LDRB     r0,[r4,#0x10]  ; GUI_Context
0003d6  f0100f02          TST      r0,#2
0003da  d107              BNE      |L1.1004|
;;;371          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
0003dc  f8cd8000          STR      r8,[sp,#0]
0003e0  462a              MOV      r2,r5
0003e2  9b09              LDR      r3,[sp,#0x24]
0003e4  9907              LDR      r1,[sp,#0x1c]
0003e6  9805              LDR      r0,[sp,#0x14]
0003e8  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1004|
;;;372        }
;;;373      }
;;;374      pDest = _XY2PTR_BITOFFSET(x0, y0, 0);
0003ec  2200              MOVS     r2,#0
0003ee  4629              MOV      r1,r5
0003f0  9807              LDR      r0,[sp,#0x1c]
0003f2  f7fffffe          BL       _XY2PTR_BITOFFSET
0003f6  4607              MOV      r7,r0
;;;375    #if BITSPERPIXEL == 16
;;;376      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;377      if (BitsPerPixel == 16) {
;;;378        for (i = 0; i < ysize; i++) {
;;;379          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDev, pDest);
;;;380          pData += BytesPerLine;
;;;381          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;382        }
;;;383        return;
;;;384      }
;;;385    #endif
;;;386      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;387      if (BitsPerPixel == 8) {
0003f8  9814              LDR      r0,[sp,#0x50]
0003fa  2808              CMP      r0,#8
0003fc  d006              BEQ      |L1.1036|
;;;388        for (i = 0; i < ysize; i++) {
;;;389          if (pTrans) {
;;;390            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDev, pDest);
;;;391          } else {
;;;392            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDev, pDest);
;;;393          }
;;;394          pData += BytesPerLine;
;;;395          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;396        }
;;;397        return;
;;;398      }
;;;399      /* Use aID for bitmaps without palette */
;;;400      if (!pTrans) {
0003fe  f1b90f00          CMP      r9,#0
000402  d02b              BEQ      |L1.1116|
000404  e02c              B        |L1.1120|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      GUI_Context
                  |L1.1036|
00040c  2400              MOVS     r4,#0                 ;388
00040e  f1b80f00          CMP      r8,#0                 ;388
000412  dd20              BLE      |L1.1110|
                  |L1.1044|
000414  f1b90f00          CMP      r9,#0                 ;389
000418  d00d              BEQ      |L1.1078|
00041a  9a06              LDR      r2,[sp,#0x18]         ;390
00041c  9809              LDR      r0,[sp,#0x24]         ;390
00041e  9202              STR      r2,[sp,#8]            ;390
000420  9000              STR      r0,[sp,#0]            ;390
000422  f8cd9004          STR      r9,[sp,#4]            ;390
000426  9703              STR      r7,[sp,#0xc]          ;390
000428  1962              ADDS     r2,r4,r5              ;390
00042a  4633              MOV      r3,r6                 ;390
00042c  9907              LDR      r1,[sp,#0x1c]         ;390
00042e  9805              LDR      r0,[sp,#0x14]         ;390
000430  f7fffffe          BL       _DrawBitLine8BPP
000434  e00a              B        |L1.1100|
                  |L1.1078|
000436  9909              LDR      r1,[sp,#0x24]         ;392
000438  9a06              LDR      r2,[sp,#0x18]         ;392
00043a  9100              STR      r1,[sp,#0]            ;392
00043c  9702              STR      r7,[sp,#8]            ;392
00043e  9201              STR      r2,[sp,#4]            ;392
000440  1962              ADDS     r2,r4,r5              ;392
000442  4633              MOV      r3,r6                 ;392
000444  9907              LDR      r1,[sp,#0x1c]         ;392
000446  9805              LDR      r0,[sp,#0x14]         ;392
000448  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1100|
00044c  445e              ADD      r6,r6,r11             ;394
00044e  4457              ADD      r7,r7,r10             ;395
000450  1c64              ADDS     r4,r4,#1              ;388
000452  4544              CMP      r4,r8                 ;388
000454  dbde              BLT      |L1.1044|
                  |L1.1110|
;;;401        pTrans = aID;
;;;402      }
;;;403      for (i = 0; i < ysize; i++) {
;;;404        switch (BitsPerPixel) {
;;;405        case 1:
;;;406          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;407          break;
;;;408        case 2:
;;;409          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;410          break;
;;;411        case 4:
;;;412          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;413          break;
;;;414        }
;;;415        pData += BytesPerLine;
;;;416        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;417      }
;;;418    }
000456  b00b              ADD      sp,sp,#0x2c
000458  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1116|
00045c  f8df9328          LDR      r9,|L1.1928|
                  |L1.1120|
000460  2400              MOVS     r4,#0                 ;403
000462  f1b80f00          CMP      r8,#0                 ;403
000466  ddf6              BLE      |L1.1110|
                  |L1.1128|
000468  9814              LDR      r0,[sp,#0x50]         ;404
00046a  2801              CMP      r0,#1                 ;404
00046c  d004              BEQ      |L1.1144|
00046e  2802              CMP      r0,#2                 ;404
000470  d012              BEQ      |L1.1176|
000472  2804              CMP      r0,#4                 ;404
000474  d12f              BNE      |L1.1238|
000476  e01f              B        |L1.1208|
                  |L1.1144|
000478  9a06              LDR      r2,[sp,#0x18]         ;406
00047a  9203              STR      r2,[sp,#0xc]          ;406
00047c  9809              LDR      r0,[sp,#0x24]         ;406
00047e  9b17              LDR      r3,[sp,#0x5c]         ;406
000480  9300              STR      r3,[sp,#0]            ;406
000482  f8cd9008          STR      r9,[sp,#8]            ;406
000486  9001              STR      r0,[sp,#4]            ;406
000488  9704              STR      r7,[sp,#0x10]         ;406
00048a  1962              ADDS     r2,r4,r5              ;406
00048c  4633              MOV      r3,r6                 ;406
00048e  9907              LDR      r1,[sp,#0x1c]         ;406
000490  9805              LDR      r0,[sp,#0x14]         ;406
000492  f7fffffe          BL       _DrawBitLine1BPP
000496  e01e              B        |L1.1238|
                  |L1.1176|
000498  9a06              LDR      r2,[sp,#0x18]         ;409
00049a  9203              STR      r2,[sp,#0xc]          ;409
00049c  9809              LDR      r0,[sp,#0x24]         ;409
00049e  9b17              LDR      r3,[sp,#0x5c]         ;409
0004a0  9300              STR      r3,[sp,#0]            ;409
0004a2  f8cd9008          STR      r9,[sp,#8]            ;409
0004a6  9001              STR      r0,[sp,#4]            ;409
0004a8  9704              STR      r7,[sp,#0x10]         ;409
0004aa  1962              ADDS     r2,r4,r5              ;409
0004ac  4633              MOV      r3,r6                 ;409
0004ae  9907              LDR      r1,[sp,#0x1c]         ;409
0004b0  9805              LDR      r0,[sp,#0x14]         ;409
0004b2  f7fffffe          BL       _DrawBitLine2BPP
0004b6  e00e              B        |L1.1238|
                  |L1.1208|
0004b8  9a06              LDR      r2,[sp,#0x18]         ;412
0004ba  9203              STR      r2,[sp,#0xc]          ;412
0004bc  9809              LDR      r0,[sp,#0x24]         ;412
0004be  9b17              LDR      r3,[sp,#0x5c]         ;412
0004c0  9300              STR      r3,[sp,#0]            ;412
0004c2  f8cd9008          STR      r9,[sp,#8]            ;412
0004c6  9001              STR      r0,[sp,#4]            ;412
0004c8  9704              STR      r7,[sp,#0x10]         ;412
0004ca  1962              ADDS     r2,r4,r5              ;412
0004cc  4633              MOV      r3,r6                 ;412
0004ce  9907              LDR      r1,[sp,#0x1c]         ;412
0004d0  9805              LDR      r0,[sp,#0x14]         ;412
0004d2  f7fffffe          BL       _DrawBitLine4BPP
                  |L1.1238|
0004d6  445e              ADD      r6,r6,r11             ;415
0004d8  4457              ADD      r7,r7,r10             ;416
0004da  1c64              ADDS     r4,r4,#1              ;403
0004dc  4544              CMP      r4,r8                 ;403
0004de  dbc3              BLT      |L1.1128|
0004e0  b00b              ADD      sp,sp,#0x2c
0004e2  e8bd8ff0          POP      {r4-r11,pc}
;;;419    
                          ENDP

                  _FillRect PROC
;;;423    */
;;;424    static void _FillRect(int x0, int y0, int x1, int y1) {
0004e6  e92d4fff          PUSH     {r0-r11,lr}
0004ea  b083              SUB      sp,sp,#0xc
0004ec  460f              MOV      r7,r1
0004ee  4614              MOV      r4,r2
0004f0  4698              MOV      r8,r3
;;;425      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0004f2  4da6              LDR      r5,|L1.1932|
0004f4  f9b50050          LDRSH    r0,[r5,#0x50]  ; GUI_Context
0004f8  f7fffffe          BL       GUI_ALLOC_h2p
;;;426      U8* pData;
;;;427      int Bit, Len;
;;;428      int RemPixels;
;;;429      Len = x1 - x0 + 1;
0004fc  9903              LDR      r1,[sp,#0xc]
0004fe  1a61              SUBS     r1,r4,r1
000500  f1010a01          ADD      r10,r1,#1
;;;430      /* Mark rectangle as modified */
;;;431      if (pDev->hUsage) {
000504  f9b00018          LDRSH    r0,[r0,#0x18]
000508  b150              CBZ      r0,|L1.1312|
;;;432        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
00050a  f7fffffe          BL       GUI_ALLOC_h2p
00050e  eba80107          SUB      r1,r8,r7
000512  1c4b              ADDS     r3,r1,#1
000514  9300              STR      r3,[sp,#0]
000516  4653              MOV      r3,r10
000518  463a              MOV      r2,r7
00051a  9903              LDR      r1,[sp,#0xc]
00051c  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1312|
;;;433      }
;;;434      /* Do the drawing */
;;;435      for (; y0 <= y1; y0++) {
000520  4547              CMP      r7,r8
000522  dc7d              BGT      |L1.1568|
;;;436        pData = _XY2PTR_BITOFFSET(x0, y0, &Bit);
;;;437        RemPixels = Len;
;;;438        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
;;;439          if (Bit < 7) {
;;;440            while ((Bit >= 0) && RemPixels--) {
;;;441              *pData ^= 1 << (Bit--);
000524  f04f0901          MOV      r9,#1
                  |L1.1320|
000528  aa02              ADD      r2,sp,#8              ;436
00052a  4639              MOV      r1,r7                 ;436
00052c  9803              LDR      r0,[sp,#0xc]          ;436
00052e  f7fffffe          BL       _XY2PTR_BITOFFSET
000532  4604              MOV      r4,r0                 ;436
000534  4655              MOV      r5,r10                ;437
000536  4895              LDR      r0,|L1.1932|
000538  7c01              LDRB     r1,[r0,#0x10]         ;438  ; GUI_Context
00053a  f0110f01          TST      r1,#1                 ;438
00053e  d02b              BEQ      |L1.1432|
000540  9802              LDR      r0,[sp,#8]            ;439
000542  2807              CMP      r0,#7                 ;439
000544  db07              BLT      |L1.1366|
000546  e00c              B        |L1.1378|
                  |L1.1352|
000548  1e42              SUBS     r2,r0,#1
00054a  7821              LDRB     r1,[r4,#0]
00054c  fa09f000          LSL      r0,r9,r0
000550  4048              EORS     r0,r0,r1
000552  9202              STR      r2,[sp,#8]
000554  7020              STRB     r0,[r4,#0]
                  |L1.1366|
000556  9802              LDR      r0,[sp,#8]            ;440
000558  2800              CMP      r0,#0                 ;440
00055a  db01              BLT      |L1.1376|
00055c  1e6d              SUBS     r5,r5,#1              ;440
00055e  d2f3              BCS      |L1.1352|
                  |L1.1376|
;;;442            }
;;;443            pData++;
000560  1c64              ADDS     r4,r4,#1
                  |L1.1378|
;;;444          }
;;;445          if (RemPixels > 0) {
000562  2d00              CMP      r5,#0
000564  dd59              BLE      |L1.1562|
;;;446            int NumBytes = RemPixels >> 3;
000566  10e8              ASRS     r0,r5,#3
;;;447            if (NumBytes > 0) {
000568  2800              CMP      r0,#0
00056a  dd06              BLE      |L1.1402|
;;;448              RemPixels -= NumBytes << 3;
00056c  eba505c0          SUB      r5,r5,r0,LSL #3
000570  2100              MOVS     r1,#0                 ;431
                  |L1.1394|
;;;449              do {
;;;450                *pData ^= *pData;
000572  7021              STRB     r1,[r4,#0]
;;;451                pData++;
000574  1c64              ADDS     r4,r4,#1
;;;452              } while (--NumBytes);
000576  1e40              SUBS     r0,r0,#1
000578  d1fb              BNE      |L1.1394|
                  |L1.1402|
;;;453            }
;;;454            Bit = 7;
00057a  2007              MOVS     r0,#7
00057c  9002              STR      r0,[sp,#8]
;;;455            while (RemPixels--) {
00057e  1e68              SUBS     r0,r5,#1
000580  b3f5              CBZ      r5,|L1.1536|
                  |L1.1410|
;;;456              *pData ^= 1 << (Bit--);
000582  9902              LDR      r1,[sp,#8]
000584  7822              LDRB     r2,[r4,#0]
000586  1e4b              SUBS     r3,r1,#1
000588  fa09f101          LSL      r1,r9,r1
00058c  4051              EORS     r1,r1,r2
00058e  9302              STR      r3,[sp,#8]
000590  7021              STRB     r1,[r4,#0]
000592  1e40              SUBS     r0,r0,#1              ;455
000594  d2f5              BCS      |L1.1410|
000596  e040              B        |L1.1562|
                  |L1.1432|
;;;457            }
;;;458          }
;;;459        } else {  /* Fill */
;;;460          int Color, FillByte;
;;;461          Color    = (LCD_COLORINDEX & 1);
000598  8840              LDRH     r0,[r0,#2]  ; GUI_Context
00059a  f0000601          AND      r6,r0,#1
;;;462          FillByte = (-Color) & 0xFF;
00059e  4270              RSBS     r0,r6,#0
0005a0  b2c3              UXTB     r3,r0
;;;463          if (Bit < 7) {
0005a2  9802              LDR      r0,[sp,#8]
0005a4  2807              CMP      r0,#7
0005a6  db0d              BLT      |L1.1476|
0005a8  e012              B        |L1.1488|
                  |L1.1450|
;;;464            while ((Bit >= 0) && RemPixels--) {
;;;465              *pData &= ~(1 << Bit);
0005aa  7821              LDRB     r1,[r4,#0]
0005ac  fa09f000          LSL      r0,r9,r0
0005b0  ea210000          BIC      r0,r1,r0
0005b4  7020              STRB     r0,[r4,#0]
;;;466              *pData |= Color << (Bit--);
0005b6  9902              LDR      r1,[sp,#8]
0005b8  1e4a              SUBS     r2,r1,#1
0005ba  fa06f101          LSL      r1,r6,r1
0005be  4308              ORRS     r0,r0,r1
0005c0  9202              STR      r2,[sp,#8]
0005c2  7020              STRB     r0,[r4,#0]
                  |L1.1476|
0005c4  9802              LDR      r0,[sp,#8]            ;464
0005c6  2800              CMP      r0,#0                 ;464
0005c8  db01              BLT      |L1.1486|
0005ca  1e6d              SUBS     r5,r5,#1              ;464
0005cc  d2ed              BCS      |L1.1450|
                  |L1.1486|
;;;467            }
;;;468            pData++;
0005ce  1c64              ADDS     r4,r4,#1
                  |L1.1488|
;;;469          }
;;;470          if (RemPixels > 0) {
0005d0  2d00              CMP      r5,#0
0005d2  dd22              BLE      |L1.1562|
;;;471            int NumBytes = RemPixels >> 3;
0005d4  ea4f0be5          ASR      r11,r5,#3
;;;472            if (NumBytes > 0) {
0005d8  f1bb0f00          CMP      r11,#0
0005dc  dd07              BLE      |L1.1518|
;;;473              GUI_MEMSET(pData, FillByte, NumBytes);
0005de  465a              MOV      r2,r11
0005e0  b2d9              UXTB     r1,r3
0005e2  4620              MOV      r0,r4
0005e4  f7fffffe          BL       GUI__memset
;;;474              pData += NumBytes;
0005e8  445c              ADD      r4,r4,r11
;;;475              RemPixels -= NumBytes << 3;
0005ea  eba505cb          SUB      r5,r5,r11,LSL #3
                  |L1.1518|
;;;476            }
;;;477            Bit = 7;
0005ee  2007              MOVS     r0,#7
0005f0  9002              STR      r0,[sp,#8]
;;;478            while (RemPixels--) {
0005f2  1e68              SUBS     r0,r5,#1
0005f4  b125              CBZ      r5,|L1.1536|
                  |L1.1526|
;;;479              *pData &= ~(1 << Bit);
0005f6  9a02              LDR      r2,[sp,#8]
0005f8  7821              LDRB     r1,[r4,#0]
0005fa  fa09f202          LSL      r2,r9,r2
0005fe  e001              B        |L1.1540|
                  |L1.1536|
000600  e00b              B        |L1.1562|
000602  e00d              B        |L1.1568|
                  |L1.1540|
000604  4391              BICS     r1,r1,r2
000606  7021              STRB     r1,[r4,#0]
;;;480              *pData |= Color << (Bit--);
000608  9a02              LDR      r2,[sp,#8]
00060a  1e53              SUBS     r3,r2,#1
00060c  fa06f202          LSL      r2,r6,r2
000610  4311              ORRS     r1,r1,r2
000612  9302              STR      r3,[sp,#8]
000614  7021              STRB     r1,[r4,#0]
000616  1e40              SUBS     r0,r0,#1              ;478
000618  d2ed              BCS      |L1.1526|
                  |L1.1562|
00061a  1c7f              ADDS     r7,r7,#1              ;435
00061c  4547              CMP      r7,r8                 ;435
00061e  dd83              BLE      |L1.1320|
                  |L1.1568|
;;;481            }
;;;482          }
;;;483        }
;;;484      }
;;;485    }
000620  b007              ADD      sp,sp,#0x1c
000622  e8bd8ff0          POP      {r4-r11,pc}
;;;486    
                          ENDP

                  _DrawHLine PROC
;;;490    */
;;;491    static void _DrawHLine(int x0, int y, int x1) {
000626  460b              MOV      r3,r1
;;;492      _FillRect(x0, y, x1, y);
000628  e7fe              B        _FillRect
;;;493    }
;;;494    
                          ENDP

                  _DrawVLine PROC
;;;498    */
;;;499    static void _DrawVLine(int x , int y0, int y1) {
00062a  e92d4ff8          PUSH     {r3-r11,lr}
00062e  4683              MOV      r11,r0
000630  460e              MOV      r6,r1
000632  4691              MOV      r9,r2
;;;500      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000634  f8dfa154          LDR      r10,|L1.1932|
000638  f9ba0050          LDRSH    r0,[r10,#0x50]  ; GUI_Context
00063c  f7fffffe          BL       GUI_ALLOC_h2p
000640  4607              MOV      r7,r0
;;;501      GUI_USAGE_h hUsage = pDev->hUsage; 
000642  f9b70018          LDRSH    r0,[r7,#0x18]
;;;502      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
000646  b118              CBZ      r0,|L1.1616|
000648  f7fffffe          BL       GUI_ALLOC_h2p
00064c  4605              MOV      r5,r0
00064e  e000              B        |L1.1618|
                  |L1.1616|
000650  2500              MOVS     r5,#0
                  |L1.1618|
;;;503      U8* pData;
;;;504      int Bit, Mask;
;;;505      pData = _XY2PTR_BITOFFSET(x, y0, &Bit);
000652  466a              MOV      r2,sp
000654  4631              MOV      r1,r6
000656  4658              MOV      r0,r11
000658  f7fffffe          BL       _XY2PTR_BITOFFSET
00065c  4604              MOV      r4,r0
;;;506      Mask  = (1 << Bit);
00065e  9800              LDR      r0,[sp,#0]
000660  2101              MOVS     r1,#1
000662  fa01f800          LSL      r8,r1,r0
;;;507      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000666  f89a1010          LDRB     r1,[r10,#0x10]  ; GUI_Context
00066a  f0110f01          TST      r1,#1
00066e  d011              BEQ      |L1.1684|
                  |L1.1648|
;;;508        do {
;;;509          *pData ^= Mask;
000670  7820              LDRB     r0,[r4,#0]
000672  ea800008          EOR      r0,r0,r8
000676  7020              STRB     r0,[r4,#0]
;;;510          if (pUsage) {
000678  b12d              CBZ      r5,|L1.1670|
;;;511            GUI_USAGE_AddPixel(pUsage, x, y0);
00067a  68a8              LDR      r0,[r5,#8]
00067c  4632              MOV      r2,r6
00067e  4659              MOV      r1,r11
000680  6803              LDR      r3,[r0,#0]
000682  4628              MOV      r0,r5
000684  4798              BLX      r3
                  |L1.1670|
;;;512          }
;;;513          pData += pDev->BytesPerLine;
000686  68f8              LDR      r0,[r7,#0xc]
000688  4404              ADD      r4,r4,r0
;;;514        } while (++y0 <= y1);
00068a  1c76              ADDS     r6,r6,#1
00068c  454e              CMP      r6,r9
00068e  ddef              BLE      |L1.1648|
;;;515      } else {
;;;516        int Pixel;
;;;517        Pixel = (LCD_COLORINDEX & 1) << Bit;
;;;518        do {
;;;519          *pData &= ~Mask;
;;;520          *pData |= Pixel;
;;;521          if (pUsage) {
;;;522            GUI_USAGE_AddPixel(pUsage, x, y0);
;;;523          }
;;;524          pData += pDev->BytesPerLine;
;;;525        } while (++y0 <= y1);
;;;526      }
;;;527    }
000690  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.1684|
000694  f8ba1002          LDRH     r1,[r10,#2]           ;517  ; GUI_Context
000698  f0010101          AND      r1,r1,#1              ;517
00069c  fa01fa00          LSL      r10,r1,r0             ;517
                  |L1.1696|
0006a0  7820              LDRB     r0,[r4,#0]            ;519
0006a2  ea200008          BIC      r0,r0,r8              ;519
0006a6  ea40000a          ORR      r0,r0,r10             ;520
0006aa  7020              STRB     r0,[r4,#0]            ;520
0006ac  b12d              CBZ      r5,|L1.1722|
0006ae  68a8              LDR      r0,[r5,#8]            ;522
0006b0  4632              MOV      r2,r6                 ;522
0006b2  4659              MOV      r1,r11                ;522
0006b4  6803              LDR      r3,[r0,#0]            ;522
0006b6  4628              MOV      r0,r5                 ;522
0006b8  4798              BLX      r3                    ;522
                  |L1.1722|
0006ba  68f8              LDR      r0,[r7,#0xc]          ;524
0006bc  4404              ADD      r4,r4,r0              ;524
0006be  1c76              ADDS     r6,r6,#1              ;525
0006c0  454e              CMP      r6,r9                 ;525
0006c2  dded              BLE      |L1.1696|
0006c4  e8bd8ff8          POP      {r3-r11,pc}
;;;528    
                          ENDP

                  _SetPixelIndex PROC
;;;532    */
;;;533    static void _SetPixelIndex(int x, int y, int Index) {
0006c8  b5f8              PUSH     {r3-r7,lr}
0006ca  4605              MOV      r5,r0
0006cc  460e              MOV      r6,r1
0006ce  4617              MOV      r7,r2
;;;534      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0006d0  482e              LDR      r0,|L1.1932|
0006d2  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
0006d6  f7fffffe          BL       GUI_ALLOC_h2p
0006da  4604              MOV      r4,r0
;;;535      U8* pData;
;;;536      int Bit;
;;;537      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
0006dc  466a              MOV      r2,sp
0006de  4631              MOV      r1,r6
0006e0  4628              MOV      r0,r5
0006e2  f7fffffe          BL       _XY2PTR_BITOFFSET
;;;538      *pData &= ~(1 << Bit);
0006e6  9a00              LDR      r2,[sp,#0]
0006e8  7801              LDRB     r1,[r0,#0]
0006ea  2301              MOVS     r3,#1
0006ec  fa03f202          LSL      r2,r3,r2
0006f0  4391              BICS     r1,r1,r2
0006f2  7001              STRB     r1,[r0,#0]
;;;539      *pData |= (Index & 1) << Bit;
0006f4  9b00              LDR      r3,[sp,#0]
0006f6  f0070201          AND      r2,r7,#1
0006fa  409a              LSLS     r2,r2,r3
0006fc  4311              ORRS     r1,r1,r2
0006fe  7001              STRB     r1,[r0,#0]
;;;540      if (pDev->hUsage) {
000700  f9b40018          LDRSH    r0,[r4,#0x18]
000704  2800              CMP      r0,#0
000706  d00c              BEQ      |L1.1826|
;;;541        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
000708  f7fffffe          BL       GUI_ALLOC_h2p
00070c  4607              MOV      r7,r0
00070e  f9b40018          LDRSH    r0,[r4,#0x18]
000712  f7fffffe          BL       GUI_ALLOC_h2p
000716  6880              LDR      r0,[r0,#8]
000718  4632              MOV      r2,r6
00071a  4629              MOV      r1,r5
00071c  6803              LDR      r3,[r0,#0]
00071e  4638              MOV      r0,r7
000720  4798              BLX      r3
                  |L1.1826|
;;;542      }
;;;543    }
000722  bdf8              POP      {r3-r7,pc}
;;;544    
                          ENDP

                  _XorPixel PROC
;;;548    */
;;;549    static void _XorPixel(int x, int y) {
000724  b5f8              PUSH     {r3-r7,lr}
000726  4605              MOV      r5,r0
000728  460e              MOV      r6,r1
;;;550      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00072a  4818              LDR      r0,|L1.1932|
00072c  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000730  f7fffffe          BL       GUI_ALLOC_h2p
000734  4604              MOV      r4,r0
;;;551      U8* pData;
;;;552      int Bit;
;;;553      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
000736  466a              MOV      r2,sp
000738  4631              MOV      r1,r6
00073a  4628              MOV      r0,r5
00073c  f7fffffe          BL       _XY2PTR_BITOFFSET
;;;554      *pData ^= (1 << Bit);
000740  9a00              LDR      r2,[sp,#0]
000742  7801              LDRB     r1,[r0,#0]
000744  2301              MOVS     r3,#1
000746  fa03f202          LSL      r2,r3,r2
00074a  4051              EORS     r1,r1,r2
00074c  7001              STRB     r1,[r0,#0]
;;;555      if (pDev->hUsage) {
00074e  f9b40018          LDRSH    r0,[r4,#0x18]
000752  2800              CMP      r0,#0
000754  d00c              BEQ      |L1.1904|
;;;556        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
000756  f7fffffe          BL       GUI_ALLOC_h2p
00075a  4607              MOV      r7,r0
00075c  f9b40018          LDRSH    r0,[r4,#0x18]
000760  f7fffffe          BL       GUI_ALLOC_h2p
000764  6880              LDR      r0,[r0,#8]
000766  4632              MOV      r2,r6
000768  4629              MOV      r1,r5
00076a  6803              LDR      r3,[r0,#0]
00076c  4638              MOV      r0,r7
00076e  4798              BLX      r3
                  |L1.1904|
;;;557      }
;;;558    }
000770  bdf8              POP      {r3-r7,pc}
;;;559    
                          ENDP

                  _GetPixelIndex PROC
;;;563    */
;;;564    static unsigned int _GetPixelIndex(int x, int y) {
000772  b508              PUSH     {r3,lr}
;;;565      U8* pData;
;;;566      int Bit;
;;;567      pData = _XY2PTR_BITOFFSET(x, y, &Bit);
000774  466a              MOV      r2,sp
000776  f7fffffe          BL       _XY2PTR_BITOFFSET
;;;568      return (*pData >> Bit) & 1;
00077a  7800              LDRB     r0,[r0,#0]
00077c  9900              LDR      r1,[sp,#0]
00077e  40c8              LSRS     r0,r0,r1
000780  f0000001          AND      r0,r0,#1
;;;569    }
000784  bd08              POP      {r3,pc}
;;;570    
                          ENDP

000786  0000              DCW      0x0000
                  |L1.1928|
                          DCD      ||.constdata||
                  |L1.1932|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.constdata||
                  GUI_MEMDEV__APIList1
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
