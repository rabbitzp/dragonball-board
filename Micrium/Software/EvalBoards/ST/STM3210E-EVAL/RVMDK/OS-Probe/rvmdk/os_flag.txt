; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\os_flag.o --depend=.\rvmdk\os_flag.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\os_flag.crf ..\..\..\..\..\uCOS-II\Source\os_flag.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSFlagAccept PROC
;;;91     #if OS_FLAG_ACCEPT_EN > 0
;;;92     OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;93     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;94         OS_FLAGS      flags_rdy;
;;;95         INT8U         result;
;;;96         BOOLEAN       consume;
;;;97     #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;98         OS_CPU_SR     cpu_sr = 0;
;;;99     #endif
;;;100    
;;;101    
;;;102    
;;;103    #if OS_ARG_CHK_EN > 0
;;;104        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;105            return ((OS_FLAGS)0);
;;;106        }
;;;107        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;108            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;109            return ((OS_FLAGS)0);
;;;110        }
;;;111    #endif
;;;112        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
00000c  7828              LDRB     r0,[r5,#0]
00000e  2805              CMP      r0,#5
000010  d004              BEQ      |L1.28|
;;;113            *perr = OS_ERR_EVENT_TYPE;
000012  2001              MOVS     r0,#1
000014  7030              STRB     r0,[r6,#0]
;;;114            return ((OS_FLAGS)0);
000016  2000              MOVS     r0,#0
;;;115        }
;;;116        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;117        if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
;;;118            wait_type &= ~OS_FLAG_CONSUME;
;;;119            consume    = OS_TRUE;
;;;120        } else {
;;;121            consume    = OS_FALSE;
;;;122        }
;;;123    /*$PAGE*/
;;;124        *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
;;;125        OS_ENTER_CRITICAL();
;;;126        switch (wait_type) {
;;;127            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;128                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;129                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;130                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;131                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;132                     }
;;;133                 } else {
;;;134                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;135                 }
;;;136                 OS_EXIT_CRITICAL();
;;;137                 break;
;;;138    
;;;139            case OS_FLAG_WAIT_SET_ANY:
;;;140                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;141                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;142                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;143                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;144                     }
;;;145                 } else {
;;;146                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;147                 }
;;;148                 OS_EXIT_CRITICAL();
;;;149                 break;
;;;150    
;;;151    #if OS_FLAG_WAIT_CLR_EN > 0
;;;152            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;153                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;154                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;155                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;156                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;157                     }
;;;158                 } else {
;;;159                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;160                 }
;;;161                 OS_EXIT_CRITICAL();
;;;162                 break;
;;;163    
;;;164            case OS_FLAG_WAIT_CLR_ANY:
;;;165                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;166                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;167                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;168                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;169                     }
;;;170                 } else {
;;;171                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;172                 }
;;;173                 OS_EXIT_CRITICAL();
;;;174                 break;
;;;175    #endif
;;;176    
;;;177            default:
;;;178                 OS_EXIT_CRITICAL();
;;;179                 flags_rdy = (OS_FLAGS)0;
;;;180                 *perr     = OS_ERR_FLAG_WAIT_TYPE;
;;;181                 break;
;;;182        }
;;;183        return (flags_rdy);
;;;184    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28|
00001c  f0040080          AND      r0,r4,#0x80           ;116
000020  b120              CBZ      r0,|L1.44|
000022  f0240480          BIC      r4,r4,#0x80           ;118
000026  f04f0801          MOV      r8,#1                 ;119
00002a  e001              B        |L1.48|
                  |L1.44|
00002c  f04f0800          MOV      r8,#0                 ;121
                  |L1.48|
000030  2000              MOVS     r0,#0                 ;124
000032  7030              STRB     r0,[r6,#0]            ;124
000034  f7fffffe          BL       OS_CPU_SR_Save
000038  4602              MOV      r2,r0                 ;125
00003a  2170              MOVS     r1,#0x70              ;134
00003c  b36c              CBZ      r4,|L1.154|
00003e  2c01              CMP      r4,#1                 ;126
000040  d03b              BEQ      |L1.186|
000042  2c02              CMP      r4,#2                 ;126
000044  d00a              BEQ      |L1.92|
000046  2c03              CMP      r4,#3                 ;126
000048  d018              BEQ      |L1.124|
00004a  4610              MOV      r0,r2                 ;178
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  2400              MOVS     r4,#0                 ;179
000052  206f              MOVS     r0,#0x6f              ;180
000054  7030              STRB     r0,[r6,#0]            ;180
                  |L1.86|
000056  4620              MOV      r0,r4                 ;183
000058  e8bd81f0          POP      {r4-r8,pc}
                  |L1.92|
00005c  8928              LDRH     r0,[r5,#8]            ;128
00005e  ea000407          AND      r4,r0,r7              ;128
000062  42bc              CMP      r4,r7                 ;129
000064  d105              BNE      |L1.114|
000066  f1b80f01          CMP      r8,#1                 ;130
00006a  d103              BNE      |L1.116|
00006c  43a0              BICS     r0,r0,r4              ;131
00006e  8128              STRH     r0,[r5,#8]            ;131
000070  e000              B        |L1.116|
                  |L1.114|
000072  7031              STRB     r1,[r6,#0]            ;134
                  |L1.116|
000074  4610              MOV      r0,r2                 ;136
000076  f7fffffe          BL       OS_CPU_SR_Restore
00007a  e7ec              B        |L1.86|
                  |L1.124|
00007c  8928              LDRH     r0,[r5,#8]            ;140
00007e  ea000407          AND      r4,r0,r7              ;140
000082  b12c              CBZ      r4,|L1.144|
000084  f1b80f01          CMP      r8,#1                 ;142
000088  d103              BNE      |L1.146|
00008a  43a0              BICS     r0,r0,r4              ;143
00008c  8128              STRH     r0,[r5,#8]            ;143
00008e  e000              B        |L1.146|
                  |L1.144|
000090  7031              STRB     r1,[r6,#0]            ;146
                  |L1.146|
000092  4610              MOV      r0,r2                 ;148
000094  f7fffffe          BL       OS_CPU_SR_Restore
000098  e7dd              B        |L1.86|
                  |L1.154|
00009a  8928              LDRH     r0,[r5,#8]            ;153
00009c  ea270400          BIC      r4,r7,r0              ;153
0000a0  42bc              CMP      r4,r7                 ;154
0000a2  d105              BNE      |L1.176|
0000a4  f1b80f01          CMP      r8,#1                 ;155
0000a8  d103              BNE      |L1.178|
0000aa  4320              ORRS     r0,r0,r4              ;156
0000ac  8128              STRH     r0,[r5,#8]            ;156
0000ae  e000              B        |L1.178|
                  |L1.176|
0000b0  7031              STRB     r1,[r6,#0]            ;159
                  |L1.178|
0000b2  4610              MOV      r0,r2                 ;161
0000b4  f7fffffe          BL       OS_CPU_SR_Restore
0000b8  e7cd              B        |L1.86|
                  |L1.186|
0000ba  8928              LDRH     r0,[r5,#8]            ;165
0000bc  ea270400          BIC      r4,r7,r0              ;165
0000c0  b12c              CBZ      r4,|L1.206|
0000c2  f1b80f01          CMP      r8,#1                 ;167
0000c6  d103              BNE      |L1.208|
0000c8  4320              ORRS     r0,r0,r4              ;168
0000ca  8128              STRH     r0,[r5,#8]            ;168
0000cc  e000              B        |L1.208|
                  |L1.206|
0000ce  7031              STRB     r1,[r6,#0]            ;171
                  |L1.208|
0000d0  4610              MOV      r0,r2                 ;173
0000d2  f7fffffe          BL       OS_CPU_SR_Restore
0000d6  e7be              B        |L1.86|
;;;185    #endif
                          ENDP

                  OSFlagCreate PROC
;;;207    
;;;208    OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
0000d8  b570              PUSH     {r4-r6,lr}
;;;209    {
0000da  4606              MOV      r6,r0
0000dc  460d              MOV      r5,r1
;;;210        OS_FLAG_GRP *pgrp;
;;;211    #if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
;;;212        OS_CPU_SR    cpu_sr = 0;
;;;213    #endif
;;;214    
;;;215    
;;;216    
;;;217    #if OS_ARG_CHK_EN > 0
;;;218        if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
;;;219            return ((OS_FLAG_GRP *)0);
;;;220        }
;;;221    #endif
;;;222        if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
0000de  48fe              LDR      r0,|L1.1240|
0000e0  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0000e2  b118              CBZ      r0,|L1.236|
;;;223            *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
0000e4  2010              MOVS     r0,#0x10
0000e6  7028              STRB     r0,[r5,#0]
;;;224            return ((OS_FLAG_GRP *)0);
0000e8  2000              MOVS     r0,#0
;;;225        }
;;;226        OS_ENTER_CRITICAL();
;;;227        pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
;;;228        if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
;;;229                                                        /* Adjust free list                                */
;;;230            OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
;;;231            pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
;;;232            pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
;;;233            pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
;;;234    #if OS_FLAG_NAME_SIZE > 1
;;;235            pgrp->OSFlagName[0]  = '?';
;;;236            pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;237    #endif
;;;238            OS_EXIT_CRITICAL();
;;;239            *perr                = OS_ERR_NONE;
;;;240        } else {
;;;241            OS_EXIT_CRITICAL();
;;;242            *perr                = OS_ERR_FLAG_GRP_DEPLETED;
;;;243        }
;;;244        return (pgrp);                                  /* Return pointer to event flag group              */
;;;245    }
0000ea  bd70              POP      {r4-r6,pc}
                  |L1.236|
0000ec  f7fffffe          BL       OS_CPU_SR_Save
0000f0  4601              MOV      r1,r0                 ;226
0000f2  48fa              LDR      r0,|L1.1244|
0000f4  6804              LDR      r4,[r0,#0]            ;227  ; OSFlagFreeList
0000f6  b174              CBZ      r4,|L1.278|
0000f8  6862              LDR      r2,[r4,#4]            ;230
0000fa  6002              STR      r2,[r0,#0]            ;230  ; OSFlagFreeList
0000fc  2005              MOVS     r0,#5                 ;231
0000fe  7020              STRB     r0,[r4,#0]            ;231
000100  8126              STRH     r6,[r4,#8]            ;232
000102  2600              MOVS     r6,#0                 ;233
000104  6066              STR      r6,[r4,#4]            ;233
000106  203f              MOVS     r0,#0x3f              ;235
000108  72a0              STRB     r0,[r4,#0xa]          ;235
00010a  72e6              STRB     r6,[r4,#0xb]          ;236
00010c  4608              MOV      r0,r1                 ;238
00010e  f7fffffe          BL       OS_CPU_SR_Restore
000112  702e              STRB     r6,[r5,#0]            ;239
000114  e004              B        |L1.288|
                  |L1.278|
000116  4608              MOV      r0,r1                 ;241
000118  f7fffffe          BL       OS_CPU_SR_Restore
00011c  2072              MOVS     r0,#0x72              ;242
00011e  7028              STRB     r0,[r5,#0]            ;242
                  |L1.288|
000120  4620              MOV      r0,r4                 ;244
000122  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP

                  OS_FlagUnlink PROC
;;;1144   
;;;1145   void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
000124  6842              LDR      r2,[r0,#4]
;;;1146   {
;;;1147   #if OS_TASK_DEL_EN > 0
;;;1148       OS_TCB       *ptcb;
;;;1149   #endif
;;;1150       OS_FLAG_GRP  *pgrp;
;;;1151       OS_FLAG_NODE *pnode_prev;
;;;1152       OS_FLAG_NODE *pnode_next;
;;;1153   
;;;1154   
;;;1155       pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
;;;1156       pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
000126  6801              LDR      r1,[r0,#0]
000128  2300              MOVS     r3,#0                 ;1155
;;;1157       if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
00012a  b12a              CBZ      r2,|L1.312|
;;;1158           pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
;;;1159           pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
;;;1160           if (pnode_next != (OS_FLAG_NODE *)0) {
;;;1161               pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
;;;1162           }
;;;1163       } else {                                                    /* No,  A node somewhere in the list   */
;;;1164           pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
00012c  6011              STR      r1,[r2,#0]
;;;1165           if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
00012e  b101              CBZ      r1,|L1.306|
;;;1166               pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
000130  604a              STR      r2,[r1,#4]
                  |L1.306|
;;;1167           }
;;;1168       }
;;;1169   #if OS_TASK_DEL_EN > 0
;;;1170       ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
000132  6880              LDR      r0,[r0,#8]
;;;1171       ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
000134  6283              STR      r3,[r0,#0x28]
;;;1172   #endif
;;;1173   }
000136  4770              BX       lr
                  |L1.312|
000138  68c2              LDR      r2,[r0,#0xc]          ;1158
00013a  6051              STR      r1,[r2,#4]            ;1159
00013c  2900              CMP      r1,#0                 ;1160
00013e  d0f8              BEQ      |L1.306|
000140  604b              STR      r3,[r1,#4]            ;1161
000142  e7f6              B        |L1.306|
;;;1174   #endif
                          ENDP

                  OS_FlagTaskRdy PROC
;;;1100   
;;;1101   static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
000144  b510              PUSH     {r4,lr}
;;;1102   {
000146  4603              MOV      r3,r0
;;;1103       OS_TCB   *ptcb;
;;;1104       BOOLEAN   sched;
;;;1105   
;;;1106   
;;;1107       ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
000148  6898              LDR      r0,[r3,#8]
;;;1108       ptcb->OSTCBDly       = 0;
00014a  2200              MOVS     r2,#0
00014c  85c2              STRH     r2,[r0,#0x2e]
;;;1109       ptcb->OSTCBFlagsRdy  = flags_rdy;
00014e  8581              STRH     r1,[r0,#0x2c]
;;;1110       ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
000150  f8901030          LDRB     r1,[r0,#0x30]
000154  f0210120          BIC      r1,r1,#0x20
000158  f8801030          STRB     r1,[r0,#0x30]
;;;1111       ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
00015c  f8802031          STRB     r2,[r0,#0x31]
;;;1112       if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
000160  b129              CBZ      r1,|L1.366|
;;;1113           OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
;;;1114           OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;1115           sched                   = OS_TRUE;
;;;1116       } else {
;;;1117           sched                   = OS_FALSE;
000162  2400              MOVS     r4,#0
                  |L1.356|
;;;1118       }
;;;1119       OS_FlagUnlink(pnode);
000164  4618              MOV      r0,r3
000166  f7fffffe          BL       OS_FlagUnlink
;;;1120       return (sched);
00016a  4620              MOV      r0,r4
;;;1121   }
00016c  bd10              POP      {r4,pc}
                  |L1.366|
00016e  49dc              LDR      r1,|L1.1248|
000170  f8902036          LDRB     r2,[r0,#0x36]         ;1113
000174  f891c000          LDRB     r12,[r1,#0]           ;1113  ; OSRdyGrp
000178  ea42020c          ORR      r2,r2,r12             ;1113
00017c  700a              STRB     r2,[r1,#0]            ;1113
00017e  f8901034          LDRB     r1,[r0,#0x34]         ;1114
000182  4ad8              LDR      r2,|L1.1252|
000184  f8900035          LDRB     r0,[r0,#0x35]         ;1114
000188  f812c001          LDRB     r12,[r2,r1]           ;1114
00018c  ea4c0000          ORR      r0,r12,r0             ;1114
000190  5450              STRB     r0,[r2,r1]            ;1114
000192  2401              MOVS     r4,#1                 ;1115
000194  e7e6              B        |L1.356|
;;;1122   
                          ENDP

                  OSFlagDel PROC
;;;284    #if OS_FLAG_DEL_EN > 0
;;;285    OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
000196  e92d5ff0          PUSH     {r4-r12,lr}
;;;286    {
00019a  4604              MOV      r4,r0
00019c  4688              MOV      r8,r1
00019e  4616              MOV      r6,r2
;;;287        BOOLEAN       tasks_waiting;
;;;288        OS_FLAG_NODE *pnode;
;;;289        OS_FLAG_GRP  *pgrp_return;
;;;290    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;291        OS_CPU_SR     cpu_sr = 0;
;;;292    #endif
;;;293    
;;;294    
;;;295    
;;;296    #if OS_ARG_CHK_EN > 0
;;;297        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;298            return (pgrp);
;;;299        }
;;;300        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;301            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;302            return (pgrp);
;;;303        }
;;;304    #endif
;;;305        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
0001a0  48cd              LDR      r0,|L1.1240|
0001a2  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0001a4  b120              CBZ      r0,|L1.432|
;;;306            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
0001a6  200f              MOVS     r0,#0xf
0001a8  7030              STRB     r0,[r6,#0]
;;;307            return (pgrp);
0001aa  4620              MOV      r0,r4
;;;308        }
;;;309        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
;;;310            *perr = OS_ERR_EVENT_TYPE;
;;;311            return (pgrp);
;;;312        }
;;;313        OS_ENTER_CRITICAL();
;;;314        if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
;;;315            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;316        } else {
;;;317            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;318        }
;;;319        switch (opt) {
;;;320            case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
;;;321                 if (tasks_waiting == OS_FALSE) {
;;;322    #if OS_FLAG_NAME_SIZE > 1
;;;323                     pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
;;;324                     pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;325    #endif
;;;326                     pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;327                     pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
;;;328                     pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;329                     OSFlagFreeList       = pgrp;
;;;330                     OS_EXIT_CRITICAL();
;;;331                     *perr                = OS_ERR_NONE;
;;;332                     pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
;;;333                 } else {
;;;334                     OS_EXIT_CRITICAL();
;;;335                     *perr                = OS_ERR_TASK_WAITING;
;;;336                     pgrp_return          = pgrp;
;;;337                 }
;;;338                 break;
;;;339    
;;;340            case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
;;;341                 pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;342                 while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
;;;343                     (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
;;;344                     pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
;;;345                 }
;;;346    #if OS_FLAG_NAME_SIZE > 1
;;;347                 pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
;;;348                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;349    #endif
;;;350                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;351                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
;;;352                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;353                 OSFlagFreeList       = pgrp;
;;;354                 OS_EXIT_CRITICAL();
;;;355                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;356                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;357                 }
;;;358                 *perr = OS_ERR_NONE;
;;;359                 pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
;;;360                 break;
;;;361    
;;;362            default:
;;;363                 OS_EXIT_CRITICAL();
;;;364                 *perr                = OS_ERR_INVALID_OPT;
;;;365                 pgrp_return          = pgrp;
;;;366                 break;
;;;367        }
;;;368        return (pgrp_return);
;;;369    }
0001ac  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.432|
0001b0  7820              LDRB     r0,[r4,#0]            ;309
0001b2  2805              CMP      r0,#5                 ;309
0001b4  d004              BEQ      |L1.448|
0001b6  2001              MOVS     r0,#1                 ;310
0001b8  7030              STRB     r0,[r6,#0]            ;310
0001ba  4620              MOV      r0,r4                 ;311
0001bc  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.448|
0001c0  f7fffffe          BL       OS_CPU_SR_Save
0001c4  4683              MOV      r11,r0                ;313
0001c6  6865              LDR      r5,[r4,#4]            ;314
0001c8  b10d              CBZ      r5,|L1.462|
0001ca  2701              MOVS     r7,#1                 ;315
0001cc  e000              B        |L1.464|
                  |L1.462|
0001ce  2700              MOVS     r7,#0                 ;317
                  |L1.464|
0001d0  ea5f0108          MOVS     r1,r8                 ;319
0001d4  f8df9304          LDR      r9,|L1.1244|
0001d8  f04f0a3f          MOV      r10,#0x3f             ;323
0001dc  f04f0800          MOV      r8,#0                 ;291
0001e0  d009              BEQ      |L1.502|
0001e2  2901              CMP      r1,#1                 ;319
0001e4  d025              BEQ      |L1.562|
0001e6  4658              MOV      r0,r11                ;363
0001e8  f7fffffe          BL       OS_CPU_SR_Restore
0001ec  2007              MOVS     r0,#7                 ;364
0001ee  7030              STRB     r0,[r6,#0]            ;364
0001f0  4620              MOV      r0,r4                 ;365
0001f2  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.502|
0001f6  b13f              CBZ      r7,|L1.520|
0001f8  4658              MOV      r0,r11                ;334
0001fa  f7fffffe          BL       OS_CPU_SR_Restore
0001fe  2049              MOVS     r0,#0x49              ;335
000200  7030              STRB     r0,[r6,#0]            ;335
000202  4620              MOV      r0,r4                 ;336
000204  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.520|
000208  f884a00a          STRB     r10,[r4,#0xa]         ;323
00020c  f884800b          STRB     r8,[r4,#0xb]          ;324
000210  f8848000          STRB     r8,[r4,#0]            ;326
000214  f8d90000          LDR      r0,[r9,#0]            ;327  ; OSFlagFreeList
000218  6060              STR      r0,[r4,#4]            ;327
00021a  f8a48008          STRH     r8,[r4,#8]            ;328
00021e  f8c94000          STR      r4,[r9,#0]            ;329  ; OSFlagFreeList
000222  4658              MOV      r0,r11                ;330
000224  f7fffffe          BL       OS_CPU_SR_Restore
000228  f8868000          STRB     r8,[r6,#0]            ;331
00022c  2000              MOVS     r0,#0                 ;332
00022e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.562|
000232  b135              CBZ      r5,|L1.578|
                  |L1.564|
000234  2100              MOVS     r1,#0                 ;343
000236  4628              MOV      r0,r5                 ;343
000238  f7fffffe          BL       OS_FlagTaskRdy
00023c  682d              LDR      r5,[r5,#0]            ;344
00023e  2d00              CMP      r5,#0                 ;342
000240  d1f8              BNE      |L1.564|
                  |L1.578|
000242  f884a00a          STRB     r10,[r4,#0xa]         ;347
000246  f884800b          STRB     r8,[r4,#0xb]          ;348
00024a  f8848000          STRB     r8,[r4,#0]            ;350
00024e  f8d90000          LDR      r0,[r9,#0]            ;351  ; OSFlagFreeList
000252  6060              STR      r0,[r4,#4]            ;351
000254  f8a48008          STRH     r8,[r4,#8]            ;352
000258  f8c94000          STR      r4,[r9,#0]            ;353  ; OSFlagFreeList
00025c  4658              MOV      r0,r11                ;354
00025e  f7fffffe          BL       OS_CPU_SR_Restore
000262  2f01              CMP      r7,#1                 ;355
000264  d101              BNE      |L1.618|
000266  f7fffffe          BL       OS_Sched
                  |L1.618|
00026a  f8868000          STRB     r8,[r6,#0]            ;358
00026e  2000              MOVS     r0,#0                 ;359
000270  e8bd9ff0          POP      {r4-r12,pc}
;;;370    #endif
                          ENDP

                  OSFlagNameGet PROC
;;;395    #if OS_FLAG_NAME_SIZE > 1
;;;396    INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
000274  e92d41f0          PUSH     {r4-r8,lr}
;;;397    {
000278  4605              MOV      r5,r0
00027a  460e              MOV      r6,r1
00027c  4614              MOV      r4,r2
;;;398        INT8U      len;
;;;399    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;400        OS_CPU_SR  cpu_sr = 0;
;;;401    #endif
;;;402    
;;;403    
;;;404    
;;;405    #if OS_ARG_CHK_EN > 0
;;;406        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
;;;407            return (0);
;;;408        }
;;;409        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;410            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;411            return (0);
;;;412        }
;;;413        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;414            *perr = OS_ERR_PNAME_NULL;
;;;415            return (0);
;;;416        }
;;;417    #endif
;;;418        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
00027e  4896              LDR      r0,|L1.1240|
000280  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000282  b120              CBZ      r0,|L1.654|
;;;419            *perr = OS_ERR_NAME_GET_ISR;
000284  2011              MOVS     r0,#0x11
000286  7020              STRB     r0,[r4,#0]
;;;420            return (0);
000288  2000              MOVS     r0,#0
;;;421        }
;;;422        OS_ENTER_CRITICAL();
;;;423        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;424            OS_EXIT_CRITICAL();
;;;425            *perr = OS_ERR_EVENT_TYPE;
;;;426            return (0);
;;;427        }
;;;428        len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
;;;429        OS_EXIT_CRITICAL();
;;;430        *perr = OS_ERR_NONE;
;;;431        return (len);
;;;432    }
00028a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.654|
00028e  f7fffffe          BL       OS_CPU_SR_Save
000292  4607              MOV      r7,r0                 ;422
000294  7828              LDRB     r0,[r5,#0]            ;423
000296  2805              CMP      r0,#5                 ;423
000298  d007              BEQ      |L1.682|
00029a  4638              MOV      r0,r7                 ;424
00029c  f7fffffe          BL       OS_CPU_SR_Restore
0002a0  2001              MOVS     r0,#1                 ;425
0002a2  7020              STRB     r0,[r4,#0]            ;425
0002a4  2000              MOVS     r0,#0                 ;426
0002a6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.682|
0002aa  f105010a          ADD      r1,r5,#0xa            ;428
0002ae  4630              MOV      r0,r6                 ;428
0002b0  f7fffffe          BL       OS_StrCopy
0002b4  4605              MOV      r5,r0                 ;428
0002b6  4638              MOV      r0,r7                 ;429
0002b8  f7fffffe          BL       OS_CPU_SR_Restore
0002bc  2000              MOVS     r0,#0                 ;430
0002be  7020              STRB     r0,[r4,#0]            ;430
0002c0  4628              MOV      r0,r5                 ;431
0002c2  e8bd81f0          POP      {r4-r8,pc}
;;;433    #endif
                          ENDP

                  OSFlagNameSet PROC
;;;459    #if OS_FLAG_NAME_SIZE > 1
;;;460    void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
0002c6  e92d41f0          PUSH     {r4-r8,lr}
;;;461    {
0002ca  4605              MOV      r5,r0
0002cc  460e              MOV      r6,r1
0002ce  4614              MOV      r4,r2
;;;462        INT8U      len;
;;;463    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;464        OS_CPU_SR  cpu_sr = 0;
;;;465    #endif
;;;466    
;;;467    
;;;468    
;;;469    #if OS_ARG_CHK_EN > 0
;;;470        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
;;;471            return;
;;;472        }
;;;473        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;474            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;475            return;
;;;476        }
;;;477        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;478            *perr = OS_ERR_PNAME_NULL;
;;;479            return;
;;;480        }
;;;481    #endif
;;;482        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
0002d0  4881              LDR      r0,|L1.1240|
0002d2  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0002d4  b118              CBZ      r0,|L1.734|
;;;483            *perr = OS_ERR_NAME_SET_ISR;
0002d6  2012              MOVS     r0,#0x12
0002d8  7020              STRB     r0,[r4,#0]
;;;484            return;
;;;485        }
;;;486        OS_ENTER_CRITICAL();
;;;487        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;488            OS_EXIT_CRITICAL();
;;;489            *perr = OS_ERR_EVENT_TYPE;
;;;490            return;
;;;491        }
;;;492        len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
;;;493        if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
;;;494            OS_EXIT_CRITICAL();
;;;495            *perr = OS_ERR_FLAG_NAME_TOO_LONG;
;;;496            return;
;;;497        }
;;;498        (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
;;;499        OS_EXIT_CRITICAL();
;;;500        *perr = OS_ERR_NONE;
;;;501        return;
;;;502    }
0002da  e8bd81f0          POP      {r4-r8,pc}
                  |L1.734|
0002de  f7fffffe          BL       OS_CPU_SR_Save
0002e2  4607              MOV      r7,r0                 ;486
0002e4  7828              LDRB     r0,[r5,#0]            ;487
0002e6  2805              CMP      r0,#5                 ;487
0002e8  d006              BEQ      |L1.760|
0002ea  4638              MOV      r0,r7                 ;488
0002ec  f7fffffe          BL       OS_CPU_SR_Restore
0002f0  2001              MOVS     r0,#1                 ;489
0002f2  7020              STRB     r0,[r4,#0]            ;489
0002f4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.760|
0002f8  4630              MOV      r0,r6                 ;492
0002fa  f7fffffe          BL       OS_StrLen
0002fe  280f              CMP      r0,#0xf               ;493
000300  d906              BLS      |L1.784|
000302  4638              MOV      r0,r7                 ;494
000304  f7fffffe          BL       OS_CPU_SR_Restore
000308  2073              MOVS     r0,#0x73              ;495
00030a  7020              STRB     r0,[r4,#0]            ;495
00030c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.784|
000310  4631              MOV      r1,r6                 ;498
000312  f105000a          ADD      r0,r5,#0xa            ;498
000316  f7fffffe          BL       OS_StrCopy
00031a  4638              MOV      r0,r7                 ;499
00031c  f7fffffe          BL       OS_CPU_SR_Restore
000320  2000              MOVS     r0,#0                 ;500
000322  7020              STRB     r0,[r4,#0]            ;500
000324  e8bd81f0          POP      {r4-r8,pc}
;;;503    #endif
                          ENDP

                  OS_FlagBlock PROC
;;;987    
;;;988    static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
000328  b470              PUSH     {r4-r6}
;;;989    {
00032a  9c03              LDR      r4,[sp,#0xc]
;;;990        OS_FLAG_NODE  *pnode_next;
;;;991        INT8U          y;
;;;992    
;;;993    
;;;994        OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
00032c  4d6e              LDR      r5,|L1.1256|
00032e  f8d5c000          LDR      r12,[r5,#0]  ; OSTCBCur
000332  f89c6030          LDRB     r6,[r12,#0x30]
000336  f0460620          ORR      r6,r6,#0x20
00033a  f88c6030          STRB     r6,[r12,#0x30]
;;;995        OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
00033e  2600              MOVS     r6,#0
000340  f88c6031          STRB     r6,[r12,#0x31]
;;;996        OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
000344  f8ac402e          STRH     r4,[r12,#0x2e]
;;;997    #if OS_TASK_DEL_EN > 0
;;;998        OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
000348  f8cc1028          STR      r1,[r12,#0x28]
;;;999    #endif
;;;1000       pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
00034c  820a              STRH     r2,[r1,#0x10]
;;;1001       pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
00034e  748b              STRB     r3,[r1,#0x12]
;;;1002       pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
000350  f8c1c008          STR      r12,[r1,#8]
;;;1003       pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
000354  6842              LDR      r2,[r0,#4]
000356  600a              STR      r2,[r1,#0]
;;;1004       pnode->OSFlagNodePrev     = (void *)0;
000358  604e              STR      r6,[r1,#4]
;;;1005       pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
00035a  60c8              STR      r0,[r1,#0xc]
;;;1006       pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
00035c  6842              LDR      r2,[r0,#4]
;;;1007       if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
00035e  b102              CBZ      r2,|L1.866|
;;;1008           pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
000360  6051              STR      r1,[r2,#4]
                  |L1.866|
;;;1009       }
;;;1010       pgrp->OSFlagWaitList = (void *)pnode;
000362  6041              STR      r1,[r0,#4]
;;;1011   
;;;1012       y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
000364  6828              LDR      r0,[r5,#0]  ; OSTCBCur
000366  f8901034          LDRB     r1,[r0,#0x34]
;;;1013       OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
00036a  4b5e              LDR      r3,|L1.1252|
00036c  f890c035          LDRB     r12,[r0,#0x35]
000370  5c5a              LDRB     r2,[r3,r1]
000372  ea22020c          BIC      r2,r2,r12
000376  545a              STRB     r2,[r3,r1]
;;;1014       if (OSRdyTbl[y] == 0x00) {
000378  2a00              CMP      r2,#0
00037a  d106              BNE      |L1.906|
;;;1015           OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
00037c  f8901036          LDRB     r1,[r0,#0x36]
000380  4857              LDR      r0,|L1.1248|
000382  7802              LDRB     r2,[r0,#0]  ; OSRdyGrp
000384  ea220101          BIC      r1,r2,r1
000388  7001              STRB     r1,[r0,#0]
                  |L1.906|
;;;1016       }
;;;1017   }
00038a  bc70              POP      {r4-r6}
00038c  4770              BX       lr
;;;1018   
                          ENDP

                  OSFlagPend PROC
;;;559    
;;;560    OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
00038e  e92d4fff          PUSH     {r0-r11,lr}
;;;561    {
000392  b087              SUB      sp,sp,#0x1c
000394  4604              MOV      r4,r0
000396  9d14              LDR      r5,[sp,#0x50]
000398  460f              MOV      r7,r1
00039a  4690              MOV      r8,r2
;;;562        OS_FLAG_NODE  node;
;;;563        OS_FLAGS      flags_rdy;
;;;564        INT8U         result;
;;;565        INT8U         pend_stat;
;;;566        BOOLEAN       consume;
;;;567    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;568        OS_CPU_SR     cpu_sr = 0;
;;;569    #endif
;;;570    
;;;571    
;;;572    
;;;573    #if OS_ARG_CHK_EN > 0
;;;574        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;575            return ((OS_FLAGS)0);
;;;576        }
;;;577        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;578            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;579            return ((OS_FLAGS)0);
;;;580        }
;;;581    #endif
;;;582        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
00039c  484e              LDR      r0,|L1.1240|
00039e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0003a0  b128              CBZ      r0,|L1.942|
;;;583            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
0003a2  2002              MOVS     r0,#2
0003a4  7028              STRB     r0,[r5,#0]
;;;584            return ((OS_FLAGS)0);
;;;585        }
;;;586        if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
;;;587            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;588            return ((OS_FLAGS)0);
;;;589        }
;;;590        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
;;;591            *perr = OS_ERR_EVENT_TYPE;
;;;592            return ((OS_FLAGS)0);
;;;593        }
;;;594        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;595        if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
;;;596            wait_type &= ~(INT8U)OS_FLAG_CONSUME;
;;;597            consume    = OS_TRUE;
;;;598        } else {
;;;599            consume    = OS_FALSE;
;;;600        }
;;;601    /*$PAGE*/
;;;602        OS_ENTER_CRITICAL();
;;;603        switch (wait_type) {
;;;604            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;605                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
;;;606                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;607                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;608                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;609                     }
;;;610                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;611                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;612                     *perr                   = OS_ERR_NONE;
;;;613                     return (flags_rdy);
;;;614                 } else {                                      /* Block task until events occur or timeout */
;;;615                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;616                     OS_EXIT_CRITICAL();
;;;617                 }
;;;618                 break;
;;;619    
;;;620            case OS_FLAG_WAIT_SET_ANY:
;;;621                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
;;;622                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;623                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;624                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;625                     }
;;;626                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;627                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;628                     *perr                   = OS_ERR_NONE;
;;;629                     return (flags_rdy);
;;;630                 } else {                                      /* Block task until events occur or timeout */
;;;631                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;632                     OS_EXIT_CRITICAL();
;;;633                 }
;;;634                 break;
;;;635    
;;;636    #if OS_FLAG_WAIT_CLR_EN > 0
;;;637            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;638                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;639                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;640                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;641                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;642                     }
;;;643                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;644                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;645                     *perr                   = OS_ERR_NONE;
;;;646                     return (flags_rdy);
;;;647                 } else {                                      /* Block task until events occur or timeout */
;;;648                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;649                     OS_EXIT_CRITICAL();
;;;650                 }
;;;651                 break;
;;;652    
;;;653            case OS_FLAG_WAIT_CLR_ANY:
;;;654                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;655                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;656                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;657                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;658                     }
;;;659                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;660                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;661                     *perr                   = OS_ERR_NONE;
;;;662                     return (flags_rdy);
;;;663                 } else {                                      /* Block task until events occur or timeout */
;;;664                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;665                     OS_EXIT_CRITICAL();
;;;666                 }
;;;667                 break;
;;;668    #endif
;;;669    
;;;670            default:
;;;671                 OS_EXIT_CRITICAL();
;;;672                 flags_rdy = (OS_FLAGS)0;
;;;673                 *perr      = OS_ERR_FLAG_WAIT_TYPE;
;;;674                 return (flags_rdy);
;;;675        }
;;;676    /*$PAGE*/
;;;677        OS_Sched();                                            /* Find next HPT ready to run               */
;;;678        OS_ENTER_CRITICAL();
;;;679        if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
;;;680            pend_stat                = OSTCBCur->OSTCBStatPend;
;;;681            OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;682            OS_FlagUnlink(&node);
;;;683            OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
;;;684            OS_EXIT_CRITICAL();
;;;685            flags_rdy                = (OS_FLAGS)0;
;;;686            switch (pend_stat) {
;;;687                case OS_STAT_PEND_ABORT:
;;;688                     *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
;;;689                     break;
;;;690    
;;;691                case OS_STAT_PEND_TO:
;;;692                default:
;;;693                     *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
;;;694                     break;
;;;695            }
;;;696            return (flags_rdy);
;;;697        }
;;;698        flags_rdy = OSTCBCur->OSTCBFlagsRdy;
;;;699        if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
;;;700            switch (wait_type) {
;;;701                case OS_FLAG_WAIT_SET_ALL:
;;;702                case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
;;;703                     pgrp->OSFlagFlags &= ~flags_rdy;
;;;704                     break;
;;;705    
;;;706    #if OS_FLAG_WAIT_CLR_EN > 0
;;;707                case OS_FLAG_WAIT_CLR_ALL:
;;;708                case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
;;;709                     pgrp->OSFlagFlags |=  flags_rdy;
;;;710                     break;
;;;711    #endif
;;;712                default:
;;;713                     OS_EXIT_CRITICAL();
;;;714                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;715                     return ((OS_FLAGS)0);
;;;716            }
;;;717        }
;;;718        OS_EXIT_CRITICAL();
;;;719        *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
;;;720        return (flags_rdy);
;;;721    }
0003a6  b00b              ADD      sp,sp,#0x2c
0003a8  2000              MOVS     r0,#0                 ;584
0003aa  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.942|
0003ae  484f              LDR      r0,|L1.1260|
0003b0  7800              LDRB     r0,[r0,#0]            ;586  ; OSLockNesting
0003b2  b128              CBZ      r0,|L1.960|
0003b4  200d              MOVS     r0,#0xd               ;587
0003b6  7028              STRB     r0,[r5,#0]            ;587
0003b8  b00b              ADD      sp,sp,#0x2c
0003ba  2000              MOVS     r0,#0                 ;588
0003bc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.960|
0003c0  7820              LDRB     r0,[r4,#0]            ;590
0003c2  2805              CMP      r0,#5                 ;590
0003c4  d005              BEQ      |L1.978|
0003c6  2001              MOVS     r0,#1                 ;591
0003c8  7028              STRB     r0,[r5,#0]            ;591
0003ca  b00b              ADD      sp,sp,#0x2c
0003cc  2000              MOVS     r0,#0                 ;592
0003ce  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.978|
0003d2  f0080080          AND      r0,r8,#0x80           ;594
0003d6  b118              CBZ      r0,|L1.992|
0003d8  f0280880          BIC      r8,r8,#0x80           ;596
0003dc  2601              MOVS     r6,#1                 ;597
0003de  e000              B        |L1.994|
                  |L1.992|
0003e0  2600              MOVS     r6,#0                 ;599
                  |L1.994|
0003e2  f7fffffe          BL       OS_CPU_SR_Save
0003e6  9001              STR      r0,[sp,#4]            ;602
0003e8  f8dfa0fc          LDR      r10,|L1.1256|
0003ec  f04f0900          MOV      r9,#0                 ;568
0003f0  f1b80f00          CMP      r8,#0                 ;603
0003f4  d058              BEQ      |L1.1192|
0003f6  f1b80f01          CMP      r8,#1                 ;603
0003fa  d06c              BEQ      |L1.1238|
0003fc  f1b80f02          CMP      r8,#2                 ;603
000400  d00b              BEQ      |L1.1050|
000402  f1b80f03          CMP      r8,#3                 ;603
000406  d02b              BEQ      |L1.1120|
000408  9801              LDR      r0,[sp,#4]            ;671
00040a  f7fffffe          BL       OS_CPU_SR_Restore
00040e  2000              MOVS     r0,#0                 ;672
000410  216f              MOVS     r1,#0x6f              ;673
000412  7029              STRB     r1,[r5,#0]            ;673
000414  b00b              ADD      sp,sp,#0x2c
000416  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1050|
00041a  8920              LDRH     r0,[r4,#8]            ;605
00041c  ea000b07          AND      r11,r0,r7             ;605
000420  45bb              CMP      r11,r7                ;606
000422  d111              BNE      |L1.1096|
000424  2e01              CMP      r6,#1                 ;607
000426  d102              BNE      |L1.1070|
000428  ea20000b          BIC      r0,r0,r11             ;608
00042c  8120              STRH     r0,[r4,#8]            ;608
                  |L1.1070|
00042e  f8da0000          LDR      r0,[r10,#0]           ;610  ; OSTCBCur
000432  f8a0b02c          STRH     r11,[r0,#0x2c]        ;610
000436  9801              LDR      r0,[sp,#4]            ;611
000438  f7fffffe          BL       OS_CPU_SR_Restore
00043c  f8859000          STRB     r9,[r5,#0]            ;612
000440  b00b              ADD      sp,sp,#0x2c
000442  4658              MOV      r0,r11                ;613
000444  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1096|
000448  9b0a              LDR      r3,[sp,#0x28]         ;615
00044a  9300              STR      r3,[sp,#0]            ;615
00044c  4643              MOV      r3,r8                 ;615
00044e  463a              MOV      r2,r7                 ;615
000450  a902              ADD      r1,sp,#8              ;615
000452  4620              MOV      r0,r4                 ;615
000454  f7fffffe          BL       OS_FlagBlock
000458  9801              LDR      r0,[sp,#4]            ;616
00045a  f7fffffe          BL       OS_CPU_SR_Restore
00045e  e074              B        |L1.1354|
                  |L1.1120|
000460  8920              LDRH     r0,[r4,#8]            ;621
000462  ea000b07          AND      r11,r0,r7             ;621
000466  f1bb0f00          CMP      r11,#0                ;622
00046a  d011              BEQ      |L1.1168|
00046c  2e01              CMP      r6,#1                 ;623
00046e  d102              BNE      |L1.1142|
000470  ea20000b          BIC      r0,r0,r11             ;624
000474  8120              STRH     r0,[r4,#8]            ;624
                  |L1.1142|
000476  f8da0000          LDR      r0,[r10,#0]           ;626  ; OSTCBCur
00047a  f8a0b02c          STRH     r11,[r0,#0x2c]        ;626
00047e  9801              LDR      r0,[sp,#4]            ;627
000480  f7fffffe          BL       OS_CPU_SR_Restore
000484  f8859000          STRB     r9,[r5,#0]            ;628
000488  b00b              ADD      sp,sp,#0x2c
00048a  4658              MOV      r0,r11                ;629
00048c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1168|
000490  9b0a              LDR      r3,[sp,#0x28]         ;631
000492  9300              STR      r3,[sp,#0]            ;631
000494  4643              MOV      r3,r8                 ;631
000496  463a              MOV      r2,r7                 ;631
000498  a902              ADD      r1,sp,#8              ;631
00049a  4620              MOV      r0,r4                 ;631
00049c  f7fffffe          BL       OS_FlagBlock
0004a0  9801              LDR      r0,[sp,#4]            ;632
0004a2  f7fffffe          BL       OS_CPU_SR_Restore
0004a6  e050              B        |L1.1354|
                  |L1.1192|
0004a8  8920              LDRH     r0,[r4,#8]            ;638
0004aa  ea270b00          BIC      r11,r7,r0             ;638
0004ae  45bb              CMP      r11,r7                ;639
0004b0  d11e              BNE      |L1.1264|
0004b2  2e01              CMP      r6,#1                 ;640
0004b4  d102              BNE      |L1.1212|
0004b6  ea40000b          ORR      r0,r0,r11             ;641
0004ba  8120              STRH     r0,[r4,#8]            ;641
                  |L1.1212|
0004bc  f8da0000          LDR      r0,[r10,#0]           ;643  ; OSTCBCur
0004c0  f8a0b02c          STRH     r11,[r0,#0x2c]        ;643
0004c4  9801              LDR      r0,[sp,#4]            ;644
0004c6  f7fffffe          BL       OS_CPU_SR_Restore
0004ca  f8859000          STRB     r9,[r5,#0]            ;645
0004ce  4658              MOV      r0,r11                ;646
                  |L1.1232|
0004d0  b00b              ADD      sp,sp,#0x2c
0004d2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1238|
0004d6  e017              B        |L1.1288|
                  |L1.1240|
                          DCD      OSIntNesting
                  |L1.1244|
                          DCD      OSFlagFreeList
                  |L1.1248|
                          DCD      OSRdyGrp
                  |L1.1252|
                          DCD      OSRdyTbl
                  |L1.1256|
                          DCD      OSTCBCur
                  |L1.1260|
                          DCD      OSLockNesting
                  |L1.1264|
0004f0  9b0a              LDR      r3,[sp,#0x28]         ;648
0004f2  9300              STR      r3,[sp,#0]            ;648
0004f4  4643              MOV      r3,r8                 ;648
0004f6  463a              MOV      r2,r7                 ;648
0004f8  a902              ADD      r1,sp,#8              ;648
0004fa  4620              MOV      r0,r4                 ;648
0004fc  f7fffffe          BL       OS_FlagBlock
000500  9801              LDR      r0,[sp,#4]            ;649
000502  f7fffffe          BL       OS_CPU_SR_Restore
000506  e020              B        |L1.1354|
                  |L1.1288|
000508  8920              LDRH     r0,[r4,#8]            ;654
00050a  ea270b00          BIC      r11,r7,r0             ;654
00050e  f1bb0f00          CMP      r11,#0                ;655
000512  d00f              BEQ      |L1.1332|
000514  2e01              CMP      r6,#1                 ;656
000516  d102              BNE      |L1.1310|
000518  ea40000b          ORR      r0,r0,r11             ;657
00051c  8120              STRH     r0,[r4,#8]            ;657
                  |L1.1310|
00051e  f8da0000          LDR      r0,[r10,#0]           ;659  ; OSTCBCur
000522  f8a0b02c          STRH     r11,[r0,#0x2c]        ;659
000526  9801              LDR      r0,[sp,#4]            ;660
000528  f7fffffe          BL       OS_CPU_SR_Restore
00052c  f8859000          STRB     r9,[r5,#0]            ;661
000530  4658              MOV      r0,r11                ;662
000532  e7cd              B        |L1.1232|
                  |L1.1332|
000534  9b0a              LDR      r3,[sp,#0x28]         ;664
000536  9300              STR      r3,[sp,#0]            ;664
000538  4643              MOV      r3,r8                 ;664
00053a  463a              MOV      r2,r7                 ;664
00053c  a902              ADD      r1,sp,#8              ;664
00053e  4620              MOV      r0,r4                 ;664
000540  f7fffffe          BL       OS_FlagBlock
000544  9801              LDR      r0,[sp,#4]            ;665
000546  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.1354|
00054a  f7fffffe          BL       OS_Sched
00054e  f7fffffe          BL       OS_CPU_SR_Save
000552  4607              MOV      r7,r0                 ;678
000554  f8da0000          LDR      r0,[r10,#0]           ;679  ; OSTCBCur
000558  f890b031          LDRB     r11,[r0,#0x31]        ;679
00055c  f1bb0f00          CMP      r11,#0                ;679
000560  d015              BEQ      |L1.1422|
000562  f8809031          STRB     r9,[r0,#0x31]         ;681
000566  a802              ADD      r0,sp,#8              ;682
000568  f7fffffe          BL       OS_FlagUnlink
00056c  f8da0000          LDR      r0,[r10,#0]           ;683  ; OSTCBCur
000570  f8809030          STRB     r9,[r0,#0x30]         ;683
000574  4638              MOV      r0,r7                 ;684
000576  f7fffffe          BL       OS_CPU_SR_Restore
00057a  2000              MOVS     r0,#0                 ;685
00057c  f1bb0f02          CMP      r11,#2                ;686
000580  d002              BEQ      |L1.1416|
000582  210a              MOVS     r1,#0xa               ;693
000584  7029              STRB     r1,[r5,#0]            ;693
000586  e7a3              B        |L1.1232|
                  |L1.1416|
000588  210e              MOVS     r1,#0xe               ;688
00058a  7029              STRB     r1,[r5,#0]            ;688
00058c  e7a0              B        |L1.1232|
                  |L1.1422|
00058e  f8b0a02c          LDRH     r10,[r0,#0x2c]        ;698
000592  2e01              CMP      r6,#1                 ;699
000594  d11b              BNE      |L1.1486|
000596  f1b80f00          CMP      r8,#0                 ;700
00059a  d014              BEQ      |L1.1478|
00059c  f1b80f01          CMP      r8,#1                 ;700
0005a0  d011              BEQ      |L1.1478|
0005a2  f1b80f02          CMP      r8,#2                 ;700
0005a6  d009              BEQ      |L1.1468|
0005a8  f1b80f03          CMP      r8,#3                 ;700
0005ac  d006              BEQ      |L1.1468|
0005ae  4638              MOV      r0,r7                 ;713
0005b0  f7fffffe          BL       OS_CPU_SR_Restore
0005b4  206f              MOVS     r0,#0x6f              ;714
0005b6  7028              STRB     r0,[r5,#0]            ;714
0005b8  2000              MOVS     r0,#0                 ;715
0005ba  e789              B        |L1.1232|
                  |L1.1468|
0005bc  8920              LDRH     r0,[r4,#8]            ;703
0005be  ea20000a          BIC      r0,r0,r10             ;703
0005c2  8120              STRH     r0,[r4,#8]            ;703
0005c4  e003              B        |L1.1486|
                  |L1.1478|
0005c6  8920              LDRH     r0,[r4,#8]            ;709
0005c8  ea40000a          ORR      r0,r0,r10             ;709
0005cc  8120              STRH     r0,[r4,#8]            ;709
                  |L1.1486|
0005ce  4638              MOV      r0,r7                 ;718
0005d0  f7fffffe          BL       OS_CPU_SR_Restore
0005d4  f8859000          STRB     r9,[r5,#0]            ;719
0005d8  4650              MOV      r0,r10                ;720
0005da  e779              B        |L1.1232|
;;;722    /*$PAGE*/
                          ENDP

                  OSFlagPendGetFlagsRdy PROC
;;;737    
;;;738    OS_FLAGS  OSFlagPendGetFlagsRdy (void)
0005dc  b510              PUSH     {r4,lr}
;;;739    {
;;;740        OS_FLAGS      flags;
;;;741    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;742        OS_CPU_SR     cpu_sr = 0;
;;;743    #endif
;;;744    
;;;745    
;;;746    
;;;747        OS_ENTER_CRITICAL();
0005de  f7fffffe          BL       OS_CPU_SR_Save
;;;748        flags = OSTCBCur->OSTCBFlagsRdy;
0005e2  495a              LDR      r1,|L1.1868|
0005e4  6809              LDR      r1,[r1,#0]  ; OSTCBCur
0005e6  8d8c              LDRH     r4,[r1,#0x2c]
;;;749        OS_EXIT_CRITICAL();
0005e8  f7fffffe          BL       OS_CPU_SR_Restore
;;;750        return (flags);
0005ec  4620              MOV      r0,r4
;;;751    }
0005ee  bd10              POP      {r4,pc}
;;;752    
                          ENDP

                  OSFlagPost PROC
;;;794    */
;;;795    OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
0005f0  e92d41f0          PUSH     {r4-r8,lr}
;;;796    {
0005f4  4605              MOV      r5,r0
0005f6  460e              MOV      r6,r1
0005f8  4614              MOV      r4,r2
0005fa  461f              MOV      r7,r3
;;;797        OS_FLAG_NODE *pnode;
;;;798        BOOLEAN       sched;
;;;799        OS_FLAGS      flags_cur;
;;;800        OS_FLAGS      flags_rdy;
;;;801        BOOLEAN       rdy;
;;;802    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;803        OS_CPU_SR     cpu_sr = 0;
;;;804    #endif
;;;805    
;;;806    
;;;807    
;;;808    #if OS_ARG_CHK_EN > 0
;;;809        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
;;;810            return ((OS_FLAGS)0);
;;;811        }
;;;812        if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
;;;813            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;814            return ((OS_FLAGS)0);
;;;815        }
;;;816    #endif
;;;817        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
0005fc  7828              LDRB     r0,[r5,#0]
0005fe  2805              CMP      r0,#5
000600  d004              BEQ      |L1.1548|
;;;818            *perr = OS_ERR_EVENT_TYPE;
000602  2001              MOVS     r0,#1
000604  7038              STRB     r0,[r7,#0]
;;;819            return ((OS_FLAGS)0);
000606  2000              MOVS     r0,#0
;;;820        }
;;;821    /*$PAGE*/
;;;822        OS_ENTER_CRITICAL();
;;;823        switch (opt) {
;;;824            case OS_FLAG_CLR:
;;;825                 pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
;;;826                 break;
;;;827    
;;;828            case OS_FLAG_SET:
;;;829                 pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
;;;830                 break;
;;;831    
;;;832            default:
;;;833                 OS_EXIT_CRITICAL();                     /* INVALID option                                 */
;;;834                 *perr = OS_ERR_FLAG_INVALID_OPT;
;;;835                 return ((OS_FLAGS)0);
;;;836        }
;;;837        sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
;;;838        pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;839        while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
;;;840            switch (pnode->OSFlagNodeWaitType) {
;;;841                case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
;;;842                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;843                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;844                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;845                         if (rdy == OS_TRUE) {
;;;846                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;847                         }
;;;848                     }
;;;849                     break;
;;;850    
;;;851                case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
;;;852                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;853                     if (flags_rdy != (OS_FLAGS)0) {
;;;854                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;855                         if (rdy == OS_TRUE) {
;;;856                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;857                         }
;;;858                     }
;;;859                     break;
;;;860    
;;;861    #if OS_FLAG_WAIT_CLR_EN > 0
;;;862                case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
;;;863                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;864                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;865                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;866                         if (rdy == OS_TRUE) {
;;;867                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;868                         }
;;;869                     }
;;;870                     break;
;;;871    
;;;872                case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
;;;873                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;874                     if (flags_rdy != (OS_FLAGS)0) {
;;;875                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;876                         if (rdy == OS_TRUE) {
;;;877                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;878                         }
;;;879                     }
;;;880                     break;
;;;881    #endif
;;;882                default:
;;;883                     OS_EXIT_CRITICAL();
;;;884                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;885                     return ((OS_FLAGS)0);
;;;886            }
;;;887            pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
;;;888        }
;;;889        OS_EXIT_CRITICAL();
;;;890        if (sched == OS_TRUE) {
;;;891            OS_Sched();
;;;892        }
;;;893        OS_ENTER_CRITICAL();
;;;894        flags_cur = pgrp->OSFlagFlags;
;;;895        OS_EXIT_CRITICAL();
;;;896        *perr     = OS_ERR_NONE;
;;;897        return (flags_cur);
;;;898    }
000608  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1548|
00060c  f7fffffe          BL       OS_CPU_SR_Save
000610  4680              MOV      r8,r0                 ;822
000612  b14c              CBZ      r4,|L1.1576|
000614  2c01              CMP      r4,#1                 ;823
000616  d00b              BEQ      |L1.1584|
000618  4640              MOV      r0,r8                 ;833
00061a  f7fffffe          BL       OS_CPU_SR_Restore
00061e  2071              MOVS     r0,#0x71              ;834
000620  7038              STRB     r0,[r7,#0]            ;834
000622  2000              MOVS     r0,#0                 ;835
000624  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1576|
000628  8928              LDRH     r0,[r5,#8]            ;825
00062a  43b0              BICS     r0,r0,r6              ;825
00062c  8128              STRH     r0,[r5,#8]            ;825
00062e  e002              B        |L1.1590|
                  |L1.1584|
000630  8928              LDRH     r0,[r5,#8]            ;829
000632  4330              ORRS     r0,r0,r6              ;829
000634  8128              STRH     r0,[r5,#8]            ;829
                  |L1.1590|
000636  2600              MOVS     r6,#0                 ;837
000638  686c              LDR      r4,[r5,#4]            ;838
00063a  b39c              CBZ      r4,|L1.1700|
                  |L1.1596|
00063c  7ca0              LDRB     r0,[r4,#0x12]         ;840
00063e  b320              CBZ      r0,|L1.1674|
000640  2801              CMP      r0,#1                 ;840
000642  d030              BEQ      |L1.1702|
000644  2802              CMP      r0,#2                 ;840
000646  d009              BEQ      |L1.1628|
000648  2803              CMP      r0,#3                 ;840
00064a  d013              BEQ      |L1.1652|
00064c  4640              MOV      r0,r8                 ;883
00064e  f7fffffe          BL       OS_CPU_SR_Restore
000652  206f              MOVS     r0,#0x6f              ;884
000654  7038              STRB     r0,[r7,#0]            ;884
000656  2000              MOVS     r0,#0                 ;885
000658  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1628|
00065c  8929              LDRH     r1,[r5,#8]            ;842
00065e  8a20              LDRH     r0,[r4,#0x10]         ;842
000660  4001              ANDS     r1,r1,r0              ;842
000662  4288              CMP      r0,r1                 ;843
000664  d12a              BNE      |L1.1724|
000666  4620              MOV      r0,r4                 ;844
000668  f7fffffe          BL       OS_FlagTaskRdy
00066c  2801              CMP      r0,#1                 ;845
00066e  d125              BNE      |L1.1724|
000670  2601              MOVS     r6,#1                 ;846
000672  e023              B        |L1.1724|
                  |L1.1652|
000674  8928              LDRH     r0,[r5,#8]            ;852
000676  8a21              LDRH     r1,[r4,#0x10]         ;852
000678  4001              ANDS     r1,r1,r0              ;852
00067a  b1f9              CBZ      r1,|L1.1724|
00067c  4620              MOV      r0,r4                 ;854
00067e  f7fffffe          BL       OS_FlagTaskRdy
000682  2801              CMP      r0,#1                 ;855
000684  d11a              BNE      |L1.1724|
000686  2601              MOVS     r6,#1                 ;856
000688  e018              B        |L1.1724|
                  |L1.1674|
00068a  8a20              LDRH     r0,[r4,#0x10]         ;863
00068c  8929              LDRH     r1,[r5,#8]            ;863
00068e  ea200101          BIC      r1,r0,r1              ;863
000692  4288              CMP      r0,r1                 ;864
000694  d112              BNE      |L1.1724|
000696  4620              MOV      r0,r4                 ;865
000698  f7fffffe          BL       OS_FlagTaskRdy
00069c  2801              CMP      r0,#1                 ;866
00069e  d10d              BNE      |L1.1724|
0006a0  2601              MOVS     r6,#1                 ;867
0006a2  e00b              B        |L1.1724|
                  |L1.1700|
0006a4  e00d              B        |L1.1730|
                  |L1.1702|
0006a6  8a20              LDRH     r0,[r4,#0x10]         ;873
0006a8  8929              LDRH     r1,[r5,#8]            ;873
0006aa  ea200101          BIC      r1,r0,r1              ;873
0006ae  b129              CBZ      r1,|L1.1724|
0006b0  4620              MOV      r0,r4                 ;875
0006b2  f7fffffe          BL       OS_FlagTaskRdy
0006b6  2801              CMP      r0,#1                 ;876
0006b8  d100              BNE      |L1.1724|
0006ba  2601              MOVS     r6,#1                 ;877
                  |L1.1724|
0006bc  6824              LDR      r4,[r4,#0]            ;887
0006be  2c00              CMP      r4,#0                 ;839
0006c0  d1bc              BNE      |L1.1596|
                  |L1.1730|
0006c2  4640              MOV      r0,r8                 ;889
0006c4  f7fffffe          BL       OS_CPU_SR_Restore
0006c8  2e01              CMP      r6,#1                 ;890
0006ca  d101              BNE      |L1.1744|
0006cc  f7fffffe          BL       OS_Sched
                  |L1.1744|
0006d0  f7fffffe          BL       OS_CPU_SR_Save
0006d4  892c              LDRH     r4,[r5,#8]            ;894
0006d6  f7fffffe          BL       OS_CPU_SR_Restore
0006da  2000              MOVS     r0,#0                 ;896
0006dc  7038              STRB     r0,[r7,#0]            ;896
0006de  4620              MOV      r0,r4                 ;897
0006e0  e8bd81f0          POP      {r4-r8,pc}
;;;899    /*$PAGE*/
                          ENDP

                  OSFlagQuery PROC
;;;919    #if OS_FLAG_QUERY_EN > 0
;;;920    OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
0006e4  b570              PUSH     {r4-r6,lr}
;;;921    {
0006e6  4605              MOV      r5,r0
0006e8  460c              MOV      r4,r1
;;;922        OS_FLAGS   flags;
;;;923    #if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
;;;924        OS_CPU_SR  cpu_sr = 0;
;;;925    #endif
;;;926    
;;;927    
;;;928    
;;;929    #if OS_ARG_CHK_EN > 0
;;;930        if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
;;;931            return ((OS_FLAGS)0);
;;;932        }
;;;933        if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
;;;934            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;935            return ((OS_FLAGS)0);
;;;936        }
;;;937    #endif
;;;938        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
0006ea  7828              LDRB     r0,[r5,#0]
0006ec  2805              CMP      r0,#5
0006ee  d003              BEQ      |L1.1784|
;;;939            *perr = OS_ERR_EVENT_TYPE;
0006f0  2001              MOVS     r0,#1
0006f2  7020              STRB     r0,[r4,#0]
;;;940            return ((OS_FLAGS)0);
0006f4  2000              MOVS     r0,#0
;;;941        }
;;;942        OS_ENTER_CRITICAL();
;;;943        flags = pgrp->OSFlagFlags;
;;;944        OS_EXIT_CRITICAL();
;;;945        *perr = OS_ERR_NONE;
;;;946        return (flags);                               /* Return the current value of the event flags       */
;;;947    }
0006f6  bd70              POP      {r4-r6,pc}
                  |L1.1784|
0006f8  f7fffffe          BL       OS_CPU_SR_Save
0006fc  892d              LDRH     r5,[r5,#8]            ;943
0006fe  f7fffffe          BL       OS_CPU_SR_Restore
000702  2000              MOVS     r0,#0                 ;945
000704  7020              STRB     r0,[r4,#0]            ;945
000706  4628              MOV      r0,r5                 ;946
000708  bd70              POP      {r4-r6,pc}
;;;948    #endif
                          ENDP

                  OS_FlagInit PROC
;;;1034   
;;;1035   void  OS_FlagInit (void)
00070a  b510              PUSH     {r4,lr}
;;;1036   {
;;;1037   #if OS_MAX_FLAGS == 1
;;;1038       OSFlagFreeList                 = (OS_FLAG_GRP *)&OSFlagTbl[0];  /* Only ONE event flag group!      */
;;;1039       OSFlagFreeList->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;1040       OSFlagFreeList->OSFlagWaitList = (void *)0;
;;;1041       OSFlagFreeList->OSFlagFlags    = (OS_FLAGS)0;
;;;1042   #if OS_FLAG_NAME_SIZE > 1
;;;1043       OSFlagFreeList->OSFlagName[0]  = '?';
;;;1044       OSFlagFreeList->OSFlagName[1]  = OS_ASCII_NUL;
;;;1045   #endif
;;;1046   #endif
;;;1047   
;;;1048   #if OS_MAX_FLAGS >= 2
;;;1049       INT16U       i;
;;;1050       OS_FLAG_GRP *pgrp1;
;;;1051       OS_FLAG_GRP *pgrp2;
;;;1052   
;;;1053   
;;;1054       OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
00070c  218c              MOVS     r1,#0x8c
00070e  4810              LDR      r0,|L1.1872|
000710  f7fffffe          BL       OS_MemClr
;;;1055       pgrp1 = &OSFlagTbl[0];
000714  480e              LDR      r0,|L1.1872|
;;;1056       pgrp2 = &OSFlagTbl[1];
000716  4604              MOV      r4,r0
000718  f104021c          ADD      r2,r4,#0x1c
;;;1057       for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
00071c  2100              MOVS     r1,#0
00071e  2300              MOVS     r3,#0
;;;1058           pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;1059           pgrp1->OSFlagWaitList = (void *)pgrp2;
;;;1060   #if OS_FLAG_NAME_SIZE > 1
;;;1061           pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
000720  f04f0c3f          MOV      r12,#0x3f
                  |L1.1828|
000724  7003              STRB     r3,[r0,#0]            ;1058
000726  6042              STR      r2,[r0,#4]            ;1059
000728  f880c00a          STRB     r12,[r0,#0xa]
;;;1062           pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
00072c  72c3              STRB     r3,[r0,#0xb]
;;;1063   #endif
;;;1064           pgrp1++;
00072e  301c              ADDS     r0,r0,#0x1c
;;;1065           pgrp2++;
000730  321c              ADDS     r2,r2,#0x1c
000732  1c49              ADDS     r1,r1,#1              ;1057
000734  b289              UXTH     r1,r1                 ;1057
000736  2904              CMP      r1,#4                 ;1057
000738  d3f4              BCC      |L1.1828|
;;;1066       }
;;;1067       pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
00073a  7003              STRB     r3,[r0,#0]
;;;1068       pgrp1->OSFlagWaitList = (void *)0;
00073c  6043              STR      r3,[r0,#4]
;;;1069   #if OS_FLAG_NAME_SIZE > 1
;;;1070       pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
00073e  f880c00a          STRB     r12,[r0,#0xa]
;;;1071       pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
000742  72c3              STRB     r3,[r0,#0xb]
;;;1072   #endif
;;;1073       OSFlagFreeList        = &OSFlagTbl[0];
000744  4803              LDR      r0,|L1.1876|
000746  6004              STR      r4,[r0,#0]  ; OSFlagFreeList
;;;1074   #endif
;;;1075   }
000748  bd10              POP      {r4,pc}
;;;1076   
                          ENDP

00074a  0000              DCW      0x0000
                  |L1.1868|
                          DCD      OSTCBCur
                  |L1.1872|
                          DCD      OSFlagTbl
                  |L1.1876|
                          DCD      OSFlagFreeList
