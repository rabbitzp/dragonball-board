; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\app.o --depend=.\rvmdk\app.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\app.crf app.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delay_ms PROC
;;;144    #if 1
;;;145    void delay_ms(u16 ms)
000000  4b2c              LDR      r3,|L1.180|
;;;146    {
;;;147    	vu32 start_time = OSTime;
000002  681a              LDR      r2,[r3,#0]  ; OSTime
;;;148    	vu32 tick = 0;
000004  2100              MOVS     r1,#0
;;;149    
;;;150    	while (tick < ms+1)
000006  f1100c01          ADDS     r12,r0,#1
00000a  d008              BEQ      |L1.30|
00000c  1c40              ADDS     r0,r0,#1
                  |L1.14|
;;;151    	{
;;;152    		if (start_time  != OSTime)
00000e  f8d3c000          LDR      r12,[r3,#0]  ; OSTime
000012  4562              CMP      r2,r12
000014  d001              BEQ      |L1.26|
;;;153    		{
;;;154    			tick++;
000016  1c49              ADDS     r1,r1,#1
;;;155    			start_time = OSTime;
000018  681a              LDR      r2,[r3,#0]  ; OSTime
                  |L1.26|
00001a  4281              CMP      r1,r0                 ;150
00001c  d3f7              BCC      |L1.14|
                  |L1.30|
;;;156    		}
;;;157    	}
;;;158    
;;;159    	return;
;;;160    }
00001e  4770              BX       lr
;;;161    #endif
                          ENDP

                  App_TaskUserIF PROC
;;;463    
;;;464    static  void  App_TaskUserIF (void *p_arg)
000020  f7ffbffe          B.W      MainTask
;;;465    {
;;;466        (void)p_arg;
;;;467    
;;;468        //while(1)
;;;469        {
;;;470            MainTask();
;;;471        }
;;;472    }
;;;473    
                          ENDP

                  App_TaskStart PROC
;;;234    
;;;235    static  void  App_TaskStart (void *p_arg)
000024  b510              PUSH     {r4,lr}
;;;236    {
000026  b086              SUB      sp,sp,#0x18
;;;237        CPU_INT32U  i;
;;;238        CPU_INT32U  j;
;;;239    
;;;240    
;;;241        (void)p_arg;
;;;242    #if 1
;;;243    	// jiaozi
;;;244    	    BSP_Init(); 						/* Initialize BSP functions.				*/
000028  f7fffffe          BL       BSP_Init
;;;245    #endif
;;;246    
;;;247        OS_CPU_SysTickInit();                                       /* Initialize the SysTick.                              */
00002c  f7fffffe          BL       OS_CPU_SysTickInit
;;;248    #if 1
;;;249        // jiaozi
;;;250    	BSP_Init_post();						    /* Initialize BSP functions.			    */
000030  f7fffffe          BL       BSP_Init_post
;;;251    #endif
;;;252    
;;;253    #if (OS_TASK_STAT_EN > 0)
;;;254        OSStatInit();                                               /* Determine CPU capacity.                              */
000034  f7fffffe          BL       OSStatInit
;;;255    #endif
;;;256    #if 1
;;;257    // jiaozi app input 150114
;;;258    {
;;;259        OS_CPU_SR cpu_sr=0;
;;;260    
;;;261        OS_ENTER_CRITICAL();  //进入临界区，无法被中断打断
000038  f7fffffe          BL       OS_CPU_SR_Save
;;;262    
;;;263        printf("\r\n start task\r\n");
00003c  a01e              ADR      r0,|L1.184|
00003e  f7fffffe          BL       __2printf
;;;264       #if 1
;;;265        cpu_sr = OSTaskCreateExt((void (*)(void *)) App_TaskUserIF,
000042  4821              LDR      r0,|L1.200|
000044  ac01              ADD      r4,sp,#4
000046  2303              MOVS     r3,#3
000048  2200              MOVS     r2,#0
00004a  f44f7100          MOV      r1,#0x200
00004e  c40f              STM      r4!,{r0-r3}
000050  230c              MOVS     r3,#0xc
000052  f20072fc          ADD      r2,r0,#0x7fc
000056  2100              MOVS     r1,#0
000058  481c              LDR      r0,|L1.204|
00005a  9300              STR      r3,[sp,#0]
00005c  f7fffffe          BL       OSTaskCreateExt
000060  4604              MOV      r4,r0
;;;266                                 (void          * ) 0,
;;;267                                 (OS_STK        * )&App_TaskUserIFStk[APP_TASK_USER_IF_STK_SIZE - 1],
;;;268                                 (INT8U           ) APP_TASK_USER_IF_PRIO,
;;;269                                 (INT16U          ) APP_TASK_USER_IF_PRIO,
;;;270                                 (OS_STK        * )&App_TaskUserIFStk[0],
;;;271                                 (INT32U          ) APP_TASK_USER_IF_STK_SIZE,
;;;272                                 (void          * ) 0,
;;;273                                 (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;274       #endif
;;;275        /* start user core */
;;;276        UCore_Start();
000062  f7fffffe          BL       UCore_Start
;;;277        
;;;278        OSTaskSuspend(Start_Task_PRIO);  //挂起起始任务
000066  200a              MOVS     r0,#0xa
000068  f7fffffe          BL       OSTaskSuspend
;;;279        OS_EXIT_CRITICAL();  //退出临界区，可以被中断打断    
00006c  b006              ADD      sp,sp,#0x18
00006e  4620              MOV      r0,r4
000070  e8bd4010          POP      {r4,lr}
000074  f7ffbffe          B.W      OS_CPU_SR_Restore
;;;280    }
;;;281    #else
;;;282    #if ((APP_PROBE_COM_EN == DEF_ENABLED) || \
;;;283         (APP_OS_PROBE_EN  == DEF_ENABLED))
;;;284        App_InitProbe();
;;;285    #endif
;;;286    
;;;287        App_EventCreate();                                          /* Create application events.                           */
;;;288        App_TaskCreate();                                           /* Create application tasks.                            */
;;;289    
;;;290        while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
;;;291            for (j = 0; j < 4; j++) {
;;;292                for (i = 1; i <= 4; i++) {
;;;293                    BSP_LED_On(i);
;;;294                    OSTimeDlyHMSM(0, 0, 0, 50);
;;;295                    BSP_LED_Off(i);
;;;296                    OSTimeDlyHMSM(0, 0, 0, 50);
;;;297                }
;;;298    
;;;299                for (i = 3; i >= 2; i--) {
;;;300                    BSP_LED_On(i);
;;;301                    OSTimeDlyHMSM(0, 0, 0, 50);
;;;302                    BSP_LED_Off(i);
;;;303                    OSTimeDlyHMSM(0, 0, 0, 50);
;;;304                }
;;;305            }
;;;306    
;;;307            for (i = 0; i < 4; i++) {
;;;308                BSP_LED_On(0);
;;;309                OSTimeDlyHMSM(0, 0, 0, 200);
;;;310                BSP_LED_Off(0);
;;;311                OSTimeDlyHMSM(0, 0, 0, 200);
;;;312            }
;;;313        }
;;;314    #endif
;;;315    }
;;;316    
                          ENDP

                  main PROC
;;;188    
;;;189    int  main (void)
000078  b508              PUSH     {r3,lr}
;;;190    {
;;;191        CPU_INT08U  os_err;
;;;192    
;;;193    
;;;194        BSP_IntDisAll();                                            /* Disable all ints until we are ready to accept them.  */
00007a  f7fffffe          BL       BSP_IntDisAll
;;;195    
;;;196        OSInit();                                                   /* Initialize "uC/OS-II, The Real-Time Kernel".         */
00007e  f7fffffe          BL       OSInit
;;;197    #if 1
;;;198    	OSTaskCreate(App_TaskStart, (void *)0, (OS_STK *)&Start_Task_STK[Start_STK_Size-1], Start_Task_PRIO);  //创建起始任务
000082  230a              MOVS     r3,#0xa
000084  4a12              LDR      r2,|L1.208|
000086  2100              MOVS     r1,#0
000088  4812              LDR      r0,|L1.212|
00008a  f7fffffe          BL       OSTaskCreate
;;;199    #else
;;;200        os_err = OSTaskCreateExt((void (*)(void *)) App_TaskStart,  /* Create the start task.                               */
;;;201                                 (void          * ) 0,
;;;202                                 (OS_STK        * )&App_TaskStartStk[APP_TASK_START_STK_SIZE - 1],
;;;203                                 (INT8U           ) APP_TASK_START_PRIO,
;;;204                                 (INT16U          ) APP_TASK_START_PRIO,
;;;205                                 (OS_STK        * )&App_TaskStartStk[0],
;;;206                                 (INT32U          ) APP_TASK_START_STK_SIZE,
;;;207                                 (void          * )0,
;;;208                                 (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;209    #endif
;;;210    #if (OS_TASK_NAME_SIZE >= 11)
;;;211        OSTaskNameSet(APP_TASK_START_PRIO, (CPU_INT08U *)"Start Task", &os_err);
00008e  466a              MOV      r2,sp
000090  a111              ADR      r1,|L1.216|
000092  2003              MOVS     r0,#3
000094  f7fffffe          BL       OSTaskNameSet
;;;212    #endif
;;;213    
;;;214        OSStart();                                                  /* Start multitasking (i.e. give control to uC/OS-II).  */
000098  f7fffffe          BL       OSStart
;;;215    
;;;216        return (0);
00009c  2000              MOVS     r0,#0
;;;217    }
00009e  bd08              POP      {r3,pc}
;;;218    
                          ENDP

                  App_TaskCreateHook PROC
;;;860    
;;;861    void  App_TaskCreateHook (OS_TCB *ptcb)
0000a0  f7ffbffe          B.W      OSProbe_TaskCreateHook
;;;862    {
;;;863    #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
;;;864         (OS_PROBE_HOOKS_EN == DEF_ENABLED))
;;;865        OSProbe_TaskCreateHook(ptcb);
;;;866    #endif
;;;867    }
;;;868    
                          ENDP

                  App_TaskDelHook PROC
;;;880    
;;;881    void  App_TaskDelHook (OS_TCB *ptcb)
0000a4  4770              BX       lr
;;;882    {
;;;883        (void)ptcb;
;;;884    }
;;;885    
                          ENDP

                  App_TaskIdleHook PROC
;;;899    #if OS_VERSION >= 251
;;;900    void  App_TaskIdleHook (void)
0000a6  4770              BX       lr
;;;901    {
;;;902    }
;;;903    #endif
                          ENDP

                  App_TaskStatHook PROC
;;;915    
;;;916    void  App_TaskStatHook (void)
0000a8  4770              BX       lr
;;;917    {
;;;918    }
;;;919    
                          ENDP

                  App_TaskSwHook PROC
;;;937    #if OS_TASK_SW_HOOK_EN > 0
;;;938    void  App_TaskSwHook (void)
0000aa  f7ffbffe          B.W      OSProbe_TaskSwHook
;;;939    {
;;;940    #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
;;;941         (OS_PROBE_HOOKS_EN == DEF_ENABLED))
;;;942        OSProbe_TaskSwHook();
;;;943    #endif
;;;944    }
;;;945    #endif
                          ENDP

                  App_TCBInitHook PROC
;;;960    #if OS_VERSION >= 204
;;;961    void  App_TCBInitHook (OS_TCB *ptcb)
0000ae  4770              BX       lr
;;;962    {
;;;963        (void)ptcb;
;;;964    }
;;;965    #endif
                          ENDP

                  App_TimeTickHook PROC
;;;979    #if OS_TIME_TICK_HOOK_EN > 0
;;;980    void  App_TimeTickHook (void)
0000b0  f7ffbffe          B.W      OSProbe_TickHook
;;;981    {
;;;982    #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
;;;983         (OS_PROBE_HOOKS_EN == DEF_ENABLED))
;;;984        OSProbe_TickHook();
;;;985    #endif
;;;986    }
;;;987    #endif
                          ENDP

                  |L1.180|
                          DCD      OSTime
                  |L1.184|
0000b8  0d0a2073          DCB      "\r\n start task\r\n",0
0000bc  74617274
0000c0  20746173
0000c4  6b0d0a00
                  |L1.200|
                          DCD      ||.bss||
                  |L1.204|
                          DCD      App_TaskUserIF
                  |L1.208|
                          DCD      ||.bss||+0x8fc
                  |L1.212|
                          DCD      App_TaskStart
                  |L1.216|
0000d8  53746172          DCB      "Start Task",0
0000dc  74205461
0000e0  736b00  
0000e3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=6

                  App_TaskUserIFStk
                          %        2048
                  Start_Task_STK
                          %        256

                  __ARM_use_no_argv EQU 0
