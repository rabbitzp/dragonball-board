; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guipolye.o --depend=.\rvmdk\guipolye.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guipolye.crf ..\..\..\..\..\uCGUI\GUI\Core\GUIPolyE.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _fround PROC
;;;44     */
;;;45     static int _fround(float f) {
000000  b510              PUSH     {r4,lr}
;;;46       if (f>0)
000002  4604              MOV      r4,r0
;;;47         return f+0.5;
000004  f7fffffe          BL       __aeabi_f2d
000008  4b70              LDR      r3,|L1.460|
00000a  f5b40f00          CMP      r4,#0x800000          ;46
00000e  db06              BLT      |L1.30|
000010  2200              MOVS     r2,#0
000012  f7fffffe          BL       __aeabi_dadd
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      __aeabi_d2iz
                  |L1.30|
;;;48       return f-0.5;
00001e  2200              MOVS     r2,#0
000020  f7fffffe          BL       __aeabi_dsub
000024  e8bd4010          POP      {r4,lr}
000028  f7ffbffe          B.W      __aeabi_d2iz
;;;49     }
;;;50     
                          ENDP

                  _Normalize PROC
;;;54     */
;;;55     static void _Normalize(tfPoint* pfPoint) {
00002c  e92d41f0          PUSH     {r4-r8,lr}
000030  4604              MOV      r4,r0
;;;56       float fx = pfPoint->x;
000032  6826              LDR      r6,[r4,#0]
;;;57       float fy = pfPoint->y;
000034  6867              LDR      r7,[r4,#4]
;;;58       float r = sqrt(fx*fx + fy*fy);
000036  4639              MOV      r1,r7
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       __aeabi_fmul
00003e  4605              MOV      r5,r0
000040  4631              MOV      r1,r6
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       __aeabi_fmul
000048  4629              MOV      r1,r5
00004a  f7fffffe          BL       __aeabi_fadd
00004e  f7fffffe          BL       __aeabi_f2d
000052  f7fffffe          BL       sqrt
000056  f7fffffe          BL       __aeabi_d2f
00005a  4605              MOV      r5,r0
;;;59       if (r > 0) {
00005c  f5b50f00          CMP      r5,#0x800000
000060  db09              BLT      |L1.118|
;;;60         pfPoint->x = fx/r;
000062  4629              MOV      r1,r5
000064  4630              MOV      r0,r6
000066  f7fffffe          BL       __aeabi_fdiv
00006a  6020              STR      r0,[r4,#0]
;;;61         pfPoint->y = fy/r;
00006c  4629              MOV      r1,r5
00006e  4638              MOV      r0,r7
000070  f7fffffe          BL       __aeabi_fdiv
000074  6060              STR      r0,[r4,#4]
                  |L1.118|
;;;62       }
;;;63     }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;64     
                          ENDP

                  _ReverseLen PROC
;;;68     */
;;;69     static void _ReverseLen(tfPoint* pfPoint) {
00007a  e92d41f0          PUSH     {r4-r8,lr}
00007e  4604              MOV      r4,r0
;;;70       float fx = pfPoint->x;
000080  6826              LDR      r6,[r4,#0]
;;;71       float fy = pfPoint->y;
000082  6867              LDR      r7,[r4,#4]
;;;72       float r = sqrt(fx*fx/2 + fy*fy/2);
000084  4639              MOV      r1,r7
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       __aeabi_fmul
00008c  f04f31ff          MOV      r1,#0xffffffff
000090  f7fffffe          BL       __ARM_scalbnf
000094  4605              MOV      r5,r0
000096  4631              MOV      r1,r6
000098  4630              MOV      r0,r6
00009a  f7fffffe          BL       __aeabi_fmul
00009e  f04f31ff          MOV      r1,#0xffffffff
0000a2  f7fffffe          BL       __ARM_scalbnf
0000a6  4629              MOV      r1,r5
0000a8  f7fffffe          BL       __aeabi_fadd
0000ac  f7fffffe          BL       __aeabi_f2d
0000b0  f7fffffe          BL       sqrt
0000b4  f7fffffe          BL       __aeabi_d2f
0000b8  4605              MOV      r5,r0
;;;73       if (r > 0) {
0000ba  f5b50f00          CMP      r5,#0x800000
0000be  db0f              BLT      |L1.224|
;;;74         pfPoint->x = fx/r/r;
0000c0  4629              MOV      r1,r5
0000c2  4630              MOV      r0,r6
0000c4  f7fffffe          BL       __aeabi_fdiv
0000c8  4629              MOV      r1,r5
0000ca  f7fffffe          BL       __aeabi_fdiv
0000ce  6020              STR      r0,[r4,#0]
;;;75         pfPoint->y = fy/r/r;
0000d0  4629              MOV      r1,r5
0000d2  4638              MOV      r0,r7
0000d4  f7fffffe          BL       __aeabi_fdiv
0000d8  4629              MOV      r1,r5
0000da  f7fffffe          BL       __aeabi_fdiv
0000de  6060              STR      r0,[r4,#4]
                  |L1.224|
;;;76       }
;;;77     }
0000e0  e8bd81f0          POP      {r4-r8,pc}
;;;78     
                          ENDP

                  _GetVect PROC
;;;82     */
;;;83     static void _GetVect(tfPoint* pfPoint, const GUI_POINT* pSrc, int NumPoints, int Index) {
0000e4  e92d41f0          PUSH     {r4-r8,lr}
0000e8  4607              MOV      r7,r0
0000ea  460c              MOV      r4,r1
;;;84       int Off0 = (Index + NumPoints-1) % NumPoints;
0000ec  1898              ADDS     r0,r3,r2
0000ee  1e40              SUBS     r0,r0,#1
0000f0  fb90f1f2          SDIV     r1,r0,r2
0000f4  fb020511          MLS      r5,r2,r1,r0
;;;85       int Off1 = Index % NumPoints;
0000f8  fb93f0f2          SDIV     r0,r3,r2
0000fc  fb023610          MLS      r6,r2,r0,r3
;;;86       pfPoint->x = pSrc[Off1].x - pSrc[Off0].x; 
000100  f9341025          LDRSH    r1,[r4,r5,LSL #2]
000104  f9340026          LDRSH    r0,[r4,r6,LSL #2]
000108  1a40              SUBS     r0,r0,r1
00010a  f7fffffe          BL       __aeabi_i2f
00010e  6038              STR      r0,[r7,#0]
;;;87       pfPoint->y = pSrc[Off1].y - pSrc[Off0].y; 
000110  eb040086          ADD      r0,r4,r6,LSL #2
000114  eb040185          ADD      r1,r4,r5,LSL #2
000118  f9b00002          LDRSH    r0,[r0,#2]
00011c  f9b11002          LDRSH    r1,[r1,#2]
000120  1a40              SUBS     r0,r0,r1
000122  f7fffffe          BL       __aeabi_i2f
000126  6078              STR      r0,[r7,#4]
;;;88     }
000128  e8bd81f0          POP      {r4-r8,pc}
;;;89     
                          ENDP

                  GUI_EnlargePolygon PROC
;;;126    
;;;127    void GUI_EnlargePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Len) {
00012c  e92d47f0          PUSH     {r4-r10,lr}
000130  b084              SUB      sp,sp,#0x10
000132  4605              MOV      r5,r0
000134  460e              MOV      r6,r1
000136  4691              MOV      r9,r2
000138  4618              MOV      r0,r3
;;;128      int j;
;;;129      /* Calc destination points */
;;;130      for (j=0; j<NumPoints; j++) {
00013a  2400              MOVS     r4,#0
00013c  f1b90f00          CMP      r9,#0
000140  dd41              BLE      |L1.454|
;;;131        int x, y;
;;;132        tfPoint aVect[2];
000142  46e8              MOV      r8,sp
;;;133        /* Get the vectors */
;;;134        _GetVect(&aVect[0], pSrc, NumPoints, j);
;;;135        _GetVect(&aVect[1], pSrc, NumPoints, j+1);
;;;136        /* Normalize the vectors and add vectors */
;;;137        _Normalize(&aVect[0]);
;;;138        _Normalize(&aVect[1]);
;;;139        aVect[0].x += aVect[1].x;
;;;140        aVect[0].y += aVect[1].y;
;;;141        /* Resulting vector needs to be normalized again */
;;;142        _ReverseLen(&aVect[0]);
;;;143        x =  _fround(aVect[0].y * Len);
000144  f7fffffe          BL       __aeabi_i2f
000148  4682              MOV      r10,r0
                  |L1.330|
00014a  4623              MOV      r3,r4                 ;134
00014c  464a              MOV      r2,r9                 ;134
00014e  4631              MOV      r1,r6                 ;134
000150  4668              MOV      r0,sp                 ;134
000152  f7fffffe          BL       _GetVect
000156  1c63              ADDS     r3,r4,#1              ;135
000158  464a              MOV      r2,r9                 ;135
00015a  4631              MOV      r1,r6                 ;135
00015c  f1080008          ADD      r0,r8,#8              ;135
000160  f7fffffe          BL       _GetVect
000164  4668              MOV      r0,sp                 ;137
000166  f7fffffe          BL       _Normalize
00016a  f1080008          ADD      r0,r8,#8              ;138
00016e  f7fffffe          BL       _Normalize
000172  9902              LDR      r1,[sp,#8]            ;139
000174  9800              LDR      r0,[sp,#0]            ;139
000176  f7fffffe          BL       __aeabi_fadd
00017a  9000              STR      r0,[sp,#0]            ;139
00017c  9903              LDR      r1,[sp,#0xc]          ;140
00017e  9801              LDR      r0,[sp,#4]            ;140
000180  f7fffffe          BL       __aeabi_fadd
000184  9001              STR      r0,[sp,#4]            ;140
000186  4668              MOV      r0,sp                 ;142
000188  f7fffffe          BL       _ReverseLen
00018c  4650              MOV      r0,r10
00018e  9901              LDR      r1,[sp,#4]
000190  f7fffffe          BL       __aeabi_fmul
000194  f7fffffe          BL       _fround
000198  4607              MOV      r7,r0
;;;144        y = -_fround(aVect[0].x * Len);
00019a  4650              MOV      r0,r10
00019c  9900              LDR      r1,[sp,#0]
00019e  f7fffffe          BL       __aeabi_fmul
0001a2  f7fffffe          BL       _fround
0001a6  4240              RSBS     r0,r0,#0
;;;145        /* Store destination */
;;;146        (pDest+j)->x = (pSrc+j)->x + x;
0001a8  f8361024          LDRH     r1,[r6,r4,LSL #2]
0001ac  4439              ADD      r1,r1,r7
0001ae  f8251024          STRH     r1,[r5,r4,LSL #2]
;;;147        (pDest+j)->y = (pSrc+j)->y + y;
0001b2  eb060184          ADD      r1,r6,r4,LSL #2
0001b6  8849              LDRH     r1,[r1,#2]
0001b8  4408              ADD      r0,r0,r1
0001ba  eb050184          ADD      r1,r5,r4,LSL #2
0001be  8048              STRH     r0,[r1,#2]
0001c0  1c64              ADDS     r4,r4,#1              ;130
0001c2  454c              CMP      r4,r9                 ;130
0001c4  dbc1              BLT      |L1.330|
                  |L1.454|
;;;148      }
;;;149    }
0001c6  b004              ADD      sp,sp,#0x10
0001c8  e8bd87f0          POP      {r4-r10,pc}
;;;150    #endif
                          ENDP

                  |L1.460|
                          DCD      0x3fe00000
