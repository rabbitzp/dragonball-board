; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcd_rotateccw.o --depend=.\rvmdk\lcd_rotateccw.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcd_rotateccw.crf ..\..\..\..\..\uCGUI\GUI\Core\LCD_RotateCCW.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4615              MOV      r5,r2
000006  9f0e              LDR      r7,[sp,#0x38]
000008  980f              LDR      r0,[sp,#0x3c]
00000a  461c              MOV      r4,r3
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
00000c  f8b09000          LDRH     r9,[r0,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000010  f8b08002          LDRH     r8,[r0,#2]
;;;41       y -= Diff;
000014  1b0e              SUBS     r6,r1,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000016  f8dfa33c          LDR      r10,|L1.852|
;;;43       case 0:
;;;44         do {
;;;45           LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
00001a  f04f0b80          MOV      r11,#0x80
00001e  f89a0010          LDRB     r0,[r10,#0x10]        ;42  ; GUI_Context
000022  f0100003          ANDS     r0,r0,#3              ;42
000026  d004              BEQ      |L1.50|
000028  2801              CMP      r0,#1                 ;42
00002a  d032              BEQ      |L1.146|
00002c  2802              CMP      r0,#2                 ;42
00002e  d116              BNE      |L1.94|
000030  e018              B        |L1.100|
                  |L1.50|
000032  7828              LDRB     r0,[r5,#0]
000034  fa2bf104          LSR      r1,r11,r4
000038  4208              TST      r0,r1
00003a  d001              BEQ      |L1.64|
00003c  4642              MOV      r2,r8
00003e  e000              B        |L1.66|
                  |L1.64|
000040  464a              MOV      r2,r9
                  |L1.66|
000042  f8da004c          LDR      r0,[r10,#0x4c]  ; GUI_Context
000046  4631              MOV      r1,r6
000048  6a43              LDR      r3,[r0,#0x24]
00004a  9800              LDR      r0,[sp,#0]
00004c  4798              BLX      r3
;;;46           y--;
00004e  1e76              SUBS     r6,r6,#1
;;;47     			if (++Diff == 8) {
000050  1c64              ADDS     r4,r4,#1
000052  2c08              CMP      r4,#8
000054  d101              BNE      |L1.90|
;;;48             Diff = 0;
000056  2400              MOVS     r4,#0
;;;49     				p++;
000058  1c6d              ADDS     r5,r5,#1
                  |L1.90|
;;;50     			}
;;;51     		} while (--xsize);
00005a  1e7f              SUBS     r7,r7,#1
00005c  d1e9              BNE      |L1.50|
                  |L1.94|
;;;52         break;
;;;53       case LCD_DRAWMODE_TRANS:
;;;54         do {
;;;55       		if (*p & (0x80 >> Diff))
;;;56             LCDDEV_L0_SetPixelIndex(x, y, Index1);
;;;57           y--;
;;;58     			if (++Diff == 8) {
;;;59             Diff = 0;
;;;60     				p++;
;;;61     			}
;;;62     		} while (--xsize);
;;;63         break;
;;;64       case LCD_DRAWMODE_XOR:;
;;;65         do {
;;;66       		if (*p & (0x80 >> Diff)) {
;;;67             int Pixel = LCD_L0_GetPixelIndex(x, y);
;;;68             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
;;;69           }
;;;70           y--;
;;;71     			if (++Diff == 8) {
;;;72             Diff = 0;
;;;73     				p++;
;;;74     			}
;;;75     		} while (--xsize);
;;;76         break;
;;;77     	}
;;;78     }
00005e  b004              ADD      sp,sp,#0x10
000060  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.100|
000064  7828              LDRB     r0,[r5,#0]            ;55
000066  fa2bf104          LSR      r1,r11,r4             ;55
00006a  4208              TST      r0,r1                 ;55
00006c  d006              BEQ      |L1.124|
00006e  f8da004c          LDR      r0,[r10,#0x4c]        ;56  ; GUI_Context
000072  4642              MOV      r2,r8                 ;56
000074  4631              MOV      r1,r6                 ;56
000076  6a43              LDR      r3,[r0,#0x24]         ;56
000078  9800              LDR      r0,[sp,#0]            ;56
00007a  4798              BLX      r3                    ;56
                  |L1.124|
00007c  1e76              SUBS     r6,r6,#1              ;57
00007e  1c64              ADDS     r4,r4,#1              ;58
000080  2c08              CMP      r4,#8                 ;58
000082  d101              BNE      |L1.136|
000084  2400              MOVS     r4,#0                 ;59
000086  1c6d              ADDS     r5,r5,#1              ;60
                  |L1.136|
000088  1e7f              SUBS     r7,r7,#1              ;62
00008a  d1eb              BNE      |L1.100|
00008c  b004              ADD      sp,sp,#0x10
00008e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.146|
000092  f64f78ff          MOV      r8,#0xffff            ;68
                  |L1.150|
000096  7828              LDRB     r0,[r5,#0]            ;66
000098  fa2bf104          LSR      r1,r11,r4             ;66
00009c  4208              TST      r0,r1                 ;66
00009e  d00b              BEQ      |L1.184|
0000a0  4631              MOV      r1,r6                 ;67
0000a2  9800              LDR      r0,[sp,#0]            ;67
0000a4  f7fffffe          BL       LCD_L0_GetPixelIndex
0000a8  eba80200          SUB      r2,r8,r0              ;68
0000ac  f8da004c          LDR      r0,[r10,#0x4c]        ;68  ; GUI_Context
0000b0  4631              MOV      r1,r6                 ;68
0000b2  6a43              LDR      r3,[r0,#0x24]         ;68
0000b4  9800              LDR      r0,[sp,#0]            ;68
0000b6  4798              BLX      r3                    ;68
                  |L1.184|
0000b8  1e76              SUBS     r6,r6,#1              ;70
0000ba  1c64              ADDS     r4,r4,#1              ;71
0000bc  2c08              CMP      r4,#8                 ;71
0000be  d101              BNE      |L1.196|
0000c0  2400              MOVS     r4,#0                 ;72
0000c2  1c6d              ADDS     r5,r5,#1              ;73
                  |L1.196|
0000c4  1e7f              SUBS     r7,r7,#1              ;75
0000c6  d1e6              BNE      |L1.150|
0000c8  b004              ADD      sp,sp,#0x10
0000ca  e8bd9ff0          POP      {r4-r12,pc}
;;;79     
                          ENDP

                  _DrawBitmap PROC
;;;86     */
;;;87     static void _DrawBitmap(int x0, int y0,
0000ce  e92d4fff          PUSH     {r0-r11,lr}
;;;88                            int xsize, int ysize,
;;;89                            int BitsPerPixel, 
;;;90                            int BytesPerLine,
;;;91                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;92                            const LCD_PIXELINDEX* pTrans)
;;;93     {
0000d2  b083              SUB      sp,sp,#0xc
0000d4  4681              MOV      r9,r0
0000d6  f8ddb050          LDR      r11,[sp,#0x50]
0000da  f8dda04c          LDR      r10,[sp,#0x4c]
0000de  f8dd8044          LDR      r8,[sp,#0x44]
0000e2  9f10              LDR      r7,[sp,#0x40]
0000e4  9d12              LDR      r5,[sp,#0x48]
0000e6  461e              MOV      r6,r3
;;;94       int i;
;;;95       /* Use _DrawBitLineXBPP */
;;;96       for (i=0; i<ysize; i++) {
0000e8  2400              MOVS     r4,#0
0000ea  2e00              CMP      r6,#0
0000ec  dd10              BLE      |L1.272|
                  |L1.238|
;;;97         switch (BitsPerPixel) {
0000ee  2f01              CMP      r7,#1
0000f0  d10a              BNE      |L1.264|
;;;98         case 1:
;;;99           _DrawBitLine1BPP(x0 + i, y0, pData, Diff, xsize, pTrans);
0000f2  9a05              LDR      r2,[sp,#0x14]
0000f4  9200              STR      r2,[sp,#0]
0000f6  eb090004          ADD      r0,r9,r4
0000fa  4653              MOV      r3,r10
0000fc  f8cdb004          STR      r11,[sp,#4]
000100  462a              MOV      r2,r5
000102  9904              LDR      r1,[sp,#0x10]
000104  f7fffffe          BL       _DrawBitLine1BPP
                  |L1.264|
;;;100          break;
;;;101        }
;;;102        pData += BytesPerLine;
000108  4445              ADD      r5,r5,r8
00010a  1c64              ADDS     r4,r4,#1              ;96
00010c  42b4              CMP      r4,r6                 ;96
00010e  dbee              BLT      |L1.238|
                  |L1.272|
;;;103      }
;;;104    }
000110  b007              ADD      sp,sp,#0x1c
000112  e8bd8ff0          POP      {r4-r11,pc}
;;;105    
                          ENDP

                  _Rect2TextRect PROC
;;;113    */
;;;114    static void _Rect2TextRect(GUI_RECT * pRect) {
000116  8883              LDRH     r3,[r0,#4]
;;;115      int x1, y1;
;;;116      x1 = pRect->x1;
;;;117      y1 = pRect->y1;
000118  f8b0c006          LDRH     r12,[r0,#6]
;;;118      pRect->x1 = pRect->x0 + (y1 - pRect->y0);
00011c  8842              LDRH     r2,[r0,#2]
00011e  8801              LDRH     r1,[r0,#0]
000120  ebac0c02          SUB      r12,r12,r2
000124  448c              ADD      r12,r12,r1
000126  f8a0c004          STRH     r12,[r0,#4]
;;;119      pRect->y1 = pRect->y0 + (x1 - pRect->x0);
00012a  1a59              SUBS     r1,r3,r1
00012c  4411              ADD      r1,r1,r2
00012e  80c1              STRH     r1,[r0,#6]
;;;120    }
000130  4770              BX       lr
;;;121    
                          ENDP

                  _TransformPointCCW PROC
;;;130    */
;;;131    static void _TransformPointCCW(int * pXPos, int * pYPos) {
000132  b570              PUSH     {r4-r6,lr}
000134  b082              SUB      sp,sp,#8
000136  4604              MOV      r4,r0
000138  460d              MOV      r5,r1
;;;132      GUI_RECT ClientRect = {0};
00013a  2000              MOVS     r0,#0
00013c  9000              STR      r0,[sp,#0]
00013e  9001              STR      r0,[sp,#4]
;;;133      int xPos, yPos, xNumPixel, yNumPixel;
;;;134      /* Get the client rectangle */
;;;135      #if GUI_WINSUPPORT
;;;136        WM_GetWindowRect(&ClientRect);
000140  4668              MOV      r0,sp
000142  f7fffffe          BL       WM_GetWindowRect
;;;137      #else
;;;138        GUI_GetClientRect(&ClientRect);
;;;139      #endif
;;;140      xNumPixel = LCD_GetXSize() - 1;
000146  f7fffffe          BL       LCD_GetXSize
00014a  1e46              SUBS     r6,r0,#1
;;;141      yNumPixel = LCD_GetYSize() - 1;
00014c  f7fffffe          BL       LCD_GetYSize
000150  1e40              SUBS     r0,r0,#1
;;;142      if (ClientRect.x1 > xNumPixel) {
000152  f9bd1004          LDRSH    r1,[sp,#4]
000156  42b1              CMP      r1,r6
000158  dd01              BLE      |L1.350|
;;;143        ClientRect.x1 = xNumPixel;
00015a  f8ad6004          STRH     r6,[sp,#4]
                  |L1.350|
;;;144      }
;;;145      if (ClientRect.y1 > yNumPixel) {
00015e  f9bd1006          LDRSH    r1,[sp,#6]
000162  4281              CMP      r1,r0
000164  dd01              BLE      |L1.362|
;;;146        ClientRect.y1 = yNumPixel;
000166  f8ad0006          STRH     r0,[sp,#6]
                  |L1.362|
;;;147      }
;;;148      /* Save old positions */
;;;149      xPos = *pXPos;
00016a  6820              LDR      r0,[r4,#0]
;;;150      yPos = *pYPos;
00016c  6829              LDR      r1,[r5,#0]
;;;151      /* Rotate and add window origin */
;;;152      *pXPos = ClientRect.x0 + yPos;
00016e  f9bd2000          LDRSH    r2,[sp,#0]
000172  4411              ADD      r1,r1,r2
000174  6021              STR      r1,[r4,#0]
;;;153      *pYPos = ClientRect.y1 - xPos;
000176  f9bd1006          LDRSH    r1,[sp,#6]
00017a  1a08              SUBS     r0,r1,r0
00017c  6028              STR      r0,[r5,#0]
;;;154      /* Handle rotation of text rectangle */
;;;155      *pXPos = *pXPos + GUI_RectDispString.x0 - GUI_RectDispString.y0;
00017e  4876              LDR      r0,|L1.856|
000180  6821              LDR      r1,[r4,#0]
000182  f9b02000          LDRSH    r2,[r0,#0]  ; GUI_RectDispString
000186  4411              ADD      r1,r1,r2
000188  f9b02002          LDRSH    r2,[r0,#2]  ; GUI_RectDispString
00018c  1a89              SUBS     r1,r1,r2
00018e  6021              STR      r1,[r4,#0]
;;;156      *pYPos = *pYPos + GUI_RectDispString.y1 - (ClientRect.y1 - ClientRect.y0) + GUI_RectDispString.x0;
000190  f9b02006          LDRSH    r2,[r0,#6]  ; GUI_RectDispString
000194  6829              LDR      r1,[r5,#0]
000196  f9bd3002          LDRSH    r3,[sp,#2]
00019a  4411              ADD      r1,r1,r2
00019c  f9bd2006          LDRSH    r2,[sp,#6]
0001a0  f9b00000          LDRSH    r0,[r0,#0]  ; GUI_RectDispString
0001a4  1ad2              SUBS     r2,r2,r3
0001a6  1a89              SUBS     r1,r1,r2
0001a8  4408              ADD      r0,r0,r1
0001aa  6028              STR      r0,[r5,#0]
;;;157    }
0001ac  b002              ADD      sp,sp,#8
0001ae  bd70              POP      {r4-r6,pc}
;;;158    
                          ENDP

                  _DrawBitmapCCW PROC
;;;162    */
;;;163    static void _DrawBitmapCCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
0001b0  e92d4fff          PUSH     {r0-r11,lr}
;;;164                               int BitsPerPixel, int BytesPerLine,
;;;165                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;166    {
0001b4  b089              SUB      sp,sp,#0x24
0001b6  4691              MOV      r9,r2
0001b8  f8ddb060          LDR      r11,[sp,#0x60]
0001bc  f8dda068          LDR      r10,[sp,#0x68]
;;;167      U8  Data = 0;
0001c0  2500              MOVS     r5,#0
;;;168      int x1, y1;
;;;169      /* Handle the optional Y-magnification */
;;;170      y1 = y0 + ysize - 1;
0001c2  990a              LDR      r1,[sp,#0x28]
0001c4  980c              LDR      r0,[sp,#0x30]
0001c6  4408              ADD      r0,r0,r1
0001c8  1e40              SUBS     r0,r0,#1
0001ca  9006              STR      r0,[sp,#0x18]
;;;171      x1 = x0 + xsize - 1;
0001cc  9809              LDR      r0,[sp,#0x24]
0001ce  4448              ADD      r0,r0,r9
0001d0  1e40              SUBS     r0,r0,#1
0001d2  9007              STR      r0,[sp,#0x1c]
;;;172      /* Rotate positions */
;;;173      _TransformPointCCW(&x0, &y0);
0001d4  a90a              ADD      r1,sp,#0x28
0001d6  a809              ADD      r0,sp,#0x24
0001d8  f7fffffe          BL       _TransformPointCCW
;;;174      _TransformPointCCW(&x1, &y1);
0001dc  a906              ADD      r1,sp,#0x18
0001de  a807              ADD      r0,sp,#0x1c
0001e0  f7fffffe          BL       _TransformPointCCW
;;;175      /*  Handle BITMAP without magnification */
;;;176      if ((xMul == 1) && (yMul == 1)) {
0001e4  9816              LDR      r0,[sp,#0x58]
;;;177        int Diff = 0;
;;;178        /* Clip top */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
0001e6  4b5b              LDR      r3,|L1.852|
0001e8  2801              CMP      r0,#1                 ;176
0001ea  d102              BNE      |L1.498|
0001ec  9817              LDR      r0,[sp,#0x5c]         ;176
0001ee  2801              CMP      r0,#1                 ;176
0001f0  d023              BEQ      |L1.570|
                  |L1.498|
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
;;;181          xsize -= Diff;
;;;182        }
;;;183        /* Clip bottom */
;;;184        if (y0 > GUI_Context.ClipRect.y1) {
;;;185          Diff = y0 - GUI_Context.ClipRect.y1;
;;;186    			xsize -= Diff;
;;;187    			switch (BitsPerPixel) {
;;;188    			case 1:
;;;189      			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
;;;190    				break;
;;;191    			}
;;;192        }
;;;193        if (ysize <= 0) {
;;;194    		  return;
;;;195        }
;;;196        /* Clip right side */
;;;197        if (x1 > GUI_Context.ClipRect.x1) {
;;;198          int Diff = x1 - GUI_Context.ClipRect.x1;
;;;199          ysize -= Diff;
;;;200        }
;;;201        /* Clip left side */
;;;202        if (x0 < GUI_Context.ClipRect.x0) {
;;;203          int Diff = GUI_Context.ClipRect.x0 - x0;
;;;204          pPixel += Diff * BytesPerLine;
;;;205          x0 += Diff;
;;;206          ysize -= Diff;
;;;207        }
;;;208        if (xsize <= 0) {
;;;209    		  return;
;;;210        }
;;;211        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;212      } else {
;;;213        /* Handle BITMAP with magnification */
;;;214        int x, y, xi, yi;
;;;215        int Shift = 8 - BitsPerPixel;
0001f2  f1cb0008          RSB      r0,r11,#8
0001f6  9003              STR      r0,[sp,#0xc]
;;;216        for (x = x0, xi = 0; xi < ysize; xi++, x += yMul, pPixel += BytesPerLine) {
0001f8  9809              LDR      r0,[sp,#0x24]
0001fa  9005              STR      r0,[sp,#0x14]
0001fc  2000              MOVS     r0,#0
0001fe  9004              STR      r0,[sp,#0x10]
000200  980c              LDR      r0,[sp,#0x30]
000202  2800              CMP      r0,#0
000204  dd63              BLE      |L1.718|
                  |L1.518|
;;;217          int xMax = x + yMul - 1;
000206  9917              LDR      r1,[sp,#0x5c]
000208  9805              LDR      r0,[sp,#0x14]
00020a  4408              ADD      r0,r0,r1
00020c  9008              STR      r0,[sp,#0x20]
00020e  1e40              SUBS     r0,r0,#1
000210  9002              STR      r0,[sp,#8]
;;;218          if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
000212  4950              LDR      r1,|L1.852|
000214  9802              LDR      r0,[sp,#8]
000216  f9b12008          LDRSH    r2,[r1,#8]  ; GUI_Context
00021a  4282              CMP      r2,r0
00021c  dc76              BGT      |L1.780|
00021e  f9b1200c          LDRSH    r2,[r1,#0xc]  ; GUI_Context
000222  9805              LDR      r0,[sp,#0x14]
000224  4282              CMP      r2,r0
000226  db71              BLT      |L1.780|
;;;219            int BitsLeft = 0;
000228  2400              MOVS     r4,#0
;;;220            const U8 GUI_UNI_PTR * pDataLine = pPixel;
00022a  4656              MOV      r6,r10
;;;221            for (y = y0, yi = 0; yi < xsize; yi++, y -= xMul) {
00022c  9f0a              LDR      r7,[sp,#0x28]
00022e  46a0              MOV      r8,r4
000230  f1b90f00          CMP      r9,#0
000234  dd7e              BLE      |L1.820|
                  |L1.566|
;;;222              U8  Index;
;;;223              if (!BitsLeft) {
000236  b3f4              CBZ      r4,|L1.694|
000238  e04f              B        |L1.730|
                  |L1.570|
00023a  2200              MOVS     r2,#0                 ;177
00023c  f9b3000a          LDRSH    r0,[r3,#0xa]          ;179  ; GUI_Context
000240  9906              LDR      r1,[sp,#0x18]         ;179
000242  4288              CMP      r0,r1                 ;179
000244  dd02              BLE      |L1.588|
000246  1a40              SUBS     r0,r0,r1              ;180
000248  eba90900          SUB      r9,r9,r0              ;181
                  |L1.588|
00024c  f9b3100e          LDRSH    r1,[r3,#0xe]          ;184  ; GUI_Context
000250  980a              LDR      r0,[sp,#0x28]         ;184
000252  4281              CMP      r1,r0                 ;184
000254  da0d              BGE      |L1.626|
000256  1a42              SUBS     r2,r0,r1              ;185
000258  eba90902          SUB      r9,r9,r2              ;186
00025c  f1bb0f01          CMP      r11,#1                ;187
000260  d107              BNE      |L1.626|
000262  eb0a0ae2          ADD      r10,r10,r2,ASR #3     ;189
000266  f0220107          BIC      r1,r2,#7              ;189
00026a  1a40              SUBS     r0,r0,r1              ;189
00026c  900a              STR      r0,[sp,#0x28]         ;189
00026e  f0020207          AND      r2,r2,#7              ;189
                  |L1.626|
000272  980c              LDR      r0,[sp,#0x30]         ;193
000274  2800              CMP      r0,#0                 ;193
000276  dd2a              BLE      |L1.718|
000278  f9b3000c          LDRSH    r0,[r3,#0xc]          ;197  ; GUI_Context
00027c  9907              LDR      r1,[sp,#0x1c]         ;197
00027e  4288              CMP      r0,r1                 ;197
000280  da03              BGE      |L1.650|
000282  1a08              SUBS     r0,r1,r0              ;198
000284  990c              LDR      r1,[sp,#0x30]         ;199
000286  1a08              SUBS     r0,r1,r0              ;199
000288  900c              STR      r0,[sp,#0x30]         ;199
                  |L1.650|
00028a  f9b30008          LDRSH    r0,[r3,#8]            ;202  ; GUI_Context
00028e  9909              LDR      r1,[sp,#0x24]         ;202
000290  4288              CMP      r0,r1                 ;202
000292  dd08              BLE      |L1.678|
000294  1a40              SUBS     r0,r0,r1              ;203
000296  9b19              LDR      r3,[sp,#0x64]         ;204
000298  fb00aa03          MLA      r10,r0,r3,r10         ;204
00029c  4401              ADD      r1,r1,r0              ;205
00029e  9109              STR      r1,[sp,#0x24]         ;205
0002a0  990c              LDR      r1,[sp,#0x30]         ;206
0002a2  1a08              SUBS     r0,r1,r0              ;206
0002a4  900c              STR      r0,[sp,#0x30]         ;206
                  |L1.678|
0002a6  f1b90f00          CMP      r9,#0                 ;208
0002aa  dd10              BLE      |L1.718|
0002ac  9819              LDR      r0,[sp,#0x64]         ;211
0002ae  9b1b              LDR      r3,[sp,#0x6c]         ;211
0002b0  f8cdb000          STR      r11,[sp,#0]           ;211
0002b4  e000              B        |L1.696|
                  |L1.694|
0002b6  e00d              B        |L1.724|
                  |L1.696|
0002b8  9304              STR      r3,[sp,#0x10]         ;211
0002ba  f8cda008          STR      r10,[sp,#8]           ;211
0002be  9203              STR      r2,[sp,#0xc]          ;211
0002c0  9001              STR      r0,[sp,#4]            ;211
0002c2  464a              MOV      r2,r9                 ;211
0002c4  9b0c              LDR      r3,[sp,#0x30]         ;211
0002c6  990a              LDR      r1,[sp,#0x28]         ;211
0002c8  9809              LDR      r0,[sp,#0x24]         ;211
0002ca  f7fffffe          BL       _DrawBitmap
                  |L1.718|
;;;224                Data = *pDataLine++;
;;;225                BitsLeft =8;
;;;226              }
;;;227              Index = Data >> Shift;
;;;228              Data    <<= BitsPerPixel;
;;;229              BitsLeft -= BitsPerPixel;
;;;230              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;231                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;232                if (pTrans) {
;;;233                  LCD_COLORINDEX = *(pTrans + Index);
;;;234                } else {
;;;235                  LCD_COLORINDEX = Index;
;;;236                }
;;;237                LCD_FillRect(x, y - xMul + 1, xMax, y);
;;;238                LCD_COLORINDEX = OldColor;
;;;239              }
;;;240            }
;;;241          }
;;;242        }
;;;243      }
;;;244    }
0002ce  b00d              ADD      sp,sp,#0x34
0002d0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.724|
0002d4  f8165b01          LDRB     r5,[r6],#1            ;224
0002d8  2408              MOVS     r4,#8                 ;225
                  |L1.730|
0002da  9803              LDR      r0,[sp,#0xc]          ;227
0002dc  fa25f000          LSR      r0,r5,r0              ;227
0002e0  fa05f10b          LSL      r1,r5,r11             ;228
0002e4  b2cd              UXTB     r5,r1                 ;228
0002e6  eba4040b          SUB      r4,r4,r11             ;229
0002ea  b920              CBNZ     r0,|L1.758|
0002ec  4919              LDR      r1,|L1.852|
0002ee  7c09              LDRB     r1,[r1,#0x10]         ;230  ; GUI_Context
0002f0  f0110f02          TST      r1,#2                 ;230
0002f4  d118              BNE      |L1.808|
                  |L1.758|
0002f6  4917              LDR      r1,|L1.852|
0002f8  8849              LDRH     r1,[r1,#2]            ;231  ; GUI_Context
0002fa  9101              STR      r1,[sp,#4]            ;231
0002fc  991b              LDR      r1,[sp,#0x6c]         ;232
0002fe  b131              CBZ      r1,|L1.782|
000300  991b              LDR      r1,[sp,#0x6c]         ;233
000302  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;233
000306  4813              LDR      r0,|L1.852|
000308  8041              STRH     r1,[r0,#2]            ;233
00030a  e002              B        |L1.786|
                  |L1.780|
00030c  e012              B        |L1.820|
                  |L1.782|
00030e  4911              LDR      r1,|L1.852|
000310  8048              STRH     r0,[r1,#2]            ;235
                  |L1.786|
000312  9816              LDR      r0,[sp,#0x58]         ;237
000314  463b              MOV      r3,r7                 ;237
000316  1a38              SUBS     r0,r7,r0              ;237
000318  1c41              ADDS     r1,r0,#1              ;237
00031a  9a02              LDR      r2,[sp,#8]            ;237
00031c  9805              LDR      r0,[sp,#0x14]         ;237
00031e  f7fffffe          BL       LCD_FillRect
000322  490c              LDR      r1,|L1.852|
000324  9801              LDR      r0,[sp,#4]            ;238
000326  8048              STRH     r0,[r1,#2]            ;238
                  |L1.808|
000328  f1080801          ADD      r8,r8,#1              ;221
00032c  9816              LDR      r0,[sp,#0x58]         ;221
00032e  1a3f              SUBS     r7,r7,r0              ;221
000330  45c8              CMP      r8,r9                 ;221
000332  db80              BLT      |L1.566|
                  |L1.820|
000334  9804              LDR      r0,[sp,#0x10]         ;216
000336  1c40              ADDS     r0,r0,#1              ;216
000338  9004              STR      r0,[sp,#0x10]         ;216
00033a  9808              LDR      r0,[sp,#0x20]         ;216
00033c  9005              STR      r0,[sp,#0x14]         ;216
00033e  9819              LDR      r0,[sp,#0x64]         ;216
000340  4482              ADD      r10,r10,r0            ;216
000342  990c              LDR      r1,[sp,#0x30]         ;216
000344  9804              LDR      r0,[sp,#0x10]         ;216
000346  4288              CMP      r0,r1                 ;216
000348  f6ffaf5d          BLT      |L1.518|
00034c  b00d              ADD      sp,sp,#0x34
00034e  e8bd8ff0          POP      {r4-r11,pc}
;;;245    
                          ENDP

000352  0000              DCW      0x0000
                  |L1.852|
                          DCD      GUI_Context
                  |L1.856|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIListCCW
                          DCD      _DrawBitmapCCW
                          DCD      _Rect2TextRect
