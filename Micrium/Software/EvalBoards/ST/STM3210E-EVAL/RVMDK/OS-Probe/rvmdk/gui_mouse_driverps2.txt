; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_mouse_driverps2.o --depend=.\rvmdk\gui_mouse_driverps2.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_mouse_driverps2.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_MOUSE_DriverPS2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _EvaPacket PROC
;;;57     */
;;;58     static void _EvaPacket(void) {
000000  b530              PUSH     {r4,r5,lr}
000002  b083              SUB      sp,sp,#0xc
;;;59       char a;
;;;60       GUI_PID_STATE State;
;;;61       _Buttons = _abInBuffer[0] & 0x03;
000004  4c33              LDR      r4,|L1.212|
000006  f1a40c01          SUB      r12,r4,#1
00000a  7820              LDRB     r0,[r4,#0]  ; _abInBuffer
00000c  f0000303          AND      r3,r0,#3
000010  f88c3000          STRB     r3,[r12,#0]
;;;62       a = _abInBuffer[1];
000014  7862              LDRB     r2,[r4,#1]  ; _abInBuffer
000016  f1a40101          SUB      r1,r4,#1              ;61
;;;63       /* test x move sign. */
;;;64       if(_abInBuffer[0] & 0x10) {
00001a  f0100f10          TST      r0,#0x10
;;;65         a=-a;
;;;66         _ScreenX  -= a;
00001e  6849              LDR      r1,[r1,#4]
000020  d005              BEQ      |L1.46|
000022  4252              RSBS     r2,r2,#0              ;65
000024  b2d2              UXTB     r2,r2                 ;65
000026  1a89              SUBS     r1,r1,r2
000028  f8cc1004          STR      r1,[r12,#4]  ; _ScreenX
00002c  e002              B        |L1.52|
                  |L1.46|
;;;67       }        /* direction is negative, move left */
;;;68       else {
;;;69         _ScreenX  += a;
00002e  4411              ADD      r1,r1,r2
000030  f8cc1004          STR      r1,[r12,#4]  ; _ScreenX
                  |L1.52|
;;;70       }
;;;71       a = _abInBuffer[2];
000034  78a1              LDRB     r1,[r4,#2]  ; _abInBuffer
;;;72       /* test y move sign. */
;;;73       if(_abInBuffer[0] & 0x20) {
000036  f0100f20          TST      r0,#0x20
00003a  4827              LDR      r0,|L1.216|
;;;74         a=-a;
;;;75         _ScreenY  += a;
00003c  6880              LDR      r0,[r0,#8]
00003e  d005              BEQ      |L1.76|
000040  4249              RSBS     r1,r1,#0              ;74
000042  b2c9              UXTB     r1,r1                 ;74
000044  4408              ADD      r0,r0,r1
000046  f8cc0008          STR      r0,[r12,#8]  ; _ScreenY
00004a  e002              B        |L1.82|
                  |L1.76|
;;;76       }  /* direction is negative, move down */ else {
;;;77         _ScreenY  -= a;
00004c  1a40              SUBS     r0,r0,r1
00004e  f8cc0008          STR      r0,[r12,#8]  ; _ScreenY
                  |L1.82|
;;;78       }
;;;79       /* check min/max positions */    
;;;80       if (_ScreenX < 0) {
000052  f8dc0004          LDR      r0,[r12,#4]  ; _ScreenX
;;;81         _ScreenX = 0;
000056  2100              MOVS     r1,#0
;;;82       } else if (_ScreenX > LCD_XSIZE-1) {
;;;83         _ScreenX = LCD_XSIZE-1;
000058  22db              MOVS     r2,#0xdb
00005a  2800              CMP      r0,#0                 ;80
00005c  da02              BGE      |L1.100|
00005e  f8cc1004          STR      r1,[r12,#4]           ;81  ; _ScreenX
000062  e003              B        |L1.108|
                  |L1.100|
000064  28db              CMP      r0,#0xdb              ;82
000066  dd01              BLE      |L1.108|
000068  f8cc2004          STR      r2,[r12,#4]  ; _ScreenX
                  |L1.108|
;;;84       } if (_ScreenY < 0) {
00006c  f8dc0008          LDR      r0,[r12,#8]  ; _ScreenY
000070  2800              CMP      r0,#0
000072  da02              BGE      |L1.122|
;;;85         _ScreenY = 0;
000074  f8cc1008          STR      r1,[r12,#8]  ; _ScreenY
000078  e003              B        |L1.130|
                  |L1.122|
;;;86       } else if (_ScreenY > LCD_YSIZE-1) {
00007a  28db              CMP      r0,#0xdb
00007c  dd01              BLE      |L1.130|
;;;87         _ScreenY = LCD_YSIZE-1;
00007e  f8cc2008          STR      r2,[r12,#8]  ; _ScreenY
                  |L1.130|
;;;88       }
;;;89       /* signal new mouse data */
;;;90       State.x       = _ScreenX;
000082  f8dc0004          LDR      r0,[r12,#4]  ; _ScreenX
000086  9000              STR      r0,[sp,#0]
;;;91       State.y       = _ScreenY;
000088  f8dc0008          LDR      r0,[r12,#8]  ; _ScreenY
00008c  9001              STR      r0,[sp,#4]
;;;92       State.Pressed = _Buttons;
00008e  f88d3008          STRB     r3,[sp,#8]
;;;93       GUI_MOUSE_StoreState(&State);
000092  4668              MOV      r0,sp
000094  f7fffffe          BL       GUI_MOUSE_StoreState
;;;94     }
000098  b003              ADD      sp,sp,#0xc
00009a  bd30              POP      {r4,r5,pc}
;;;95     
                          ENDP

                  GUI_MOUSE_DRIVER_PS2_OnRx PROC
;;;109    */
;;;110    void GUI_MOUSE_DRIVER_PS2_OnRx(unsigned char Data) {
00009c  b510              PUSH     {r4,lr}
;;;111      if (!_NumBytesInBuffer) {
00009e  4c0e              LDR      r4,|L1.216|
;;;112        /* check for start frame */
;;;113        if ((Data & 0x0c) == 0x08) {
;;;114          _abInBuffer[0] = Data;
0000a0  1c62              ADDS     r2,r4,#1
0000a2  68e1              LDR      r1,[r4,#0xc]          ;111  ; _NumBytesInBuffer
0000a4  b149              CBZ      r1,|L1.186|
;;;115          _NumBytesInBuffer++;
;;;116        }
;;;117      } else {
;;;118        _abInBuffer[_NumBytesInBuffer] = Data;
0000a6  5450              STRB     r0,[r2,r1]
;;;119        _NumBytesInBuffer++;
0000a8  1c48              ADDS     r0,r1,#1
0000aa  60e0              STR      r0,[r4,#0xc]  ; _NumBytesInBuffer
;;;120        if (_NumBytesInBuffer >= 3) {
0000ac  2803              CMP      r0,#3
0000ae  db03              BLT      |L1.184|
;;;121          _EvaPacket();
0000b0  f7fffffe          BL       _EvaPacket
;;;122          _NumBytesInBuffer = 0;
0000b4  2000              MOVS     r0,#0
0000b6  60e0              STR      r0,[r4,#0xc]  ; _NumBytesInBuffer
                  |L1.184|
;;;123        }
;;;124      }
;;;125    }
0000b8  bd10              POP      {r4,pc}
                  |L1.186|
0000ba  f000010c          AND      r1,r0,#0xc            ;113
0000be  2908              CMP      r1,#8                 ;113
0000c0  d1fa              BNE      |L1.184|
0000c2  7010              STRB     r0,[r2,#0]            ;114
0000c4  2001              MOVS     r0,#1                 ;115
0000c6  60e0              STR      r0,[r4,#0xc]          ;115  ; _NumBytesInBuffer
0000c8  bd10              POP      {r4,pc}
;;;126    
                          ENDP

                  GUI_MOUSE_DRIVER_PS2_Init PROC
;;;130    */
;;;131    void GUI_MOUSE_DRIVER_PS2_Init(void) {
0000ca  4903              LDR      r1,|L1.216|
;;;132      _NumBytesInBuffer = 0; 
0000cc  2000              MOVS     r0,#0
0000ce  60c8              STR      r0,[r1,#0xc]  ; _NumBytesInBuffer
;;;133    }
0000d0  4770              BX       lr
;;;134    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L1.212|
                          DCD      ||.data||+0x1
                  |L1.216|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  _Buttons
000000  00                DCB      0x00
                  _abInBuffer
000001  000000            DCB      0x00,0x00,0x00
                  _ScreenX
                          DCD      0x00000000
                  _ScreenY
                          DCD      0x00000000
                  _NumBytesInBuffer
                          DCD      0x00000000
