; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\wm__updatechildpositions.o --depend=.\rvmdk\wm__updatechildpositions.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\wm__updatechildpositions.crf ..\..\..\..\..\uCGUI\GUI\WM\WM__UpdateChildPositions.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  WM__UpdateChildPositions PROC
;;;41     */
;;;42     void WM__UpdateChildPositions(WM_Obj* pObj, int dx0, int dy0, int dx1, int dy1) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  460d              MOV      r5,r1
000008  9c10              LDR      r4,[sp,#0x40]
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
;;;43       WM_HWIN hChild;
;;;44       WM_Obj* pChild;
;;;45       int dx, dy, dw, dh;
;;;46       for (hChild = pObj->hFirstChild; hChild; hChild = pChild->hNext) {
00000e  f9b08018          LDRSH    r8,[r0,#0x18]
000012  f1b80f00          CMP      r8,#0
000016  d063              BEQ      |L1.224|
                  |L1.24|
;;;47         int Status;
;;;48         GUI_RECT rOld, rNew;
;;;49         pChild = WM_H2P(hChild);
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       GUI_ALLOC_h2p
00001e  4681              MOV      r9,r0
;;;50         /* Compute size of new rectangle */
;;;51         rOld = pChild->Rect;
000020  f8d91004          LDR      r1,[r9,#4]
000024  f8d90000          LDR      r0,[r9,#0]
000028  9103              STR      r1,[sp,#0xc]
00002a  9002              STR      r0,[sp,#8]
;;;52         rNew = rOld;
00002c  9903              LDR      r1,[sp,#0xc]
00002e  9802              LDR      r0,[sp,#8]
000030  9101              STR      r1,[sp,#4]
000032  9000              STR      r0,[sp,#0]
;;;53         Status = pChild->Status & (WM_SF_ANCHOR_RIGHT | WM_SF_ANCHOR_LEFT);
000034  f8b9001c          LDRH     r0,[r9,#0x1c]
000038  f4007120          AND      r1,r0,#0x280
;;;54         switch (Status) {
00003c  2980              CMP      r1,#0x80
00003e  d052              BEQ      |L1.230|
000040  f5b17f20          CMP      r1,#0x280
000044  d05a              BEQ      |L1.252|
;;;55           case WM_SF_ANCHOR_RIGHT:                      /* Right ANCHOR : Move window with right side */
;;;56             rNew.x0 += dx1;
;;;57             rNew.x1 += dx1;
;;;58             break;
;;;59           case WM_SF_ANCHOR_RIGHT | WM_SF_ANCHOR_LEFT:    /* Left & Right ANCHOR: Resize window */
;;;60             rNew.x0 += dx0;
;;;61             rNew.x1 += dx1;
;;;62             break;
;;;63           default:                                    /* Left ANCHOR: Move window with left side of parent */
;;;64             rNew.x0 += dx0;
000046  f8bd1000          LDRH     r1,[sp,#0]
00004a  4429              ADD      r1,r1,r5
00004c  f8ad1000          STRH     r1,[sp,#0]
;;;65             rNew.x1 += dx0;
000050  f8bd1004          LDRH     r1,[sp,#4]
000054  4429              ADD      r1,r1,r5
000056  f8ad1004          STRH     r1,[sp,#4]
                  |L1.90|
;;;66         }
;;;67         Status = pChild->Status & (WM_SF_ANCHOR_TOP   | WM_SF_ANCHOR_BOTTOM);
00005a  f40060a0          AND      r0,r0,#0x500
;;;68         switch (Status) {
00005e  f5b07f80          CMP      r0,#0x100
000062  d056              BEQ      |L1.274|
000064  f5b06fa0          CMP      r0,#0x500
000068  d05e              BEQ      |L1.296|
;;;69           case WM_SF_ANCHOR_BOTTOM:                     /* Bottom ANCHOR */
;;;70             rNew.y0 += dy1;
;;;71             rNew.y1 += dy1;
;;;72             break;
;;;73           case WM_SF_ANCHOR_BOTTOM | WM_SF_ANCHOR_TOP:    /* resize window */
;;;74             rNew.y0 += dy0;
;;;75             rNew.y1 += dy1;
;;;76             break;
;;;77           default:                                    /* Top ANCHOR */
;;;78             rNew.y0 += dy0;
00006a  f8bd0002          LDRH     r0,[sp,#2]
00006e  4430              ADD      r0,r0,r6
000070  f8ad0002          STRH     r0,[sp,#2]
;;;79             rNew.y1 += dy0;
000074  f8bd0006          LDRH     r0,[sp,#6]
000078  4430              ADD      r0,r0,r6
00007a  f8ad0006          STRH     r0,[sp,#6]
                  |L1.126|
;;;80         }
;;;81         /* Set new window position using Move and Resize as required */
;;;82         dx = rNew.x0 - rOld.x0;
00007e  f9bda000          LDRSH    r10,[sp,#0]
000082  f9bdb008          LDRSH    r11,[sp,#8]
000086  ebaa030b          SUB      r3,r10,r11
;;;83         dy = rNew.y0 - rOld.y0;
00008a  f9bd0002          LDRSH    r0,[sp,#2]
00008e  f9bd100a          LDRSH    r1,[sp,#0xa]
000092  9005              STR      r0,[sp,#0x14]
000094  1a42              SUBS     r2,r0,r1
000096  9104              STR      r1,[sp,#0x10]
;;;84         if (dx || dy) {
000098  ea530002          ORRS     r0,r3,r2
00009c  d003              BEQ      |L1.166|
;;;85           WM_MoveWindow(hChild, dx, dy);
00009e  4619              MOV      r1,r3
0000a0  4640              MOV      r0,r8
0000a2  f7fffffe          BL       WM_MoveWindow
                  |L1.166|
;;;86         }
;;;87         dw = (rNew.x1 - rNew.x0) - (rOld.x1 - rOld.x0);
0000a6  f9bd0004          LDRSH    r0,[sp,#4]
0000aa  f9bd100c          LDRSH    r1,[sp,#0xc]
0000ae  eba0000a          SUB      r0,r0,r10
0000b2  eba1010b          SUB      r1,r1,r11
0000b6  1a41              SUBS     r1,r0,r1
;;;88         dh = (rNew.y1 - rNew.y0) - (rOld.y1 - rOld.y0);
0000b8  f9bd2006          LDRSH    r2,[sp,#6]
0000bc  9805              LDR      r0,[sp,#0x14]
0000be  f9bd300e          LDRSH    r3,[sp,#0xe]
0000c2  1a12              SUBS     r2,r2,r0
0000c4  9804              LDR      r0,[sp,#0x10]
0000c6  1a18              SUBS     r0,r3,r0
0000c8  1a12              SUBS     r2,r2,r0
;;;89         if (dw || dh) {
0000ca  ea510002          ORRS     r0,r1,r2
0000ce  d002              BEQ      |L1.214|
;;;90           WM_ResizeWindow(hChild, dw, dh);
0000d0  4640              MOV      r0,r8
0000d2  f7fffffe          BL       WM_ResizeWindow
                  |L1.214|
0000d6  f9b9801a          LDRSH    r8,[r9,#0x1a]         ;46
0000da  f1b80f00          CMP      r8,#0                 ;46
0000de  d19b              BNE      |L1.24|
                  |L1.224|
;;;91         }
;;;92       }
;;;93     }
0000e0  b007              ADD      sp,sp,#0x1c
0000e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.230|
0000e6  f8bd1000          LDRH     r1,[sp,#0]            ;56
0000ea  4439              ADD      r1,r1,r7              ;56
0000ec  f8ad1000          STRH     r1,[sp,#0]            ;56
0000f0  f8bd1004          LDRH     r1,[sp,#4]            ;57
0000f4  4439              ADD      r1,r1,r7              ;57
0000f6  f8ad1004          STRH     r1,[sp,#4]            ;57
0000fa  e7ae              B        |L1.90|
                  |L1.252|
0000fc  f8bd1000          LDRH     r1,[sp,#0]            ;60
000100  4429              ADD      r1,r1,r5              ;60
000102  f8ad1000          STRH     r1,[sp,#0]            ;60
000106  f8bd1004          LDRH     r1,[sp,#4]            ;61
00010a  4439              ADD      r1,r1,r7              ;61
00010c  f8ad1004          STRH     r1,[sp,#4]            ;61
000110  e7a3              B        |L1.90|
                  |L1.274|
000112  f8bd0002          LDRH     r0,[sp,#2]            ;70
000116  4420              ADD      r0,r0,r4              ;70
000118  f8ad0002          STRH     r0,[sp,#2]            ;70
00011c  f8bd0006          LDRH     r0,[sp,#6]            ;71
000120  4420              ADD      r0,r0,r4              ;71
000122  f8ad0006          STRH     r0,[sp,#6]            ;71
000126  e7aa              B        |L1.126|
                  |L1.296|
000128  f8bd0002          LDRH     r0,[sp,#2]            ;74
00012c  4430              ADD      r0,r0,r6              ;74
00012e  f8ad0002          STRH     r0,[sp,#2]            ;74
000132  f8bd0006          LDRH     r0,[sp,#6]            ;75
000136  4420              ADD      r0,r0,r4              ;75
000138  f8ad0006          STRH     r0,[sp,#6]            ;75
00013c  e79f              B        |L1.126|
;;;94     
                          ENDP

