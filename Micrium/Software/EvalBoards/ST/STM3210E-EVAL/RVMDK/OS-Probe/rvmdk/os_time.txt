; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\os_time.o --depend=.\rvmdk\os_time.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\os_time.crf ..\..\..\..\..\uCOS-II\Source\os_time.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSTimeDly PROC
;;;43     
;;;44     void  OSTimeDly (INT16U ticks)
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
000002  4604              MOV      r4,r0
;;;46         INT8U      y;
;;;47     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;48         OS_CPU_SR  cpu_sr = 0;
;;;49     #endif
;;;50     
;;;51     
;;;52     
;;;53         if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
000004  485d              LDR      r0,|L1.380|
000006  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000008  2800              CMP      r0,#0
00000a  d11e              BNE      |L1.74|
;;;54             return;
;;;55         }
;;;56         if (ticks > 0) {                             /* 0 means no delay!                                  */
00000c  2c00              CMP      r4,#0
00000e  d01c              BEQ      |L1.74|
;;;57             OS_ENTER_CRITICAL();
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4684              MOV      r12,r0
;;;58             y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
000016  485a              LDR      r0,|L1.384|
000018  6801              LDR      r1,[r0,#0]  ; OSTCBCur
00001a  f8912034          LDRB     r2,[r1,#0x34]
;;;59             OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
00001e  4859              LDR      r0,|L1.388|
000020  f8915035          LDRB     r5,[r1,#0x35]
000024  5c83              LDRB     r3,[r0,r2]
000026  43ab              BICS     r3,r3,r5
000028  5483              STRB     r3,[r0,r2]
;;;60             if (OSRdyTbl[y] == 0) {
00002a  b933              CBNZ     r3,|L1.58|
;;;61                 OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
00002c  4856              LDR      r0,|L1.392|
00002e  f8912036          LDRB     r2,[r1,#0x36]
000032  7803              LDRB     r3,[r0,#0]  ; OSRdyGrp
000034  ea230202          BIC      r2,r3,r2
000038  7002              STRB     r2,[r0,#0]
                  |L1.58|
;;;62             }
;;;63             OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
00003a  85cc              STRH     r4,[r1,#0x2e]
;;;64             OS_EXIT_CRITICAL();
00003c  4660              MOV      r0,r12
00003e  f7fffffe          BL       OS_CPU_SR_Restore
;;;65             OS_Sched();                              /* Find next task to run!                             */
000042  e8bd4070          POP      {r4-r6,lr}
000046  f7ffbffe          B.W      OS_Sched
                  |L1.74|
;;;66         }
;;;67     }
00004a  bd70              POP      {r4-r6,pc}
;;;68     /*$PAGE*/
                          ENDP

                  OSTimeDlyHMSM PROC
;;;95     #if OS_TIME_DLY_HMSM_EN > 0
;;;96     INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
00004c  b510              PUSH     {r4,lr}
;;;97     {
;;;98         INT32U ticks;
;;;99         INT16U loops;
;;;100    
;;;101    
;;;102        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
00004e  f8dfc12c          LDR      r12,|L1.380|
000052  f89cc000          LDRB     r12,[r12,#0]  ; OSIntNesting
000056  f1bc0f00          CMP      r12,#0
00005a  d001              BEQ      |L1.96|
;;;103            return (OS_ERR_TIME_DLY_ISR);
00005c  2055              MOVS     r0,#0x55
;;;104        }
;;;105    #if OS_ARG_CHK_EN > 0
;;;106        if (hours == 0) {
;;;107            if (minutes == 0) {
;;;108                if (seconds == 0) {
;;;109                    if (ms == 0) {
;;;110                        return (OS_ERR_TIME_ZERO_DLY);
;;;111                    }
;;;112                }
;;;113            }
;;;114        }
;;;115        if (minutes > 59) {
;;;116            return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
;;;117        }
;;;118        if (seconds > 59) {
;;;119            return (OS_ERR_TIME_INVALID_SECONDS);
;;;120        }
;;;121        if (ms > 999) {
;;;122            return (OS_ERR_TIME_INVALID_MS);
;;;123        }
;;;124    #endif
;;;125                                                     /* Compute the total number of clock ticks required.. */
;;;126                                                     /* .. (rounded to the nearest tick)                   */
;;;127        ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
;;;128              + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
;;;129        loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
;;;130        ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
;;;131        OSTimeDly((INT16U)ticks);
;;;132        while (loops > 0) {
;;;133            OSTimeDly((INT16U)32768u);
;;;134            OSTimeDly((INT16U)32768u);
;;;135            loops--;
;;;136        }
;;;137        return (OS_ERR_NONE);
;;;138    }
00005e  bd10              POP      {r4,pc}
                  |L1.96|
000060  f44f7c7a          MOV      r12,#0x3e8            ;127
000064  fb03f30c          MUL      r3,r3,r12             ;127
000068  fbb3f3fc          UDIV     r3,r3,r12             ;127
00006c  f44f6c61          MOV      r12,#0xe10            ;127
000070  fb00f00c          MUL      r0,r0,r12             ;127
000074  ebc11101          RSB      r1,r1,r1,LSL #4       ;127
000078  eb000081          ADD      r0,r0,r1,LSL #2       ;127
00007c  4410              ADD      r0,r0,r2              ;127
00007e  eb000140          ADD      r1,r0,r0,LSL #1       ;127
000082  ebc110c0          RSB      r0,r1,r0,LSL #7       ;127
000086  eb0300c0          ADD      r0,r3,r0,LSL #3       ;127
00008a  0c04              LSRS     r4,r0,#16             ;129
00008c  b280              UXTH     r0,r0                 ;130
00008e  f7fffffe          BL       OSTimeDly
000092  b15c              CBZ      r4,|L1.172|
                  |L1.148|
000094  f44f4000          MOV      r0,#0x8000            ;133
000098  f7fffffe          BL       OSTimeDly
00009c  f44f4000          MOV      r0,#0x8000            ;134
0000a0  f7fffffe          BL       OSTimeDly
0000a4  1e60              SUBS     r0,r4,#1              ;135
0000a6  b284              UXTH     r4,r0                 ;135
0000a8  2c00              CMP      r4,#0                 ;132
0000aa  d1f3              BNE      |L1.148|
                  |L1.172|
0000ac  2000              MOVS     r0,#0                 ;137
0000ae  bd10              POP      {r4,pc}
;;;139    #endif
                          ENDP

                  OSTimeDlyResume PROC
;;;166    #if OS_TIME_DLY_RESUME_EN > 0
;;;167    INT8U  OSTimeDlyResume (INT8U prio)
0000b0  b510              PUSH     {r4,lr}
;;;168    {
0000b2  4604              MOV      r4,r0
;;;169        OS_TCB    *ptcb;
;;;170    #if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
;;;171        OS_CPU_SR  cpu_sr = 0;
;;;172    #endif
;;;173    
;;;174    
;;;175    
;;;176        if (prio >= OS_LOWEST_PRIO) {
0000b4  2c1f              CMP      r4,#0x1f
0000b6  d301              BCC      |L1.188|
;;;177            return (OS_ERR_PRIO_INVALID);
0000b8  202a              MOVS     r0,#0x2a
;;;178        }
;;;179        OS_ENTER_CRITICAL();
;;;180        ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
;;;181        if (ptcb == (OS_TCB *)0) {
;;;182            OS_EXIT_CRITICAL();
;;;183            return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
;;;184        }
;;;185        if (ptcb == OS_TCB_RESERVED) {
;;;186            OS_EXIT_CRITICAL();
;;;187            return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
;;;188        }
;;;189        if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
;;;190            OS_EXIT_CRITICAL();
;;;191            return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
;;;192        }
;;;193    
;;;194        ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
;;;195        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
;;;196            ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
;;;197            ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
;;;198        } else {
;;;199            ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
;;;200        }
;;;201        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
;;;202            OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
;;;203            OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;204            OS_EXIT_CRITICAL();
;;;205            OS_Sched();                                            /* See if this is new highest priority  */
;;;206        } else {
;;;207            OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
;;;208        }
;;;209        return (OS_ERR_NONE);
;;;210    }
0000ba  bd10              POP      {r4,pc}
                  |L1.188|
0000bc  f7fffffe          BL       OS_CPU_SR_Save
0000c0  4603              MOV      r3,r0                 ;179
0000c2  4832              LDR      r0,|L1.396|
0000c4  f8500024          LDR      r0,[r0,r4,LSL #2]     ;180
0000c8  b190              CBZ      r0,|L1.240|
0000ca  2801              CMP      r0,#1                 ;185
0000cc  d015              BEQ      |L1.250|
0000ce  8dc1              LDRH     r1,[r0,#0x2e]         ;189
0000d0  b1c1              CBZ      r1,|L1.260|
0000d2  2200              MOVS     r2,#0                 ;194
0000d4  85c2              STRH     r2,[r0,#0x2e]         ;194
0000d6  f8901030          LDRB     r1,[r0,#0x30]         ;195
0000da  f0110f37          TST      r1,#0x37              ;195
0000de  d016              BEQ      |L1.270|
0000e0  f0210137          BIC      r1,r1,#0x37           ;196
0000e4  f8801030          STRB     r1,[r0,#0x30]         ;196
0000e8  2101              MOVS     r1,#1                 ;197
0000ea  f8801031          STRB     r1,[r0,#0x31]         ;197
0000ee  e010              B        |L1.274|
                  |L1.240|
0000f0  4618              MOV      r0,r3                 ;182
0000f2  f7fffffe          BL       OS_CPU_SR_Restore
0000f6  2043              MOVS     r0,#0x43              ;183
0000f8  bd10              POP      {r4,pc}
                  |L1.250|
0000fa  4618              MOV      r0,r3                 ;186
0000fc  f7fffffe          BL       OS_CPU_SR_Restore
000100  2043              MOVS     r0,#0x43              ;187
000102  bd10              POP      {r4,pc}
                  |L1.260|
000104  4618              MOV      r0,r3                 ;190
000106  f7fffffe          BL       OS_CPU_SR_Restore
00010a  2050              MOVS     r0,#0x50              ;191
00010c  bd10              POP      {r4,pc}
                  |L1.270|
00010e  f8802031          STRB     r2,[r0,#0x31]         ;199
                  |L1.274|
000112  f8901030          LDRB     r1,[r0,#0x30]         ;201
000116  f0110f08          TST      r1,#8                 ;201
00011a  d004              BEQ      |L1.294|
00011c  4618              MOV      r0,r3                 ;207
00011e  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.290|
000122  2000              MOVS     r0,#0                 ;209
000124  bd10              POP      {r4,pc}
                  |L1.294|
000126  4918              LDR      r1,|L1.392|
000128  f8902036          LDRB     r2,[r0,#0x36]         ;202
00012c  f891c000          LDRB     r12,[r1,#0]           ;202  ; OSRdyGrp
000130  ea42020c          ORR      r2,r2,r12             ;202
000134  700a              STRB     r2,[r1,#0]            ;202
000136  f8901034          LDRB     r1,[r0,#0x34]         ;203
00013a  4a12              LDR      r2,|L1.388|
00013c  f8900035          LDRB     r0,[r0,#0x35]         ;203
000140  f812c001          LDRB     r12,[r2,r1]           ;203
000144  ea4c0000          ORR      r0,r12,r0             ;203
000148  5450              STRB     r0,[r2,r1]            ;203
00014a  4618              MOV      r0,r3                 ;204
00014c  f7fffffe          BL       OS_CPU_SR_Restore
000150  f7fffffe          BL       OS_Sched
000154  e7e5              B        |L1.290|
;;;211    #endif
                          ENDP

                  OSTimeGet PROC
;;;226    #if OS_TIME_GET_SET_EN > 0
;;;227    INT32U  OSTimeGet (void)
000156  b510              PUSH     {r4,lr}
;;;228    {
;;;229        INT32U     ticks;
;;;230    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;231        OS_CPU_SR  cpu_sr = 0;
;;;232    #endif
;;;233    
;;;234    
;;;235    
;;;236        OS_ENTER_CRITICAL();
000158  f7fffffe          BL       OS_CPU_SR_Save
;;;237        ticks = OSTime;
00015c  490c              LDR      r1,|L1.400|
00015e  680c              LDR      r4,[r1,#0]  ; OSTime
;;;238        OS_EXIT_CRITICAL();
000160  f7fffffe          BL       OS_CPU_SR_Restore
;;;239        return (ticks);
000164  4620              MOV      r0,r4
;;;240    }
000166  bd10              POP      {r4,pc}
;;;241    #endif
                          ENDP

                  OSTimeSet PROC
;;;255    #if OS_TIME_GET_SET_EN > 0
;;;256    void  OSTimeSet (INT32U ticks)
000168  b510              PUSH     {r4,lr}
;;;257    {
00016a  4604              MOV      r4,r0
;;;258    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;259        OS_CPU_SR  cpu_sr = 0;
;;;260    #endif
;;;261    
;;;262    
;;;263    
;;;264        OS_ENTER_CRITICAL();
00016c  f7fffffe          BL       OS_CPU_SR_Save
;;;265        OSTime = ticks;
000170  4907              LDR      r1,|L1.400|
000172  600c              STR      r4,[r1,#0]  ; OSTime
;;;266        OS_EXIT_CRITICAL();
000174  e8bd4010          POP      {r4,lr}
000178  f7ffbffe          B.W      OS_CPU_SR_Restore
;;;267    }
;;;268    #endif
                          ENDP

                  |L1.380|
                          DCD      OSIntNesting
                  |L1.384|
                          DCD      OSTCBCur
                  |L1.388|
                          DCD      OSRdyTbl
                  |L1.392|
                          DCD      OSRdyGrp
                  |L1.396|
                          DCD      OSTCBPrioTbl
                  |L1.400|
                          DCD      OSTime
