; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcd_rotate180.o --depend=.\rvmdk\lcd_rotate180.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcd_rotate180.crf ..\..\..\..\..\uCGUI\GUI\Core\LCD_Rotate180.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4615              MOV      r5,r2
000006  9f0e              LDR      r7,[sp,#0x38]
000008  990f              LDR      r1,[sp,#0x3c]
00000a  461c              MOV      r4,r3
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
00000c  f8b19000          LDRH     r9,[r1,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000010  f8b18002          LDRH     r8,[r1,#2]
;;;41       x -= Diff;
000014  1b06              SUBS     r6,r0,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000016  f8dfa310          LDR      r10,|L1.808|
;;;43       case 0:
;;;44         do {
;;;45           LCDDEV_L0_SetPixelIndex(x--, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
00001a  f04f0b80          MOV      r11,#0x80
00001e  f89a0010          LDRB     r0,[r10,#0x10]        ;42  ; GUI_Context
000022  f0100003          ANDS     r0,r0,#3              ;42
000026  d004              BEQ      |L1.50|
000028  2801              CMP      r0,#1                 ;42
00002a  d032              BEQ      |L1.146|
00002c  2802              CMP      r0,#2                 ;42
00002e  d116              BNE      |L1.94|
000030  e018              B        |L1.100|
                  |L1.50|
000032  7828              LDRB     r0,[r5,#0]
000034  fa2bf104          LSR      r1,r11,r4
000038  4208              TST      r0,r1
00003a  d001              BEQ      |L1.64|
00003c  4642              MOV      r2,r8
00003e  e000              B        |L1.66|
                  |L1.64|
000040  464a              MOV      r2,r9
                  |L1.66|
000042  f8da104c          LDR      r1,[r10,#0x4c]  ; GUI_Context
000046  4630              MOV      r0,r6
000048  1e76              SUBS     r6,r6,#1
00004a  6a4b              LDR      r3,[r1,#0x24]
00004c  9901              LDR      r1,[sp,#4]
00004e  4798              BLX      r3
;;;46     			if (++Diff == 8) {
000050  1c64              ADDS     r4,r4,#1
000052  2c08              CMP      r4,#8
000054  d101              BNE      |L1.90|
;;;47             Diff = 0;
000056  2400              MOVS     r4,#0
;;;48     				p++;
000058  1c6d              ADDS     r5,r5,#1
                  |L1.90|
;;;49     			}
;;;50     		} while (--xsize);
00005a  1e7f              SUBS     r7,r7,#1
00005c  d1e9              BNE      |L1.50|
                  |L1.94|
;;;51         break;
;;;52       case LCD_DRAWMODE_TRANS:
;;;53         do {
;;;54       		if (*p & (0x80 >> Diff))
;;;55             LCDDEV_L0_SetPixelIndex(x, y, Index1);
;;;56           x--;
;;;57     			if (++Diff == 8) {
;;;58             Diff = 0;
;;;59     				p++;
;;;60     			}
;;;61     		} while (--xsize);
;;;62         break;
;;;63       case LCD_DRAWMODE_XOR:;
;;;64         do {
;;;65       		if (*p & (0x80 >> Diff)) {
;;;66             int Pixel = LCD_L0_GetPixelIndex(x, y);
;;;67             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
;;;68           }
;;;69           x--;
;;;70     			if (++Diff == 8) {
;;;71             Diff = 0;
;;;72     				p++;
;;;73     			}
;;;74     		} while (--xsize);
;;;75         break;
;;;76     	}
;;;77     }
00005e  b004              ADD      sp,sp,#0x10
000060  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.100|
000064  7828              LDRB     r0,[r5,#0]            ;54
000066  fa2bf104          LSR      r1,r11,r4             ;54
00006a  4208              TST      r0,r1                 ;54
00006c  d006              BEQ      |L1.124|
00006e  f8da004c          LDR      r0,[r10,#0x4c]        ;55  ; GUI_Context
000072  4642              MOV      r2,r8                 ;55
000074  9901              LDR      r1,[sp,#4]            ;55
000076  6a43              LDR      r3,[r0,#0x24]         ;55
000078  4630              MOV      r0,r6                 ;55
00007a  4798              BLX      r3                    ;55
                  |L1.124|
00007c  1e76              SUBS     r6,r6,#1              ;56
00007e  1c64              ADDS     r4,r4,#1              ;57
000080  2c08              CMP      r4,#8                 ;57
000082  d101              BNE      |L1.136|
000084  2400              MOVS     r4,#0                 ;58
000086  1c6d              ADDS     r5,r5,#1              ;59
                  |L1.136|
000088  1e7f              SUBS     r7,r7,#1              ;61
00008a  d1eb              BNE      |L1.100|
00008c  b004              ADD      sp,sp,#0x10
00008e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.146|
000092  f64f78ff          MOV      r8,#0xffff            ;67
                  |L1.150|
000096  7828              LDRB     r0,[r5,#0]            ;65
000098  fa2bf104          LSR      r1,r11,r4             ;65
00009c  4208              TST      r0,r1                 ;65
00009e  d00b              BEQ      |L1.184|
0000a0  4630              MOV      r0,r6                 ;66
0000a2  9901              LDR      r1,[sp,#4]            ;66
0000a4  f7fffffe          BL       LCD_L0_GetPixelIndex
0000a8  eba80200          SUB      r2,r8,r0              ;67
0000ac  f8da004c          LDR      r0,[r10,#0x4c]        ;67  ; GUI_Context
0000b0  9901              LDR      r1,[sp,#4]            ;67
0000b2  6a43              LDR      r3,[r0,#0x24]         ;67
0000b4  4630              MOV      r0,r6                 ;67
0000b6  4798              BLX      r3                    ;67
                  |L1.184|
0000b8  1e76              SUBS     r6,r6,#1              ;69
0000ba  1c64              ADDS     r4,r4,#1              ;70
0000bc  2c08              CMP      r4,#8                 ;70
0000be  d101              BNE      |L1.196|
0000c0  2400              MOVS     r4,#0                 ;71
0000c2  1c6d              ADDS     r5,r5,#1              ;72
                  |L1.196|
0000c4  1e7f              SUBS     r7,r7,#1              ;74
0000c6  d1e6              BNE      |L1.150|
0000c8  b004              ADD      sp,sp,#0x10
0000ca  e8bd9ff0          POP      {r4-r12,pc}
;;;78     
                          ENDP

                  _DrawBitmap PROC
;;;85     */
;;;86     static void _DrawBitmap(int x0, int y0,
0000ce  e92d4fff          PUSH     {r0-r11,lr}
;;;87                            int xsize, int ysize,
;;;88                            int BitsPerPixel, 
;;;89                            int BytesPerLine,
;;;90                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;91                            const LCD_PIXELINDEX* pTrans)
;;;92     {
0000d2  b083              SUB      sp,sp,#0xc
0000d4  4689              MOV      r9,r1
0000d6  f8ddb050          LDR      r11,[sp,#0x50]
0000da  f8dda04c          LDR      r10,[sp,#0x4c]
0000de  f8dd8044          LDR      r8,[sp,#0x44]
0000e2  9f10              LDR      r7,[sp,#0x40]
0000e4  9d12              LDR      r5,[sp,#0x48]
0000e6  461e              MOV      r6,r3
;;;93       int i;
;;;94       /* Use _DrawBitLineXBPP */
;;;95       for (i = 0; i < ysize; i++) {
0000e8  2400              MOVS     r4,#0
0000ea  2e00              CMP      r6,#0
0000ec  dd10              BLE      |L1.272|
                  |L1.238|
;;;96         switch (BitsPerPixel) {
0000ee  2f01              CMP      r7,#1
0000f0  d10a              BNE      |L1.264|
;;;97         case 1:
;;;98           _DrawBitLine1BPP(x0, y0 - i, pData, Diff, xsize, pTrans);
0000f2  9a05              LDR      r2,[sp,#0x14]
0000f4  9200              STR      r2,[sp,#0]
0000f6  eba90104          SUB      r1,r9,r4
0000fa  4653              MOV      r3,r10
0000fc  f8cdb004          STR      r11,[sp,#4]
000100  462a              MOV      r2,r5
000102  9803              LDR      r0,[sp,#0xc]
000104  f7fffffe          BL       _DrawBitLine1BPP
                  |L1.264|
;;;99           break;
;;;100        }
;;;101        pData += BytesPerLine;
000108  4445              ADD      r5,r5,r8
00010a  1c64              ADDS     r4,r4,#1              ;95
00010c  42b4              CMP      r4,r6                 ;95
00010e  dbee              BLT      |L1.238|
                  |L1.272|
;;;102      }
;;;103    }
000110  b007              ADD      sp,sp,#0x1c
000112  e8bd8ff0          POP      {r4-r11,pc}
;;;104    
                          ENDP

                  _Rect2TextRect PROC
;;;112    */
;;;113    static void _Rect2TextRect(GUI_RECT * pRect) {
000116  4770              BX       lr
;;;114      GUI_USE_PARA(pRect);
;;;115      /* nothing to do in case of rotating text by 180 degrees */
;;;116    }
;;;117    
                          ENDP

                  _TransformPoint180 PROC
;;;126    */
;;;127    static void _TransformPoint180(int * pXPos, int * pYPos) {
000118  b570              PUSH     {r4-r6,lr}
00011a  b082              SUB      sp,sp,#8
00011c  4605              MOV      r5,r0
00011e  460e              MOV      r6,r1
;;;128      GUI_RECT ClientRect = {0};
000120  2200              MOVS     r2,#0
000122  9200              STR      r2,[sp,#0]
000124  9201              STR      r2,[sp,#4]
;;;129      int xPos, yPos, xNumPixel, yNumPixel;
;;;130      /* Get the client rectangle */
;;;131      #if GUI_WINSUPPORT
;;;132        WM_GetWindowRect(&ClientRect);
000126  4668              MOV      r0,sp
000128  f7fffffe          BL       WM_GetWindowRect
;;;133      #else
;;;134        GUI_GetClientRect(&ClientRect);
;;;135      #endif
;;;136      xNumPixel = LCD_GetXSize() - 1;
00012c  f7fffffe          BL       LCD_GetXSize
000130  1e44              SUBS     r4,r0,#1
;;;137      yNumPixel = LCD_GetYSize() - 1;
000132  f7fffffe          BL       LCD_GetYSize
000136  1e42              SUBS     r2,r0,#1
;;;138      if (ClientRect.x1 > xNumPixel) {
000138  f9bd0004          LDRSH    r0,[sp,#4]
00013c  42a0              CMP      r0,r4
00013e  dd01              BLE      |L1.324|
;;;139        ClientRect.x1 = xNumPixel;
000140  f8ad4004          STRH     r4,[sp,#4]
                  |L1.324|
;;;140      }
;;;141      if (ClientRect.y1 > yNumPixel) {
000144  f9bd0006          LDRSH    r0,[sp,#6]
000148  4290              CMP      r0,r2
00014a  dd01              BLE      |L1.336|
;;;142        ClientRect.y1 = yNumPixel;
00014c  f8ad2006          STRH     r2,[sp,#6]
                  |L1.336|
;;;143      }
;;;144      /* Save old positions */
;;;145      xPos = *pXPos;
000150  682a              LDR      r2,[r5,#0]
;;;146      yPos = *pYPos;
000152  6831              LDR      r1,[r6,#0]
;;;147      /* Handle rotation of text rectangle */
;;;148      *pXPos = ClientRect.x0 + GUI_RectDispString.x1 - (xPos - GUI_RectDispString.x0);
000154  4875              LDR      r0,|L1.812|
000156  f9bd3000          LDRSH    r3,[sp,#0]
00015a  f9b0c004          LDRSH    r12,[r0,#4]  ; GUI_RectDispString
00015e  4463              ADD      r3,r3,r12
000160  f9b0c000          LDRSH    r12,[r0,#0]  ; GUI_RectDispString
000164  eba2020c          SUB      r2,r2,r12
000168  1a9a              SUBS     r2,r3,r2
00016a  602a              STR      r2,[r5,#0]
;;;149      *pYPos = ClientRect.y0 + GUI_RectDispString.y1 - (yPos - GUI_RectDispString.y0);
00016c  f9b03006          LDRSH    r3,[r0,#6]  ; GUI_RectDispString
000170  f9bd2002          LDRSH    r2,[sp,#2]
000174  f9b00002          LDRSH    r0,[r0,#2]  ; GUI_RectDispString
000178  441a              ADD      r2,r2,r3
00017a  1a08              SUBS     r0,r1,r0
00017c  1a10              SUBS     r0,r2,r0
00017e  6030              STR      r0,[r6,#0]
;;;150    }
000180  b002              ADD      sp,sp,#8
000182  bd70              POP      {r4-r6,pc}
;;;151    
                          ENDP

                  _DrawBitmap180 PROC
;;;155    */
;;;156    static void _DrawBitmap180(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000184  e92d4fff          PUSH     {r0-r11,lr}
;;;157                               int BitsPerPixel, int BytesPerLine,
;;;158                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;159    {
000188  b087              SUB      sp,sp,#0x1c
00018a  4691              MOV      r9,r2
00018c  f8ddb058          LDR      r11,[sp,#0x58]
000190  f8dda060          LDR      r10,[sp,#0x60]
;;;160      U8  Data = 0;
000194  2500              MOVS     r5,#0
;;;161      int x1, y1;
;;;162      /* Handle the optional Y-magnification */
;;;163      y1 = y0 + ysize - 1;
000196  9908              LDR      r1,[sp,#0x20]
000198  980a              LDR      r0,[sp,#0x28]
00019a  4408              ADD      r0,r0,r1
00019c  1e40              SUBS     r0,r0,#1
00019e  9005              STR      r0,[sp,#0x14]
;;;164      x1 = x0 + xsize - 1;
0001a0  9807              LDR      r0,[sp,#0x1c]
0001a2  4448              ADD      r0,r0,r9
0001a4  1e40              SUBS     r0,r0,#1
0001a6  9006              STR      r0,[sp,#0x18]
;;;165      /* Rotate positions */
;;;166      _TransformPoint180(&x0, &y0);
0001a8  a908              ADD      r1,sp,#0x20
0001aa  a807              ADD      r0,sp,#0x1c
0001ac  f7fffffe          BL       _TransformPoint180
;;;167      _TransformPoint180(&x1, &y1);
0001b0  a905              ADD      r1,sp,#0x14
0001b2  a806              ADD      r0,sp,#0x18
0001b4  f7fffffe          BL       _TransformPoint180
;;;168      /*  Handle BITMAP without magnification */
;;;169      if ((xMul == 1) && (yMul == 1)) {
0001b8  9814              LDR      r0,[sp,#0x50]
;;;170        int Diff;
;;;171        /* Clip top */
;;;172        if (y0 > GUI_Context.ClipRect.y1) {
0001ba  4b5b              LDR      r3,|L1.808|
0001bc  2801              CMP      r0,#1                 ;169
0001be  d102              BNE      |L1.454|
0001c0  9815              LDR      r0,[sp,#0x54]         ;169
0001c2  2801              CMP      r0,#1                 ;169
0001c4  d022              BEQ      |L1.524|
                  |L1.454|
;;;173          int Diff = y0 - GUI_Context.ClipRect.y1;
;;;174          y0       = GUI_Context.ClipRect.y1;
;;;175          pPixel  += Diff * BytesPerLine;
;;;176          ysize   -= Diff;
;;;177        }
;;;178        /* Clip bottom */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
;;;181          ysize -= Diff;
;;;182        }
;;;183        if (ysize <= 0) {
;;;184    		  return;
;;;185        }
;;;186        /* Clip right side */
;;;187        if (x1 < GUI_Context.ClipRect.x0) {
;;;188          int Diff = GUI_Context.ClipRect.x0 - x1;
;;;189          xsize   -= Diff;
;;;190        }
;;;191        /* Clip left side */
;;;192        Diff = 0;
;;;193        if (x0 > GUI_Context.ClipRect.x1) {
;;;194          Diff   = x0 - GUI_Context.ClipRect.x1;
;;;195    			xsize -= Diff;
;;;196    			switch (BitsPerPixel) {
;;;197    			case 1:
;;;198      			pPixel += (Diff >> 3); x0 += (Diff >> 3) << 3; Diff &= 7;
;;;199    				break;
;;;200    			}
;;;201        }
;;;202        if (xsize <= 0) {
;;;203    		  return;
;;;204        }
;;;205        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;206      } else {
;;;207        /* Handle BITMAP with magnification */
;;;208        int x, y;
;;;209        int yi;
;;;210        int Shift = 8 - BitsPerPixel;
0001c6  f1cb0008          RSB      r0,r11,#8
0001ca  9002              STR      r0,[sp,#8]
;;;211        for (y = y0, yi = 0; yi < ysize; yi++, y -= yMul, pPixel += BytesPerLine) {
0001cc  9808              LDR      r0,[sp,#0x20]
0001ce  9004              STR      r0,[sp,#0x10]
0001d0  2000              MOVS     r0,#0
0001d2  9003              STR      r0,[sp,#0xc]
0001d4  980a              LDR      r0,[sp,#0x28]
0001d6  2800              CMP      r0,#0
0001d8  dd61              BLE      |L1.670|
                  |L1.474|
;;;212          int yMax = y + yMul - 1;
0001da  9915              LDR      r1,[sp,#0x54]
0001dc  9804              LDR      r0,[sp,#0x10]
0001de  4408              ADD      r0,r0,r1
0001e0  1e40              SUBS     r0,r0,#1
0001e2  9001              STR      r0,[sp,#4]
;;;213          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;214          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
0001e4  4950              LDR      r1,|L1.808|
0001e6  9801              LDR      r0,[sp,#4]
0001e8  f9b1200a          LDRSH    r2,[r1,#0xa]  ; GUI_Context
0001ec  4282              CMP      r2,r0
0001ee  dc75              BGT      |L1.732|
0001f0  f9b1200e          LDRSH    r2,[r1,#0xe]  ; GUI_Context
0001f4  9804              LDR      r0,[sp,#0x10]
0001f6  4282              CMP      r2,r0
0001f8  db70              BLT      |L1.732|
;;;215            int BitsLeft = 0;
0001fa  2400              MOVS     r4,#0
;;;216            int xi;
;;;217            const U8 GUI_UNI_PTR * pDataLine = pPixel;
0001fc  4657              MOV      r7,r10
;;;218            for (x = x0, xi = 0; xi < xsize; xi++, x -= xMul) {
0001fe  9e07              LDR      r6,[sp,#0x1c]
000200  46a0              MOV      r8,r4
000202  f1b90f00          CMP      r9,#0
000206  dd7d              BLE      |L1.772|
                  |L1.520|
;;;219              U8  Index;
;;;220              if (!BitsLeft) {
000208  b3ec              CBZ      r4,|L1.646|
00020a  e04e              B        |L1.682|
                  |L1.524|
00020c  f9b3000e          LDRSH    r0,[r3,#0xe]          ;172  ; GUI_Context
000210  9908              LDR      r1,[sp,#0x20]         ;172
000212  4288              CMP      r0,r1                 ;172
000214  da07              BGE      |L1.550|
000216  1a09              SUBS     r1,r1,r0              ;173
000218  9008              STR      r0,[sp,#0x20]         ;174
00021a  9817              LDR      r0,[sp,#0x5c]         ;175
00021c  fb01aa00          MLA      r10,r1,r0,r10         ;175
000220  980a              LDR      r0,[sp,#0x28]         ;176
000222  1a40              SUBS     r0,r0,r1              ;176
000224  900a              STR      r0,[sp,#0x28]         ;176
                  |L1.550|
000226  f9b3000a          LDRSH    r0,[r3,#0xa]          ;179  ; GUI_Context
00022a  9905              LDR      r1,[sp,#0x14]         ;179
00022c  4288              CMP      r0,r1                 ;179
00022e  dd03              BLE      |L1.568|
000230  1a40              SUBS     r0,r0,r1              ;180
000232  990a              LDR      r1,[sp,#0x28]         ;181
000234  1a08              SUBS     r0,r1,r0              ;181
000236  900a              STR      r0,[sp,#0x28]         ;181
                  |L1.568|
000238  980a              LDR      r0,[sp,#0x28]         ;183
00023a  2800              CMP      r0,#0                 ;183
00023c  dd2f              BLE      |L1.670|
00023e  f9b30008          LDRSH    r0,[r3,#8]            ;187  ; GUI_Context
000242  9906              LDR      r1,[sp,#0x18]         ;187
000244  4288              CMP      r0,r1                 ;187
000246  dd02              BLE      |L1.590|
000248  1a40              SUBS     r0,r0,r1              ;188
00024a  eba90900          SUB      r9,r9,r0              ;189
                  |L1.590|
00024e  2200              MOVS     r2,#0                 ;192
000250  f9b3100c          LDRSH    r1,[r3,#0xc]          ;193  ; GUI_Context
000254  9807              LDR      r0,[sp,#0x1c]         ;193
000256  4281              CMP      r1,r0                 ;193
000258  da0d              BGE      |L1.630|
00025a  1a42              SUBS     r2,r0,r1              ;194
00025c  eba90902          SUB      r9,r9,r2              ;195
000260  f1bb0f01          CMP      r11,#1                ;196
000264  d107              BNE      |L1.630|
000266  eb0a0ae2          ADD      r10,r10,r2,ASR #3     ;198
00026a  f0220107          BIC      r1,r2,#7              ;198
00026e  4408              ADD      r0,r0,r1              ;198
000270  9007              STR      r0,[sp,#0x1c]         ;198
000272  f0020207          AND      r2,r2,#7              ;198
                  |L1.630|
000276  f1b90f00          CMP      r9,#0                 ;202
00027a  dd10              BLE      |L1.670|
00027c  9b19              LDR      r3,[sp,#0x64]         ;205
00027e  9817              LDR      r0,[sp,#0x5c]         ;205
000280  f8cdb000          STR      r11,[sp,#0]           ;205
000284  e000              B        |L1.648|
                  |L1.646|
000286  e00d              B        |L1.676|
                  |L1.648|
000288  9203              STR      r2,[sp,#0xc]          ;205
00028a  f8cda008          STR      r10,[sp,#8]           ;205
00028e  9304              STR      r3,[sp,#0x10]         ;205
000290  9001              STR      r0,[sp,#4]            ;205
000292  464a              MOV      r2,r9                 ;205
000294  9b0a              LDR      r3,[sp,#0x28]         ;205
000296  9908              LDR      r1,[sp,#0x20]         ;205
000298  9807              LDR      r0,[sp,#0x1c]         ;205
00029a  f7fffffe          BL       _DrawBitmap
                  |L1.670|
;;;221                Data = *pDataLine++;
;;;222                BitsLeft =8;
;;;223              }
;;;224              Index = Data >> Shift;
;;;225              Data    <<= BitsPerPixel;
;;;226              BitsLeft -= BitsPerPixel;
;;;227              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;228                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;229                if (pTrans) {
;;;230                  LCD_COLORINDEX = *(pTrans + Index);
;;;231                } else {
;;;232                  LCD_COLORINDEX = Index;
;;;233                }
;;;234                LCD_FillRect(x - xMul + 1, y, x, yMax);
;;;235                LCD_COLORINDEX = OldColor;
;;;236              }
;;;237            }
;;;238          }
;;;239        }
;;;240      }
;;;241    }
00029e  b00b              ADD      sp,sp,#0x2c
0002a0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.676|
0002a4  f8175b01          LDRB     r5,[r7],#1            ;221
0002a8  2408              MOVS     r4,#8                 ;222
                  |L1.682|
0002aa  9802              LDR      r0,[sp,#8]            ;224
0002ac  fa25f000          LSR      r0,r5,r0              ;224
0002b0  fa05f10b          LSL      r1,r5,r11             ;225
0002b4  b2cd              UXTB     r5,r1                 ;225
0002b6  eba4040b          SUB      r4,r4,r11             ;226
0002ba  b920              CBNZ     r0,|L1.710|
0002bc  491a              LDR      r1,|L1.808|
0002be  7c09              LDRB     r1,[r1,#0x10]         ;227  ; GUI_Context
0002c0  f0110f02          TST      r1,#2                 ;227
0002c4  d118              BNE      |L1.760|
                  |L1.710|
0002c6  4918              LDR      r1,|L1.808|
0002c8  8849              LDRH     r1,[r1,#2]            ;228  ; GUI_Context
0002ca  9100              STR      r1,[sp,#0]            ;228
0002cc  9919              LDR      r1,[sp,#0x64]         ;229
0002ce  b131              CBZ      r1,|L1.734|
0002d0  9919              LDR      r1,[sp,#0x64]         ;230
0002d2  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;230
0002d6  4814              LDR      r0,|L1.808|
0002d8  8041              STRH     r1,[r0,#2]            ;230
0002da  e002              B        |L1.738|
                  |L1.732|
0002dc  e012              B        |L1.772|
                  |L1.734|
0002de  4912              LDR      r1,|L1.808|
0002e0  8048              STRH     r0,[r1,#2]            ;232
                  |L1.738|
0002e2  9814              LDR      r0,[sp,#0x50]         ;234
0002e4  4632              MOV      r2,r6                 ;234
0002e6  1a30              SUBS     r0,r6,r0              ;234
0002e8  1c40              ADDS     r0,r0,#1              ;234
0002ea  9b01              LDR      r3,[sp,#4]            ;234
0002ec  9904              LDR      r1,[sp,#0x10]         ;234
0002ee  f7fffffe          BL       LCD_FillRect
0002f2  490d              LDR      r1,|L1.808|
0002f4  9800              LDR      r0,[sp,#0]            ;235
0002f6  8048              STRH     r0,[r1,#2]            ;235
                  |L1.760|
0002f8  f1080801          ADD      r8,r8,#1              ;218
0002fc  9814              LDR      r0,[sp,#0x50]         ;218
0002fe  1a36              SUBS     r6,r6,r0              ;218
000300  45c8              CMP      r8,r9                 ;218
000302  db81              BLT      |L1.520|
                  |L1.772|
000304  9803              LDR      r0,[sp,#0xc]          ;211
000306  1c40              ADDS     r0,r0,#1              ;211
000308  9003              STR      r0,[sp,#0xc]          ;211
00030a  9915              LDR      r1,[sp,#0x54]         ;211
00030c  9804              LDR      r0,[sp,#0x10]         ;211
00030e  1a40              SUBS     r0,r0,r1              ;211
000310  9004              STR      r0,[sp,#0x10]         ;211
000312  9817              LDR      r0,[sp,#0x5c]         ;211
000314  4482              ADD      r10,r10,r0            ;211
000316  990a              LDR      r1,[sp,#0x28]         ;211
000318  9803              LDR      r0,[sp,#0xc]          ;211
00031a  4288              CMP      r0,r1                 ;211
00031c  f6ffaf5d          BLT      |L1.474|
000320  b00b              ADD      sp,sp,#0x2c
000322  e8bd8ff0          POP      {r4-r11,pc}
;;;242    
                          ENDP

000326  0000              DCW      0x0000
                  |L1.808|
                          DCD      GUI_Context
                  |L1.812|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIList180
                          DCD      _DrawBitmap180
                          DCD      _Rect2TextRect
