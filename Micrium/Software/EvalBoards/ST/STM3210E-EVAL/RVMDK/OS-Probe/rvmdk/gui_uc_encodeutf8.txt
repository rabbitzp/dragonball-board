; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_uc_encodeutf8.o --depend=.\rvmdk\gui_uc_encodeutf8.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_uc_encodeutf8.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_UC_EncodeUTF8.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetCharCode PROC
;;;34     */
;;;35     static U16 _GetCharCode(const char GUI_UNI_PTR * s) {
000000  7801              LDRB     r1,[r0,#0]
;;;36       U16 r;
;;;37       U8 Char = *(const U8*)s;
;;;38       if ((Char & 0x80) == 0) {                /* Single byte (ASCII)  */
000002  f0110f80          TST      r1,#0x80
000006  d009              BEQ      |L1.28|
;;;39         r = Char;
;;;40       } else if ((Char & 0xe0) == 0xc0) {      /* Double byte sequence */
000008  f00102e0          AND      r2,r1,#0xe0
00000c  2ac0              CMP      r2,#0xc0
00000e  d007              BEQ      |L1.32|
;;;41         r = (Char & 0x1f) << 6;
;;;42         Char = *(++s);
;;;43         Char &= 0x3f;
;;;44         r |= Char;
;;;45       } else if ((Char & 0xf0) == 0xe0) {      /* 3 byte sequence      */
000010  f00102f0          AND      r2,r1,#0xf0
000014  2ae0              CMP      r2,#0xe0
000016  d00a              BEQ      |L1.46|
;;;46         r = (Char & 0x0f) << 12;
;;;47         Char = *(++s);
;;;48         Char &= 0x3f;
;;;49         r |= (Char << 6);
;;;50         Char = *(++s);
;;;51         Char &= 0x3f;
;;;52         r |= Char;
;;;53       } else {
;;;54         GUI_DEBUG_ERROROUT("Illegal character during UTF-8 decoding!");
;;;55         r = 1;       /* Illegal character. To avoid endless loops in upper layers, we return 1 rather than 0. */
000018  2001              MOVS     r0,#1
;;;56       }
;;;57       return r;
;;;58     }
00001a  4770              BX       lr
                  |L1.28|
00001c  4608              MOV      r0,r1                 ;39
00001e  4770              BX       lr
                  |L1.32|
000020  06c9              LSLS     r1,r1,#27             ;41
000022  0d49              LSRS     r1,r1,#21             ;41
000024  7840              LDRB     r0,[r0,#1]            ;42
000026  f000003f          AND      r0,r0,#0x3f           ;43
00002a  4308              ORRS     r0,r0,r1              ;44
00002c  4770              BX       lr
                  |L1.46|
00002e  0709              LSLS     r1,r1,#28             ;46
000030  0c09              LSRS     r1,r1,#16             ;46
000032  7842              LDRB     r2,[r0,#1]            ;47
000034  f002023f          AND      r2,r2,#0x3f           ;48
000038  ea411182          ORR      r1,r1,r2,LSL #6       ;49
00003c  7880              LDRB     r0,[r0,#2]            ;50
00003e  f000003f          AND      r0,r0,#0x3f           ;51
000042  4308              ORRS     r0,r0,r1              ;52
000044  4770              BX       lr
;;;59     
                          ENDP

                  _GetCharSize PROC
;;;66     */
;;;67     static int _GetCharSize(const char GUI_UNI_PTR * s) {
000046  7800              LDRB     r0,[r0,#0]
;;;68       U8 Char = *s;
;;;69       if ((Char & 0x80) == 0) {
000048  f0100f80          TST      r0,#0x80
00004c  d009              BEQ      |L1.98|
;;;70         return 1;
;;;71       } else if ((Char & 0xe0) == 0xc0) {
00004e  f00001e0          AND      r1,r0,#0xe0
000052  29c0              CMP      r1,#0xc0
000054  d007              BEQ      |L1.102|
;;;72         return 2;
;;;73       } else if ((Char & 0xf0) == 0xe0) {
000056  f00000f0          AND      r0,r0,#0xf0
00005a  28e0              CMP      r0,#0xe0
00005c  d005              BEQ      |L1.106|
;;;74         return 3;
;;;75       }
;;;76       GUI_DEBUG_ERROROUT("Illegal character during UTF-8 decoding!");
;;;77       return 1;       /* Illegal character. To avoid endless loops in upper layers, we return 1 rather than 0. */
00005e  2001              MOVS     r0,#1
;;;78     }
000060  4770              BX       lr
                  |L1.98|
000062  2001              MOVS     r0,#1                 ;70
000064  4770              BX       lr
                  |L1.102|
000066  2002              MOVS     r0,#2                 ;72
000068  4770              BX       lr
                  |L1.106|
00006a  2003              MOVS     r0,#3                 ;74
00006c  4770              BX       lr
;;;79     
                          ENDP

                  _CalcSizeOfChar PROC
;;;86     */
;;;87     static int _CalcSizeOfChar(U16 Char) {
00006e  f4104f78          TST      r0,#0xf800
;;;88       int r;
;;;89       if (Char & 0xF800) {                /* Single byte (ASCII)  */
000072  d001              BEQ      |L1.120|
;;;90         r = 3;
000074  2003              MOVS     r0,#3
;;;91       } else if (Char & 0xFF80) {         /* Double byte sequence */
;;;92         r = 2;
;;;93       } else {                            /* 3 byte sequence      */
;;;94         r = 1;
;;;95       }
;;;96       return r;
;;;97     }
000076  4770              BX       lr
                  |L1.120|
000078  09c0              LSRS     r0,r0,#7              ;91
00007a  d001              BEQ      |L1.128|
00007c  2002              MOVS     r0,#2                 ;92
00007e  4770              BX       lr
                  |L1.128|
000080  2001              MOVS     r0,#1                 ;94
000082  4770              BX       lr
;;;98     
                          ENDP

                  _Encode PROC
;;;105    */
;;;106    static int _Encode(char *s, U16 Char) {
000084  b570              PUSH     {r4-r6,lr}
000086  4605              MOV      r5,r0
000088  460c              MOV      r4,r1
;;;107      int r;
;;;108      r = _CalcSizeOfChar(Char);
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       _CalcSizeOfChar
;;;109      switch (r) {
000090  2801              CMP      r0,#1
000092  d013              BEQ      |L1.188|
;;;110      case 1:
;;;111        *s = (char)Char;
;;;112        break;
;;;113      case 2:
;;;114        *s++ = 0xC0 | (Char >> 6);
;;;115        *s   = 0x80 | (Char & 0x3F);
000094  f004013f          AND      r1,r4,#0x3f
000098  f0410180          ORR      r1,r1,#0x80
00009c  2802              CMP      r0,#2                 ;109
00009e  d00f              BEQ      |L1.192|
0000a0  2803              CMP      r0,#3                 ;109
0000a2  d10a              BNE      |L1.186|
;;;116        break;
;;;117      case 3:
;;;118        *s++ = 0xE0 | (Char >> 12);
0000a4  22e0              MOVS     r2,#0xe0
0000a6  ea423214          ORR      r2,r2,r4,LSR #12
0000aa  702a              STRB     r2,[r5,#0]
0000ac  1c6a              ADDS     r2,r5,#1
;;;119        *s++ = 0x80 | ((Char >> 6) & 0x3F);
0000ae  f3c41385          UBFX     r3,r4,#6,#6
0000b2  f0430380          ORR      r3,r3,#0x80
0000b6  7013              STRB     r3,[r2,#0]
;;;120        *s   = 0x80 | (Char & 0x3F);
0000b8  7051              STRB     r1,[r2,#1]
                  |L1.186|
;;;121        break;
;;;122      }
;;;123      return r;
;;;124    }
0000ba  bd70              POP      {r4-r6,pc}
                  |L1.188|
0000bc  702c              STRB     r4,[r5,#0]            ;111
0000be  bd70              POP      {r4-r6,pc}
                  |L1.192|
0000c0  22c0              MOVS     r2,#0xc0              ;114
0000c2  ea421294          ORR      r2,r2,r4,LSR #6       ;114
0000c6  702a              STRB     r2,[r5,#0]            ;114
0000c8  1c6a              ADDS     r2,r5,#1              ;114
0000ca  7011              STRB     r1,[r2,#0]            ;115
0000cc  bd70              POP      {r4-r6,pc}
;;;125    
                          ENDP

                  GUI_UC_SetEncodeUTF8 PROC
;;;146    */
;;;147    void GUI_UC_SetEncodeUTF8(void) {
0000ce  b510              PUSH     {r4,lr}
;;;148      #if GUI_SUPPORT_UNICODE
;;;149        GUI_LOCK();
0000d0  f7fffffe          BL       GUI_Lock
;;;150        GUI_Context.pUC_API = &_API_Table;
0000d4  4904              LDR      r1,|L1.232|
0000d6  4803              LDR      r0,|L1.228|
0000d8  6208              STR      r0,[r1,#0x20]  ; GUI_Context
;;;151        GUI_UNLOCK();
0000da  e8bd4010          POP      {r4,lr}
0000de  f7ffbffe          B.W      GUI_Unlock
;;;152      #endif
;;;153    }
;;;154    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L1.228|
                          DCD      ||.constdata||
                  |L1.232|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _API_Table
                          DCD      _GetCharCode
                          DCD      _GetCharSize
                          DCD      _CalcSizeOfChar
                          DCD      _Encode
