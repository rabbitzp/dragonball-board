; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lib_mem.o --depend=.\rvmdk\lib_mem.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lib_mem.crf ..\..\..\..\..\uC-LIB\lib_mem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  Mem_Init PROC
;;;156    
;;;157    void  Mem_Init (void)
000000  4770              BX       lr
;;;158    {
;;;159    #if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
;;;160        MEM_POOL  *pmem_pool;
;;;161    
;;;162                                                                            /* --------- INIT MEM HEAP SEG / POOL --------- */
;;;163        pmem_pool                   = (MEM_POOL   *)&Mem_PoolHeap;
;;;164        pmem_pool->Type             = (LIB_MEM_TYPE) LIB_MEM_TYPE_HEAP;
;;;165        pmem_pool->SegPrevPtr       = (MEM_POOL   *) 0;
;;;166        pmem_pool->SegNextPtr       = (MEM_POOL   *) 0;
;;;167        pmem_pool->PoolPrevPtr      = (MEM_POOL   *) 0;
;;;168        pmem_pool->PoolNextPtr      = (MEM_POOL   *) 0;
;;;169        pmem_pool->PoolAddrStart    = (void       *) 0;
;;;170        pmem_pool->PoolAddrEnd      = (void       *) 0;
;;;171        pmem_pool->PoolPtrs         = (void      **) 0;
;;;172        pmem_pool->BlkSize          = (CPU_SIZE_T  ) 0;
;;;173        pmem_pool->BlkNbr           = (CPU_SIZE_T  ) 0;
;;;174        pmem_pool->BlkIx            = (MEM_POOL_IX ) 0;
;;;175        pmem_pool->SegAddr          = (void       *)&Mem_Heap[0];
;;;176        pmem_pool->SegAddrNextAvail = (void       *)&Mem_Heap[0];
;;;177        pmem_pool->SegSizeTot       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
;;;178        pmem_pool->SegSizeRem       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
;;;179    
;;;180                                                                            /* ------------ INIT MEM POOL TBL ------------- */
;;;181        Mem_PoolTbl = &Mem_PoolHeap;
;;;182    #endif
;;;183    }
;;;184    
                          ENDP

                  Mem_Set PROC
;;;252    
;;;253    void  Mem_Set (void        *pmem,
000002  2a00              CMP      r2,#0
;;;254                   CPU_INT08U   data_val,
;;;255                   CPU_SIZE_T   size)
;;;256    {
;;;257        CPU_SIZE_T   size_rem;
;;;258        CPU_ALIGN    data_align;
;;;259        CPU_ALIGN   *pmem_align;
;;;260        CPU_INT08U  *pmem_08;
;;;261        CPU_INT08U   mem_align_modulo;
;;;262        CPU_INT08U   i;
;;;263    
;;;264    
;;;265        if (size < 1) {                                             /* See Note #1.                                         */
000004  d026              BEQ      |L1.84|
;;;266            return;
;;;267        }
;;;268        if (pmem == (void *)0) {
000006  2800              CMP      r0,#0
000008  d024              BEQ      |L1.84|
;;;269            return;
;;;270        }
;;;271    
;;;272    
;;;273        data_align = 0;
00000a  f04f0c00          MOV      r12,#0
;;;274        for (i = 0; i < sizeof(CPU_ALIGN); i++) {                   /* Fill each data_align octet with data val.            */
00000e  2300              MOVS     r3,#0
                  |L1.16|
;;;275            data_align <<=  DEF_OCTET_NBR_BITS;
000010  ea4f2c0c          LSL      r12,r12,#8
;;;276            data_align  |= (CPU_ALIGN)data_val;
000014  ea4c0c01          ORR      r12,r12,r1
000018  1c5b              ADDS     r3,r3,#1              ;274
00001a  b2db              UXTB     r3,r3                 ;274
00001c  2b04              CMP      r3,#4                 ;274
00001e  d3f7              BCC      |L1.16|
;;;277        }
;;;278    
;;;279        size_rem         = (CPU_SIZE_T)size;
;;;280        mem_align_modulo = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));    /* See Note #3.                             */
000020  f0000303          AND      r3,r0,#3
;;;281    
;;;282        pmem_08 = (CPU_INT08U *)pmem;
;;;283        if (mem_align_modulo != 0) {                                /* If leading octets avail,                   ...       */
000024  b92b              CBNZ     r3,|L1.50|
000026  e007              B        |L1.56|
                  |L1.40|
;;;284            i = mem_align_modulo;
;;;285            while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
;;;286                   (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
;;;287               *pmem_08++ = data_val;
000028  f8001b01          STRB     r1,[r0],#1
;;;288                size_rem -= sizeof(CPU_INT08U);
00002c  1e52              SUBS     r2,r2,#1
;;;289                i++;
00002e  1c5b              ADDS     r3,r3,#1
000030  b2db              UXTB     r3,r3
                  |L1.50|
000032  b10a              CBZ      r2,|L1.56|
000034  2b04              CMP      r3,#4                 ;286
000036  d3f7              BCC      |L1.40|
                  |L1.56|
;;;290            }
;;;291        }
;;;292    
;;;293        pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
;;;294        while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
000038  2a04              CMP      r2,#4
00003a  d304              BCC      |L1.70|
                  |L1.60|
;;;295           *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
00003c  f840cb04          STR      r12,[r0],#4
;;;296            size_rem    -= sizeof(CPU_ALIGN);
000040  1f12              SUBS     r2,r2,#4
000042  2a04              CMP      r2,#4                 ;294
000044  d2fa              BCS      |L1.60|
                  |L1.70|
;;;297        }
;;;298    
;;;299        pmem_08 = (CPU_INT08U *)pmem_align;
;;;300        while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
000046  2a00              CMP      r2,#0
000048  d004              BEQ      |L1.84|
                  |L1.74|
;;;301           *pmem_08++   = data_val;
00004a  f8001b01          STRB     r1,[r0],#1
;;;302            size_rem   -= sizeof(CPU_INT08U);
00004e  1e52              SUBS     r2,r2,#1
000050  2a00              CMP      r2,#0                 ;300
000052  d1fa              BNE      |L1.74|
                  |L1.84|
;;;303        }
;;;304    }
000054  4770              BX       lr
;;;305    
                          ENDP

                  Mem_Clr PROC
;;;208    
;;;209    void  Mem_Clr (void        *pmem,
000056  460a              MOV      r2,r1
;;;210                   CPU_SIZE_T   size)
;;;211    {
;;;212        Mem_Set((void     *)pmem,
000058  2100              MOVS     r1,#0
00005a  e7fe              B        Mem_Set
;;;213                (CPU_INT08U)0,                                      /* See Note #2.                                         */
;;;214                (CPU_SIZE_T)size);
;;;215    }
;;;216    
                          ENDP

                  Mem_Cmp PROC
;;;456    /*$PAGE*/
;;;457    CPU_BOOLEAN  Mem_Cmp (void        *p1_mem,
00005c  b430              PUSH     {r4,r5}
;;;458                          void        *p2_mem,
;;;459                          CPU_SIZE_T   size)
;;;460    {
00005e  4603              MOV      r3,r0
;;;461        CPU_SIZE_T    size_rem;
;;;462        CPU_ALIGN    *p1_mem_align;
;;;463        CPU_ALIGN    *p2_mem_align;
;;;464        CPU_INT08U   *p1_mem_08;
;;;465        CPU_INT08U   *p2_mem_08;
;;;466        CPU_INT08U    i;
;;;467        CPU_INT08U    mem_align_modulo_1;
;;;468        CPU_INT08U    mem_align_modulo_2;
;;;469        CPU_BOOLEAN   mem_aligned;
;;;470        CPU_BOOLEAN   mem_cmp;
;;;471    
;;;472    
;;;473        if (size < 1) {                                             /* See Note #1.                                         */
000060  b162              CBZ      r2,|L1.124|
;;;474            return (DEF_YES);
;;;475        }
;;;476        if (p1_mem == (void *)0) {
000062  b173              CBZ      r3,|L1.130|
;;;477            return (DEF_NO);
;;;478        }
;;;479        if (p2_mem == (void *)0) {
000064  b181              CBZ      r1,|L1.136|
;;;480            return (DEF_NO);
;;;481        }
;;;482    
;;;483    
;;;484        mem_cmp            =  DEF_YES;                              /* Assume mem bufs are identical until cmp fails.       */
000066  2001              MOVS     r0,#1
;;;485        size_rem           =  size;
;;;486                                                                    /* Start @ end of mem bufs (see Note #2).               */
;;;487        p1_mem_08          = (CPU_INT08U *)p1_mem + size;
000068  4413              ADD      r3,r3,r2
;;;488        p2_mem_08          = (CPU_INT08U *)p2_mem + size;
00006a  4411              ADD      r1,r1,r2
;;;489                                                                    /* See Note #4.                                         */
;;;490        mem_align_modulo_1 = (CPU_INT08U  )((CPU_ADDR)p1_mem_08 % sizeof(CPU_ALIGN));
00006c  f0030c03          AND      r12,r3,#3
;;;491        mem_align_modulo_2 = (CPU_INT08U  )((CPU_ADDR)p2_mem_08 % sizeof(CPU_ALIGN));
000070  f0010403          AND      r4,r1,#3
;;;492    
;;;493        mem_aligned        = (mem_align_modulo_1 == mem_align_modulo_2) ? DEF_YES : DEF_NO;
000074  45a4              CMP      r12,r4
000076  d10a              BNE      |L1.142|
000078  2401              MOVS     r4,#1
00007a  e009              B        |L1.144|
                  |L1.124|
;;;494    
;;;495        if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
;;;496                                                                    /* ... optimize cmp for mem buf alignment.              */
;;;497            if (mem_align_modulo_1 != 0) {                          /* If trailing octets avail,                  ...       */
;;;498                i = mem_align_modulo_1;
;;;499                while ((mem_cmp == DEF_YES) &&                      /* ... cmp mem bufs while identical &         ...       */
;;;500                       (size_rem > 0)       &&                      /* ... start mem buf cmp with trailing octets ...       */
;;;501                       (i        > 0)) {                            /* ... until next CPU_ALIGN word boundary.              */
;;;502                    p1_mem_08--;
;;;503                    p2_mem_08--;
;;;504                    if (*p1_mem_08 != *p2_mem_08) {                 /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;505                         mem_cmp = DEF_NO;
;;;506                    }
;;;507                    size_rem -= sizeof(CPU_INT08U);
;;;508                    i--;
;;;509                }
;;;510            }
;;;511    
;;;512            if (mem_cmp == DEF_YES) {                               /* If cmp still identical, cmp aligned mem bufs.        */
;;;513                p1_mem_align = (CPU_ALIGN *)p1_mem_08;              /* See Note #3a.                                        */
;;;514                p2_mem_align = (CPU_ALIGN *)p2_mem_08;
;;;515    
;;;516                while ((mem_cmp  == DEF_YES) &&                     /* Cmp mem bufs while identical & ...                   */
;;;517                       (size_rem >= sizeof(CPU_ALIGN))) {           /* ... mem bufs aligned on CPU_ALIGN word boundaries.   */
;;;518                    p1_mem_align--;
;;;519                    p2_mem_align--;
;;;520                    if (*p1_mem_align != *p2_mem_align) {           /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;521                         mem_cmp = DEF_NO;
;;;522                    }
;;;523                    size_rem -= sizeof(CPU_ALIGN);
;;;524                }
;;;525    
;;;526                p1_mem_08 = (CPU_INT08U *)p1_mem_align;
;;;527                p2_mem_08 = (CPU_INT08U *)p2_mem_align;
;;;528            }
;;;529        }
;;;530    
;;;531        while ((mem_cmp == DEF_YES) &&                              /* Cmp mem bufs while identical ...                     */
;;;532               (size_rem > 0)) {                                    /* ... for unaligned mem bufs or trailing octets.       */
;;;533            p1_mem_08--;
;;;534            p2_mem_08--;
;;;535            if (*p1_mem_08 != *p2_mem_08) {                         /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;536                 mem_cmp = DEF_NO;
;;;537            }
;;;538            size_rem -= sizeof(CPU_INT08U);
;;;539        }
;;;540    
;;;541        return (mem_cmp);
;;;542    }
00007c  bc30              POP      {r4,r5}
00007e  2001              MOVS     r0,#1                 ;474
000080  4770              BX       lr
                  |L1.130|
000082  bc30              POP      {r4,r5}
000084  2000              MOVS     r0,#0                 ;477
000086  4770              BX       lr
                  |L1.136|
000088  2000              MOVS     r0,#0                 ;480
                  |L1.138|
00008a  bc30              POP      {r4,r5}
00008c  4770              BX       lr
                  |L1.142|
00008e  2400              MOVS     r4,#0                 ;493
                  |L1.144|
000090  2c01              CMP      r4,#1                 ;495
000092  d12d              BNE      |L1.240|
000094  f1bc0f00          CMP      r12,#0                ;497
000098  d10c              BNE      |L1.180|
00009a  e011              B        |L1.192|
                  |L1.156|
00009c  1e5b              SUBS     r3,r3,#1              ;502
00009e  1e49              SUBS     r1,r1,#1              ;503
0000a0  781c              LDRB     r4,[r3,#0]            ;504
0000a2  780d              LDRB     r5,[r1,#0]            ;504
0000a4  42ac              CMP      r4,r5                 ;504
0000a6  d000              BEQ      |L1.170|
0000a8  2000              MOVS     r0,#0                 ;505
                  |L1.170|
0000aa  1e52              SUBS     r2,r2,#1              ;507
0000ac  f1ac0c01          SUB      r12,r12,#1            ;508
0000b0  f00c0cff          AND      r12,r12,#0xff         ;508
                  |L1.180|
0000b4  2801              CMP      r0,#1                 ;499
0000b6  d103              BNE      |L1.192|
0000b8  b112              CBZ      r2,|L1.192|
0000ba  f1bc0f00          CMP      r12,#0                ;501
0000be  d1ed              BNE      |L1.156|
                  |L1.192|
0000c0  2801              CMP      r0,#1                 ;512
0000c2  d008              BEQ      |L1.214|
0000c4  e014              B        |L1.240|
                  |L1.198|
0000c6  1f09              SUBS     r1,r1,#4              ;519
0000c8  f853cd04          LDR      r12,[r3,#-4]!         ;520
0000cc  680c              LDR      r4,[r1,#0]            ;520
0000ce  45a4              CMP      r12,r4                ;520
0000d0  d000              BEQ      |L1.212|
0000d2  2000              MOVS     r0,#0                 ;521
                  |L1.212|
0000d4  1f12              SUBS     r2,r2,#4              ;523
                  |L1.214|
0000d6  2801              CMP      r0,#1                 ;516
0000d8  d10a              BNE      |L1.240|
0000da  2a04              CMP      r2,#4                 ;517
0000dc  d2f3              BCS      |L1.198|
0000de  e007              B        |L1.240|
                  |L1.224|
0000e0  1e49              SUBS     r1,r1,#1              ;534
0000e2  f813cd01          LDRB     r12,[r3,#-1]!         ;535
0000e6  780c              LDRB     r4,[r1,#0]            ;535
0000e8  45a4              CMP      r12,r4                ;535
0000ea  d000              BEQ      |L1.238|
0000ec  2000              MOVS     r0,#0                 ;536
                  |L1.238|
0000ee  1e52              SUBS     r2,r2,#1              ;538
                  |L1.240|
0000f0  2801              CMP      r0,#1                 ;531
0000f2  d1ca              BNE      |L1.138|
0000f4  2a00              CMP      r2,#0                 ;532
0000f6  d1f3              BNE      |L1.224|
0000f8  bc30              POP      {r4,r5}
0000fa  4770              BX       lr
;;;543    
                          ENDP

