; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guidev_16.o --depend=.\rvmdk\guidev_16.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guidev_16.crf ..\..\..\..\..\uCGUI\GUI\MemDev\GUIDEV_16.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine16BPP_DDB PROC
;;;48     */
;;;49     static void _DrawBitLine16BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U16 *pSrc, int xsize, PIXELINDEX* pDest) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  9e08              LDR      r6,[sp,#0x20]
000008  9c09              LDR      r4,[sp,#0x24]
00000a  4688              MOV      r8,r1
00000c  4691              MOV      r9,r2
00000e  461d              MOV      r5,r3
;;;50       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000010  48fb              LDR      r0,|L1.1024|
000012  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000014  f0100003          ANDS     r0,r0,#3
000018  d002              BEQ      |L1.32|
00001a  2802              CMP      r0,#2
00001c  d117              BNE      |L1.78|
00001e  e006              B        |L1.46|
                  |L1.32|
;;;51       case 0:    /* Write mode */
;;;52         memcpy(pDest, pSrc, xsize * 2);
000020  0072              LSLS     r2,r6,#1
000022  4629              MOV      r1,r5
000024  4620              MOV      r0,r4
000026  e8bd47f0          POP      {r4-r10,lr}
00002a  f7ffbffe          B.W      __aeabi_memcpy
                  |L1.46|
;;;53         break;
;;;54       case LCD_DRAWMODE_TRANS:
;;;55         do {
;;;56           if (*pSrc) {
00002e  8828              LDRH     r0,[r5,#0]
000030  b138              CBZ      r0,|L1.66|
;;;57             *pDest = *pSrc;
000032  8020              STRH     r0,[r4,#0]
;;;58             if (pUsage) {
000034  b12f              CBZ      r7,|L1.66|
;;;59               GUI_USAGE_AddPixel(pUsage, x, y);
000036  68b8              LDR      r0,[r7,#8]
000038  464a              MOV      r2,r9
00003a  4641              MOV      r1,r8
00003c  6803              LDR      r3,[r0,#0]
00003e  4638              MOV      r0,r7
000040  4798              BLX      r3
                  |L1.66|
;;;60             }
;;;61           }
;;;62           x++;
000042  f1080801          ADD      r8,r8,#1
;;;63           pDest++;
000046  1ca4              ADDS     r4,r4,#2
;;;64           pSrc++;
000048  1cad              ADDS     r5,r5,#2
;;;65         } while (--xsize);
00004a  1e76              SUBS     r6,r6,#1
00004c  d1ef              BNE      |L1.46|
                  |L1.78|
;;;66         break;
;;;67       }
;;;68     }
00004e  e8bd87f0          POP      {r4-r10,pc}
;;;69     
                          ENDP

                  _XY2PTR PROC
;;;73     */
;;;74     static PIXELINDEX* _XY2PTR(int x, int y) {
000052  b570              PUSH     {r4-r6,lr}
000054  4604              MOV      r4,r0
000056  460d              MOV      r5,r1
;;;75       GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000058  48e9              LDR      r0,|L1.1024|
00005a  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00005e  f7fffffe          BL       GUI_ALLOC_h2p
;;;76       U8 *pData = (U8*)(pDev + 1);
000062  f100022c          ADD      r2,r0,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds",x,y);
;;;80         }
;;;81       #endif
;;;82       pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
000066  8841              LDRH     r1,[r0,#2]
000068  68c3              LDR      r3,[r0,#0xc]
00006a  1a69              SUBS     r1,r5,r1
00006c  b289              UXTH     r1,r1
00006e  b29b              UXTH     r3,r3
000070  fb012103          MLA      r1,r1,r3,r2
;;;83       return ((PIXELINDEX*)pData) + x - pDev->x0;
000074  f9b00000          LDRSH    r0,[r0,#0]
000078  eb010144          ADD      r1,r1,r4,LSL #1
00007c  eba10040          SUB      r0,r1,r0,LSL #1
;;;84     }
000080  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;89     */
;;;90     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000082  e92d5fff          PUSH     {r0-r12,lr}
;;;91                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;92     {
000086  4683              MOV      r11,r0
000088  4689              MOV      r9,r1
00008a  9f0f              LDR      r7,[sp,#0x3c]
00008c  9e12              LDR      r6,[sp,#0x48]
00008e  9a11              LDR      r2,[sp,#0x44]
000090  990e              LDR      r1,[sp,#0x38]
000092  9810              LDR      r0,[sp,#0x40]
000094  4698              MOV      r8,r3
;;;93       PIXELINDEX Index1;
;;;94       PIXELINDEX IndexMask;
;;;95       unsigned pixels;
;;;96       unsigned PixelCnt;
;;;97       PixelCnt = 8 - Diff;
000096  f1c10408          RSB      r4,r1,#8
;;;98       pixels = LCD_aMirror[*p] >> Diff;
00009a  f898c000          LDRB     r12,[r8,#0]
00009e  4bd9              LDR      r3,|L1.1028|
0000a0  f813300c          LDRB     r3,[r3,r12]
0000a4  fa23f501          LSR      r5,r3,r1
;;;99     
;;;100      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d", x,pDev->x0, GUI_Context.ClipRect.x0);
;;;101    
;;;102      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0000a8  49d5              LDR      r1,|L1.1024|
0000aa  7c09              LDRB     r1,[r1,#0x10]  ; GUI_Context
0000ac  f0110103          ANDS     r1,r1,#3
0000b0  d020              BEQ      |L1.244|
0000b2  2901              CMP      r1,#1
0000b4  d04c              BEQ      |L1.336|
0000b6  2902              CMP      r1,#2
0000b8  d163              BNE      |L1.386|
;;;103      case 0:    /* Write mode */
;;;104        do {
;;;105          /* Prepare loop */
;;;106          if (PixelCnt > xsize) {
;;;107            PixelCnt = xsize;
;;;108          }
;;;109          xsize -= PixelCnt;
;;;110          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;111          do {
;;;112            *pDest++ = *(pTrans + (pixels & 1));
;;;113            pixels >>= 1;
;;;114          } while (--PixelCnt);
;;;115          /* Check if an other Source byte needs to be loaded */
;;;116          if (xsize == 0) {
;;;117            return;
;;;118          }
;;;119          PixelCnt = 8;
;;;120          pixels = LCD_aMirror[*++p];
;;;121        } while (1);
;;;122      case LCD_DRAWMODE_TRANS:
;;;123        Index1 = *(pTrans + 1);
0000ba  f8b0a002          LDRH     r10,[r0,#2]
                  |L1.190|
;;;124        do {
;;;125          /* Prepare loop */
;;;126          if (PixelCnt > xsize) {
0000be  42bc              CMP      r4,r7
0000c0  d900              BLS      |L1.196|
;;;127            PixelCnt = xsize;
0000c2  463c              MOV      r4,r7
                  |L1.196|
;;;128          }
;;;129          xsize -= PixelCnt;
0000c4  1b3f              SUBS     r7,r7,r4
;;;130          if (pUsage) {
0000c6  f1bb0f00          CMP      r11,#0
0000ca  d02c              BEQ      |L1.294|
                  |L1.204|
;;;131            do {
;;;132              if (pixels == 0) {      /* Early out optimization; not required */
0000cc  b33d              CBZ      r5,|L1.286|
;;;133                pDest += PixelCnt;
;;;134                x     += PixelCnt;
;;;135                break;
;;;136              }
;;;137              if ((pixels & 1)) {
0000ce  f0150f01          TST      r5,#1
0000d2  d008              BEQ      |L1.230|
;;;138                GUI_USAGE_AddPixel(pUsage, x, y);
0000d4  f8db0008          LDR      r0,[r11,#8]
0000d8  4649              MOV      r1,r9
0000da  9a02              LDR      r2,[sp,#8]
0000dc  6803              LDR      r3,[r0,#0]
0000de  4658              MOV      r0,r11
0000e0  4798              BLX      r3
;;;139                *pDest = Index1;
0000e2  f8a6a000          STRH     r10,[r6,#0]
                  |L1.230|
;;;140              }
;;;141              x++;
0000e6  f1090901          ADD      r9,r9,#1
;;;142              pDest++;
0000ea  1cb6              ADDS     r6,r6,#2
;;;143              if (--PixelCnt == 0) {
0000ec  1e64              SUBS     r4,r4,#1
0000ee  d027              BEQ      |L1.320|
;;;144                break;
;;;145              }
;;;146              pixels >>= 1;
0000f0  086d              LSRS     r5,r5,#1
;;;147            } while (1);
0000f2  e7eb              B        |L1.204|
                  |L1.244|
0000f4  49c3              LDR      r1,|L1.1028|
                  |L1.246|
0000f6  42bc              CMP      r4,r7                 ;106
0000f8  d900              BLS      |L1.252|
0000fa  463c              MOV      r4,r7                 ;107
                  |L1.252|
0000fc  1b3f              SUBS     r7,r7,r4              ;109
                  |L1.254|
0000fe  f0050201          AND      r2,r5,#1              ;112
000102  f8302012          LDRH     r2,[r0,r2,LSL #1]     ;112
000106  f8262b02          STRH     r2,[r6],#2            ;112
00010a  086d              LSRS     r5,r5,#1              ;113
00010c  1e64              SUBS     r4,r4,#1              ;114
00010e  d1f6              BNE      |L1.254|
000110  2f00              CMP      r7,#0                 ;116
000112  d036              BEQ      |L1.386|
000114  2408              MOVS     r4,#8                 ;119
000116  f8182f01          LDRB     r2,[r8,#1]!           ;120
00011a  5c8d              LDRB     r5,[r1,r2]            ;120
00011c  e7eb              B        |L1.246|
                  |L1.286|
00011e  eb060644          ADD      r6,r6,r4,LSL #1       ;133
000122  44a1              ADD      r9,r9,r4              ;134
000124  e00c              B        |L1.320|
                  |L1.294|
;;;148          } else {
;;;149            do {
;;;150              if (pixels == 0) {      /* Early out optimization; not required */
000126  b14d              CBZ      r5,|L1.316|
;;;151                pDest += PixelCnt;
;;;152                break;
;;;153              }
;;;154              if ((pixels & 1)) {
000128  f0150f01          TST      r5,#1
00012c  d001              BEQ      |L1.306|
;;;155                *pDest = Index1;
00012e  f8a6a000          STRH     r10,[r6,#0]
                  |L1.306|
;;;156              }
;;;157              pDest++;
000132  1cb6              ADDS     r6,r6,#2
;;;158              if (--PixelCnt == 0) {
000134  1e64              SUBS     r4,r4,#1
000136  d003              BEQ      |L1.320|
;;;159                break;
;;;160              }
;;;161              pixels >>= 1;
000138  086d              LSRS     r5,r5,#1
;;;162            } while (1);
00013a  e7f4              B        |L1.294|
                  |L1.316|
00013c  eb060644          ADD      r6,r6,r4,LSL #1       ;151
                  |L1.320|
;;;163          }
;;;164          /* Check if an other Source byte needs to be loaded */
;;;165          if (xsize == 0) {
000140  2f00              CMP      r7,#0
000142  d01e              BEQ      |L1.386|
;;;166            return;
;;;167          }
;;;168          PixelCnt = 8;
000144  2408              MOVS     r4,#8
;;;169          pixels = LCD_aMirror[*(++p)];
000146  f8181f01          LDRB     r1,[r8,#1]!
00014a  48ae              LDR      r0,|L1.1028|
00014c  5c45              LDRB     r5,[r0,r1]
;;;170        } while (1);
00014e  e7b6              B        |L1.190|
                  |L1.336|
;;;171      case LCD_DRAWMODE_XOR:
;;;172        IndexMask = pDev->pfGetIndexMask();
000150  6a50              LDR      r0,[r2,#0x24]
000152  4780              BLX      r0
000154  b280              UXTH     r0,r0
000156  49ab              LDR      r1,|L1.1028|
                  |L1.344|
;;;173        do {
;;;174          /* Prepare loop */
;;;175          if (PixelCnt > xsize) {
000158  42bc              CMP      r4,r7
00015a  d900              BLS      |L1.350|
;;;176            PixelCnt = xsize;
00015c  463c              MOV      r4,r7
                  |L1.350|
;;;177          }
;;;178          xsize -= PixelCnt;
00015e  1b3f              SUBS     r7,r7,r4
                  |L1.352|
;;;179          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;180          do {
;;;181            if ((pixels & 1)) {
000160  f0150f01          TST      r5,#1
000164  d002              BEQ      |L1.364|
;;;182              *pDest ^= IndexMask;
000166  8832              LDRH     r2,[r6,#0]
000168  4042              EORS     r2,r2,r0
00016a  8032              STRH     r2,[r6,#0]
                  |L1.364|
;;;183            }
;;;184            *pDest++;
00016c  1cb6              ADDS     r6,r6,#2
;;;185            pixels >>= 1;
00016e  086d              LSRS     r5,r5,#1
;;;186          } while (--PixelCnt);
000170  1e64              SUBS     r4,r4,#1
000172  d1f5              BNE      |L1.352|
;;;187          /* Check if an other Source byte needs to be loaded */
;;;188          if (xsize == 0) {
000174  2f00              CMP      r7,#0
000176  d004              BEQ      |L1.386|
;;;189            return;
;;;190          }
;;;191          PixelCnt = 8;
000178  2408              MOVS     r4,#8
;;;192          pixels = LCD_aMirror[*(++p)];
00017a  f8182f01          LDRB     r2,[r8,#1]!
00017e  5c8d              LDRB     r5,[r1,r2]
;;;193        } while (1);
000180  e7ea              B        |L1.344|
                  |L1.386|
;;;194      }
;;;195    }
000182  b004              ADD      sp,sp,#0x10
000184  e8bd9ff0          POP      {r4-r12,pc}
;;;196    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;200    */
;;;201    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000188  e92d5fff          PUSH     {r0-r12,lr}
;;;202                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;203    {
00018c  4682              MOV      r10,r0
00018e  f8dd9040          LDR      r9,[sp,#0x40]
000192  9f0f              LDR      r7,[sp,#0x3c]
000194  9e11              LDR      r6,[sp,#0x44]
000196  980e              LDR      r0,[sp,#0x38]
000198  468b              MOV      r11,r1
00019a  4698              MOV      r8,r3
;;;204      U8 pixels;
;;;205      U8  PixelCnt;
;;;206      PixelCnt = 4 - Diff;
00019c  f1c00104          RSB      r1,r0,#4
0001a0  b2cc              UXTB     r4,r1
;;;207      pixels = (*p) << (Diff << 1);
0001a2  f8981000          LDRB     r1,[r8,#0]
0001a6  0040              LSLS     r0,r0,#1
0001a8  fa01f000          LSL      r0,r1,r0
0001ac  b2c5              UXTB     r5,r0
;;;208      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0001ae  4894              LDR      r0,|L1.1024|
0001b0  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0001b2  f0100003          ANDS     r0,r0,#3
0001b6  d004              BEQ      |L1.450|
0001b8  2801              CMP      r0,#1
0001ba  d03b              BEQ      |L1.564|
0001bc  2802              CMP      r0,#2
0001be  d151              BNE      |L1.612|
0001c0  e014              B        |L1.492|
                  |L1.450|
;;;209      case 0:    /* Write mode */
;;;210      PixelLoopWrite:
;;;211        if (PixelCnt > xsize) {
0001c2  42bc              CMP      r4,r7
0001c4  dd00              BLE      |L1.456|
;;;212          PixelCnt = xsize;
0001c6  b2fc              UXTB     r4,r7
                  |L1.456|
;;;213        }
;;;214        xsize -= PixelCnt;
0001c8  1b3f              SUBS     r7,r7,r4
                  |L1.458|
;;;215        do {
;;;216          *pDest++ = *(pTrans + (pixels >> 6));
0001ca  09a8              LSRS     r0,r5,#6
0001cc  f8390010          LDRH     r0,[r9,r0,LSL #1]
0001d0  f8260b02          STRH     r0,[r6],#2
;;;217          pixels <<= 2;
0001d4  06a8              LSLS     r0,r5,#26
0001d6  0e05              LSRS     r5,r0,#24
;;;218        } while (--PixelCnt);
0001d8  1e60              SUBS     r0,r4,#1
0001da  f01004ff          ANDS     r4,r0,#0xff
0001de  d1f4              BNE      |L1.458|
;;;219        if (xsize) {
0001e0  2f00              CMP      r7,#0
0001e2  d03f              BEQ      |L1.612|
;;;220          PixelCnt = 4;
0001e4  2404              MOVS     r4,#4
;;;221          pixels = *(++p);
0001e6  f8185f01          LDRB     r5,[r8,#1]!
;;;222          goto PixelLoopWrite;
0001ea  e7ea              B        |L1.450|
                  |L1.492|
;;;223        }
;;;224        break;
;;;225      case LCD_DRAWMODE_TRANS:
;;;226      PixelLoopTrans:
;;;227        if (PixelCnt > xsize)
0001ec  42bc              CMP      r4,r7
0001ee  dd00              BLE      |L1.498|
;;;228          PixelCnt = xsize;
0001f0  b2fc              UXTB     r4,r7
                  |L1.498|
;;;229        xsize -= PixelCnt;
0001f2  1b3f              SUBS     r7,r7,r4
                  |L1.500|
;;;230        do {
;;;231          if (pixels & 0xc0) {
0001f4  f0150fc0          TST      r5,#0xc0
0001f8  d00d              BEQ      |L1.534|
;;;232            *pDest = *(pTrans + (pixels >> 6));
0001fa  09a8              LSRS     r0,r5,#6
0001fc  f8390010          LDRH     r0,[r9,r0,LSL #1]
000200  8030              STRH     r0,[r6,#0]
;;;233            if (pUsage) {
000202  f1ba0f00          CMP      r10,#0
000206  d006              BEQ      |L1.534|
;;;234              GUI_USAGE_AddPixel(pUsage, x, y);
000208  f8da0008          LDR      r0,[r10,#8]
00020c  4659              MOV      r1,r11
00020e  9a02              LDR      r2,[sp,#8]
000210  6803              LDR      r3,[r0,#0]
000212  4650              MOV      r0,r10
000214  4798              BLX      r3
                  |L1.534|
;;;235            }
;;;236          }
;;;237          pDest++;
000216  1cb6              ADDS     r6,r6,#2
;;;238          x++;
000218  f10b0b01          ADD      r11,r11,#1
;;;239          pixels <<= 2;
00021c  06a8              LSLS     r0,r5,#26
00021e  0e05              LSRS     r5,r0,#24
;;;240        } while (--PixelCnt);
000220  1e60              SUBS     r0,r4,#1
000222  f01004ff          ANDS     r4,r0,#0xff
000226  d1e5              BNE      |L1.500|
;;;241        if (xsize) {
000228  2f00              CMP      r7,#0
00022a  d01b              BEQ      |L1.612|
;;;242          PixelCnt = 4;
00022c  2404              MOVS     r4,#4
;;;243          pixels = *(++p);
00022e  f8185f01          LDRB     r5,[r8,#1]!
;;;244          goto PixelLoopTrans;
000232  e7db              B        |L1.492|
                  |L1.564|
;;;245        }
;;;246        break;
;;;247      case LCD_DRAWMODE_XOR:;
;;;248      PixelLoopXor:
;;;249        if (PixelCnt > xsize)
000234  42bc              CMP      r4,r7
000236  dd00              BLE      |L1.570|
;;;250          PixelCnt = xsize;
000238  b2fc              UXTB     r4,r7
                  |L1.570|
;;;251        xsize -= PixelCnt;
00023a  1b3f              SUBS     r7,r7,r4
                  |L1.572|
;;;252        do {
;;;253          if ((pixels & 0xc0))
00023c  f0150fc0          TST      r5,#0xc0
000240  d003              BEQ      |L1.586|
;;;254            *pDest ^= 255;
000242  8830              LDRH     r0,[r6,#0]
000244  f08000ff          EOR      r0,r0,#0xff
000248  8030              STRH     r0,[r6,#0]
                  |L1.586|
;;;255          pDest++;
00024a  1cb6              ADDS     r6,r6,#2
;;;256          pixels <<= 2;
00024c  06a8              LSLS     r0,r5,#26
00024e  0e05              LSRS     r5,r0,#24
;;;257        } while (--PixelCnt);
000250  1e60              SUBS     r0,r4,#1
000252  f01004ff          ANDS     r4,r0,#0xff
000256  d1f1              BNE      |L1.572|
;;;258        if (xsize) {
000258  2f00              CMP      r7,#0
00025a  d003              BEQ      |L1.612|
;;;259          PixelCnt = 4;
00025c  2404              MOVS     r4,#4
;;;260          pixels = *(++p);
00025e  f8185f01          LDRB     r5,[r8,#1]!
;;;261          goto PixelLoopXor;
000262  e7e7              B        |L1.564|
                  |L1.612|
;;;262        }
;;;263        break;
;;;264      }
;;;265    }
000264  b004              ADD      sp,sp,#0x10
000266  e8bd9ff0          POP      {r4-r12,pc}
;;;266    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;270    */
;;;271    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
00026a  e92d5ff0          PUSH     {r4-r12,lr}
;;;272                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;273    {
00026e  468a              MOV      r10,r1
000270  f8dd8030          LDR      r8,[sp,#0x30]
000274  9e0b              LDR      r6,[sp,#0x2c]
000276  9c0d              LDR      r4,[sp,#0x34]
000278  990a              LDR      r1,[sp,#0x28]
00027a  4681              MOV      r9,r0
00027c  4693              MOV      r11,r2
00027e  461f              MOV      r7,r3
;;;274      U8 pixels;
;;;275      U8 PixelCnt;
;;;276      PixelCnt = 2 - Diff;
000280  f1c10002          RSB      r0,r1,#2
000284  b2c0              UXTB     r0,r0
;;;277      pixels = (*p) << (Diff << 2);
000286  783a              LDRB     r2,[r7,#0]
000288  008b              LSLS     r3,r1,#2
00028a  409a              LSLS     r2,r2,r3
00028c  b2d5              UXTB     r5,r2
;;;278      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00028e  4a5c              LDR      r2,|L1.1024|
000290  7c12              LDRB     r2,[r2,#0x10]  ; GUI_Context
000292  f0120203          ANDS     r2,r2,#3
000296  d05a              BEQ      |L1.846|
000298  2a01              CMP      r2,#1
00029a  d07d              BEQ      |L1.920|
00029c  2a02              CMP      r2,#2
00029e  d178              BNE      |L1.914|
;;;279    /*
;;;280              * Write mode *
;;;281    */
;;;282      case 0:
;;;283        /* Draw incomplete bytes to the left of center area */
;;;284        if (Diff) {
;;;285          *pDest = *(pTrans + (pixels >> 4));
;;;286          pDest++;
;;;287          xsize--;
;;;288          pixels = *++p;
;;;289        }
;;;290        /* Draw center area (2 pixels in one byte) */
;;;291        if (xsize >= 2) {
;;;292          int i = xsize >> 1;
;;;293          xsize &= 1;
;;;294          do {
;;;295            *pDest     = *(pTrans + (pixels >> 4));   /* Draw 1. (left) pixel */
;;;296            *(pDest+1) = *(pTrans + (pixels & 15));   /* Draw 2. (right) pixel */
;;;297            pDest += 2;
;;;298            pixels = *++p;
;;;299          } while (--i);
;;;300        }
;;;301        /* Draw incomplete bytes to the right of center area */
;;;302        if (xsize) {
;;;303          *pDest = * (pTrans + (pixels >> 4));
;;;304        }
;;;305        break;
;;;306    /*
;;;307              * Transparent draw mode *
;;;308    */
;;;309      case LCD_DRAWMODE_TRANS:
;;;310        /* Draw incomplete bytes to the left of center area */
;;;311        if (Diff) {
0002a0  b1b1              CBZ      r1,|L1.720|
;;;312          if (pixels & 0xF0) {
0002a2  f0150ff0          TST      r5,#0xf0
0002a6  d00d              BEQ      |L1.708|
;;;313            *pDest = *(pTrans + (pixels >> 4));
0002a8  0928              LSRS     r0,r5,#4
0002aa  f8380010          LDRH     r0,[r8,r0,LSL #1]
0002ae  8020              STRH     r0,[r4,#0]
;;;314            if (pUsage) {
0002b0  f1b90f00          CMP      r9,#0
0002b4  d006              BEQ      |L1.708|
;;;315              GUI_USAGE_AddPixel(pUsage, x, y);
0002b6  f8d90008          LDR      r0,[r9,#8]
0002ba  465a              MOV      r2,r11
0002bc  4651              MOV      r1,r10
0002be  6803              LDR      r3,[r0,#0]
0002c0  4648              MOV      r0,r9
0002c2  4798              BLX      r3
                  |L1.708|
;;;316            }
;;;317          }
;;;318          pDest++;
0002c4  1ca4              ADDS     r4,r4,#2
;;;319          x++;
0002c6  f10a0a01          ADD      r10,r10,#1
;;;320          xsize--;
0002ca  1e76              SUBS     r6,r6,#1
;;;321          pixels = *++p;
0002cc  f8175f01          LDRB     r5,[r7,#1]!
                  |L1.720|
;;;322        }
;;;323        /* Draw center area (2 pixels in one byte) */
;;;324        while (xsize >= 2) {
0002d0  2e02              CMP      r6,#2
0002d2  db29              BLT      |L1.808|
                  |L1.724|
;;;325          /* Draw 1. (left) pixel */
;;;326          if (pixels & 0xF0) {
0002d4  f0150ff0          TST      r5,#0xf0
0002d8  d00d              BEQ      |L1.758|
;;;327            *pDest = *(pTrans + (pixels >> 4));
0002da  0928              LSRS     r0,r5,#4
0002dc  f8380010          LDRH     r0,[r8,r0,LSL #1]
0002e0  8020              STRH     r0,[r4,#0]
;;;328            if (pUsage) {
0002e2  f1b90f00          CMP      r9,#0
0002e6  d006              BEQ      |L1.758|
;;;329              GUI_USAGE_AddPixel(pUsage, x, y);
0002e8  f8d90008          LDR      r0,[r9,#8]
0002ec  465a              MOV      r2,r11
0002ee  4651              MOV      r1,r10
0002f0  6803              LDR      r3,[r0,#0]
0002f2  4648              MOV      r0,r9
0002f4  4798              BLX      r3
                  |L1.758|
;;;330            }
;;;331          }
;;;332          /* Draw 2. (right) pixel */
;;;333          if (pixels &= 15) {
0002f6  f015000f          ANDS     r0,r5,#0xf
0002fa  d00d              BEQ      |L1.792|
;;;334            *(pDest + 1) = *(pTrans + pixels);
0002fc  f8380010          LDRH     r0,[r8,r0,LSL #1]
000300  8060              STRH     r0,[r4,#2]
;;;335            if (pUsage) {
000302  f1b90f00          CMP      r9,#0
000306  d007              BEQ      |L1.792|
;;;336              GUI_USAGE_AddPixel(pUsage, x + 1, y);
000308  f8d90008          LDR      r0,[r9,#8]
00030c  465a              MOV      r2,r11
00030e  f10a0101          ADD      r1,r10,#1
000312  6803              LDR      r3,[r0,#0]
000314  4648              MOV      r0,r9
000316  4798              BLX      r3
                  |L1.792|
;;;337            }
;;;338          }
;;;339          pDest += 2;
000318  1d24              ADDS     r4,r4,#4
;;;340          x += 2;
00031a  f10a0a02          ADD      r10,r10,#2
;;;341          xsize -= 2;
00031e  1eb6              SUBS     r6,r6,#2
;;;342          pixels = *++p;
000320  f8175f01          LDRB     r5,[r7,#1]!
000324  2e02              CMP      r6,#2                 ;324
000326  dad5              BGE      |L1.724|
                  |L1.808|
;;;343        }
;;;344        /* Draw incomplete bytes to the right of center area */
;;;345        if (xsize) {
000328  2e00              CMP      r6,#0
00032a  d032              BEQ      |L1.914|
;;;346          if (pixels >>= 4) {
00032c  0928              LSRS     r0,r5,#4
00032e  d030              BEQ      |L1.914|
;;;347            *pDest = *(pTrans + pixels);
000330  f8380010          LDRH     r0,[r8,r0,LSL #1]
000334  8020              STRH     r0,[r4,#0]
;;;348            if (pUsage) {
000336  f1b90f00          CMP      r9,#0
00033a  d02a              BEQ      |L1.914|
;;;349              GUI_USAGE_AddPixel(pUsage, x, y);
00033c  f8d90008          LDR      r0,[r9,#8]
000340  465a              MOV      r2,r11
000342  4651              MOV      r1,r10
000344  6803              LDR      r3,[r0,#0]
000346  4648              MOV      r0,r9
000348  e8bd5ff0          POP      {r4-r12,lr}
00034c  4718              BX       r3
                  |L1.846|
00034e  b139              CBZ      r1,|L1.864|
000350  0928              LSRS     r0,r5,#4              ;285
000352  f8380010          LDRH     r0,[r8,r0,LSL #1]     ;285
000356  8020              STRH     r0,[r4,#0]            ;285
000358  1ca4              ADDS     r4,r4,#2              ;286
00035a  1e76              SUBS     r6,r6,#1              ;287
00035c  f8175f01          LDRB     r5,[r7,#1]!           ;288
                  |L1.864|
000360  2e02              CMP      r6,#2                 ;291
000362  db10              BLT      |L1.902|
000364  1070              ASRS     r0,r6,#1              ;292
000366  f0060601          AND      r6,r6,#1              ;293
                  |L1.874|
00036a  0929              LSRS     r1,r5,#4              ;295
00036c  f8381011          LDRH     r1,[r8,r1,LSL #1]     ;295
000370  8021              STRH     r1,[r4,#0]            ;295
000372  f005010f          AND      r1,r5,#0xf            ;296
000376  f8381011          LDRH     r1,[r8,r1,LSL #1]     ;296
00037a  8061              STRH     r1,[r4,#2]            ;296
00037c  1d24              ADDS     r4,r4,#4              ;297
00037e  f8175f01          LDRB     r5,[r7,#1]!           ;298
000382  1e40              SUBS     r0,r0,#1              ;299
000384  d1f1              BNE      |L1.874|
                  |L1.902|
000386  2e00              CMP      r6,#0                 ;302
000388  d003              BEQ      |L1.914|
00038a  0928              LSRS     r0,r5,#4              ;303
00038c  f8380010          LDRH     r0,[r8,r0,LSL #1]     ;303
000390  8020              STRH     r0,[r4,#0]            ;303
                  |L1.914|
;;;350            }
;;;351          }
;;;352        }
;;;353        break;
;;;354      case LCD_DRAWMODE_XOR:;
;;;355      PixelLoopXor:
;;;356        if (PixelCnt > xsize)
;;;357          PixelCnt = xsize;
;;;358        xsize -= PixelCnt;
;;;359        do {
;;;360          if ((pixels & 0xc0)) {
;;;361            *pDest ^= 255;
;;;362          }
;;;363          pDest++;
;;;364          pixels <<= 4;
;;;365        } while (--PixelCnt);
;;;366        if (xsize) {
;;;367          PixelCnt = 2;
;;;368          pixels = *(++p);
;;;369          goto PixelLoopXor;
;;;370        }
;;;371        break;
;;;372      }
;;;373    }
000392  e8bd9ff0          POP      {r4-r12,pc}
000396  e7ff              B        |L1.920|
                  |L1.920|
000398  42b0              CMP      r0,r6                 ;356
00039a  dd00              BLE      |L1.926|
00039c  b2f0              UXTB     r0,r6                 ;357
                  |L1.926|
00039e  1a36              SUBS     r6,r6,r0              ;358
                  |L1.928|
0003a0  f0150fc0          TST      r5,#0xc0              ;360
0003a4  d003              BEQ      |L1.942|
0003a6  8821              LDRH     r1,[r4,#0]            ;361
0003a8  f08101ff          EOR      r1,r1,#0xff           ;361
0003ac  8021              STRH     r1,[r4,#0]            ;361
                  |L1.942|
0003ae  1ca4              ADDS     r4,r4,#2              ;363
0003b0  0729              LSLS     r1,r5,#28             ;364
0003b2  0e0d              LSRS     r5,r1,#24             ;364
0003b4  1e40              SUBS     r0,r0,#1              ;365
0003b6  f01000ff          ANDS     r0,r0,#0xff           ;365
0003ba  d1f1              BNE      |L1.928|
0003bc  2e00              CMP      r6,#0                 ;366
0003be  d0e8              BEQ      |L1.914|
0003c0  2002              MOVS     r0,#2                 ;367
0003c2  f8175f01          LDRB     r5,[r7,#1]!           ;368
0003c6  e7e7              B        |L1.920|
;;;374    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;378    */
;;;379    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
0003c8  e92d47f0          PUSH     {r4-r10,lr}
;;;380                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest) {
0003cc  4680              MOV      r8,r0
0003ce  9f09              LDR      r7,[sp,#0x24]
0003d0  9e08              LDR      r6,[sp,#0x20]
0003d2  9c0a              LDR      r4,[sp,#0x28]
0003d4  4689              MOV      r9,r1
0003d6  4692              MOV      r10,r2
0003d8  461d              MOV      r5,r3
;;;381      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0003da  4809              LDR      r0,|L1.1024|
0003dc  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0003de  f0100003          ANDS     r0,r0,#3
0003e2  d002              BEQ      |L1.1002|
0003e4  2802              CMP      r0,#2
0003e6  d108              BNE      |L1.1018|
0003e8  e00e              B        |L1.1032|
                  |L1.1002|
;;;382      case 0:    /* Write mode */
;;;383        do {
;;;384          *pDest = *(pTrans + *pSrc);
0003ea  7828              LDRB     r0,[r5,#0]
0003ec  f8370010          LDRH     r0,[r7,r0,LSL #1]
0003f0  8020              STRH     r0,[r4,#0]
;;;385          pDest++;
0003f2  1ca4              ADDS     r4,r4,#2
;;;386          pSrc++;
0003f4  1c6d              ADDS     r5,r5,#1
;;;387        } while (--xsize);
0003f6  1e76              SUBS     r6,r6,#1
0003f8  d1f7              BNE      |L1.1002|
                  |L1.1018|
;;;388        break;
;;;389      case LCD_DRAWMODE_TRANS:
;;;390        do {
;;;391          if (*pSrc) {
;;;392            *pDest = *(pTrans + *pSrc);
;;;393            if (pUsage) {
;;;394              GUI_USAGE_AddPixel(pUsage, x, y);
;;;395            }
;;;396          }
;;;397          x++;
;;;398          pDest++;
;;;399          pSrc++;
;;;400        } while (--xsize);
;;;401        break;
;;;402      }
;;;403    }
0003fa  e8bd87f0          POP      {r4-r10,pc}
0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      GUI_Context
                  |L1.1028|
                          DCD      LCD_aMirror
                  |L1.1032|
000408  782b              LDRB     r3,[r5,#0]            ;391
00040a  b163              CBZ      r3,|L1.1062|
00040c  f8370013          LDRH     r0,[r7,r3,LSL #1]     ;392
000410  8020              STRH     r0,[r4,#0]            ;392
000412  f1b80f00          CMP      r8,#0                 ;393
000416  d006              BEQ      |L1.1062|
000418  f8d80008          LDR      r0,[r8,#8]            ;394
00041c  4652              MOV      r2,r10                ;394
00041e  4649              MOV      r1,r9                 ;394
000420  6803              LDR      r3,[r0,#0]            ;394
000422  4640              MOV      r0,r8                 ;394
000424  4798              BLX      r3                    ;394
                  |L1.1062|
000426  f1090901          ADD      r9,r9,#1              ;397
00042a  1ca4              ADDS     r4,r4,#2              ;398
00042c  1c6d              ADDS     r5,r5,#1              ;399
00042e  1e76              SUBS     r6,r6,#1              ;400
000430  d1ea              BNE      |L1.1032|
000432  e7e2              B        |L1.1018|
;;;404    
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;420    */
;;;421    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, PIXELINDEX* pDest) {
000434  e92d47f0          PUSH     {r4-r10,lr}
000438  4607              MOV      r7,r0
00043a  9e08              LDR      r6,[sp,#0x20]
00043c  9c09              LDR      r4,[sp,#0x24]
00043e  4688              MOV      r8,r1
000440  4691              MOV      r9,r2
000442  461d              MOV      r5,r3
;;;422      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000444  48e5              LDR      r0,|L1.2012|
000446  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000448  f0100003          ANDS     r0,r0,#3
00044c  d002              BEQ      |L1.1108|
00044e  2802              CMP      r0,#2
000450  d117              BNE      |L1.1154|
000452  e006              B        |L1.1122|
                  |L1.1108|
;;;423      case 0:    /* Write mode */
;;;424        #if GUI_UNI_PTR_USED
;;;425          _Memcopy(pDest, pSrc, xsize);
;;;426        #else
;;;427          memcpy(pDest, pSrc, xsize);
000454  4632              MOV      r2,r6
000456  4629              MOV      r1,r5
000458  4620              MOV      r0,r4
00045a  e8bd47f0          POP      {r4-r10,lr}
00045e  f7ffbffe          B.W      __aeabi_memcpy
                  |L1.1122|
;;;428        #endif
;;;429        break;
;;;430      case LCD_DRAWMODE_TRANS:
;;;431        do {
;;;432          if (*pSrc) {
000462  7828              LDRB     r0,[r5,#0]
000464  b138              CBZ      r0,|L1.1142|
;;;433            *pDest = *pSrc;
000466  8020              STRH     r0,[r4,#0]
;;;434            if (pUsage) {
000468  b12f              CBZ      r7,|L1.1142|
;;;435              GUI_USAGE_AddPixel(pUsage, x, y);
00046a  68b8              LDR      r0,[r7,#8]
00046c  464a              MOV      r2,r9
00046e  4641              MOV      r1,r8
000470  6803              LDR      r3,[r0,#0]
000472  4638              MOV      r0,r7
000474  4798              BLX      r3
                  |L1.1142|
;;;436            }
;;;437          }
;;;438          x++;
000476  f1080801          ADD      r8,r8,#1
;;;439          pDest++;
00047a  1ca4              ADDS     r4,r4,#2
;;;440          pSrc++;
00047c  1c6d              ADDS     r5,r5,#1
;;;441        } while (--xsize);
00047e  1e76              SUBS     r6,r6,#1
000480  d1ef              BNE      |L1.1122|
                  |L1.1154|
;;;442        break;
;;;443      }
;;;444    }
000482  e8bd87f0          POP      {r4-r10,pc}
;;;445    
                          ENDP

                  _DrawBitmap PROC
;;;449    */
;;;450    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000486  e92d4fff          PUSH     {r0-r11,lr}
;;;451                            int BitsPerPixel, int BytesPerLine,
;;;452                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;453    {
00048a  b087              SUB      sp,sp,#0x1c
00048c  4607              MOV      r7,r0
00048e  f8ddb060          LDR      r11,[sp,#0x60]
000492  f8dda054          LDR      r10,[sp,#0x54]
000496  9c16              LDR      r4,[sp,#0x58]
000498  460e              MOV      r6,r1
00049a  4698              MOV      r8,r3
;;;454      int i;
;;;455      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00049c  4dcf              LDR      r5,|L1.2012|
00049e  f9b50050          LDRSH    r0,[r5,#0x50]  ; GUI_Context
0004a2  f7fffffe          BL       GUI_ALLOC_h2p
0004a6  9006              STR      r0,[sp,#0x18]
;;;456      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
0004a8  9806              LDR      r0,[sp,#0x18]
0004aa  f9b00018          LDRSH    r0,[r0,#0x18]
0004ae  b110              CBZ      r0,|L1.1206|
0004b0  f7fffffe          BL       GUI_ALLOC_h2p
0004b4  e000              B        |L1.1208|
                  |L1.1206|
0004b6  2000              MOVS     r0,#0
                  |L1.1208|
0004b8  9005              STR      r0,[sp,#0x14]
;;;457      unsigned    BytesPerLineDest;
;;;458      PIXELINDEX* pDest;
;;;459      BytesPerLineDest = pDev->BytesPerLine;
0004ba  9806              LDR      r0,[sp,#0x18]
0004bc  f8d0900c          LDR      r9,[r0,#0xc]
;;;460      x0 += Diff;
0004c0  9817              LDR      r0,[sp,#0x5c]
0004c2  4438              ADD      r0,r0,r7
0004c4  9007              STR      r0,[sp,#0x1c]
;;;461      /* Mark all affected pixels dirty unless transparency is set */
;;;462      if (pUsage) {
0004c6  9805              LDR      r0,[sp,#0x14]
0004c8  b158              CBZ      r0,|L1.1250|
;;;463        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
0004ca  7c28              LDRB     r0,[r5,#0x10]  ; GUI_Context
0004cc  f0100f02          TST      r0,#2
0004d0  d107              BNE      |L1.1250|
;;;464          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
0004d2  f8cd8000          STR      r8,[sp,#0]
0004d6  4632              MOV      r2,r6
0004d8  9b09              LDR      r3,[sp,#0x24]
0004da  9907              LDR      r1,[sp,#0x1c]
0004dc  9805              LDR      r0,[sp,#0x14]
0004de  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1250|
;;;465        }
;;;466      }
;;;467      pDest = _XY2PTR(x0, y0);
0004e2  4631              MOV      r1,r6
0004e4  9807              LDR      r0,[sp,#0x1c]
0004e6  f7fffffe          BL       _XY2PTR
0004ea  4607              MOV      r7,r0
;;;468    #if BITSPERPIXEL == 16
;;;469      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;470      if (BitsPerPixel == 16) {
0004ec  9814              LDR      r0,[sp,#0x50]
0004ee  2810              CMP      r0,#0x10
0004f0  d006              BEQ      |L1.1280|
;;;471        for (i = 0; i < ysize; i++) {
;;;472          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDest);
;;;473          pData += BytesPerLine;
;;;474          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;475        }
;;;476        return;
;;;477      }
;;;478    #endif
;;;479      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;480      if (BitsPerPixel == 8) {
0004f2  9814              LDR      r0,[sp,#0x50]
0004f4  2808              CMP      r0,#8
0004f6  d018              BEQ      |L1.1322|
;;;481        for (i = 0; i < ysize; i++) {
;;;482          if (pTrans) {
;;;483            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDest);
;;;484          } else {
;;;485            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDest);
;;;486          }
;;;487          pData += BytesPerLine;
;;;488          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;489        }
;;;490        return;
;;;491      }
;;;492      /* Use aID for bitmaps without palette */
;;;493      if (!pTrans) {
0004f8  f1bb0f00          CMP      r11,#0
0004fc  d039              BEQ      |L1.1394|
0004fe  e03a              B        |L1.1398|
                  |L1.1280|
000500  2500              MOVS     r5,#0                 ;471
000502  f1b80f00          CMP      r8,#0                 ;471
000506  dd0d              BLE      |L1.1316|
                  |L1.1288|
000508  9a09              LDR      r2,[sp,#0x24]         ;472
00050a  9200              STR      r2,[sp,#0]            ;472
00050c  9701              STR      r7,[sp,#4]            ;472
00050e  19aa              ADDS     r2,r5,r6              ;472
000510  4623              MOV      r3,r4                 ;472
000512  9907              LDR      r1,[sp,#0x1c]         ;472
000514  9805              LDR      r0,[sp,#0x14]         ;472
000516  f7fffffe          BL       _DrawBitLine16BPP_DDB
00051a  4454              ADD      r4,r4,r10             ;473
00051c  444f              ADD      r7,r7,r9              ;474
00051e  1c6d              ADDS     r5,r5,#1              ;471
000520  4545              CMP      r5,r8                 ;471
000522  dbf1              BLT      |L1.1288|
                  |L1.1316|
;;;494        pTrans = aID;
;;;495      }
;;;496      for (i = 0; i < ysize; i++) {
;;;497        switch (BitsPerPixel) {
;;;498        case 1:
;;;499          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;500          break;
;;;501        case 2:
;;;502          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;503          break;
;;;504        case 4:
;;;505          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;506          break;
;;;507        }
;;;508        pData += BytesPerLine;
;;;509        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;510      }
;;;511    }
000524  b00b              ADD      sp,sp,#0x2c
000526  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1322|
00052a  2500              MOVS     r5,#0                 ;481
00052c  f1b80f00          CMP      r8,#0                 ;481
000530  ddf8              BLE      |L1.1316|
                  |L1.1330|
000532  f1bb0f00          CMP      r11,#0                ;482
000536  d00b              BEQ      |L1.1360|
000538  9909              LDR      r1,[sp,#0x24]         ;483
00053a  9100              STR      r1,[sp,#0]            ;483
00053c  9702              STR      r7,[sp,#8]            ;483
00053e  19aa              ADDS     r2,r5,r6              ;483
000540  4623              MOV      r3,r4                 ;483
000542  f8cdb004          STR      r11,[sp,#4]           ;483
000546  9907              LDR      r1,[sp,#0x1c]         ;483
000548  9805              LDR      r0,[sp,#0x14]         ;483
00054a  f7fffffe          BL       _DrawBitLine8BPP
00054e  e008              B        |L1.1378|
                  |L1.1360|
000550  9a09              LDR      r2,[sp,#0x24]         ;485
000552  9200              STR      r2,[sp,#0]            ;485
000554  9701              STR      r7,[sp,#4]            ;485
000556  19aa              ADDS     r2,r5,r6              ;485
000558  4623              MOV      r3,r4                 ;485
00055a  9907              LDR      r1,[sp,#0x1c]         ;485
00055c  9805              LDR      r0,[sp,#0x14]         ;485
00055e  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1378|
000562  4454              ADD      r4,r4,r10             ;487
000564  444f              ADD      r7,r7,r9              ;488
000566  1c6d              ADDS     r5,r5,#1              ;481
000568  4545              CMP      r5,r8                 ;481
00056a  dbe2              BLT      |L1.1330|
                  |L1.1388|
00056c  b00b              ADD      sp,sp,#0x2c
00056e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1394|
000572  f8dfb26c          LDR      r11,|L1.2016|
                  |L1.1398|
000576  2500              MOVS     r5,#0                 ;496
000578  f1b80f00          CMP      r8,#0                 ;496
00057c  ddf6              BLE      |L1.1388|
                  |L1.1406|
00057e  9814              LDR      r0,[sp,#0x50]         ;497
000580  2801              CMP      r0,#1                 ;497
000582  d004              BEQ      |L1.1422|
000584  2802              CMP      r0,#2                 ;497
000586  d012              BEQ      |L1.1454|
000588  2804              CMP      r0,#4                 ;497
00058a  d12b              BNE      |L1.1508|
00058c  e01d              B        |L1.1482|
                  |L1.1422|
00058e  9a06              LDR      r2,[sp,#0x18]         ;499
000590  9203              STR      r2,[sp,#0xc]          ;499
000592  9809              LDR      r0,[sp,#0x24]         ;499
000594  9b17              LDR      r3,[sp,#0x5c]         ;499
000596  9300              STR      r3,[sp,#0]            ;499
000598  f8cdb008          STR      r11,[sp,#8]           ;499
00059c  9001              STR      r0,[sp,#4]            ;499
00059e  9704              STR      r7,[sp,#0x10]         ;499
0005a0  19aa              ADDS     r2,r5,r6              ;499
0005a2  4623              MOV      r3,r4                 ;499
0005a4  9907              LDR      r1,[sp,#0x1c]         ;499
0005a6  9805              LDR      r0,[sp,#0x14]         ;499
0005a8  f7fffffe          BL       _DrawBitLine1BPP
0005ac  e01a              B        |L1.1508|
                  |L1.1454|
0005ae  9817              LDR      r0,[sp,#0x5c]         ;502
0005b0  9909              LDR      r1,[sp,#0x24]         ;502
0005b2  f8cdb008          STR      r11,[sp,#8]           ;502
0005b6  9101              STR      r1,[sp,#4]            ;502
0005b8  9000              STR      r0,[sp,#0]            ;502
0005ba  19aa              ADDS     r2,r5,r6              ;502
0005bc  4623              MOV      r3,r4                 ;502
0005be  9703              STR      r7,[sp,#0xc]          ;502
0005c0  9907              LDR      r1,[sp,#0x1c]         ;502
0005c2  9805              LDR      r0,[sp,#0x14]         ;502
0005c4  f7fffffe          BL       _DrawBitLine2BPP
0005c8  e00c              B        |L1.1508|
                  |L1.1482|
0005ca  9817              LDR      r0,[sp,#0x5c]         ;505
0005cc  9909              LDR      r1,[sp,#0x24]         ;505
0005ce  f8cdb008          STR      r11,[sp,#8]           ;505
0005d2  9101              STR      r1,[sp,#4]            ;505
0005d4  9000              STR      r0,[sp,#0]            ;505
0005d6  19aa              ADDS     r2,r5,r6              ;505
0005d8  4623              MOV      r3,r4                 ;505
0005da  9703              STR      r7,[sp,#0xc]          ;505
0005dc  9907              LDR      r1,[sp,#0x1c]         ;505
0005de  9805              LDR      r0,[sp,#0x14]         ;505
0005e0  f7fffffe          BL       _DrawBitLine4BPP
                  |L1.1508|
0005e4  4454              ADD      r4,r4,r10             ;508
0005e6  444f              ADD      r7,r7,r9              ;509
0005e8  1c6d              ADDS     r5,r5,#1              ;496
0005ea  4545              CMP      r5,r8                 ;496
0005ec  dbc7              BLT      |L1.1406|
0005ee  b00b              ADD      sp,sp,#0x2c
0005f0  e8bd8ff0          POP      {r4-r11,pc}
;;;512    
                          ENDP

                  _FillRect PROC
;;;516    */
;;;517    static void _FillRect(int x0, int y0, int x1, int y1) {
0005f4  e92d4ff8          PUSH     {r3-r11,lr}
0005f8  4605              MOV      r5,r0
0005fa  460e              MOV      r6,r1
0005fc  4692              MOV      r10,r2
0005fe  4698              MOV      r8,r3
;;;518      unsigned BytesPerLine;
;;;519      int Len;
;;;520      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000600  4c76              LDR      r4,|L1.2012|
000602  f9b40050          LDRSH    r0,[r4,#0x50]  ; GUI_Context
000606  f7fffffe          BL       GUI_ALLOC_h2p
00060a  4681              MOV      r9,r0
;;;521      PIXELINDEX* pData  = _XY2PTR(x0, y0);
00060c  4631              MOV      r1,r6
00060e  4628              MOV      r0,r5
000610  f7fffffe          BL       _XY2PTR
000614  4607              MOV      r7,r0
;;;522      BytesPerLine = pDev->BytesPerLine;
000616  f8d9b00c          LDR      r11,[r9,#0xc]
;;;523      Len = x1 - x0 + 1;
00061a  ebaa0005          SUB      r0,r10,r5
00061e  f1000a01          ADD      r10,r0,#1
;;;524      /* Mark rectangle as modified */
;;;525      if (pDev->hUsage) {
000622  f9b90018          LDRSH    r0,[r9,#0x18]
000626  b150              CBZ      r0,|L1.1598|
;;;526        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
000628  f7fffffe          BL       GUI_ALLOC_h2p
00062c  eba80106          SUB      r1,r8,r6
000630  1c4b              ADDS     r3,r1,#1
000632  9300              STR      r3,[sp,#0]
000634  4653              MOV      r3,r10
000636  4632              MOV      r2,r6
000638  4629              MOV      r1,r5
00063a  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1598|
;;;527      }
;;;528      /* Do the drawing */
;;;529      for (; y0 <= y1; y0++) {
00063e  4546              CMP      r6,r8
000640  dc1a              BGT      |L1.1656|
                  |L1.1602|
;;;530        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000642  4866              LDR      r0,|L1.2012|
000644  7c01              LDRB     r1,[r0,#0x10]  ; GUI_Context
000646  f0110f01          TST      r1,#1
00064a  d00c              BEQ      |L1.1638|
;;;531          int RemPixels;
;;;532          PIXELINDEX* pDest;
;;;533          PIXELINDEX IndexMask;
;;;534          RemPixels = Len;
00064c  4655              MOV      r5,r10
;;;535          pDest  = pData;
00064e  463c              MOV      r4,r7
;;;536          IndexMask = pDev->pfGetIndexMask();
000650  f8d90024          LDR      r0,[r9,#0x24]
000654  4780              BLX      r0
000656  b280              UXTH     r0,r0
                  |L1.1624|
;;;537          do {
;;;538            *pDest = *pDest ^ IndexMask;
000658  8821              LDRH     r1,[r4,#0]
00065a  4041              EORS     r1,r1,r0
00065c  8021              STRH     r1,[r4,#0]
;;;539            pDest++;
00065e  1ca4              ADDS     r4,r4,#2
;;;540          } while (--RemPixels);
000660  1e6d              SUBS     r5,r5,#1
000662  d1f9              BNE      |L1.1624|
000664  e004              B        |L1.1648|
                  |L1.1638|
;;;541        } else {  /* Fill */
;;;542          #if BITSPERPIXEL == 8
;;;543            GUI_MEMSET(pData, LCD_COLORINDEX, Len);
;;;544          #elif BITSPERPIXEL == 16
;;;545            GUI__memset16(pData, LCD_COLORINDEX, Len);
000666  8841              LDRH     r1,[r0,#2]  ; GUI_Context
000668  4652              MOV      r2,r10
00066a  4638              MOV      r0,r7
00066c  f7fffffe          BL       GUI__memset16
                  |L1.1648|
;;;546          #else
;;;547            #error Unsupported
;;;548          #endif
;;;549        }
;;;550        pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); 
000670  445f              ADD      r7,r7,r11
000672  1c76              ADDS     r6,r6,#1              ;529
000674  4546              CMP      r6,r8                 ;529
000676  dde4              BLE      |L1.1602|
                  |L1.1656|
;;;551      }
;;;552    }
000678  e8bd8ff8          POP      {r3-r11,pc}
;;;553    
                          ENDP

                  _DrawHLine PROC
;;;557    */
;;;558    static void _DrawHLine(int x0, int y, int x1) {
00067c  460b              MOV      r3,r1
;;;559      _FillRect(x0, y, x1, y);
00067e  e7fe              B        _FillRect
;;;560    }
;;;561    
                          ENDP

                  _DrawVLine PROC
;;;565    */
;;;566    static void _DrawVLine(int x , int y0, int y1) {
000680  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
000684  460d              MOV      r5,r1
000686  4616              MOV      r6,r2
;;;567      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000688  f8dfb150          LDR      r11,|L1.2012|
00068c  f9bb0050          LDRSH    r0,[r11,#0x50]  ; GUI_Context
000690  f7fffffe          BL       GUI_ALLOC_h2p
000694  4607              MOV      r7,r0
;;;568      GUI_USAGE_h hUsage = pDev->hUsage; 
000696  f9b78018          LDRSH    r8,[r7,#0x18]
;;;569      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
00069a  f1b80f00          CMP      r8,#0
00069e  d004              BEQ      |L1.1706|
0006a0  4640              MOV      r0,r8
0006a2  f7fffffe          BL       GUI_ALLOC_h2p
0006a6  4681              MOV      r9,r0
0006a8  e001              B        |L1.1710|
                  |L1.1706|
0006aa  f04f0900          MOV      r9,#0
                  |L1.1710|
;;;570      PIXELINDEX* pData  = _XY2PTR(x, y0);
0006ae  4629              MOV      r1,r5
0006b0  9800              LDR      r0,[sp,#0]
0006b2  f7fffffe          BL       _XY2PTR
0006b6  4604              MOV      r4,r0
;;;571      unsigned BytesPerLine = pDev->BytesPerLine;
0006b8  f8d7a00c          LDR      r10,[r7,#0xc]
;;;572    
;;;573      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
0006bc  f89b0010          LDRB     r0,[r11,#0x10]  ; GUI_Context
0006c0  f0100f01          TST      r0,#1
0006c4  d019              BEQ      |L1.1786|
;;;574        PIXELINDEX IndexMask;
;;;575        IndexMask = pDev->pfGetIndexMask();
0006c6  6a78              LDR      r0,[r7,#0x24]
0006c8  4780              BLX      r0
0006ca  fa1ffa80          UXTH     r10,r0
                  |L1.1742|
;;;576        do {
;;;577          if (hUsage) {
0006ce  f1b80f00          CMP      r8,#0
0006d2  d006              BEQ      |L1.1762|
;;;578            GUI_USAGE_AddPixel(pUsage, x, y0);
0006d4  f8d90008          LDR      r0,[r9,#8]
0006d8  462a              MOV      r2,r5
0006da  9900              LDR      r1,[sp,#0]
0006dc  6803              LDR      r3,[r0,#0]
0006de  4648              MOV      r0,r9
0006e0  4798              BLX      r3
                  |L1.1762|
;;;579          }
;;;580          *pData = *pData ^ IndexMask;
0006e2  8820              LDRH     r0,[r4,#0]
0006e4  ea80000a          EOR      r0,r0,r10
0006e8  8020              STRH     r0,[r4,#0]
;;;581          pData = (PIXELINDEX*)((U8*)pData + pDev->BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
0006ea  68f8              LDR      r0,[r7,#0xc]
0006ec  4404              ADD      r4,r4,r0
;;;582        } while (++y0 <= y1);
0006ee  1c6d              ADDS     r5,r5,#1
0006f0  42b5              CMP      r5,r6
0006f2  ddec              BLE      |L1.1742|
;;;583      } else {
;;;584        if (hUsage) {
;;;585          do {
;;;586            GUI_USAGE_AddPixel(pUsage, x, y0);
;;;587            *pData = LCD_COLORINDEX;
;;;588            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
;;;589          } while (++y0 <= y1);
;;;590        } else {
;;;591          unsigned NumPixels;
;;;592          NumPixels = y1 - y0 + 1;
;;;593          do {
;;;594            *pData = LCD_COLORINDEX;
;;;595            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
;;;596          } while (--NumPixels);
;;;597        }
;;;598      }
;;;599    }
0006f4  b003              ADD      sp,sp,#0xc
0006f6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1786|
0006fa  f1b80f00          CMP      r8,#0                 ;584
0006fe  d010              BEQ      |L1.1826|
                  |L1.1792|
000700  f8d90008          LDR      r0,[r9,#8]            ;586
000704  462a              MOV      r2,r5                 ;586
000706  9900              LDR      r1,[sp,#0]            ;586
000708  6803              LDR      r3,[r0,#0]            ;586
00070a  4648              MOV      r0,r9                 ;586
00070c  4798              BLX      r3                    ;586
00070e  f8bb0002          LDRH     r0,[r11,#2]           ;587  ; GUI_Context
000712  8020              STRH     r0,[r4,#0]            ;587
000714  4454              ADD      r4,r4,r10             ;588
000716  1c6d              ADDS     r5,r5,#1              ;589
000718  42b5              CMP      r5,r6                 ;589
00071a  ddf1              BLE      |L1.1792|
00071c  b003              ADD      sp,sp,#0xc
00071e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1826|
000722  1b70              SUBS     r0,r6,r5              ;592
000724  1c40              ADDS     r0,r0,#1              ;592
                  |L1.1830|
000726  f8bb1002          LDRH     r1,[r11,#2]           ;594  ; GUI_Context
00072a  8021              STRH     r1,[r4,#0]            ;594
00072c  4454              ADD      r4,r4,r10             ;595
00072e  1e40              SUBS     r0,r0,#1              ;596
000730  d1f9              BNE      |L1.1830|
000732  b003              ADD      sp,sp,#0xc
000734  e8bd8ff0          POP      {r4-r11,pc}
;;;600    
                          ENDP

                  _SetPixelIndex PROC
;;;604    */
;;;605    static void _SetPixelIndex(int x, int y, int Index) {
000738  e92d41f0          PUSH     {r4-r8,lr}
00073c  4606              MOV      r6,r0
00073e  460f              MOV      r7,r1
000740  4615              MOV      r5,r2
;;;606      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000742  4826              LDR      r0,|L1.2012|
000744  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000748  f7fffffe          BL       GUI_ALLOC_h2p
;;;607      GUI_USAGE_h hUsage = pDev->hUsage; 
00074c  f9b04018          LDRSH    r4,[r0,#0x18]
;;;608      PIXELINDEX* pData = _XY2PTR(x, y);
000750  4639              MOV      r1,r7
000752  4630              MOV      r0,r6
000754  f7fffffe          BL       _XY2PTR
;;;609      *pData = Index;
000758  8005              STRH     r5,[r0,#0]
;;;610      if (hUsage) {
00075a  2c00              CMP      r4,#0
00075c  d00e              BEQ      |L1.1916|
;;;611        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
00075e  4620              MOV      r0,r4
000760  f7fffffe          BL       GUI_ALLOC_h2p
000764  4605              MOV      r5,r0
000766  4620              MOV      r0,r4
000768  f7fffffe          BL       GUI_ALLOC_h2p
00076c  6880              LDR      r0,[r0,#8]
00076e  463a              MOV      r2,r7
000770  4631              MOV      r1,r6
000772  6803              LDR      r3,[r0,#0]
000774  4628              MOV      r0,r5
000776  e8bd41f0          POP      {r4-r8,lr}
00077a  4718              BX       r3
                  |L1.1916|
;;;612      }
;;;613    }
00077c  e8bd81f0          POP      {r4-r8,pc}
;;;614    
                          ENDP

                  _XorPixel PROC
;;;618    */
;;;619    static void _XorPixel(int x, int y) {
000780  e92d41f0          PUSH     {r4-r8,lr}
000784  4607              MOV      r7,r0
000786  4688              MOV      r8,r1
;;;620      PIXELINDEX IndexMask;
;;;621      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000788  4814              LDR      r0,|L1.2012|
00078a  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00078e  f7fffffe          BL       GUI_ALLOC_h2p
000792  4605              MOV      r5,r0
;;;622      GUI_USAGE_h hUsage = pDev->hUsage; 
000794  f9b56018          LDRSH    r6,[r5,#0x18]
;;;623      PIXELINDEX* pData = _XY2PTR(x, y);
000798  4641              MOV      r1,r8
00079a  4638              MOV      r0,r7
00079c  f7fffffe          BL       _XY2PTR
0007a0  4604              MOV      r4,r0
;;;624      IndexMask = pDev->pfGetIndexMask();
0007a2  6a68              LDR      r0,[r5,#0x24]
0007a4  4780              BLX      r0
;;;625      *pData = *pData ^ IndexMask;
0007a6  8821              LDRH     r1,[r4,#0]
0007a8  4048              EORS     r0,r0,r1
0007aa  8020              STRH     r0,[r4,#0]
;;;626      if (hUsage) {
0007ac  2e00              CMP      r6,#0
0007ae  d00e              BEQ      |L1.1998|
;;;627        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
0007b0  4630              MOV      r0,r6
0007b2  f7fffffe          BL       GUI_ALLOC_h2p
0007b6  4604              MOV      r4,r0
0007b8  4630              MOV      r0,r6
0007ba  f7fffffe          BL       GUI_ALLOC_h2p
0007be  6880              LDR      r0,[r0,#8]
0007c0  4642              MOV      r2,r8
0007c2  4639              MOV      r1,r7
0007c4  6803              LDR      r3,[r0,#0]
0007c6  4620              MOV      r0,r4
0007c8  e8bd41f0          POP      {r4-r8,lr}
0007cc  4718              BX       r3
                  |L1.1998|
;;;628      }
;;;629    }
0007ce  e8bd81f0          POP      {r4-r8,pc}
;;;630    
                          ENDP

                  _GetPixelIndex PROC
;;;634    */
;;;635    static unsigned int _GetPixelIndex(int x, int y) {
0007d2  b510              PUSH     {r4,lr}
;;;636      PIXELINDEX* pData = _XY2PTR(x, y);
0007d4  f7fffffe          BL       _XY2PTR
;;;637      return *pData;
0007d8  8800              LDRH     r0,[r0,#0]
;;;638    }
0007da  bd10              POP      {r4,pc}
;;;639    
                          ENDP

                  |L1.2012|
                          DCD      GUI_Context
                  |L1.2016|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.constdata||
                  GUI_MEMDEV__APIList16
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000010
