; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_dispstringinrectwrap.o --depend=.\rvmdk\gui_dispstringinrectwrap.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_dispstringinrectwrap.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_DispStringInRectWrap.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  GUI_DispStringInRectWrap PROC
;;;31     */
;;;32     void GUI_DispStringInRectWrap(const char GUI_UNI_PTR * s, GUI_RECT * pRect, int TextAlign, GUI_WRAPMODE WrapMode) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
00000a  4617              MOV      r7,r2
00000c  469b              MOV      r11,r3
;;;33       const GUI_RECT * pOldClipRect;
;;;34       GUI_RECT Rect;
;;;35       int xSize, ySizeFont, NumBytesToNextLine, NumCharsDisp;
;;;36       if (!s) {
00000e  2d00              CMP      r5,#0
000010  d072              BEQ      |L1.248|
;;;37         return;
;;;38       }
;;;39       GUI_LOCK();
000012  f7fffffe          BL       GUI_Lock
;;;40       Rect      = *pRect;
000016  6820              LDR      r0,[r4,#0]
000018  9004              STR      r0,[sp,#0x10]
00001a  6860              LDR      r0,[r4,#4]
00001c  9005              STR      r0,[sp,#0x14]
;;;41       xSize     = Rect.x1 - Rect.x0 + 1;
00001e  f9bd0014          LDRSH    r0,[sp,#0x14]
000022  f9bd1010          LDRSH    r1,[sp,#0x10]
000026  1a40              SUBS     r0,r0,r1
000028  f1000a01          ADD      r10,r0,#1
;;;42       ySizeFont = GUI_GetFontDistY();
00002c  f7fffffe          BL       GUI_GetFontDistY
000030  4606              MOV      r6,r0
;;;43       /* Vertical alignment */
;;;44       if ((TextAlign & GUI_TA_VERTICAL) != GUI_TA_TOP) {
000032  f0170f0c          TST      r7,#0xc
000036  d02c              BEQ      |L1.146|
;;;45         int NumLines = 0;
000038  f04f0800          MOV      r8,#0
;;;46         const char GUI_UNI_PTR * pText;
;;;47         pText = s;
00003c  46a9              MOV      r9,r5
                  |L1.62|
;;;48         /* Count the number of lines */
;;;49         do {
;;;50           NumBytesToNextLine = GUI__WrapGetNumBytesToNextLine(pText, xSize, WrapMode);
00003e  465a              MOV      r2,r11
000040  4651              MOV      r1,r10
000042  4648              MOV      r0,r9
000044  f7fffffe          BL       GUI__WrapGetNumBytesToNextLine
;;;51           pText += NumBytesToNextLine;
000048  4481              ADD      r9,r9,r0
;;;52           if (NumBytesToNextLine) {
00004a  2800              CMP      r0,#0
00004c  d001              BEQ      |L1.82|
;;;53             NumLines++;
00004e  f1080801          ADD      r8,r8,#1
                  |L1.82|
;;;54           }
;;;55         } while (NumBytesToNextLine);
000052  d1f4              BNE      |L1.62|
;;;56         /* Do the vertical alignment */
;;;57         switch (TextAlign & GUI_TA_VERTICAL) {
000054  f007000c          AND      r0,r7,#0xc
000058  2804              CMP      r0,#4
00005a  d004              BEQ      |L1.102|
00005c  2808              CMP      r0,#8
00005e  d002              BEQ      |L1.102|
000060  280c              CMP      r0,#0xc
000062  d116              BNE      |L1.146|
000064  e007              B        |L1.118|
                  |L1.102|
;;;58     	  case GUI_TA_BASELINE:
;;;59     	  case GUI_TA_BOTTOM:
;;;60           Rect.y0 = Rect.y1 - NumLines * ySizeFont + 1;
000066  f9bd0016          LDRSH    r0,[sp,#0x16]
00006a  fb080016          MLS      r0,r8,r6,r0
00006e  1c40              ADDS     r0,r0,#1
000070  f8ad0012          STRH     r0,[sp,#0x12]
;;;61           break;
000074  e00d              B        |L1.146|
                  |L1.118|
;;;62     	  case GUI_TA_VCENTER:
;;;63     		  Rect.y0 = Rect.y0 + (Rect.y1 - Rect.y0 + 1 - NumLines * ySizeFont) / 2;
000076  f9bd1016          LDRSH    r1,[sp,#0x16]
00007a  f9bd0012          LDRSH    r0,[sp,#0x12]
00007e  1a09              SUBS     r1,r1,r0
000080  fb081116          MLS      r1,r8,r6,r1
000084  1c49              ADDS     r1,r1,#1
000086  eb0171d1          ADD      r1,r1,r1,LSR #31
00008a  eb000061          ADD      r0,r0,r1,ASR #1
00008e  f8ad0012          STRH     r0,[sp,#0x12]
                  |L1.146|
;;;64           break;
;;;65     	  }
;;;66       }
;;;67       pOldClipRect = GUI_SetClipRect(pRect);
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       GUI_SetClipRect
000098  9006              STR      r0,[sp,#0x18]
;;;68       do {
;;;69         int xLineSize;
;;;70         GUI_RECT RectText;
;;;71         NumCharsDisp = GUI__WrapGetNumCharsDisp(s, xSize, WrapMode);
;;;72         Rect.y1      = Rect.y0 + ySizeFont - 1;
00009a  f1a60901          SUB      r9,r6,#1
                  |L1.158|
00009e  465a              MOV      r2,r11                ;71
0000a0  4651              MOV      r1,r10                ;71
0000a2  4628              MOV      r0,r5                 ;71
0000a4  f7fffffe          BL       GUI__WrapGetNumCharsDisp
0000a8  9003              STR      r0,[sp,#0xc]          ;71
0000aa  f9bd8012          LDRSH    r8,[sp,#0x12]
0000ae  eb080009          ADD      r0,r8,r9
0000b2  f8ad0016          STRH     r0,[sp,#0x16]
;;;73         RectText     = Rect;
0000b6  9905              LDR      r1,[sp,#0x14]
0000b8  9804              LDR      r0,[sp,#0x10]
0000ba  9101              STR      r1,[sp,#4]
0000bc  9000              STR      r0,[sp,#0]
;;;74         /* Horizontal alignment */
;;;75         xLineSize = GUI__GetLineDistX(s, NumCharsDisp);
0000be  4628              MOV      r0,r5
0000c0  9903              LDR      r1,[sp,#0xc]
0000c2  f7fffffe          BL       GUI__GetLineDistX
0000c6  4601              MOV      r1,r0
;;;76         switch (TextAlign & GUI_TA_HORIZONTAL) {
0000c8  f0170003          ANDS     r0,r7,#3
0000cc  d010              BEQ      |L1.240|
0000ce  2801              CMP      r0,#1
0000d0  d013              BEQ      |L1.250|
0000d2  2802              CMP      r0,#2
0000d4  d116              BNE      |L1.260|
;;;77         case GUI_TA_HCENTER:
;;;78           RectText.x0 = pRect->x0 + (pRect->x1 - pRect->x0 - xLineSize) / 2;
0000d6  f9b42004          LDRSH    r2,[r4,#4]
0000da  f9b40000          LDRSH    r0,[r4,#0]
0000de  1a12              SUBS     r2,r2,r0
0000e0  1a51              SUBS     r1,r2,r1
0000e2  eb0171d1          ADD      r1,r1,r1,LSR #31
0000e6  eb000061          ADD      r0,r0,r1,ASR #1
0000ea  f8ad0000          STRH     r0,[sp,#0]
;;;79           break;
0000ee  e009              B        |L1.260|
                  |L1.240|
;;;80         case GUI_TA_LEFT:
;;;81           RectText.x0 = pRect->x0;
0000f0  8820              LDRH     r0,[r4,#0]
0000f2  f8ad0000          STRH     r0,[sp,#0]
;;;82           break;
0000f6  e005              B        |L1.260|
                  |L1.248|
0000f8  e01e              B        |L1.312|
                  |L1.250|
;;;83         case GUI_TA_RIGHT:
;;;84           RectText.x0 = pRect->x1 - xLineSize + 1;
0000fa  88a0              LDRH     r0,[r4,#4]
0000fc  1a40              SUBS     r0,r0,r1
0000fe  1c40              ADDS     r0,r0,#1
000100  f8ad0000          STRH     r0,[sp,#0]
                  |L1.260|
;;;85           break;
;;;86         }
;;;87         GUI__DispLine(s, NumCharsDisp, &RectText);
000104  466a              MOV      r2,sp
000106  4628              MOV      r0,r5
000108  9903              LDR      r1,[sp,#0xc]
00010a  f7fffffe          BL       GUI__DispLine
;;;88         s += GUI__WrapGetNumBytesToNextLine(s, xSize, WrapMode);
00010e  465a              MOV      r2,r11
000110  4651              MOV      r1,r10
000112  4628              MOV      r0,r5
000114  f7fffffe          BL       GUI__WrapGetNumBytesToNextLine
000118  4405              ADD      r5,r5,r0
;;;89         Rect.y0 += ySizeFont;
00011a  eb080006          ADD      r0,r8,r6
00011e  f8ad0012          STRH     r0,[sp,#0x12]
;;;90       } while (*s);
000122  7828              LDRB     r0,[r5,#0]
000124  2800              CMP      r0,#0
000126  d1ba              BNE      |L1.158|
;;;91       GUI_SetClipRect(pOldClipRect);
000128  9806              LDR      r0,[sp,#0x18]
00012a  f7fffffe          BL       GUI_SetClipRect
;;;92       GUI_UNLOCK();
00012e  b007              ADD      sp,sp,#0x1c
000130  e8bd4ff0          POP      {r4-r11,lr}
000134  f7ffbffe          B.W      GUI_Unlock
                  |L1.312|
;;;93     }
000138  b007              ADD      sp,sp,#0x1c
00013a  e8bd8ff0          POP      {r4-r11,pc}
;;;94     
                          ENDP

