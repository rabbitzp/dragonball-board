; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guidev_measure.o --depend=.\rvmdk\guidev_measure.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guidev_measure.crf ..\..\..\..\..\uCGUI\GUI\MemDev\GUIDEV_Measure.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _MarkPixel PROC
;;;69     */
;;;70     static void _MarkPixel(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;71       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
000006  48ad              LDR      r0,|L1.700|
000008  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000c  f7fffffe          BL       GUI_ALLOC_h2p
;;;72       if (x < pDev->rUsed.x0)
000010  f9b02000          LDRSH    r2,[r0,#0]
;;;73         pDev->rUsed.x0 = x;
000014  b221              SXTH     r1,r4
000016  42a2              CMP      r2,r4                 ;72
000018  dd00              BLE      |L1.28|
00001a  8001              STRH     r1,[r0,#0]
                  |L1.28|
;;;74       if (x > pDev->rUsed.x1)
00001c  f9b02004          LDRSH    r2,[r0,#4]
000020  42a2              CMP      r2,r4
000022  da00              BGE      |L1.38|
;;;75         pDev->rUsed.x1 = x;
000024  8081              STRH     r1,[r0,#4]
                  |L1.38|
;;;76       if (y < pDev->rUsed.y0)
000026  f9b02002          LDRSH    r2,[r0,#2]
;;;77         pDev->rUsed.y0 = y;
00002a  b229              SXTH     r1,r5
00002c  42aa              CMP      r2,r5                 ;76
00002e  dd00              BLE      |L1.50|
000030  8041              STRH     r1,[r0,#2]
                  |L1.50|
;;;78       if (y > pDev->rUsed.y1)
000032  f9b02006          LDRSH    r2,[r0,#6]
000036  42aa              CMP      r2,r5
000038  da00              BGE      |L1.60|
;;;79         pDev->rUsed.y1 = y;
00003a  80c1              STRH     r1,[r0,#6]
                  |L1.60|
;;;80     }
00003c  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  _MarkRect PROC
;;;85     */
;;;86     static void _MarkRect(int x0, int y0, int x1, int y1) {
00003e  e92d41f0          PUSH     {r4-r8,lr}
000042  4605              MOV      r5,r0
000044  460f              MOV      r7,r1
000046  4616              MOV      r6,r2
000048  461c              MOV      r4,r3
;;;87       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
00004a  489c              LDR      r0,|L1.700|
00004c  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000050  f7fffffe          BL       GUI_ALLOC_h2p
;;;88       if (x0 < pDev->rUsed.x0)
000054  f9b01000          LDRSH    r1,[r0,#0]
000058  42a9              CMP      r1,r5
00005a  dd00              BLE      |L1.94|
;;;89         pDev->rUsed.x0 = x0;
00005c  8005              STRH     r5,[r0,#0]
                  |L1.94|
;;;90       if (x1 > pDev->rUsed.x1)
00005e  f9b01004          LDRSH    r1,[r0,#4]
000062  42b1              CMP      r1,r6
000064  da00              BGE      |L1.104|
;;;91         pDev->rUsed.x1 = x1;
000066  8086              STRH     r6,[r0,#4]
                  |L1.104|
;;;92       if (y1 < pDev->rUsed.y0)
000068  f9b01002          LDRSH    r1,[r0,#2]
00006c  42a1              CMP      r1,r4
00006e  dd00              BLE      |L1.114|
;;;93         pDev->rUsed.y0 = y0;
000070  8047              STRH     r7,[r0,#2]
                  |L1.114|
;;;94       if (y1 > pDev->rUsed.y1)
000072  f9b01006          LDRSH    r1,[r0,#6]
000076  42a1              CMP      r1,r4
000078  da00              BGE      |L1.124|
;;;95         pDev->rUsed.y1 = y1;
00007a  80c4              STRH     r4,[r0,#6]
                  |L1.124|
;;;96     }
00007c  e8bd81f0          POP      {r4-r8,pc}
;;;97     
                          ENDP

                  _DrawBitmap PROC
;;;101    */
;;;102    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000080  440b              ADD      r3,r3,r1
;;;103                           int BitsPerPixel, int BytesPerLine,
;;;104                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;105                           const LCD_PIXELINDEX* pTrans)
;;;106    {
;;;107      GUI_USE_PARA(BitsPerPixel);
;;;108      GUI_USE_PARA(BytesPerLine);
;;;109      GUI_USE_PARA(pData);
;;;110      GUI_USE_PARA(Diff);
;;;111      GUI_USE_PARA(pTrans);
;;;112      _MarkRect(x0, y0, x0 + xsize - 1, y0 + ysize - 1);
000082  1e5b              SUBS     r3,r3,#1
000084  4402              ADD      r2,r2,r0
000086  1e52              SUBS     r2,r2,#1
000088  e7fe              B        _MarkRect
;;;113    }
;;;114    
                          ENDP

                  _DrawHLine PROC
;;;118    */
;;;119    static void _DrawHLine(int x0, int y,  int x1) {
00008a  460b              MOV      r3,r1
;;;120      _MarkRect(x0, y, x1, y);
00008c  e7fe              B        _MarkRect
;;;121    }
;;;122    
                          ENDP

                  _DrawVLine PROC
;;;126    */
;;;127    static void _DrawVLine(int x , int y0,  int y1) {
00008e  4613              MOV      r3,r2
;;;128      _MarkRect(x, y0, x, y1);
000090  4602              MOV      r2,r0
000092  e7fe              B        _MarkRect
;;;129    }
;;;130    
                          ENDP

                  _SetPixelIndex PROC
;;;134    */
;;;135    static void _SetPixelIndex(int x, int y, int Index) {
000094  e7fe              B        _MarkPixel
;;;136      GUI_USE_PARA(Index);
;;;137      _MarkPixel(x, y);
;;;138    }
;;;139    
                          ENDP

                  _XorPixel PROC
;;;143    */
;;;144    static void _XorPixel(int x, int y) {
000096  e7fe              B        _MarkPixel
;;;145      _MarkPixel(x, y);
;;;146    }
;;;147    
                          ENDP

                  _GetPixelIndex PROC
;;;151    */
;;;152    static unsigned int _GetPixelIndex(int x, int y) { 
000098  2000              MOVS     r0,#0
;;;153      GUI_USE_PARA(x);
;;;154      GUI_USE_PARA(y);
;;;155      return 0;
;;;156    }
00009a  4770              BX       lr
;;;157    
                          ENDP

                  _FillRect PROC
;;;161    */
;;;162    static void _FillRect(int x0, int y0, int x1, int y1) {
00009c  e7fe              B        _MarkRect
;;;163      _MarkRect(x0, y0, x1, y1);
;;;164    }
;;;165    
                          ENDP

                  _GetRect PROC
;;;169    */
;;;170    static void _GetRect(LCD_RECT* pRect) {
00009e  f24f0101          MOV      r1,#0xf001
;;;171      pRect->x0 = pRect->y0 = -4095;
0000a2  8041              STRH     r1,[r0,#2]
0000a4  8001              STRH     r1,[r0,#0]
;;;172      pRect->x1 = pRect->y1 =  4095;
0000a6  f64071ff          MOV      r1,#0xfff
0000aa  80c1              STRH     r1,[r0,#6]
0000ac  8081              STRH     r1,[r0,#4]
;;;173    }
0000ae  4770              BX       lr
;;;174    
                          ENDP

                  _Color2Index PROC
;;;178    */
;;;179    static unsigned int _Color2Index(LCD_COLOR Color) {
0000b0  b510              PUSH     {r4,lr}
0000b2  4604              MOV      r4,r0
;;;180      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
0000b4  4881              LDR      r0,|L1.700|
0000b6  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
0000ba  f7fffffe          BL       GUI_ALLOC_h2p
;;;181      return pDev->pfColor2Index(Color);
0000be  6881              LDR      r1,[r0,#8]
0000c0  4620              MOV      r0,r4
0000c2  e8bd4010          POP      {r4,lr}
0000c6  4708              BX       r1
;;;182    }
;;;183    
                          ENDP

                  _Index2Color PROC
;;;187    */
;;;188    static LCD_COLOR _Index2Color(int Index) {
0000c8  b510              PUSH     {r4,lr}
0000ca  4604              MOV      r4,r0
;;;189      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
0000cc  487b              LDR      r0,|L1.700|
0000ce  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
0000d2  f7fffffe          BL       GUI_ALLOC_h2p
;;;190      return pDev->pfIndex2Color(Index);
0000d6  68c1              LDR      r1,[r0,#0xc]
0000d8  4620              MOV      r0,r4
0000da  e8bd4010          POP      {r4,lr}
0000de  4708              BX       r1
;;;191    }
;;;192    
                          ENDP

                  _GetIndexMask PROC
;;;196    */
;;;197    static unsigned int _GetIndexMask(void) {
0000e0  b510              PUSH     {r4,lr}
;;;198      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
0000e2  4876              LDR      r0,|L1.700|
0000e4  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
0000e8  f7fffffe          BL       GUI_ALLOC_h2p
;;;199      return pDev->pfGetIndexMask();
0000ec  6900              LDR      r0,[r0,#0x10]
0000ee  e8bd4010          POP      {r4,lr}
0000f2  4700              BX       r0
;;;200    }
;;;201    
                          ENDP

                  _CalcPolyRect PROC
;;;205    */
;;;206    static void _CalcPolyRect(GUI_RECT *pr, const GUI_POINT* paPoint, int NumPoints) {
0000f4  e92d01f0          PUSH     {r4-r8}
;;;207      int i;
;;;208      int xMin, xMax, yMin, yMax;
;;;209      xMin = GUI_XMAX;
0000f8  f64078ff          MOV      r8,#0xfff
;;;210      yMin = GUI_YMAX;
0000fc  4647              MOV      r7,r8
;;;211      xMax = GUI_XMIN;
0000fe  427d              RSBS     r5,r7,#0
;;;212      yMax = GUI_YMIN;
000100  462e              MOV      r6,r5
;;;213      for (i = 0; i  <NumPoints; i++) {
000102  2400              MOVS     r4,#0
000104  2a00              CMP      r2,#0
000106  dd13              BLE      |L1.304|
                  |L1.264|
;;;214        int x = paPoint->x;
000108  f9b13000          LDRSH    r3,[r1,#0]
;;;215        int y = paPoint->y;
00010c  f9b1c002          LDRSH    r12,[r1,#2]
;;;216        if (xMin > x)
000110  4598              CMP      r8,r3
000112  dd00              BLE      |L1.278|
;;;217          xMin = x;
000114  4698              MOV      r8,r3
                  |L1.278|
;;;218        if (xMax < x)
000116  429d              CMP      r5,r3
000118  da00              BGE      |L1.284|
;;;219          xMax = x;
00011a  461d              MOV      r5,r3
                  |L1.284|
;;;220        if (yMin > y)
00011c  4567              CMP      r7,r12
00011e  dd00              BLE      |L1.290|
;;;221          yMin = y;
000120  4667              MOV      r7,r12
                  |L1.290|
;;;222        if (yMax < y)
000122  4566              CMP      r6,r12
000124  da00              BGE      |L1.296|
;;;223          yMax = y;
000126  4666              MOV      r6,r12
                  |L1.296|
;;;224        paPoint++;
000128  1d09              ADDS     r1,r1,#4
00012a  1c64              ADDS     r4,r4,#1              ;213
00012c  4294              CMP      r4,r2                 ;213
00012e  dbeb              BLT      |L1.264|
                  |L1.304|
;;;225      }
;;;226      pr->x0 = xMin;
000130  f8a08000          STRH     r8,[r0,#0]
;;;227      pr->x1 = xMax;
000134  8085              STRH     r5,[r0,#4]
;;;228      pr->y0 = yMin;
000136  8047              STRH     r7,[r0,#2]
;;;229      pr->y1 = yMax;
000138  80c6              STRH     r6,[r0,#6]
;;;230    }
00013a  e8bd01f0          POP      {r4-r8}
00013e  4770              BX       lr
;;;231    
                          ENDP

                  _FillPolygon PROC
;;;235    */
;;;236    static void _FillPolygon(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
000140  b530              PUSH     {r4,r5,lr}
000142  b083              SUB      sp,sp,#0xc
000144  4614              MOV      r4,r2
000146  461d              MOV      r5,r3
;;;237      GUI_RECT r;
;;;238      _CalcPolyRect(&r, paPoint, NumPoints);
000148  460a              MOV      r2,r1
00014a  4601              MOV      r1,r0
00014c  4668              MOV      r0,sp
00014e  f7fffffe          BL       _CalcPolyRect
;;;239      GUI_MoveRect(&r, x0, y0);
000152  462a              MOV      r2,r5
000154  4621              MOV      r1,r4
000156  4668              MOV      r0,sp
000158  f7fffffe          BL       GUI_MoveRect
;;;240      _MarkRect(r.x0, r.y0, r.x1, r.y1);
00015c  f9bd3006          LDRSH    r3,[sp,#6]
000160  f9bd2004          LDRSH    r2,[sp,#4]
000164  f9bd1002          LDRSH    r1,[sp,#2]
000168  f9bd0000          LDRSH    r0,[sp,#0]
00016c  f7fffffe          BL       _MarkRect
;;;241    }
000170  b003              ADD      sp,sp,#0xc
000172  bd30              POP      {r4,r5,pc}
;;;242    
                          ENDP

                  _FillPolygonAA PROC
;;;246    */
;;;247    static void _FillPolygonAA(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
000174  b530              PUSH     {r4,r5,lr}
000176  b083              SUB      sp,sp,#0xc
000178  4614              MOV      r4,r2
00017a  461d              MOV      r5,r3
;;;248      #if GUI_SUPPORT_AA
;;;249        GUI_RECT r;
;;;250        _CalcPolyRect(&r, paPoint, NumPoints);
00017c  460a              MOV      r2,r1
00017e  4601              MOV      r1,r0
000180  4668              MOV      r0,sp
000182  f7fffffe          BL       _CalcPolyRect
;;;251        GUI_MoveRect(&r, x0, y0);
000186  462a              MOV      r2,r5
000188  4621              MOV      r1,r4
00018a  4668              MOV      r0,sp
00018c  f7fffffe          BL       GUI_MoveRect
;;;252        if (GUI_Context.AA_HiResEnable) {
000190  484a              LDR      r0,|L1.700|
000192  f8901061          LDRB     r1,[r0,#0x61]  ; GUI_Context
000196  b1e9              CBZ      r1,|L1.468|
;;;253          r.x0 /= GUI_Context.AA_Factor;
000198  f9bd1000          LDRSH    r1,[sp,#0]
00019c  f8900060          LDRB     r0,[r0,#0x60]  ; GUI_Context
0001a0  fb91f1f0          SDIV     r1,r1,r0
0001a4  f8ad1000          STRH     r1,[sp,#0]
;;;254          r.y0 /= GUI_Context.AA_Factor;
0001a8  f9bd1002          LDRSH    r1,[sp,#2]
0001ac  fb91f1f0          SDIV     r1,r1,r0
0001b0  f8ad1002          STRH     r1,[sp,#2]
;;;255          r.x1 = (r.x1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
0001b4  f9bd1004          LDRSH    r1,[sp,#4]
0001b8  4401              ADD      r1,r1,r0
0001ba  1e49              SUBS     r1,r1,#1
0001bc  fb91f1f0          SDIV     r1,r1,r0
0001c0  f8ad1004          STRH     r1,[sp,#4]
;;;256          r.y1 = (r.y1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
0001c4  f9bd1006          LDRSH    r1,[sp,#6]
0001c8  4401              ADD      r1,r1,r0
0001ca  1e49              SUBS     r1,r1,#1
0001cc  fb91f0f0          SDIV     r0,r1,r0
0001d0  f8ad0006          STRH     r0,[sp,#6]
                  |L1.468|
;;;257        }
;;;258        _MarkRect(r.x0, r.y0, r.x1, r.y1);
0001d4  f9bd3006          LDRSH    r3,[sp,#6]
0001d8  f9bd2004          LDRSH    r2,[sp,#4]
0001dc  f9bd1002          LDRSH    r1,[sp,#2]
0001e0  f9bd0000          LDRSH    r0,[sp,#0]
0001e4  f7fffffe          BL       _MarkRect
;;;259      #else
;;;260        GUI_USE_PARA(paPoint);
;;;261        GUI_USE_PARA(NumPoints);
;;;262        GUI_USE_PARA(x0);
;;;263        GUI_USE_PARA(y0);
;;;264      #endif
;;;265    }
0001e8  b003              ADD      sp,sp,#0xc
0001ea  bd30              POP      {r4,r5,pc}
;;;266    
                          ENDP

                  GUI_MEASDEV_Delete PROC
;;;300    */
;;;301    void GUI_MEASDEV_Delete(GUI_MEASDEV_Handle hMemDev) {
0001ec  b510              PUSH     {r4,lr}
0001ee  4604              MOV      r4,r0
;;;302      /* Make sure memory device is not used */
;;;303      if ((GUI_Context.hDevData = hMemDev) != 0) {
0001f0  4932              LDR      r1,|L1.700|
0001f2  f8a14050          STRH     r4,[r1,#0x50]
0001f6  b10c              CBZ      r4,|L1.508|
;;;304    	  GUI_SelectLCD();
0001f8  f7fffffe          BL       GUI_SelectLCD
                  |L1.508|
;;;305      }
;;;306      GUI_ALLOC_Free(hMemDev);
0001fc  4620              MOV      r0,r4
0001fe  e8bd4010          POP      {r4,lr}
000202  f7ffbffe          B.W      GUI_ALLOC_Free
;;;307    }
;;;308    
                          ENDP

                  GUI_MEASDEV_ClearRect PROC
;;;312    */
;;;313    void GUI_MEASDEV_ClearRect(GUI_MEASDEV_Handle hMemDev) {
000206  b510              PUSH     {r4,lr}
000208  4604              MOV      r4,r0
;;;314      if (hMemDev) {
00020a  2c00              CMP      r4,#0
00020c  d00f              BEQ      |L1.558|
;;;315        GUI_MEASDEV* pDevData;
;;;316        GUI_LOCK();
00020e  f7fffffe          BL       GUI_Lock
;;;317        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
000212  4620              MOV      r0,r4
000214  f7fffffe          BL       GUI_ALLOC_h2p
;;;318        pDevData->rUsed.x0 = GUI_XMAX;
000218  f64071ff          MOV      r1,#0xfff
00021c  8001              STRH     r1,[r0,#0]
;;;319        pDevData->rUsed.y0 = GUI_YMAX;
00021e  8041              STRH     r1,[r0,#2]
;;;320        pDevData->rUsed.x1 = GUI_XMIN;
000220  4249              RSBS     r1,r1,#0
000222  8081              STRH     r1,[r0,#4]
;;;321        pDevData->rUsed.y1 = GUI_YMIN;
000224  80c1              STRH     r1,[r0,#6]
;;;322        GUI_UNLOCK();
000226  e8bd4010          POP      {r4,lr}
00022a  f7ffbffe          B.W      GUI_Unlock
                  |L1.558|
;;;323      } 
;;;324    }
00022e  bd10              POP      {r4,pc}
;;;325    
                          ENDP

                  GUI_MEASDEV_Create PROC
;;;329    */
;;;330    GUI_MEASDEV_Handle GUI_MEASDEV_Create(void) {
000230  b510              PUSH     {r4,lr}
;;;331      int MemSize;
;;;332      GUI_MEASDEV_Handle hMemDev;
;;;333      MemSize = sizeof(GUI_MEASDEV);
;;;334      hMemDev = GUI_ALLOC_AllocZero(MemSize);
000232  2014              MOVS     r0,#0x14
000234  f7fffffe          BL       GUI_ALLOC_AllocZero
000238  4604              MOV      r4,r0
;;;335      if (hMemDev) {
00023a  b184              CBZ      r4,|L1.606|
;;;336        GUI_MEASDEV* pDevData;
;;;337        GUI_LOCK();
00023c  f7fffffe          BL       GUI_Lock
;;;338        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
000240  4620              MOV      r0,r4
000242  f7fffffe          BL       GUI_ALLOC_h2p
;;;339        pDevData->pfColor2Index = GUI_Context.pDeviceAPI->pfColor2Index;    
000246  491d              LDR      r1,|L1.700|
000248  6cca              LDR      r2,[r1,#0x4c]  ; GUI_Context
00024a  6812              LDR      r2,[r2,#0]
00024c  6082              STR      r2,[r0,#8]
;;;340        pDevData->pfIndex2Color = GUI_Context.pDeviceAPI->pfIndex2Color;
00024e  6cc9              LDR      r1,[r1,#0x4c]  ; GUI_Context
000250  6849              LDR      r1,[r1,#4]
000252  60c1              STR      r1,[r0,#0xc]
;;;341        GUI_MEASDEV_ClearRect(hMemDev);
000254  4620              MOV      r0,r4
000256  f7fffffe          BL       GUI_MEASDEV_ClearRect
;;;342        GUI_UNLOCK();
00025a  f7fffffe          BL       GUI_Unlock
                  |L1.606|
;;;343      } else {
;;;344        GUI_DEBUG_WARN("GUI_MEASDEV_Create: Alloc failed");
;;;345      }
;;;346      return hMemDev;
00025e  4620              MOV      r0,r4
;;;347    }
000260  bd10              POP      {r4,pc}
;;;348    
                          ENDP

                  GUI_MEASDEV_Select PROC
;;;352    */
;;;353    void GUI_MEASDEV_Select(GUI_MEASDEV_Handle hMem) {
000262  b510              PUSH     {r4,lr}
000264  4604              MOV      r4,r0
;;;354      if (hMem == 0) {
000266  b164              CBZ      r4,|L1.642|
;;;355        GUI_SelectLCD();
;;;356      } else {
;;;357        #if GUI_WINSUPPORT
;;;358          WM_Deactivate();
000268  f7fffffe          BL       WM_Deactivate
;;;359        #endif
;;;360        GUI_Context.hDevData     = hMem;
00026c  4813              LDR      r0,|L1.700|
00026e  f8a04050          STRH     r4,[r0,#0x50]
;;;361        GUI_Context.pDeviceAPI   = &_APIList;
000272  4913              LDR      r1,|L1.704|
000274  64c1              STR      r1,[r0,#0x4c]  ; GUI_Context
;;;362        GUI_Context.pClipRect_HL = NULL;
000276  2100              MOVS     r1,#0
000278  6141              STR      r1,[r0,#0x14]  ; GUI_Context
;;;363        LCD_SetClipRectMax();
00027a  e8bd4010          POP      {r4,lr}
00027e  f7ffbffe          B.W      LCD_SetClipRectMax
                  |L1.642|
000282  e8bd4010          POP      {r4,lr}               ;355
000286  f7ffbffe          B.W      GUI_SelectLCD
;;;364      }
;;;365    }
;;;366    
                          ENDP

                  GUI_MEASDEV_GetRect PROC
;;;370    */
;;;371    void GUI_MEASDEV_GetRect(GUI_MEASDEV_Handle hMem, GUI_RECT* pRect) {
00028a  b570              PUSH     {r4-r6,lr}
00028c  4605              MOV      r5,r0
00028e  460c              MOV      r4,r1
;;;372      if (hMem) {
000290  2d00              CMP      r5,#0
000292  d011              BEQ      |L1.696|
;;;373        GUI_MEASDEV* pDev;
;;;374        GUI_LOCK();
000294  f7fffffe          BL       GUI_Lock
;;;375        pDev = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMem);
000298  4628              MOV      r0,r5
00029a  f7fffffe          BL       GUI_ALLOC_h2p
;;;376        if (pRect) {
00029e  b13c              CBZ      r4,|L1.688|
;;;377          pRect->x0 = pDev->rUsed.x0;
0002a0  8801              LDRH     r1,[r0,#0]
0002a2  8021              STRH     r1,[r4,#0]
;;;378          pRect->y0 = pDev->rUsed.y0;
0002a4  8841              LDRH     r1,[r0,#2]
0002a6  8061              STRH     r1,[r4,#2]
;;;379          pRect->x1 = pDev->rUsed.x1;
0002a8  8881              LDRH     r1,[r0,#4]
0002aa  80a1              STRH     r1,[r4,#4]
;;;380          pRect->y1 = pDev->rUsed.y1;
0002ac  88c0              LDRH     r0,[r0,#6]
0002ae  80e0              STRH     r0,[r4,#6]
                  |L1.688|
;;;381        }
;;;382        GUI_UNLOCK();
0002b0  e8bd4070          POP      {r4-r6,lr}
0002b4  f7ffbffe          B.W      GUI_Unlock
                  |L1.696|
;;;383      }
;;;384    }
0002b8  bd70              POP      {r4-r6,pc}
;;;385    
                          ENDP

0002ba  0000              DCW      0x0000
                  |L1.700|
                          DCD      GUI_Context
                  |L1.704|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _APIList
                          DCD      _Color2Index
                          DCD      _Index2Color
                          DCD      _GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      _FillPolygon
                          DCD      _FillPolygonAA
                          DCD      0x00000000
                          DCD      0x00000000
