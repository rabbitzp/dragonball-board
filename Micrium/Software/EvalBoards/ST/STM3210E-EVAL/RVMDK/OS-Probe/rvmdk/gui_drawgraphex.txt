; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_drawgraphex.o --depend=.\rvmdk\gui_drawgraphex.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_drawgraphex.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_DrawGraphEx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawGraph PROC
;;;44     */
;;;45     static void _DrawGraph(I16 * pay, int NumPoints, int xOff, int yOff, int Numerator, int Denominator) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  f8dd9048          LDR      r9,[sp,#0x48]
00000c  f8dd804c          LDR      r8,[sp,#0x4c]
000010  4693              MOV      r11,r2
000012  461f              MOV      r7,r3
;;;46       int i;
;;;47       int y0, y1;
;;;48       int yClip0, yClip1;
;;;49       int Method;
;;;50       /* Perform high level clipping in x */
;;;51       yClip0 = GUI_Context.pClipRect_HL->y0;
000014  487f              LDR      r0,|L1.532|
000016  6941              LDR      r1,[r0,#0x14]  ; GUI_Context
000018  f9b10002          LDRSH    r0,[r1,#2]
00001c  9002              STR      r0,[sp,#8]
;;;52       yClip1 = GUI_Context.pClipRect_HL->y1;
00001e  f9b10006          LDRSH    r0,[r1,#6]
000022  9001              STR      r0,[sp,#4]
;;;53       if ((Numerator == 0) || (Denominator == 0) || (NumPoints <= 0)) {
000024  f1b90f00          CMP      r9,#0
000028  d079              BEQ      |L1.286|
00002a  f1b80f00          CMP      r8,#0
00002e  d076              BEQ      |L1.286|
000030  9806              LDR      r0,[sp,#0x18]
000032  2800              CMP      r0,#0
000034  dd73              BLE      |L1.286|
;;;54         return;
;;;55       }
;;;56       if (Numerator == -1) {
000036  f1190001          ADDS     r0,r9,#1
00003a  d025              BEQ      |L1.136|
;;;57         if (Denominator == 1) {
;;;58           Method = SWAPSIGN;
;;;59         } else {
;;;60           Method = SWAPSIGN_DIVIDE;
;;;61         }
;;;62       } else if (Numerator == 1) {
00003c  f1b90f01          CMP      r9,#1
000040  d02b              BEQ      |L1.154|
;;;63         if (Denominator == 1) {
;;;64           Method = 0;
;;;65         } else {
;;;66           Method = DIVIDE;
;;;67         }
;;;68       } else {
;;;69         if (Denominator == 1) {
000042  f1b80f01          CMP      r8,#1
000046  d031              BEQ      |L1.172|
;;;70           Method = MULTIPLY;
;;;71         } else {
;;;72           Method = MULTIPLY_DIVIDE;
000048  f04f0a05          MOV      r10,#5
                  |L1.76|
;;;73         }
;;;74       }
;;;75       i = 0;
00004c  2000              MOVS     r0,#0
;;;76       if (GUI_Context.pClipRect_HL) {
00004e  b181              CBZ      r1,|L1.114|
;;;77         if (xOff < GUI_Context.pClipRect_HL->x0) {
000050  f9b12000          LDRSH    r2,[r1,#0]
000054  455a              CMP      r2,r11
000056  dd01              BLE      |L1.92|
;;;78           i = GUI_Context.pClipRect_HL->x0 - xOff;
000058  eba2000b          SUB      r0,r2,r11
                  |L1.92|
;;;79         }
;;;80         if (xOff + NumPoints - 1 > GUI_Context.pClipRect_HL->x1) {
00005c  9a06              LDR      r2,[sp,#0x18]
00005e  f9b11004          LDRSH    r1,[r1,#4]
000062  445a              ADD      r2,r2,r11
000064  1e52              SUBS     r2,r2,#1
000066  428a              CMP      r2,r1
000068  dd03              BLE      |L1.114|
;;;81           NumPoints = GUI_Context.pClipRect_HL->x1 - xOff + 1;
00006a  eba1010b          SUB      r1,r1,r11
00006e  1c49              ADDS     r1,r1,#1
000070  9106              STR      r1,[sp,#0x18]
                  |L1.114|
;;;82         }
;;;83       }
;;;84       /* Start drawing if there is something left to do after x-clipping */
;;;85       if (i < NumPoints) {
000072  9906              LDR      r1,[sp,#0x18]
000074  4288              CMP      r0,r1
000076  da52              BGE      |L1.286|
;;;86         switch (Method) {
000078  f1ba0f06          CMP      r10,#6
00007c  d23c              BCS      |L1.248|
00007e  e8dff00a          TBB      [pc,r10]
000082  3b18              DCB      0x3b,0x18
000084  1d242b32          DCB      0x1d,0x24,0x2b,0x32
                  |L1.136|
000088  f1b80f01          CMP      r8,#1                 ;57
00008c  d002              BEQ      |L1.148|
00008e  f04f0a02          MOV      r10,#2                ;60
000092  e7db              B        |L1.76|
                  |L1.148|
000094  f04f0a01          MOV      r10,#1                ;58
000098  e7d8              B        |L1.76|
                  |L1.154|
00009a  f1b80f01          CMP      r8,#1                 ;63
00009e  d002              BEQ      |L1.166|
0000a0  f04f0a03          MOV      r10,#3                ;66
0000a4  e7d2              B        |L1.76|
                  |L1.166|
0000a6  f04f0a00          MOV      r10,#0                ;64
0000aa  e7cf              B        |L1.76|
                  |L1.172|
0000ac  f04f0a04          MOV      r10,#4                ;70
0000b0  e7cc              B        |L1.76|
;;;87         case SWAPSIGN:
;;;88           y0 = -*(pay + i++) + yOff;
0000b2  1c44              ADDS     r4,r0,#1
0000b4  f9360010          LDRSH    r0,[r6,r0,LSL #1]
0000b8  1a39              SUBS     r1,r7,r0
;;;89           break;
0000ba  e021              B        |L1.256|
;;;90         case SWAPSIGN_DIVIDE:
;;;91           y0 = (U32)(-*(pay + i++) + yOff) / (U32)Denominator;
0000bc  1c44              ADDS     r4,r0,#1
0000be  f9360010          LDRSH    r0,[r6,r0,LSL #1]
0000c2  1a38              SUBS     r0,r7,r0
0000c4  fbb0f1f8          UDIV     r1,r0,r8
;;;92           break;
0000c8  e01a              B        |L1.256|
;;;93         case DIVIDE:
;;;94           y0 = (U32)(*(pay + i++) + yOff) / (U32)Denominator;
0000ca  1c44              ADDS     r4,r0,#1
0000cc  f9360010          LDRSH    r0,[r6,r0,LSL #1]
0000d0  4438              ADD      r0,r0,r7
0000d2  fbb0f1f8          UDIV     r1,r0,r8
;;;95           break;
0000d6  e013              B        |L1.256|
;;;96         case MULTIPLY:
;;;97           y0 = (U32)(*(pay + i++) + yOff) * (U32)Numerator;
0000d8  1c44              ADDS     r4,r0,#1
0000da  f9360010          LDRSH    r0,[r6,r0,LSL #1]
0000de  4438              ADD      r0,r0,r7
0000e0  fb00f109          MUL      r1,r0,r9
;;;98           break;
0000e4  e00c              B        |L1.256|
;;;99         case MULTIPLY_DIVIDE:
;;;100          y0 = (U32)(*(pay + i++) + yOff) * (U32)Numerator / (U32)Denominator;
0000e6  1c44              ADDS     r4,r0,#1
0000e8  f9360010          LDRSH    r0,[r6,r0,LSL #1]
0000ec  4438              ADD      r0,r0,r7
0000ee  fb00f009          MUL      r0,r0,r9
0000f2  fbb0f1f8          UDIV     r1,r0,r8
;;;101          break;
0000f6  e003              B        |L1.256|
                  |L1.248|
;;;102        default:
;;;103          y0 = *(pay + i++) + yOff;
0000f8  1c44              ADDS     r4,r0,#1
0000fa  f9360010          LDRSH    r0,[r6,r0,LSL #1]
0000fe  19c1              ADDS     r1,r0,r7
                  |L1.256|
;;;104        }
;;;105        /* Iterate */
;;;106        for (; i < NumPoints; i++) {
000100  9806              LDR      r0,[sp,#0x18]
000102  4284              CMP      r4,r0
000104  da5b              BGE      |L1.446|
                  |L1.262|
;;;107          /* Perform high level clipping in y */
;;;108          switch (Method) {
000106  f1ba0f06          CMP      r10,#6
00010a  d223              BCS      |L1.340|
00010c  e8dff00a          TBB      [pc,r10]
000110  2203080e          DCB      0x22,0x03,0x08,0x0e
000114  141a              DCB      0x14,0x1a
;;;109          case SWAPSIGN:
;;;110            y1 = -*(pay + i) + yOff;
000116  f9360014          LDRSH    r0,[r6,r4,LSL #1]
00011a  1a3d              SUBS     r5,r7,r0
;;;111            break;
00011c  e01d              B        |L1.346|
                  |L1.286|
00011e  e04e              B        |L1.446|
;;;112          case SWAPSIGN_DIVIDE:
;;;113            y1 = (U32)(-*(pay + i) + yOff) / (U32)Denominator;
000120  f9360014          LDRSH    r0,[r6,r4,LSL #1]
000124  1a38              SUBS     r0,r7,r0
000126  fbb0f5f8          UDIV     r5,r0,r8
;;;114            break;
00012a  e016              B        |L1.346|
;;;115          case DIVIDE:
;;;116            y1 = (U32)(*(pay + i) + yOff) / (U32)Denominator;
00012c  f9360014          LDRSH    r0,[r6,r4,LSL #1]
000130  4438              ADD      r0,r0,r7
000132  fbb0f5f8          UDIV     r5,r0,r8
;;;117            break;
000136  e010              B        |L1.346|
;;;118          case MULTIPLY:
;;;119            y1 = (U32)(*(pay + i) + yOff) * (U32)Numerator;
000138  f9360014          LDRSH    r0,[r6,r4,LSL #1]
00013c  4438              ADD      r0,r0,r7
00013e  fb00f509          MUL      r5,r0,r9
;;;120            break;
000142  e00a              B        |L1.346|
;;;121          case MULTIPLY_DIVIDE:
;;;122            y1 = (U32)(*(pay + i) + yOff) * (U32)Numerator / (U32)Denominator;
000144  f9360014          LDRSH    r0,[r6,r4,LSL #1]
000148  4438              ADD      r0,r0,r7
00014a  fb00f009          MUL      r0,r0,r9
00014e  fbb0f5f8          UDIV     r5,r0,r8
;;;123            break;
000152  e002              B        |L1.346|
                  |L1.340|
;;;124          default:
;;;125            y1 = *(pay + i) + yOff;
000154  f9360014          LDRSH    r0,[r6,r4,LSL #1]
000158  19c5              ADDS     r5,r0,r7
                  |L1.346|
;;;126          }
;;;127          if ((y0 >= yClip0) || (y1 >= yClip0)) {
00015a  9802              LDR      r0,[sp,#8]
00015c  4281              CMP      r1,r0
00015e  da02              BGE      |L1.358|
000160  9802              LDR      r0,[sp,#8]
000162  4285              CMP      r5,r0
000164  db26              BLT      |L1.436|
                  |L1.358|
;;;128            if ((y0 <= yClip1) || (y1 <= yClip1)) {
000166  9801              LDR      r0,[sp,#4]
000168  4281              CMP      r1,r0
00016a  dd02              BLE      |L1.370|
00016c  9801              LDR      r0,[sp,#4]
00016e  4285              CMP      r5,r0
000170  dc20              BGT      |L1.436|
                  |L1.370|
;;;129              int y01;
;;;130              y01 = (y1 + y0) / 2;
000172  1868              ADDS     r0,r5,r1
000174  eb0070d0          ADD      r0,r0,r0,LSR #31
000178  1040              ASRS     r0,r0,#1
00017a  9000              STR      r0,[sp,#0]
;;;131              if (y0 <= y1) {
00017c  42a9              CMP      r1,r5
00017e  dc0c              BGT      |L1.410|
;;;132                LCD_DrawVLine(i + xOff - 1, y0, y01);
000180  eb04000b          ADD      r0,r4,r11
000184  9004              STR      r0,[sp,#0x10]
000186  1e40              SUBS     r0,r0,#1
000188  9a00              LDR      r2,[sp,#0]
00018a  f7fffffe          BL       LCD_DrawVLine
;;;133                LCD_DrawVLine(i + xOff, y01, y1);
00018e  462a              MOV      r2,r5
000190  9900              LDR      r1,[sp,#0]
000192  9804              LDR      r0,[sp,#0x10]
000194  f7fffffe          BL       LCD_DrawVLine
000198  e00c              B        |L1.436|
                  |L1.410|
;;;134              } else {
;;;135                LCD_DrawVLine(i + xOff - 1, y01, y0);
00019a  eb04000b          ADD      r0,r4,r11
00019e  9003              STR      r0,[sp,#0xc]
0001a0  460a              MOV      r2,r1
0001a2  1e40              SUBS     r0,r0,#1
0001a4  9900              LDR      r1,[sp,#0]
0001a6  f7fffffe          BL       LCD_DrawVLine
;;;136                LCD_DrawVLine(i + xOff, y1, y01);
0001aa  4629              MOV      r1,r5
0001ac  9a00              LDR      r2,[sp,#0]
0001ae  9803              LDR      r0,[sp,#0xc]
0001b0  f7fffffe          BL       LCD_DrawVLine
                  |L1.436|
;;;137              }
;;;138            }
;;;139          }
;;;140          y0 = y1;
0001b4  4629              MOV      r1,r5
0001b6  1c64              ADDS     r4,r4,#1              ;106
0001b8  9806              LDR      r0,[sp,#0x18]         ;106
0001ba  4284              CMP      r4,r0                 ;106
0001bc  dba3              BLT      |L1.262|
                  |L1.446|
;;;141        }
;;;142      }
;;;143    }
0001be  b009              ADD      sp,sp,#0x24
0001c0  e8bd8ff0          POP      {r4-r11,pc}
;;;144    
                          ENDP

                  GUI_DrawGraphEx PROC
;;;154    */  
;;;155    void GUI_DrawGraphEx(I16 *pay, int NumPoints, int x0, int y0, int Numerator, int Denominator) {
0001c4  e92d47f0          PUSH     {r4-r10,lr}
0001c8  b082              SUB      sp,sp,#8
0001ca  4607              MOV      r7,r0
0001cc  4688              MOV      r8,r1
0001ce  4614              MOV      r4,r2
0001d0  469a              MOV      r10,r3
0001d2  9e0b              LDR      r6,[sp,#0x2c]
0001d4  9d0a              LDR      r5,[sp,#0x28]
;;;156      GUI_LOCK();
0001d6  f7fffffe          BL       GUI_Lock
;;;157      #if (GUI_WINSUPPORT)
;;;158        WM_ADDORG(x0,y0);
0001da  480e              LDR      r0,|L1.532|
0001dc  6c41              LDR      r1,[r0,#0x44]  ; GUI_Context
0001de  eb010904          ADD      r9,r1,r4
0001e2  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
0001e4  eb00040a          ADD      r4,r0,r10
;;;159        WM_ITERATE_START(NULL); {
0001e8  2000              MOVS     r0,#0
0001ea  f7fffffe          BL       WM__InitIVRSearch
0001ee  b158              CBZ      r0,|L1.520|
                  |L1.496|
;;;160      #endif
;;;161      _DrawGraph(pay, NumPoints, x0, y0, Numerator, Denominator);
0001f0  4623              MOV      r3,r4
0001f2  464a              MOV      r2,r9
0001f4  4641              MOV      r1,r8
0001f6  4638              MOV      r0,r7
0001f8  9601              STR      r6,[sp,#4]
0001fa  9500              STR      r5,[sp,#0]
0001fc  f7fffffe          BL       _DrawGraph
;;;162      #if (GUI_WINSUPPORT)
;;;163        } WM_ITERATE_END();
000200  f7fffffe          BL       WM__GetNextIVR
000204  2800              CMP      r0,#0
000206  d1f3              BNE      |L1.496|
                  |L1.520|
;;;164      #endif
;;;165      GUI_UNLOCK();
000208  b002              ADD      sp,sp,#8
00020a  e8bd47f0          POP      {r4-r10,lr}
00020e  f7ffbffe          B.W      GUI_Unlock
;;;166    }
;;;167    
                          ENDP

000212  0000              DCW      0x0000
                  |L1.532|
                          DCD      GUI_Context
