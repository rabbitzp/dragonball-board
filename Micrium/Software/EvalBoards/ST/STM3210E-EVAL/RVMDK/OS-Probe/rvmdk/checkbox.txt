; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\checkbox.o --depend=.\rvmdk\checkbox.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\checkbox.crf ..\..\..\..\..\uCGUI\GUI\Widget\CHECKBOX.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;107    */
;;;108    static void _Paint(CHECKBOX_Obj* pObj, CHECKBOX_Handle hObj) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;109      GUI_RECT RectBox = {0};
000008  2000              MOVS     r0,#0
00000a  9004              STR      r0,[sp,#0x10]
00000c  9005              STR      r0,[sp,#0x14]
;;;110      int ColorIndex, EffectSize, Index;
;;;111      EffectSize = pObj->Widget.pEffect->EffectSize;
00000e  6a20              LDR      r0,[r4,#0x20]
000010  6945              LDR      r5,[r0,#0x14]
;;;112      ColorIndex = WM__IsEnabled(hObj);
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       WM__IsEnabled
000018  4606              MOV      r6,r0
;;;113      /* Clear inside ... Just in case      */
;;;114      /* Fill with parents background color */
;;;115    #if WM_SUPPORT_TRANSPARENCY
;;;116      if (!WM_GetHasTrans(hObj))
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       WM_GetHasTrans
000020  b970              CBNZ     r0,|L1.64|
;;;117    #endif
;;;118      {
;;;119        if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
000022  6b60              LDR      r0,[r4,#0x34]
000024  f06f4170          MVN      r1,#0xf0000000
000028  4288              CMP      r0,r1
00002a  d105              BNE      |L1.56|
;;;120          LCD_SetBkColor(WIDGET__GetBkColor(hObj));
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       WIDGET__GetBkColor
000032  f7fffffe          BL       LCD_SetBkColor
000036  e001              B        |L1.60|
                  |L1.56|
;;;121        } else {
;;;122          LCD_SetBkColor(pObj->Props.BkColor);
000038  f7fffffe          BL       LCD_SetBkColor
                  |L1.60|
;;;123        }
;;;124        GUI_Clear();
00003c  f7fffffe          BL       GUI_Clear
                  |L1.64|
;;;125      }
;;;126      /* Get size from bitmap */
;;;127      RectBox.x1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->XSize - 1 + 2 * EffectSize;
000040  6d20              LDR      r0,[r4,#0x50]
000042  8801              LDRH     r1,[r0,#0]
000044  f04f30ff          MOV      r0,#0xffffffff
000048  eb000045          ADD      r0,r0,r5,LSL #1
00004c  4401              ADD      r1,r1,r0
00004e  f8ad1014          STRH     r1,[sp,#0x14]
;;;128      RectBox.y1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->YSize - 1 + 2 * EffectSize;
000052  6d21              LDR      r1,[r4,#0x50]
000054  8849              LDRH     r1,[r1,#2]
000056  4408              ADD      r0,r0,r1
000058  f8ad0016          STRH     r0,[sp,#0x16]
;;;129      WM_SetUserClipRect(&RectBox);
00005c  a804              ADD      r0,sp,#0x10
00005e  f7fffffe          BL       WM_SetUserClipRect
;;;130      /* Clear inside  ... Just in case */
;;;131      LCD_SetBkColor(pObj->Props.aBkColorBox[ColorIndex]);
000062  eb040086          ADD      r0,r4,r6,LSL #2
000066  6ac0              LDR      r0,[r0,#0x2c]
000068  f7fffffe          BL       LCD_SetBkColor
;;;132      GUI_Clear();
00006c  f7fffffe          BL       GUI_Clear
;;;133      Index = pObj->CurrentState * 2 + ColorIndex;
000070  f894005d          LDRB     r0,[r4,#0x5d]
000074  eb060040          ADD      r0,r6,r0,LSL #1
;;;134      if (pObj->Props.apBm[Index]) {
000078  eb040080          ADD      r0,r4,r0,LSL #2
00007c  6c40              LDR      r0,[r0,#0x44]
00007e  b118              CBZ      r0,|L1.136|
;;;135        GUI_DrawBitmap(pObj->Props.apBm[Index], EffectSize, EffectSize);
000080  462a              MOV      r2,r5
000082  4629              MOV      r1,r5
000084  f7fffffe          BL       GUI_DrawBitmap
                  |L1.136|
;;;136      }
;;;137      /* Draw the effect arround the box */
;;;138      WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &RectBox);
000088  a904              ADD      r1,sp,#0x10
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       WIDGET__EFFECT_DrawDownRect
;;;139      WM_SetUserClipRect(NULL);
000090  2000              MOVS     r0,#0
000092  f7fffffe          BL       WM_SetUserClipRect
;;;140      /* Draw text if needed */
;;;141      if (pObj->hpText) {
000096  f9b4005e          LDRSH    r0,[r4,#0x5e]
00009a  2800              CMP      r0,#0
00009c  d07a              BEQ      |L1.404|
;;;142        const char * s;
;;;143        GUI_RECT RectText;
;;;144        /* Draw the text */
;;;145        s = (const char *) GUI_ALLOC_h2p(pObj->hpText);
00009e  f7fffffe          BL       GUI_ALLOC_h2p
0000a2  4605              MOV      r5,r0
;;;146        WM_GetClientRect(&RectText);
0000a4  a802              ADD      r0,sp,#8
0000a6  f7fffffe          BL       WM_GetClientRect
;;;147        RectText.x0 += RectBox.x1 + 1 + pObj->Props.Spacing;
0000aa  f8bd0008          LDRH     r0,[sp,#8]
0000ae  f8bd1014          LDRH     r1,[sp,#0x14]
0000b2  4408              ADD      r0,r0,r1
0000b4  f8941042          LDRB     r1,[r4,#0x42]
0000b8  1c49              ADDS     r1,r1,#1
0000ba  4408              ADD      r0,r0,r1
0000bc  f8ad0008          STRH     r0,[sp,#8]
;;;148        GUI_SetTextMode(GUI_TM_TRANS);
0000c0  2002              MOVS     r0,#2
0000c2  f7fffffe          BL       GUI_SetTextMode
;;;149        LCD_SetColor(pObj->Props.TextColor);
0000c6  6ba0              LDR      r0,[r4,#0x38]
0000c8  f7fffffe          BL       LCD_SetColor
;;;150        GUI_SetFont(pObj->Props.pFont);
0000cc  6aa0              LDR      r0,[r4,#0x28]
0000ce  f7fffffe          BL       GUI_SetFont
;;;151        GUI_DispStringInRect(s, &RectText, pObj->Props.Align);
0000d2  f9b42040          LDRSH    r2,[r4,#0x40]
0000d6  a902              ADD      r1,sp,#8
0000d8  4628              MOV      r0,r5
0000da  f7fffffe          BL       GUI_DispStringInRect
;;;152        /* Draw focus rectangle */
;;;153        if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
0000de  8ce0              LDRH     r0,[r4,#0x26]
0000e0  f0100f01          TST      r0,#1
0000e4  d056              BEQ      |L1.404|
;;;154          int xSizeText = GUI_GetStringDistX(s);
0000e6  4628              MOV      r0,r5
0000e8  f7fffffe          BL       GUI_GetStringDistX
0000ec  4605              MOV      r5,r0
;;;155          int ySizeText = GUI_GetFontSizeY();
0000ee  f7fffffe          BL       GUI_GetFontSizeY
;;;156          GUI_RECT RectFocus = RectText;
0000f2  9a03              LDR      r2,[sp,#0xc]
0000f4  9902              LDR      r1,[sp,#8]
0000f6  9201              STR      r2,[sp,#4]
0000f8  9100              STR      r1,[sp,#0]
;;;157          switch (pObj->Props.Align & ~(GUI_TA_HORIZONTAL)) {
0000fa  f9b41040          LDRSH    r1,[r4,#0x40]
0000fe  f0210103          BIC      r1,r1,#3
000102  2904              CMP      r1,#4
000104  d00b              BEQ      |L1.286|
000106  290c              CMP      r1,#0xc
000108  d10e              BNE      |L1.296|
;;;158          case GUI_TA_VCENTER:
;;;159            RectFocus.y0 = (RectText.y1 - ySizeText + 1) / 2;
00010a  f9bd100e          LDRSH    r1,[sp,#0xe]
00010e  1a09              SUBS     r1,r1,r0
000110  1c49              ADDS     r1,r1,#1
000112  eb0171d1          ADD      r1,r1,r1,LSR #31
000116  1049              ASRS     r1,r1,#1
000118  f8ad1002          STRH     r1,[sp,#2]
;;;160            break;
00011c  e004              B        |L1.296|
                  |L1.286|
;;;161          case GUI_TA_BOTTOM:
;;;162            RectFocus.y0 = RectText.y1 - ySizeText;
00011e  f8bd100e          LDRH     r1,[sp,#0xe]
000122  1a09              SUBS     r1,r1,r0
000124  f8ad1002          STRH     r1,[sp,#2]
                  |L1.296|
;;;163            break;
;;;164          }
;;;165          switch (pObj->Props.Align & ~(GUI_TA_VERTICAL)) {
000128  f9b41040          LDRSH    r1,[r4,#0x40]
00012c  f021010c          BIC      r1,r1,#0xc
000130  2901              CMP      r1,#1
000132  d010              BEQ      |L1.342|
000134  2902              CMP      r1,#2
000136  d119              BNE      |L1.364|
;;;166          case GUI_TA_HCENTER:
;;;167            RectFocus.x0 += ((RectText.x1 - RectText.x0) - xSizeText) / 2;
000138  f9bd100c          LDRSH    r1,[sp,#0xc]
00013c  f9bd2008          LDRSH    r2,[sp,#8]
000140  1a89              SUBS     r1,r1,r2
000142  1b49              SUBS     r1,r1,r5
000144  f8bd2000          LDRH     r2,[sp,#0]
000148  eb0171d1          ADD      r1,r1,r1,LSR #31
00014c  eb020161          ADD      r1,r2,r1,ASR #1
000150  f8ad1000          STRH     r1,[sp,#0]
;;;168            break;
000154  e00a              B        |L1.364|
                  |L1.342|
;;;169          case GUI_TA_RIGHT:
;;;170            RectFocus.x0 += (RectText.x1 - RectText.x0) - xSizeText;
000156  f8bd100c          LDRH     r1,[sp,#0xc]
00015a  f8bd2008          LDRH     r2,[sp,#8]
00015e  1a89              SUBS     r1,r1,r2
000160  f8bd2000          LDRH     r2,[sp,#0]
000164  1b49              SUBS     r1,r1,r5
000166  4411              ADD      r1,r1,r2
000168  f8ad1000          STRH     r1,[sp,#0]
                  |L1.364|
;;;171            break;
;;;172          }
;;;173          RectFocus.x1 = RectFocus.x0 + xSizeText - 1;
00016c  f8bd1000          LDRH     r1,[sp,#0]
000170  1e6a              SUBS     r2,r5,#1
000172  4411              ADD      r1,r1,r2
000174  f8ad1004          STRH     r1,[sp,#4]
;;;174          RectFocus.y1 = RectFocus.y0 + ySizeText - 1;
000178  f8bd1002          LDRH     r1,[sp,#2]
00017c  1e40              SUBS     r0,r0,#1
00017e  4408              ADD      r0,r0,r1
000180  f8ad0006          STRH     r0,[sp,#6]
;;;175          LCD_SetColor(pObj->Props.FocusColor);
000184  6be0              LDR      r0,[r4,#0x3c]
000186  f7fffffe          BL       LCD_SetColor
;;;176          GUI_DrawFocusRect(&RectFocus, -1);
00018a  f04f31ff          MOV      r1,#0xffffffff
00018e  4668              MOV      r0,sp
000190  f7fffffe          BL       GUI_DrawFocusRect
                  |L1.404|
;;;177        }
;;;178      }
;;;179    }
000194  b007              ADD      sp,sp,#0x1c
000196  bdf0              POP      {r4-r7,pc}
;;;180    
                          ENDP

                  _OnTouch PROC
;;;184    */
;;;185    static void _OnTouch(CHECKBOX_Handle hObj, CHECKBOX_Obj* pObj, WM_MESSAGE*pMsg) {
000198  e92d41f0          PUSH     {r4-r8,lr}
00019c  4680              MOV      r8,r0
00019e  460d              MOV      r5,r1
;;;186      int Notification = 0;
0001a0  2400              MOVS     r4,#0
;;;187      int Hit = 0;
0001a2  2600              MOVS     r6,#0
;;;188      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
0001a4  6897              LDR      r7,[r2,#8]
;;;189      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
0001a6  b1d7              CBZ      r7,|L1.478|
;;;190        if (!WM_HasCaptured(hObj)) {
0001a8  4640              MOV      r0,r8
0001aa  f7fffffe          BL       WM_HasCaptured
0001ae  b9b8              CBNZ     r0,|L1.480|
;;;191          if (pState->Pressed) {
0001b0  7a38              LDRB     r0,[r7,#8]
0001b2  b188              CBZ      r0,|L1.472|
;;;192            WM_SetCapture(hObj, 1);
0001b4  2101              MOVS     r1,#1
0001b6  4640              MOV      r0,r8
0001b8  f7fffffe          BL       WM_SetCapture
;;;193            CHECKBOX_SetState(hObj, (pObj->CurrentState + 1) % pObj->NumStates);
0001bc  f895005d          LDRB     r0,[r5,#0x5d]
0001c0  f895205c          LDRB     r2,[r5,#0x5c]
0001c4  1c41              ADDS     r1,r0,#1
0001c6  fbb1f0f2          UDIV     r0,r1,r2
0001ca  fb021110          MLS      r1,r2,r0,r1
0001ce  4640              MOV      r0,r8
0001d0  f7fffffe          BL       CHECKBOX_SetState
;;;194            Notification = WM_NOTIFICATION_CLICKED;
0001d4  2401              MOVS     r4,#1
0001d6  e003              B        |L1.480|
                  |L1.472|
;;;195          } else {
;;;196            Hit =1;
0001d8  2601              MOVS     r6,#1
;;;197            Notification = WM_NOTIFICATION_RELEASED;
0001da  2402              MOVS     r4,#2
0001dc  e000              B        |L1.480|
                  |L1.478|
;;;198          }
;;;199        }
;;;200      } else {
;;;201        Notification = WM_NOTIFICATION_MOVED_OUT;
0001de  2403              MOVS     r4,#3
                  |L1.480|
;;;202      }
;;;203      WM_NotifyParent(hObj, Notification);
0001e0  4621              MOV      r1,r4
0001e2  4640              MOV      r0,r8
0001e4  f7fffffe          BL       WM_NotifyParent
;;;204      if (Hit == 1) {
0001e8  2e01              CMP      r6,#1
0001ea  d105              BNE      |L1.504|
;;;205        GUI_DEBUG_LOG("CHECKBOX: Hit\n");
;;;206        GUI_StoreKey(pObj->Widget.Id);
0001ec  f9b50024          LDRSH    r0,[r5,#0x24]
0001f0  e8bd41f0          POP      {r4-r8,lr}
0001f4  f7ffbffe          B.W      GUI_StoreKey
                  |L1.504|
;;;207      }
;;;208    }
0001f8  e8bd81f0          POP      {r4-r8,pc}
;;;209    
                          ENDP

                  _OnKey PROC
;;;213    */
;;;214    static void  _OnKey(CHECKBOX_Handle hObj, CHECKBOX_Obj * pObj, WM_MESSAGE * pMsg) {
0001fc  b570              PUSH     {r4-r6,lr}
0001fe  4606              MOV      r6,r0
000200  460c              MOV      r4,r1
000202  4615              MOV      r5,r2
;;;215      WM_KEY_INFO * pKeyInfo;
;;;216      if (WM__IsEnabled(hObj)) {
000204  4630              MOV      r0,r6
000206  f7fffffe          BL       WM__IsEnabled
00020a  2800              CMP      r0,#0
00020c  d014              BEQ      |L1.568|
;;;217        pKeyInfo = (WM_KEY_INFO *)(pMsg->Data.p);
00020e  68aa              LDR      r2,[r5,#8]
;;;218        if (pKeyInfo->PressedCnt > 0) {
000210  6850              LDR      r0,[r2,#4]
000212  2800              CMP      r0,#0
000214  dd10              BLE      |L1.568|
;;;219          switch (pKeyInfo->Key) {
000216  6810              LDR      r0,[r2,#0]
000218  2820              CMP      r0,#0x20
00021a  d10d              BNE      |L1.568|
;;;220          case GUI_KEY_SPACE:
;;;221            CHECKBOX_SetState(hObj, (pObj->CurrentState + 1) % pObj->NumStates);
00021c  f894005d          LDRB     r0,[r4,#0x5d]
000220  f894105c          LDRB     r1,[r4,#0x5c]
000224  1c42              ADDS     r2,r0,#1
000226  fbb2f0f1          UDIV     r0,r2,r1
00022a  fb012110          MLS      r1,r1,r0,r2
00022e  4630              MOV      r0,r6
000230  e8bd4070          POP      {r4-r6,lr}
000234  f7ffbffe          B.W      CHECKBOX_SetState
                  |L1.568|
;;;222            break;                    /* Send to parent by not doing anything */
;;;223          }
;;;224        }
;;;225      }
;;;226    }
000238  bd70              POP      {r4-r6,pc}
;;;227    
                          ENDP

                  _Delete PROC
;;;231    */
;;;232    static void _Delete(CHECKBOX_Obj * pObj) {
00023a  305e              ADDS     r0,r0,#0x5e
;;;233      /* Delete attached objects (if any) */
;;;234      GUI_DEBUG_LOG("CHECKBOX: Delete() Deleting attached items");
;;;235      GUI_ALLOC_FreePtr(&pObj->hpText);
00023c  f7ffbffe          B.W      GUI_ALLOC_FreePtr
;;;236    }
;;;237    
                          ENDP

                  CHECKBOX_Callback PROC
;;;270    */
;;;271    void CHECKBOX_Callback (WM_MESSAGE *pMsg) {
000240  b570              PUSH     {r4-r6,lr}
000242  4604              MOV      r4,r0
;;;272      CHECKBOX_Handle hObj;
;;;273      CHECKBOX_Obj* pObj;
;;;274      hObj = pMsg->hWin;
000244  f9b45004          LDRSH    r5,[r4,#4]
;;;275      pObj = (CHECKBOX_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000248  4628              MOV      r0,r5
00024a  f7fffffe          BL       GUI_ALLOC_h2p
00024e  4606              MOV      r6,r0
;;;276      /* Let widget handle the standard messages */
;;;277      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000250  4621              MOV      r1,r4
000252  4628              MOV      r0,r5
000254  f7fffffe          BL       WIDGET_HandleActive
000258  2800              CMP      r0,#0
00025a  d022              BEQ      |L1.674|
;;;278        return;
;;;279      }
;;;280      switch (pMsg->MsgId) {
00025c  6820              LDR      r0,[r4,#0]
00025e  280b              CMP      r0,#0xb
000260  d017              BEQ      |L1.658|
000262  280c              CMP      r0,#0xc
000264  d00f              BEQ      |L1.646|
000266  280e              CMP      r0,#0xe
000268  d002              BEQ      |L1.624|
00026a  280f              CMP      r0,#0xf
00026c  d114              BNE      |L1.664|
00026e  e005              B        |L1.636|
                  |L1.624|
;;;281      case WM_KEY:
;;;282        _OnKey(hObj, pObj, pMsg);
000270  4622              MOV      r2,r4
000272  4631              MOV      r1,r6
000274  4628              MOV      r0,r5
000276  f7fffffe          BL       _OnKey
;;;283        break;
00027a  e00d              B        |L1.664|
                  |L1.636|
;;;284      case WM_PAINT:
;;;285        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_PAINT)\n");
;;;286        _Paint(pObj, hObj);
00027c  4629              MOV      r1,r5
00027e  4630              MOV      r0,r6
000280  e8bd4070          POP      {r4-r6,lr}
000284  e7fe              B        _Paint
                  |L1.646|
;;;287        return;
;;;288      case WM_TOUCH:
;;;289        _OnTouch(hObj, pObj, pMsg);
000286  4622              MOV      r2,r4
000288  4631              MOV      r1,r6
00028a  4628              MOV      r0,r5
00028c  f7fffffe          BL       _OnTouch
;;;290        break;
000290  e002              B        |L1.664|
                  |L1.658|
;;;291      case WM_DELETE:
;;;292        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_DELETE)\n");
;;;293        _Delete(pObj);
000292  4630              MOV      r0,r6
000294  f7fffffe          BL       _Delete
                  |L1.664|
;;;294        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;295      }
;;;296      WM_DefaultProc(pMsg);
000298  4620              MOV      r0,r4
00029a  e8bd4070          POP      {r4-r6,lr}
00029e  f7ffbffe          B.W      WM_DefaultProc
                  |L1.674|
;;;297    }
0002a2  bd70              POP      {r4-r6,pc}
;;;298    
                          ENDP

                  CHECKBOX_CreateEx PROC
;;;312    */
;;;313    CHECKBOX_Handle CHECKBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
0002a4  e92d4ff0          PUSH     {r4-r11,lr}
;;;314                                        int WinFlags, int ExFlags, int Id)
;;;315    {
0002a8  b085              SUB      sp,sp,#0x14
0002aa  4682              MOV      r10,r0
0002ac  468b              MOV      r11,r1
0002ae  4616              MOV      r6,r2
0002b0  461f              MOV      r7,r3
0002b2  f8dd9038          LDR      r9,[sp,#0x38]
0002b6  f8dd8044          LDR      r8,[sp,#0x44]
0002ba  9d0f              LDR      r5,[sp,#0x3c]
;;;316      CHECKBOX_Handle hObj;
;;;317      GUI_USE_PARA(ExFlags);
;;;318      WM_LOCK();
0002bc  f7fffffe          BL       GUI_Lock
;;;319      /* Calculate size if needed */
;;;320      if ((xsize == 0) || (ysize == 0)) {
;;;321        int EffectSize;
;;;322        EffectSize = WIDGET_GetDefaultEffect()->EffectSize;
;;;323        if (xsize == 0) {
;;;324          xsize = CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->XSize + 2 * EffectSize;
0002c0  4c29              LDR      r4,|L1.872|
0002c2  b106              CBZ      r6,|L1.710|
0002c4  b967              CBNZ     r7,|L1.736|
                  |L1.710|
0002c6  f7fffffe          BL       WIDGET_GetDefaultEffect
0002ca  6940              LDR      r0,[r0,#0x14]         ;322
0002cc  b91e              CBNZ     r6,|L1.726|
0002ce  6aa1              LDR      r1,[r4,#0x28]  ; CHECKBOX__DefaultProps
0002d0  8809              LDRH     r1,[r1,#0]
0002d2  eb010640          ADD      r6,r1,r0,LSL #1
                  |L1.726|
;;;325        }
;;;326        if (ysize == 0) {
0002d6  b91f              CBNZ     r7,|L1.736|
;;;327          ysize = CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->YSize + 2 * EffectSize;
0002d8  6aa1              LDR      r1,[r4,#0x28]  ; CHECKBOX__DefaultProps
0002da  8849              LDRH     r1,[r1,#2]
0002dc  eb010740          ADD      r7,r1,r0,LSL #1
                  |L1.736|
;;;328        }
;;;329      }
;;;330    #if WM_SUPPORT_TRANSPARENCY
;;;331      if (CHECKBOX__DefaultProps.BkColor == GUI_INVALID_COLOR) {
0002e0  68e0              LDR      r0,[r4,#0xc]  ; CHECKBOX__DefaultProps
0002e2  f06f4170          MVN      r1,#0xf0000000
0002e6  4288              CMP      r0,r1
0002e8  d101              BNE      |L1.750|
;;;332        WinFlags |= WM_CF_HASTRANS;
0002ea  f0450501          ORR      r5,r5,#1
                  |L1.750|
;;;333      }
;;;334    #endif
;;;335      /* Create the window */
;;;336      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, CHECKBOX_Callback,
0002ee  2340              MOVS     r3,#0x40
0002f0  f2af02b3          ADR      r2,CHECKBOX_Callback + 1
0002f4  b2a9              UXTH     r1,r5
0002f6  9303              STR      r3,[sp,#0xc]
0002f8  9202              STR      r2,[sp,#8]
0002fa  9101              STR      r1,[sp,#4]
0002fc  f8cd9000          STR      r9,[sp,#0]
000300  463b              MOV      r3,r7
000302  4632              MOV      r2,r6
000304  4659              MOV      r1,r11
000306  4650              MOV      r0,r10
000308  f7fffffe          BL       WM_CreateWindowAsChild
00030c  4606              MOV      r6,r0
;;;337                                    sizeof(CHECKBOX_Obj) - sizeof(WM_Obj));
;;;338      if (hObj) {
00030e  b326              CBZ      r6,|L1.858|
;;;339        CHECKBOX_Obj* pObj = (CHECKBOX_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000310  4630              MOV      r0,r6
000312  f7fffffe          BL       GUI_ALLOC_h2p
000316  4605              MOV      r5,r0
;;;340        /* init widget specific variables */
;;;341        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
000318  2210              MOVS     r2,#0x10
00031a  4641              MOV      r1,r8
00031c  4628              MOV      r0,r5
00031e  f7fffffe          BL       WIDGET__Init
;;;342        CHECKBOX_INIT_ID(pObj);
;;;343        /* init member variables */
;;;344        pObj->Props = CHECKBOX__DefaultProps;
000322  e894100e          LDM      r4,{r1-r3,r12}
000326  4628              MOV      r0,r5
000328  e9c53c0c          STRD     r3,r12,[r5,#0x30]
00032c  62ea              STR      r2,[r5,#0x2c]
00032e  62a9              STR      r1,[r5,#0x28]
000330  e9d43c06          LDRD     r3,r12,[r4,#0x18]
000334  6962              LDR      r2,[r4,#0x14]  ; CHECKBOX__DefaultProps
000336  6921              LDR      r1,[r4,#0x10]  ; CHECKBOX__DefaultProps
000338  e9c53c10          STRD     r3,r12,[r5,#0x40]
00033c  63ea              STR      r2,[r5,#0x3c]
00033e  63a9              STR      r1,[r5,#0x38]
000340  e9d43c0a          LDRD     r3,r12,[r4,#0x28]
000344  6a62              LDR      r2,[r4,#0x24]  ; CHECKBOX__DefaultProps
000346  6a21              LDR      r1,[r4,#0x20]  ; CHECKBOX__DefaultProps
000348  e9c03c14          STRD     r3,r12,[r0,#0x50]
00034c  64c2              STR      r2,[r0,#0x4c]
00034e  6481              STR      r1,[r0,#0x48]
000350  6b21              LDR      r1,[r4,#0x30]  ; CHECKBOX__DefaultProps
000352  6581              STR      r1,[r0,#0x58]
;;;345        pObj->NumStates   = 2; /* Default behaviour is 2 states: checked and unchecked */
000354  2002              MOVS     r0,#2
000356  f885005c          STRB     r0,[r5,#0x5c]
                  |L1.858|
;;;346      } else {
;;;347        GUI_DEBUG_ERROROUT_IF(hObj==0, "CHECKBOX_Create failed")
;;;348      }
;;;349      WM_UNLOCK();
00035a  f7fffffe          BL       GUI_Unlock
;;;350      return hObj;
;;;351    }
00035e  b005              ADD      sp,sp,#0x14
000360  4630              MOV      r0,r6                 ;350
000362  e8bd8ff0          POP      {r4-r11,pc}
;;;352    
                          ENDP

000366  0000              DCW      0x0000
                  |L1.872|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  CHECKBOX__DefaultProps
                          DCD      GUI_Font13_1
                          DCD      0x00808080
                          DCD      0x00ffffff
                          DCD      0x00c0c0c0
                          DCD      0x00000000
                          DCD      0x00000000
000018  000c              DCW      0x000c
00001a  0400              DCB      0x04,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      CHECKBOX__abmCheck
                          DCD      CHECKBOX__abmCheck+0x14
                          %        8
