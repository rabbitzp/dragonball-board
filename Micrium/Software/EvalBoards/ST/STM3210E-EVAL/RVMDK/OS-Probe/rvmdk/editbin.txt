; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\editbin.o --depend=.\rvmdk\editbin.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\editbin.crf ..\..\..\..\..\uCGUI\GUI\Widget\EDITBin.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _BinChar2Int PROC
;;;36     */
;;;37     static int _BinChar2Int(int Char) {
000000  f1a00130          SUB      r1,r0,#0x30
;;;38       if ((Char >= '0') && (Char <= '1'))
000004  2901              CMP      r1,#1
000006  d801              BHI      |L1.12|
;;;39         return Char - '0';
000008  3830              SUBS     r0,r0,#0x30
;;;40       return -1;
;;;41     }
00000a  4770              BX       lr
                  |L1.12|
00000c  f04f30ff          MOV      r0,#0xffffffff        ;40
000010  4770              BX       lr
;;;42     
                          ENDP

                  _GetNumDigits PROC
;;;46     */
;;;47     static int _GetNumDigits(U32 Value) {
000012  2100              MOVS     r1,#0
;;;48       int Ret;
;;;49       for (Ret = 0; Value; Value >>= 1, Ret++);
000014  e001              B        |L1.26|
                  |L1.22|
000016  0840              LSRS     r0,r0,#1
000018  1c49              ADDS     r1,r1,#1
                  |L1.26|
00001a  2800              CMP      r0,#0
00001c  d1fb              BNE      |L1.22|
;;;50       return Ret;
00001e  4608              MOV      r0,r1
;;;51     }
000020  4770              BX       lr
;;;52     
                          ENDP

                  _UpdateBuffer PROC
;;;56     */
;;;57     static void _UpdateBuffer(EDIT_Handle hObj) {
000022  b538              PUSH     {r3-r5,lr}
;;;58       char * s;
;;;59       EDIT_Obj * pObj;
;;;60       pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
000024  f7fffffe          BL       GUI_ALLOC_h2p
000028  4604              MOV      r4,r0
;;;61       s = (char*) GUI_ALLOC_h2p(pObj->hpText);
00002a  f9b40028          LDRSH    r0,[r4,#0x28]
00002e  f7fffffe          BL       GUI_ALLOC_h2p
000032  9000              STR      r0,[sp,#0]
;;;62       GUI_AddBin(pObj->CurrentValue, pObj->MaxLen, &s);
000034  8d60              LDRH     r0,[r4,#0x2a]
000036  466a              MOV      r2,sp
000038  b2c1              UXTB     r1,r0
00003a  6be0              LDR      r0,[r4,#0x3c]
00003c  f7fffffe          BL       GUI_AddBin
;;;63     }
000040  bd38              POP      {r3-r5,pc}
;;;64     
                          ENDP

                  _EditBin PROC
;;;68     */
;;;69     static void _EditBin(U8 Bit, EDIT_Obj* pObj, EDIT_Handle hObj) {
000042  4684              MOV      r12,r0
;;;70       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
000044  8d48              LDRH     r0,[r1,#0x2a]
000046  6c0b              LDR      r3,[r1,#0x40]
000048  1ac0              SUBS     r0,r0,r3
00004a  1e40              SUBS     r0,r0,#1
;;;71       U32 AndMask = ~(1   << Pos);
00004c  2301              MOVS     r3,#1
00004e  4083              LSLS     r3,r3,r0
000050  43db              MVNS     r3,r3
;;;72       U32 OrMask  =   Bit << Pos;
000052  fa0cf000          LSL      r0,r12,r0
;;;73       I32 Result  = pObj->CurrentValue & AndMask;
000056  6bc9              LDR      r1,[r1,#0x3c]
000058  4019              ANDS     r1,r1,r3
;;;74       Result     |= OrMask;
00005a  4301              ORRS     r1,r1,r0
;;;75       EDIT_SetValue(hObj, Result);
00005c  4610              MOV      r0,r2
00005e  f7ffbffe          B.W      EDIT_SetValue
;;;76     }
;;;77     
                          ENDP

                  _GetCurrentBit PROC
;;;81     */
;;;82     static U8 _GetCurrentBit(EDIT_Obj* pObj) {
000062  8d41              LDRH     r1,[r0,#0x2a]
;;;83       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
000064  6c02              LDR      r2,[r0,#0x40]
000066  1a89              SUBS     r1,r1,r2
000068  1e49              SUBS     r1,r1,#1
;;;84       U32 AndMask = 1 << Pos;
00006a  2201              MOVS     r2,#1
00006c  408a              LSLS     r2,r2,r1
;;;85       U8 Bit = (pObj->CurrentValue & AndMask) >> Pos;
00006e  6bc0              LDR      r0,[r0,#0x3c]
000070  4010              ANDS     r0,r0,r2
000072  40c8              LSRS     r0,r0,r1
000074  b2c0              UXTB     r0,r0
;;;86       return Bit;
;;;87     }
000076  4770              BX       lr
;;;88     
                          ENDP

                  _AddKeyBin PROC
;;;98     */
;;;99     static void _AddKeyBin(EDIT_Handle hObj, int Key) {
000078  b570              PUSH     {r4-r6,lr}
00007a  4606              MOV      r6,r0
00007c  460c              MOV      r4,r1
;;;100      EDIT_Obj * pObj;
;;;101      pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
00007e  4630              MOV      r0,r6
000080  f7fffffe          BL       GUI_ALLOC_h2p
000084  4605              MOV      r5,r0
;;;102      if (pObj) {
000086  2d00              CMP      r5,#0
000088  d040              BEQ      |L1.268|
;;;103        switch (Key) {
00008a  2c10              CMP      r4,#0x10
00008c  d038              BEQ      |L1.256|
00008e  2c11              CMP      r4,#0x11
000090  d016              BEQ      |L1.192|
000092  2c12              CMP      r4,#0x12
000094  d02e              BEQ      |L1.244|
000096  2c13              CMP      r4,#0x13
000098  d01f              BEQ      |L1.218|
;;;104        case GUI_KEY_UP:
;;;105          {
;;;106            int Bit = _GetCurrentBit(pObj) + 1;
;;;107            if (Bit > 1) {
;;;108              Bit = 0;
;;;109            }
;;;110            _EditBin(Bit, pObj, hObj);
;;;111          }
;;;112          break;
;;;113        case GUI_KEY_DOWN:
;;;114          {
;;;115            int Bit = _GetCurrentBit(pObj) - 1;
;;;116            if (Bit < 0) {
;;;117              Bit = 1;
;;;118            }
;;;119            _EditBin(Bit, pObj, hObj);
;;;120          }
;;;121          break;
;;;122        case GUI_KEY_RIGHT:
;;;123          EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
;;;124          break;
;;;125        case GUI_KEY_LEFT:
;;;126          EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
;;;127          break;
;;;128        default:
;;;129          {
;;;130            int Bit = _BinChar2Int(Key);
00009a  4620              MOV      r0,r4
00009c  f7fffffe          BL       _BinChar2Int
;;;131            if (Bit >= 0) {
0000a0  2800              CMP      r0,#0
0000a2  db09              BLT      |L1.184|
;;;132              _EditBin(Bit, pObj, hObj);
0000a4  4632              MOV      r2,r6
0000a6  4629              MOV      r1,r5
0000a8  b2c0              UXTB     r0,r0
0000aa  f7fffffe          BL       _EditBin
;;;133              EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
0000ae  6c28              LDR      r0,[r5,#0x40]
0000b0  1c41              ADDS     r1,r0,#1
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       EDIT__SetCursorPos
                  |L1.184|
;;;134            }
;;;135          }
;;;136          break;
;;;137        }
;;;138        _UpdateBuffer(hObj);
0000b8  4630              MOV      r0,r6
0000ba  e8bd4070          POP      {r4-r6,lr}
0000be  e7fe              B        _UpdateBuffer
                  |L1.192|
0000c0  4628              MOV      r0,r5                 ;106
0000c2  f7fffffe          BL       _GetCurrentBit
0000c6  1c40              ADDS     r0,r0,#1              ;106
0000c8  2801              CMP      r0,#1                 ;107
0000ca  dd00              BLE      |L1.206|
0000cc  2000              MOVS     r0,#0                 ;108
                  |L1.206|
0000ce  4632              MOV      r2,r6                 ;110
0000d0  4629              MOV      r1,r5                 ;110
0000d2  b2c0              UXTB     r0,r0                 ;110
0000d4  f7fffffe          BL       _EditBin
0000d8  e7ee              B        |L1.184|
                  |L1.218|
0000da  4628              MOV      r0,r5                 ;115
0000dc  f7fffffe          BL       _GetCurrentBit
0000e0  1e40              SUBS     r0,r0,#1              ;115
0000e2  2800              CMP      r0,#0                 ;116
0000e4  da00              BGE      |L1.232|
0000e6  2001              MOVS     r0,#1                 ;117
                  |L1.232|
0000e8  4632              MOV      r2,r6                 ;119
0000ea  4629              MOV      r1,r5                 ;119
0000ec  b2c0              UXTB     r0,r0                 ;119
0000ee  f7fffffe          BL       _EditBin
0000f2  e7e1              B        |L1.184|
                  |L1.244|
0000f4  6c28              LDR      r0,[r5,#0x40]         ;123
0000f6  1c41              ADDS     r1,r0,#1              ;123
0000f8  4628              MOV      r0,r5                 ;123
0000fa  f7fffffe          BL       EDIT__SetCursorPos
0000fe  e7db              B        |L1.184|
                  |L1.256|
000100  6c28              LDR      r0,[r5,#0x40]         ;126
000102  1e41              SUBS     r1,r0,#1              ;126
000104  4628              MOV      r0,r5                 ;126
000106  f7fffffe          BL       EDIT__SetCursorPos
00010a  e7d5              B        |L1.184|
                  |L1.268|
;;;139      }
;;;140    }
00010c  bd70              POP      {r4-r6,pc}
;;;141    
                          ENDP

                  EDIT_SetBinMode PROC
;;;151    */
;;;152    void EDIT_SetBinMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
00010e  e92d41f0          PUSH     {r4-r8,lr}
000112  4606              MOV      r6,r0
000114  4688              MOV      r8,r1
000116  4617              MOV      r7,r2
000118  461d              MOV      r5,r3
;;;153      EDIT_Obj* pObj;
;;;154      int MaxLen;
;;;155      WM_LOCK();
00011a  f7fffffe          BL       GUI_Lock
;;;156      if (hEdit) {
00011e  b346              CBZ      r6,|L1.370|
;;;157        pObj = EDIT_H2P(hEdit);
000120  4630              MOV      r0,r6
000122  f7fffffe          BL       GUI_ALLOC_h2p
000126  4604              MOV      r4,r0
;;;158        pObj->pfAddKeyEx    = _AddKeyBin;
000128  4814              LDR      r0,|L1.380|
00012a  64e0              STR      r0,[r4,#0x4c]
;;;159        pObj->pfUpdateBuffer = _UpdateBuffer;
00012c  4814              LDR      r0,|L1.384|
00012e  6520              STR      r0,[r4,#0x50]
;;;160        pObj->CurrentValue = Value;
000130  f8c4803c          STR      r8,[r4,#0x3c]
;;;161        pObj->CursorPos = 0;
000134  2000              MOVS     r0,#0
000136  6420              STR      r0,[r4,#0x40]
;;;162        MaxLen = pObj->MaxLen;
000138  f9b4102a          LDRSH    r1,[r4,#0x2a]
;;;163        if (MaxLen <= 0 ) {
00013c  2900              CMP      r1,#0
00013e  dc03              BGT      |L1.328|
;;;164          MaxLen = _GetNumDigits(Max);
000140  4628              MOV      r0,r5
000142  f7fffffe          BL       _GetNumDigits
000146  4601              MOV      r1,r0
                  |L1.328|
;;;165        }
;;;166        if (MaxLen > 32) {
000148  2920              CMP      r1,#0x20
00014a  dd00              BLE      |L1.334|
;;;167          MaxLen = 32;
00014c  2120              MOVS     r1,#0x20
                  |L1.334|
;;;168        }
;;;169        if (MaxLen != pObj->MaxLen) {
00014e  f9b4002a          LDRSH    r0,[r4,#0x2a]
000152  4288              CMP      r0,r1
000154  d002              BEQ      |L1.348|
;;;170          EDIT_SetMaxLen(hEdit, MaxLen);
000156  4630              MOV      r0,r6
000158  f7fffffe          BL       EDIT_SetMaxLen
                  |L1.348|
;;;171        }
;;;172        pObj->Min = Min;
00015c  6327              STR      r7,[r4,#0x30]
;;;173        pObj->Max = Max;
00015e  6365              STR      r5,[r4,#0x34]
;;;174        pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
000160  2001              MOVS     r0,#1
000162  f8840048          STRB     r0,[r4,#0x48]
;;;175        _UpdateBuffer(hEdit);
000166  4630              MOV      r0,r6
000168  f7fffffe          BL       _UpdateBuffer
;;;176        WM_Invalidate(hEdit);
00016c  4630              MOV      r0,r6
00016e  f7fffffe          BL       WM_InvalidateWindow
                  |L1.370|
;;;177      }
;;;178      WM_UNLOCK();
000172  e8bd41f0          POP      {r4-r8,lr}
000176  f7ffbffe          B.W      GUI_Unlock
;;;179    }
;;;180    
                          ENDP

00017a  0000              DCW      0x0000
                  |L1.380|
                          DCD      _AddKeyBin
                  |L1.384|
                          DCD      _UpdateBuffer
