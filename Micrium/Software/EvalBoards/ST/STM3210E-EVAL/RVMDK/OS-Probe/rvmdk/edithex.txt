; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\edithex.o --depend=.\rvmdk\edithex.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\edithex.crf ..\..\..\..\..\uCGUI\GUI\Widget\EDITHex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _HexChar2Int PROC
;;;46     */
;;;47     static int _HexChar2Int(int Char) {
000000  f1a00130          SUB      r1,r0,#0x30
;;;48       if ((Char >= '0') && (Char <= '9'))
000004  2909              CMP      r1,#9
000006  d801              BHI      |L1.12|
;;;49         return Char - '0';
000008  3830              SUBS     r0,r0,#0x30
;;;50       Char &= ~0x20;
;;;51       if ((Char >= 'A') && (Char <= 'F'))
;;;52         return Char - 'A' + 10;
;;;53       return -1;
;;;54     }
00000a  4770              BX       lr
                  |L1.12|
00000c  f0200020          BIC      r0,r0,#0x20           ;50
000010  f1a00141          SUB      r1,r0,#0x41           ;51
000014  2905              CMP      r1,#5                 ;51
000016  d801              BHI      |L1.28|
000018  3837              SUBS     r0,r0,#0x37           ;52
00001a  4770              BX       lr
                  |L1.28|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;53
000020  4770              BX       lr
;;;55     
                          ENDP

                  _UpdateBuffer PROC
;;;59     */
;;;60     static void _UpdateBuffer(EDIT_Handle hObj) {
000022  b538              PUSH     {r3-r5,lr}
;;;61       char * s;
;;;62       EDIT_Obj * pObj;
;;;63       pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
000024  f7fffffe          BL       GUI_ALLOC_h2p
000028  4604              MOV      r4,r0
;;;64       s = (char*) GUI_ALLOC_h2p(pObj->hpText);
00002a  f9b40028          LDRSH    r0,[r4,#0x28]
00002e  f7fffffe          BL       GUI_ALLOC_h2p
000032  9000              STR      r0,[sp,#0]
;;;65       GUI_AddHex(pObj->CurrentValue, pObj->MaxLen, &s);
000034  8d60              LDRH     r0,[r4,#0x2a]
000036  466a              MOV      r2,sp
000038  b2c1              UXTB     r1,r0
00003a  6be0              LDR      r0,[r4,#0x3c]
00003c  f7fffffe          BL       GUI_AddHex
;;;66     }
000040  bd38              POP      {r3-r5,pc}
;;;67     
                          ENDP

                  _EditHex PROC
;;;71     */
;;;72     static void _EditHex(int Nibble, EDIT_Obj* pObj, EDIT_Handle hObj) {
000042  4684              MOV      r12,r0
;;;73       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Nibble position */
000044  8d48              LDRH     r0,[r1,#0x2a]
000046  6c0b              LDR      r3,[r1,#0x40]
000048  1ac0              SUBS     r0,r0,r3
00004a  1e40              SUBS     r0,r0,#1
;;;74       U32 AndMask = ~(15     << (Pos << 2));
00004c  0080              LSLS     r0,r0,#2
00004e  230f              MOVS     r3,#0xf
000050  4083              LSLS     r3,r3,r0
000052  43db              MVNS     r3,r3
;;;75       U32 OrMask  =   Nibble << (Pos << 2);
000054  fa0cf000          LSL      r0,r12,r0
;;;76       I32 Result  = pObj->CurrentValue & AndMask;
000058  6bc9              LDR      r1,[r1,#0x3c]
00005a  4019              ANDS     r1,r1,r3
;;;77       Result     |= OrMask;
00005c  4301              ORRS     r1,r1,r0
;;;78       EDIT__SetValueUnsigned(hObj, Result);
00005e  4610              MOV      r0,r2
000060  f7ffbffe          B.W      EDIT__SetValueUnsigned
;;;79     }
;;;80     
                          ENDP

                  _GetNumDigits PROC
;;;97     */
;;;98     static int _GetNumDigits(U32 Value) {
000064  2100              MOVS     r1,#0
;;;99       int Ret;
;;;100      for (Ret = 0; Value; Value >>= 4, Ret++);
000066  e001              B        |L1.108|
                  |L1.104|
000068  0900              LSRS     r0,r0,#4
00006a  1c49              ADDS     r1,r1,#1
                  |L1.108|
00006c  2800              CMP      r0,#0
00006e  d1fb              BNE      |L1.104|
;;;101      return Ret;
000070  4608              MOV      r0,r1
;;;102    }
000072  4770              BX       lr
;;;103    
                          ENDP

                  _AddPosition PROC
;;;107    */
;;;108    static void _AddPosition(EDIT_Obj* pObj, EDIT_Handle hObj, int Sign) {
000074  b430              PUSH     {r4,r5}
000076  4604              MOV      r4,r0
000078  460d              MOV      r5,r1
;;;109      int Pos;
;;;110      U32 v;
;;;111      v = 1;
00007a  2001              MOVS     r0,#1
;;;112      Pos = pObj->MaxLen - pObj->CursorPos - 1;
00007c  f9b4102a          LDRSH    r1,[r4,#0x2a]
000080  6c23              LDR      r3,[r4,#0x40]
000082  1ac9              SUBS     r1,r1,r3
000084  1e4b              SUBS     r3,r1,#1
;;;113      while (Pos--) {
000086  1e5b              SUBS     r3,r3,#1
000088  d302              BCC      |L1.144|
                  |L1.138|
;;;114        v <<= 4;
00008a  0100              LSLS     r0,r0,#4
00008c  1e5b              SUBS     r3,r3,#1              ;113
00008e  d2fc              BCS      |L1.138|
                  |L1.144|
;;;115      }
;;;116      if (Sign < 0) {
000090  2a00              CMP      r2,#0
000092  da01              BGE      |L1.152|
;;;117        v = ~v + 1;
000094  43c0              MVNS     r0,r0
000096  1c40              ADDS     r0,r0,#1
                  |L1.152|
;;;118      }
;;;119      EDIT__SetValueUnsigned(hObj, pObj->CurrentValue + v);
000098  6be1              LDR      r1,[r4,#0x3c]
00009a  4401              ADD      r1,r1,r0
00009c  4628              MOV      r0,r5
00009e  bc30              POP      {r4,r5}
0000a0  f7ffbffe          B.W      EDIT__SetValueUnsigned
;;;120    }
;;;121    
                          ENDP

                  _AddKeyHex PROC
;;;131    */
;;;132    static void _AddKeyHex(EDIT_Handle hObj, int Key) {
0000a4  b570              PUSH     {r4-r6,lr}
0000a6  4606              MOV      r6,r0
0000a8  460c              MOV      r4,r1
;;;133      EDIT_Obj * pObj;
;;;134      pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
0000aa  4630              MOV      r0,r6
0000ac  f7fffffe          BL       GUI_ALLOC_h2p
0000b0  4605              MOV      r5,r0
;;;135      if (pObj) {
0000b2  b1ad              CBZ      r5,|L1.224|
;;;136        switch (Key) {
0000b4  2c10              CMP      r4,#0x10
0000b6  d02a              BEQ      |L1.270|
0000b8  2c11              CMP      r4,#0x11
0000ba  d015              BEQ      |L1.232|
0000bc  2c12              CMP      r4,#0x12
0000be  d020              BEQ      |L1.258|
0000c0  2c13              CMP      r4,#0x13
0000c2  d017              BEQ      |L1.244|
;;;137          #if EDIT_HEX_DIGITONLY
;;;138          case GUI_KEY_UP:
;;;139            {
;;;140              int Nibble = (_GetCurrentNibble(pObj) + 1) & 15;
;;;141              _EditHex(Nibble, pObj, hObj);
;;;142            }
;;;143            break;
;;;144          case GUI_KEY_DOWN:
;;;145            {
;;;146              int Nibble = (_GetCurrentNibble(pObj) + 1) & 15;
;;;147              _EditHex(Nibble, pObj, hObj);
;;;148            }
;;;149            break;
;;;150          #else
;;;151          case GUI_KEY_UP:
;;;152            _AddPosition(pObj, hObj, 1);
;;;153            break;
;;;154          case GUI_KEY_DOWN:
;;;155            _AddPosition(pObj, hObj, -1);
;;;156            break;
;;;157          #endif
;;;158          case GUI_KEY_RIGHT:
;;;159            EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
;;;160            break;
;;;161          case GUI_KEY_LEFT:
;;;162            EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
;;;163            break;
;;;164          default:
;;;165            {
;;;166              int Nibble = _HexChar2Int(Key);
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       _HexChar2Int
;;;167              if (Nibble >= 0) {
0000ca  2800              CMP      r0,#0
0000cc  db08              BLT      |L1.224|
;;;168                _EditHex(Nibble, pObj, hObj);
0000ce  4632              MOV      r2,r6
0000d0  4629              MOV      r1,r5
0000d2  f7fffffe          BL       _EditHex
;;;169                EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
0000d6  6c28              LDR      r0,[r5,#0x40]
0000d8  1c41              ADDS     r1,r0,#1
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       EDIT__SetCursorPos
                  |L1.224|
;;;170              }
;;;171            }
;;;172            break;
;;;173        }
;;;174      }
;;;175      _UpdateBuffer(hObj);
0000e0  4630              MOV      r0,r6
0000e2  e8bd4070          POP      {r4-r6,lr}
0000e6  e7fe              B        _UpdateBuffer
                  |L1.232|
0000e8  2201              MOVS     r2,#1                 ;152
0000ea  4631              MOV      r1,r6                 ;152
0000ec  4628              MOV      r0,r5                 ;152
0000ee  f7fffffe          BL       _AddPosition
0000f2  e7f5              B        |L1.224|
                  |L1.244|
0000f4  f04f32ff          MOV      r2,#0xffffffff        ;155
0000f8  4631              MOV      r1,r6                 ;155
0000fa  4628              MOV      r0,r5                 ;155
0000fc  f7fffffe          BL       _AddPosition
000100  e7ee              B        |L1.224|
                  |L1.258|
000102  6c28              LDR      r0,[r5,#0x40]         ;159
000104  1c41              ADDS     r1,r0,#1              ;159
000106  4628              MOV      r0,r5                 ;159
000108  f7fffffe          BL       EDIT__SetCursorPos
00010c  e7e8              B        |L1.224|
                  |L1.270|
00010e  6c28              LDR      r0,[r5,#0x40]         ;162
000110  1e41              SUBS     r1,r0,#1              ;162
000112  4628              MOV      r0,r5                 ;162
000114  f7fffffe          BL       EDIT__SetCursorPos
000118  e7e2              B        |L1.224|
;;;176    }
;;;177    
                          ENDP

                  EDIT_SetHexMode PROC
;;;187    */
;;;188    void EDIT_SetHexMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
00011a  e92d41f0          PUSH     {r4-r8,lr}
00011e  4606              MOV      r6,r0
000120  4688              MOV      r8,r1
000122  4617              MOV      r7,r2
000124  461d              MOV      r5,r3
;;;189      EDIT_Obj* pObj;
;;;190      WM_LOCK();
000126  f7fffffe          BL       GUI_Lock
;;;191      if (hEdit) {
00012a  b346              CBZ      r6,|L1.382|
;;;192        int MaxLen;
;;;193        pObj = EDIT_H2P(hEdit);
00012c  4630              MOV      r0,r6
00012e  f7fffffe          BL       GUI_ALLOC_h2p
000132  4604              MOV      r4,r0
;;;194        pObj->pfAddKeyEx = _AddKeyHex;
000134  4814              LDR      r0,|L1.392|
000136  64e0              STR      r0,[r4,#0x4c]
;;;195        pObj->pfUpdateBuffer= _UpdateBuffer;
000138  4814              LDR      r0,|L1.396|
00013a  6520              STR      r0,[r4,#0x50]
;;;196        pObj->CurrentValue = Value;
00013c  f8c4803c          STR      r8,[r4,#0x3c]
;;;197        pObj->CursorPos = 0;
000140  2000              MOVS     r0,#0
000142  6420              STR      r0,[r4,#0x40]
;;;198        MaxLen = pObj->MaxLen;
000144  f9b4102a          LDRSH    r1,[r4,#0x2a]
;;;199        if (MaxLen <= 0 ) {
000148  2900              CMP      r1,#0
00014a  dc03              BGT      |L1.340|
;;;200          MaxLen = _GetNumDigits(Max);
00014c  4628              MOV      r0,r5
00014e  f7fffffe          BL       _GetNumDigits
000152  4601              MOV      r1,r0
                  |L1.340|
;;;201        }
;;;202        if (MaxLen > 8) {
000154  2908              CMP      r1,#8
000156  dd00              BLE      |L1.346|
;;;203          MaxLen = 8;
000158  2108              MOVS     r1,#8
                  |L1.346|
;;;204        }
;;;205        if (MaxLen != pObj->MaxLen) {
00015a  f9b4002a          LDRSH    r0,[r4,#0x2a]
00015e  4288              CMP      r0,r1
000160  d002              BEQ      |L1.360|
;;;206          EDIT_SetMaxLen(hEdit, MaxLen);
000162  4630              MOV      r0,r6
000164  f7fffffe          BL       EDIT_SetMaxLen
                  |L1.360|
;;;207        }
;;;208        pObj->Min = Min;
000168  6327              STR      r7,[r4,#0x30]
;;;209        pObj->Max = Max;
00016a  6365              STR      r5,[r4,#0x34]
;;;210        pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
00016c  2001              MOVS     r0,#1
00016e  f8840048          STRB     r0,[r4,#0x48]
;;;211        _UpdateBuffer(hEdit);
000172  4630              MOV      r0,r6
000174  f7fffffe          BL       _UpdateBuffer
;;;212        WM_Invalidate(hEdit);
000178  4630              MOV      r0,r6
00017a  f7fffffe          BL       WM_InvalidateWindow
                  |L1.382|
;;;213      }
;;;214      WM_UNLOCK();
00017e  e8bd41f0          POP      {r4-r8,lr}
000182  f7ffbffe          B.W      GUI_Unlock
;;;215    }
;;;216    
                          ENDP

000186  0000              DCW      0x0000
                  |L1.392|
                          DCD      _AddKeyHex
                  |L1.396|
                          DCD      _UpdateBuffer
