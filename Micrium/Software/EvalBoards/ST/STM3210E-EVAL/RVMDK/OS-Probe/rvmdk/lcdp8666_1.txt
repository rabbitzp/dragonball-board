; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcdp8666_1.o --depend=.\rvmdk\lcdp8666_1.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcdp8666_1.crf ..\..\..\..\..\uCGUI\GUI\ConvertColor\LCDP8666_1.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_Color2Index_8666_1 PROC
;;;31     */
;;;32     unsigned LCD_Color2Index_8666_1(LCD_COLOR Color) {
000000  b410              PUSH     {r4}
;;;33       int r, g, b, Index;
;;;34       r = Color & 255;
000002  b2c2              UXTB     r2,r0
;;;35       g = (Color >> 8) & 255;
000004  f3c02107          UBFX     r1,r0,#8,#8
;;;36       b = Color >> 16;
000008  0c03              LSRS     r3,r0,#16
;;;37     /* Check if image is a gray scale ... */
;;;38     	if ((r == g) && (g == b)) {
00000a  428a              CMP      r2,r1
00000c  d10c              BNE      |L1.40|
00000e  4299              CMP      r1,r3
000010  d10a              BNE      |L1.40|
;;;39         return 120 + (r + 8) / 17;  /* Convert into colors from 120 - 135 */
000012  493a              LDR      r1,|L1.252|
000014  f1020008          ADD      r0,r2,#8
000018  fb811000          SMULL    r1,r0,r1,r0
00001c  10c1              ASRS     r1,r0,#3
00001e  eba170e0          SUB      r0,r1,r0,ASR #31
;;;40     	}
;;;41     /* Convert into the 6*6*6 colors ... */
;;;42       r = (r * 5 + 127) / 255;
;;;43       g = (g * 5 + 127) / 255;
;;;44       b = (b * 5 + 127) / 255;
;;;45       Index = r + 6 * g + 36 * b;
;;;46       return (Index < 108) ? Index + 12 : Index + 28;
;;;47     }
000022  bc10              POP      {r4}
000024  3078              ADDS     r0,r0,#0x78           ;39
000026  4770              BX       lr
                  |L1.40|
000028  eb020082          ADD      r0,r2,r2,LSL #2       ;42
00002c  4c34              LDR      r4,|L1.256|
00002e  f04f0c00          MOV      r12,#0                ;42
000032  307f              ADDS     r0,r0,#0x7f           ;42
000034  4662              MOV      r2,r12                ;42
000036  fbc42000          SMLAL    r2,r0,r4,r0           ;42
00003a  11c2              ASRS     r2,r0,#7              ;42
00003c  eba272e0          SUB      r2,r2,r0,ASR #31      ;42
000040  eb010081          ADD      r0,r1,r1,LSL #2       ;43
000044  307f              ADDS     r0,r0,#0x7f           ;43
000046  4661              MOV      r1,r12                ;43
000048  fbc41000          SMLAL    r1,r0,r4,r0           ;43
00004c  11c1              ASRS     r1,r0,#7              ;43
00004e  eba171e0          SUB      r1,r1,r0,ASR #31      ;43
000052  eb030083          ADD      r0,r3,r3,LSL #2       ;44
000056  307f              ADDS     r0,r0,#0x7f           ;44
000058  fbc4c000          SMLAL    r12,r0,r4,r0          ;44
00005c  11c3              ASRS     r3,r0,#7              ;44
00005e  eba370e0          SUB      r0,r3,r0,ASR #31      ;44
000062  eb010141          ADD      r1,r1,r1,LSL #1       ;45
000066  eb020141          ADD      r1,r2,r1,LSL #1       ;45
00006a  eb0000c0          ADD      r0,r0,r0,LSL #3       ;45
00006e  eb010080          ADD      r0,r1,r0,LSL #2       ;45
000072  286c              CMP      r0,#0x6c              ;46
000074  da02              BGE      |L1.124|
000076  bc10              POP      {r4}
000078  300c              ADDS     r0,r0,#0xc            ;46
00007a  4770              BX       lr
                  |L1.124|
00007c  bc10              POP      {r4}
00007e  301c              ADDS     r0,r0,#0x1c           ;46
000080  4770              BX       lr
;;;48     
                          ENDP

                  LCD_Index2Color_8666_1 PROC
;;;52     */
;;;53     LCD_COLOR LCD_Index2Color_8666_1(int Index) {
000082  f1a00178          SUB      r1,r0,#0x78
;;;54       unsigned int r,g;
;;;55       U32 b;
;;;56       /* 16 Gray scale range ? */
;;;57       if ((Index >= 120) && (Index < 136)) {
000086  2910              CMP      r1,#0x10
000088  d202              BCS      |L1.144|
;;;58         return (U32)0x111111 * (U32)(Index - 120);
00008a  481e              LDR      r0,|L1.260|
00008c  4348              MULS     r0,r1,r0
;;;59     	}
;;;60       if ((Index < 12) || (Index > 243)) {
;;;61         return 0;  /* Black for illegal indices */
;;;62       }
;;;63       if (Index >= 120) {
;;;64         Index -= 28;
;;;65       } else {
;;;66         Index -= 12;
;;;67       }
;;;68       r = (Index % 6) * (255 / 5);
;;;69       g = ((Index / 6) % 6) * (255 / 5);
;;;70       b = (Index / 36) * (255 / 5);
;;;71       return r + (g << 8) + ((U32)b << 16);
;;;72     }
00008e  4770              BX       lr
                  |L1.144|
000090  f1a0010c          SUB      r1,r0,#0xc            ;60
000094  29e8              CMP      r1,#0xe8              ;60
000096  d301              BCC      |L1.156|
000098  2000              MOVS     r0,#0                 ;61
00009a  4770              BX       lr
                  |L1.156|
00009c  2878              CMP      r0,#0x78              ;63
00009e  db01              BLT      |L1.164|
0000a0  381c              SUBS     r0,r0,#0x1c           ;64
0000a2  e000              B        |L1.166|
                  |L1.164|
0000a4  380c              SUBS     r0,r0,#0xc            ;66
                  |L1.166|
0000a6  f8dfc060          LDR      r12,|L1.264|
0000aa  fb8c2100          SMULL    r2,r1,r12,r0          ;68
0000ae  eba171e1          SUB      r1,r1,r1,ASR #31      ;68
0000b2  eba10281          SUB      r2,r1,r1,LSL #2       ;68
0000b6  eb000242          ADD      r2,r0,r2,LSL #1       ;68
0000ba  eb021202          ADD      r2,r2,r2,LSL #4       ;68
0000be  eb020342          ADD      r3,r2,r2,LSL #1       ;68
0000c2  fb8cc201          SMULL    r12,r2,r12,r1         ;69
0000c6  eba272e2          SUB      r2,r2,r2,ASR #31      ;69
0000ca  eba20282          SUB      r2,r2,r2,LSL #2       ;69
0000ce  eb010142          ADD      r1,r1,r2,LSL #1       ;69
0000d2  eb011101          ADD      r1,r1,r1,LSL #4       ;69
0000d6  eb010141          ADD      r1,r1,r1,LSL #1       ;69
0000da  4a0c              LDR      r2,|L1.268|
0000dc  fb822000          SMULL    r2,r0,r2,r0           ;70
0000e0  10c2              ASRS     r2,r0,#3              ;70
0000e2  eba270e0          SUB      r0,r2,r0,ASR #31      ;70
0000e6  eb001000          ADD      r0,r0,r0,LSL #4       ;70
0000ea  eb000040          ADD      r0,r0,r0,LSL #1       ;70
0000ee  eb032101          ADD      r1,r3,r1,LSL #8       ;71
0000f2  eb014000          ADD      r0,r1,r0,LSL #16      ;71
0000f6  4770              BX       lr
;;;73     
                          ENDP

                  LCD_GetIndexMask_8666_1 PROC
;;;77     */
;;;78     unsigned LCD_GetIndexMask_8666_1(void) {
0000f8  20ff              MOVS     r0,#0xff
;;;79       return 0xff;
;;;80     }
0000fa  4770              BX       lr
;;;81     
                          ENDP

                  |L1.252|
                          DCD      0x78787879
                  |L1.256|
                          DCD      0x80808081
                  |L1.260|
                          DCD      0x00111111
                  |L1.264|
                          DCD      0x2aaaaaab
                  |L1.268|
                          DCD      0x38e38e39
