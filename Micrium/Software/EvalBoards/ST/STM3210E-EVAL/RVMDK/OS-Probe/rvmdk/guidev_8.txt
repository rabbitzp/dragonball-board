; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guidev_8.o --depend=.\rvmdk\guidev_8.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guidev_8.crf ..\..\..\..\..\uCGUI\GUI\MemDev\GUIDEV_8.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _XY2PTR PROC
;;;73     */
;;;74     static PIXELINDEX* _XY2PTR(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;75       GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000006  48fa              LDR      r0,|L1.1008|
000008  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000c  f7fffffe          BL       GUI_ALLOC_h2p
;;;76       U8 *pData = (U8*)(pDev + 1);
000010  f100022c          ADD      r2,r0,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds",x,y);
;;;80         }
;;;81       #endif
;;;82       pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
000014  8841              LDRH     r1,[r0,#2]
000016  68c3              LDR      r3,[r0,#0xc]
000018  1a69              SUBS     r1,r5,r1
00001a  b289              UXTH     r1,r1
00001c  b29b              UXTH     r3,r3
00001e  fb012103          MLA      r1,r1,r3,r2
;;;83       return ((PIXELINDEX*)pData) + x - pDev->x0;
000022  f9b00000          LDRSH    r0,[r0,#0]
000026  4421              ADD      r1,r1,r4
000028  1a08              SUBS     r0,r1,r0
;;;84     }
00002a  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;89     */
;;;90     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
00002c  e92d5fff          PUSH     {r0-r12,lr}
;;;91                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;92     {
000030  4683              MOV      r11,r0
000032  4689              MOV      r9,r1
000034  9f0f              LDR      r7,[sp,#0x3c]
000036  9e12              LDR      r6,[sp,#0x48]
000038  9a11              LDR      r2,[sp,#0x44]
00003a  9910              LDR      r1,[sp,#0x40]
00003c  980e              LDR      r0,[sp,#0x38]
00003e  4698              MOV      r8,r3
;;;93       PIXELINDEX Index1;
;;;94       PIXELINDEX IndexMask;
;;;95       unsigned pixels;
;;;96       unsigned PixelCnt;
;;;97       PixelCnt = 8 - Diff;
000040  f1c00408          RSB      r4,r0,#8
;;;98       pixels = LCD_aMirror[*p] >> Diff;
000044  f898c000          LDRB     r12,[r8,#0]
000048  4bea              LDR      r3,|L1.1012|
00004a  f813300c          LDRB     r3,[r3,r12]
00004e  fa23f500          LSR      r5,r3,r0
;;;99     
;;;100      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d", x,pDev->x0, GUI_Context.ClipRect.x0);
;;;101    
;;;102      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000052  48e7              LDR      r0,|L1.1008|
000054  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000056  f0100003          ANDS     r0,r0,#3
00005a  d021              BEQ      |L1.160|
00005c  2801              CMP      r0,#1
00005e  d04b              BEQ      |L1.248|
000060  2802              CMP      r0,#2
000062  d162              BNE      |L1.298|
;;;103      case 0:    /* Write mode */
;;;104        do {
;;;105          /* Prepare loop */
;;;106          if (PixelCnt > xsize) {
;;;107            PixelCnt = xsize;
;;;108          }
;;;109          xsize -= PixelCnt;
;;;110          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;111          do {
;;;112            *pDest++ = *(pTrans + (pixels & 1));
;;;113            pixels >>= 1;
;;;114          } while (--PixelCnt);
;;;115          /* Check if an other Source byte needs to be loaded */
;;;116          if (xsize == 0) {
;;;117            return;
;;;118          }
;;;119          PixelCnt = 8;
;;;120          pixels = LCD_aMirror[*++p];
;;;121        } while (1);
;;;122      case LCD_DRAWMODE_TRANS:
;;;123        Index1 = *(pTrans + 1);
000064  8848              LDRH     r0,[r1,#2]
000066  f0000aff          AND      r10,r0,#0xff
                  |L1.106|
;;;124        do {
;;;125          /* Prepare loop */
;;;126          if (PixelCnt > xsize) {
00006a  42bc              CMP      r4,r7
00006c  d900              BLS      |L1.112|
;;;127            PixelCnt = xsize;
00006e  463c              MOV      r4,r7
                  |L1.112|
;;;128          }
;;;129          xsize -= PixelCnt;
000070  1b3f              SUBS     r7,r7,r4
;;;130          if (pUsage) {
000072  f1bb0f00          CMP      r11,#0
000076  d02b              BEQ      |L1.208|
                  |L1.120|
;;;131            do {
;;;132              if (pixels == 0) {      /* Early out optimization; not required */
000078  b33d              CBZ      r5,|L1.202|
;;;133                pDest += PixelCnt;
;;;134                x     += PixelCnt;
;;;135                break;
;;;136              }
;;;137              if ((pixels & 1)) {
00007a  f0150f01          TST      r5,#1
00007e  d008              BEQ      |L1.146|
;;;138                GUI_USAGE_AddPixel(pUsage, x, y);
000080  f8db0008          LDR      r0,[r11,#8]
000084  4649              MOV      r1,r9
000086  9a02              LDR      r2,[sp,#8]
000088  6803              LDR      r3,[r0,#0]
00008a  4658              MOV      r0,r11
00008c  4798              BLX      r3
;;;139                *pDest = Index1;
00008e  f886a000          STRB     r10,[r6,#0]
                  |L1.146|
;;;140              }
;;;141              x++;
000092  f1090901          ADD      r9,r9,#1
;;;142              pDest++;
000096  1c76              ADDS     r6,r6,#1
;;;143              if (--PixelCnt == 0) {
000098  1e64              SUBS     r4,r4,#1
00009a  d025              BEQ      |L1.232|
;;;144                break;
;;;145              }
;;;146              pixels >>= 1;
00009c  086d              LSRS     r5,r5,#1
;;;147            } while (1);
00009e  e7eb              B        |L1.120|
                  |L1.160|
0000a0  4ad4              LDR      r2,|L1.1012|
                  |L1.162|
0000a2  42bc              CMP      r4,r7                 ;106
0000a4  d900              BLS      |L1.168|
0000a6  463c              MOV      r4,r7                 ;107
                  |L1.168|
0000a8  1b3f              SUBS     r7,r7,r4              ;109
                  |L1.170|
0000aa  f0050001          AND      r0,r5,#1              ;112
0000ae  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;112
0000b2  f8060b01          STRB     r0,[r6],#1            ;112
0000b6  086d              LSRS     r5,r5,#1              ;113
0000b8  1e64              SUBS     r4,r4,#1              ;114
0000ba  d1f6              BNE      |L1.170|
0000bc  2f00              CMP      r7,#0                 ;116
0000be  d034              BEQ      |L1.298|
0000c0  2408              MOVS     r4,#8                 ;119
0000c2  f8180f01          LDRB     r0,[r8,#1]!           ;120
0000c6  5c15              LDRB     r5,[r2,r0]            ;120
0000c8  e7eb              B        |L1.162|
                  |L1.202|
0000ca  4426              ADD      r6,r6,r4              ;133
0000cc  44a1              ADD      r9,r9,r4              ;134
0000ce  e00b              B        |L1.232|
                  |L1.208|
;;;148          } else {
;;;149            do {
;;;150              if (pixels == 0) {      /* Early out optimization; not required */
0000d0  b14d              CBZ      r5,|L1.230|
;;;151                pDest += PixelCnt;
;;;152                break;
;;;153              }
;;;154              if ((pixels & 1)) {
0000d2  f0150f01          TST      r5,#1
0000d6  d001              BEQ      |L1.220|
;;;155                *pDest = Index1;
0000d8  f886a000          STRB     r10,[r6,#0]
                  |L1.220|
;;;156              }
;;;157              pDest++;
0000dc  1c76              ADDS     r6,r6,#1
;;;158              if (--PixelCnt == 0) {
0000de  1e64              SUBS     r4,r4,#1
0000e0  d002              BEQ      |L1.232|
;;;159                break;
;;;160              }
;;;161              pixels >>= 1;
0000e2  086d              LSRS     r5,r5,#1
;;;162            } while (1);
0000e4  e7f4              B        |L1.208|
                  |L1.230|
0000e6  4426              ADD      r6,r6,r4              ;151
                  |L1.232|
;;;163          }
;;;164          /* Check if an other Source byte needs to be loaded */
;;;165          if (xsize == 0) {
0000e8  2f00              CMP      r7,#0
0000ea  d01e              BEQ      |L1.298|
;;;166            return;
;;;167          }
;;;168          PixelCnt = 8;
0000ec  2408              MOVS     r4,#8
;;;169          pixels = LCD_aMirror[*(++p)];
0000ee  f8181f01          LDRB     r1,[r8,#1]!
0000f2  48c0              LDR      r0,|L1.1012|
0000f4  5c45              LDRB     r5,[r0,r1]
;;;170        } while (1);
0000f6  e7b8              B        |L1.106|
                  |L1.248|
;;;171      case LCD_DRAWMODE_XOR:
;;;172        IndexMask = pDev->pfGetIndexMask();
0000f8  6a50              LDR      r0,[r2,#0x24]
0000fa  4780              BLX      r0
0000fc  b2c0              UXTB     r0,r0
0000fe  49bd              LDR      r1,|L1.1012|
                  |L1.256|
;;;173        do {
;;;174          /* Prepare loop */
;;;175          if (PixelCnt > xsize) {
000100  42bc              CMP      r4,r7
000102  d900              BLS      |L1.262|
;;;176            PixelCnt = xsize;
000104  463c              MOV      r4,r7
                  |L1.262|
;;;177          }
;;;178          xsize -= PixelCnt;
000106  1b3f              SUBS     r7,r7,r4
                  |L1.264|
;;;179          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;180          do {
;;;181            if ((pixels & 1)) {
000108  f0150f01          TST      r5,#1
00010c  d002              BEQ      |L1.276|
;;;182              *pDest ^= IndexMask;
00010e  7832              LDRB     r2,[r6,#0]
000110  4042              EORS     r2,r2,r0
000112  7032              STRB     r2,[r6,#0]
                  |L1.276|
;;;183            }
;;;184            *pDest++;
000114  1c76              ADDS     r6,r6,#1
;;;185            pixels >>= 1;
000116  086d              LSRS     r5,r5,#1
;;;186          } while (--PixelCnt);
000118  1e64              SUBS     r4,r4,#1
00011a  d1f5              BNE      |L1.264|
;;;187          /* Check if an other Source byte needs to be loaded */
;;;188          if (xsize == 0) {
00011c  2f00              CMP      r7,#0
00011e  d004              BEQ      |L1.298|
;;;189            return;
;;;190          }
;;;191          PixelCnt = 8;
000120  2408              MOVS     r4,#8
;;;192          pixels = LCD_aMirror[*(++p)];
000122  f8182f01          LDRB     r2,[r8,#1]!
000126  5c8d              LDRB     r5,[r1,r2]
;;;193        } while (1);
000128  e7ea              B        |L1.256|
                  |L1.298|
;;;194      }
;;;195    }
00012a  b004              ADD      sp,sp,#0x10
00012c  e8bd9ff0          POP      {r4-r12,pc}
;;;196    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;200    */
;;;201    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000130  e92d5fff          PUSH     {r0-r12,lr}
;;;202                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;203    {
000134  4682              MOV      r10,r0
000136  f8dd9040          LDR      r9,[sp,#0x40]
00013a  9f0f              LDR      r7,[sp,#0x3c]
00013c  9e11              LDR      r6,[sp,#0x44]
00013e  980e              LDR      r0,[sp,#0x38]
000140  468b              MOV      r11,r1
000142  4698              MOV      r8,r3
;;;204      U8 pixels;
;;;205      U8  PixelCnt;
;;;206      PixelCnt = 4 - Diff;
000144  f1c00104          RSB      r1,r0,#4
000148  b2cc              UXTB     r4,r1
;;;207      pixels = (*p) << (Diff << 1);
00014a  f8981000          LDRB     r1,[r8,#0]
00014e  0040              LSLS     r0,r0,#1
000150  fa01f000          LSL      r0,r1,r0
000154  b2c5              UXTB     r5,r0
;;;208      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000156  48a6              LDR      r0,|L1.1008|
000158  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00015a  f0100003          ANDS     r0,r0,#3
00015e  d004              BEQ      |L1.362|
000160  2801              CMP      r0,#1
000162  d03b              BEQ      |L1.476|
000164  2802              CMP      r0,#2
000166  d150              BNE      |L1.522|
000168  e014              B        |L1.404|
                  |L1.362|
;;;209      case 0:    /* Write mode */
;;;210      PixelLoopWrite:
;;;211        if (PixelCnt > xsize) {
00016a  42bc              CMP      r4,r7
00016c  dd00              BLE      |L1.368|
;;;212          PixelCnt = xsize;
00016e  b2fc              UXTB     r4,r7
                  |L1.368|
;;;213        }
;;;214        xsize -= PixelCnt;
000170  1b3f              SUBS     r7,r7,r4
                  |L1.370|
;;;215        do {
;;;216          *pDest++ = *(pTrans + (pixels >> 6));
000172  09a8              LSRS     r0,r5,#6
000174  f8390010          LDRH     r0,[r9,r0,LSL #1]
000178  f8060b01          STRB     r0,[r6],#1
;;;217          pixels <<= 2;
00017c  06a8              LSLS     r0,r5,#26
00017e  0e05              LSRS     r5,r0,#24
;;;218        } while (--PixelCnt);
000180  1e60              SUBS     r0,r4,#1
000182  f01004ff          ANDS     r4,r0,#0xff
000186  d1f4              BNE      |L1.370|
;;;219        if (xsize) {
000188  2f00              CMP      r7,#0
00018a  d03e              BEQ      |L1.522|
;;;220          PixelCnt = 4;
00018c  2404              MOVS     r4,#4
;;;221          pixels = *(++p);
00018e  f8185f01          LDRB     r5,[r8,#1]!
;;;222          goto PixelLoopWrite;
000192  e7ea              B        |L1.362|
                  |L1.404|
;;;223        }
;;;224        break;
;;;225      case LCD_DRAWMODE_TRANS:
;;;226      PixelLoopTrans:
;;;227        if (PixelCnt > xsize)
000194  42bc              CMP      r4,r7
000196  dd00              BLE      |L1.410|
;;;228          PixelCnt = xsize;
000198  b2fc              UXTB     r4,r7
                  |L1.410|
;;;229        xsize -= PixelCnt;
00019a  1b3f              SUBS     r7,r7,r4
                  |L1.412|
;;;230        do {
;;;231          if (pixels & 0xc0) {
00019c  f0150fc0          TST      r5,#0xc0
0001a0  d00d              BEQ      |L1.446|
;;;232            *pDest = *(pTrans + (pixels >> 6));
0001a2  09a8              LSRS     r0,r5,#6
0001a4  f8390010          LDRH     r0,[r9,r0,LSL #1]
0001a8  7030              STRB     r0,[r6,#0]
;;;233            if (pUsage) {
0001aa  f1ba0f00          CMP      r10,#0
0001ae  d006              BEQ      |L1.446|
;;;234              GUI_USAGE_AddPixel(pUsage, x, y);
0001b0  f8da0008          LDR      r0,[r10,#8]
0001b4  4659              MOV      r1,r11
0001b6  9a02              LDR      r2,[sp,#8]
0001b8  6803              LDR      r3,[r0,#0]
0001ba  4650              MOV      r0,r10
0001bc  4798              BLX      r3
                  |L1.446|
;;;235            }
;;;236          }
;;;237          pDest++;
0001be  1c76              ADDS     r6,r6,#1
;;;238          x++;
0001c0  f10b0b01          ADD      r11,r11,#1
;;;239          pixels <<= 2;
0001c4  06a8              LSLS     r0,r5,#26
0001c6  0e05              LSRS     r5,r0,#24
;;;240        } while (--PixelCnt);
0001c8  1e60              SUBS     r0,r4,#1
0001ca  f01004ff          ANDS     r4,r0,#0xff
0001ce  d1e5              BNE      |L1.412|
;;;241        if (xsize) {
0001d0  2f00              CMP      r7,#0
0001d2  d01a              BEQ      |L1.522|
;;;242          PixelCnt = 4;
0001d4  2404              MOVS     r4,#4
;;;243          pixels = *(++p);
0001d6  f8185f01          LDRB     r5,[r8,#1]!
;;;244          goto PixelLoopTrans;
0001da  e7db              B        |L1.404|
                  |L1.476|
;;;245        }
;;;246        break;
;;;247      case LCD_DRAWMODE_XOR:;
;;;248      PixelLoopXor:
;;;249        if (PixelCnt > xsize)
0001dc  42bc              CMP      r4,r7
0001de  dd00              BLE      |L1.482|
;;;250          PixelCnt = xsize;
0001e0  b2fc              UXTB     r4,r7
                  |L1.482|
;;;251        xsize -= PixelCnt;
0001e2  1b3f              SUBS     r7,r7,r4
                  |L1.484|
;;;252        do {
;;;253          if ((pixels & 0xc0))
0001e4  f0150fc0          TST      r5,#0xc0
0001e8  d002              BEQ      |L1.496|
;;;254            *pDest ^= 255;
0001ea  7830              LDRB     r0,[r6,#0]
0001ec  43c0              MVNS     r0,r0
0001ee  7030              STRB     r0,[r6,#0]
                  |L1.496|
;;;255          pDest++;
0001f0  1c76              ADDS     r6,r6,#1
;;;256          pixels <<= 2;
0001f2  06a8              LSLS     r0,r5,#26
0001f4  0e05              LSRS     r5,r0,#24
;;;257        } while (--PixelCnt);
0001f6  1e60              SUBS     r0,r4,#1
0001f8  f01004ff          ANDS     r4,r0,#0xff
0001fc  d1f2              BNE      |L1.484|
;;;258        if (xsize) {
0001fe  2f00              CMP      r7,#0
000200  d003              BEQ      |L1.522|
;;;259          PixelCnt = 4;
000202  2404              MOVS     r4,#4
;;;260          pixels = *(++p);
000204  f8185f01          LDRB     r5,[r8,#1]!
;;;261          goto PixelLoopXor;
000208  e7e8              B        |L1.476|
                  |L1.522|
;;;262        }
;;;263        break;
;;;264      }
;;;265    }
00020a  b004              ADD      sp,sp,#0x10
00020c  e8bd9ff0          POP      {r4-r12,pc}
;;;266    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;270    */
;;;271    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000210  e92d5ff0          PUSH     {r4-r12,lr}
;;;272                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;273    {
000214  468a              MOV      r10,r1
000216  f8dd8030          LDR      r8,[sp,#0x30]
00021a  9e0b              LDR      r6,[sp,#0x2c]
00021c  9c0d              LDR      r4,[sp,#0x34]
00021e  990a              LDR      r1,[sp,#0x28]
000220  4681              MOV      r9,r0
000222  4693              MOV      r11,r2
000224  461f              MOV      r7,r3
;;;274      U8 pixels;
;;;275      U8 PixelCnt;
;;;276      PixelCnt = 2 - Diff;
000226  f1c10002          RSB      r0,r1,#2
00022a  b2c0              UXTB     r0,r0
;;;277      pixels = (*p) << (Diff << 2);
00022c  783a              LDRB     r2,[r7,#0]
00022e  008b              LSLS     r3,r1,#2
000230  409a              LSLS     r2,r2,r3
000232  b2d5              UXTB     r5,r2
;;;278      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000234  4a6e              LDR      r2,|L1.1008|
000236  7c12              LDRB     r2,[r2,#0x10]  ; GUI_Context
000238  f0120203          ANDS     r2,r2,#3
00023c  d05a              BEQ      |L1.756|
00023e  2a01              CMP      r2,#1
000240  d07d              BEQ      |L1.830|
000242  2a02              CMP      r2,#2
000244  d178              BNE      |L1.824|
;;;279    /*
;;;280              * Write mode *
;;;281    */
;;;282      case 0:
;;;283        /* Draw incomplete bytes to the left of center area */
;;;284        if (Diff) {
;;;285          *pDest = *(pTrans + (pixels >> 4));
;;;286          pDest++;
;;;287          xsize--;
;;;288          pixels = *++p;
;;;289        }
;;;290        /* Draw center area (2 pixels in one byte) */
;;;291        if (xsize >= 2) {
;;;292          int i = xsize >> 1;
;;;293          xsize &= 1;
;;;294          do {
;;;295            *pDest     = *(pTrans + (pixels >> 4));   /* Draw 1. (left) pixel */
;;;296            *(pDest+1) = *(pTrans + (pixels & 15));   /* Draw 2. (right) pixel */
;;;297            pDest += 2;
;;;298            pixels = *++p;
;;;299          } while (--i);
;;;300        }
;;;301        /* Draw incomplete bytes to the right of center area */
;;;302        if (xsize) {
;;;303          *pDest = * (pTrans + (pixels >> 4));
;;;304        }
;;;305        break;
;;;306    /*
;;;307              * Transparent draw mode *
;;;308    */
;;;309      case LCD_DRAWMODE_TRANS:
;;;310        /* Draw incomplete bytes to the left of center area */
;;;311        if (Diff) {
000246  b1b1              CBZ      r1,|L1.630|
;;;312          if (pixels & 0xF0) {
000248  f0150ff0          TST      r5,#0xf0
00024c  d00d              BEQ      |L1.618|
;;;313            *pDest = *(pTrans + (pixels >> 4));
00024e  0928              LSRS     r0,r5,#4
000250  f8380010          LDRH     r0,[r8,r0,LSL #1]
000254  7020              STRB     r0,[r4,#0]
;;;314            if (pUsage) {
000256  f1b90f00          CMP      r9,#0
00025a  d006              BEQ      |L1.618|
;;;315              GUI_USAGE_AddPixel(pUsage, x, y);
00025c  f8d90008          LDR      r0,[r9,#8]
000260  465a              MOV      r2,r11
000262  4651              MOV      r1,r10
000264  6803              LDR      r3,[r0,#0]
000266  4648              MOV      r0,r9
000268  4798              BLX      r3
                  |L1.618|
;;;316            }
;;;317          }
;;;318          pDest++;
00026a  1c64              ADDS     r4,r4,#1
;;;319          x++;
00026c  f10a0a01          ADD      r10,r10,#1
;;;320          xsize--;
000270  1e76              SUBS     r6,r6,#1
;;;321          pixels = *++p;
000272  f8175f01          LDRB     r5,[r7,#1]!
                  |L1.630|
;;;322        }
;;;323        /* Draw center area (2 pixels in one byte) */
;;;324        while (xsize >= 2) {
000276  2e02              CMP      r6,#2
000278  db29              BLT      |L1.718|
                  |L1.634|
;;;325          /* Draw 1. (left) pixel */
;;;326          if (pixels & 0xF0) {
00027a  f0150ff0          TST      r5,#0xf0
00027e  d00d              BEQ      |L1.668|
;;;327            *pDest = *(pTrans + (pixels >> 4));
000280  0928              LSRS     r0,r5,#4
000282  f8380010          LDRH     r0,[r8,r0,LSL #1]
000286  7020              STRB     r0,[r4,#0]
;;;328            if (pUsage) {
000288  f1b90f00          CMP      r9,#0
00028c  d006              BEQ      |L1.668|
;;;329              GUI_USAGE_AddPixel(pUsage, x, y);
00028e  f8d90008          LDR      r0,[r9,#8]
000292  465a              MOV      r2,r11
000294  4651              MOV      r1,r10
000296  6803              LDR      r3,[r0,#0]
000298  4648              MOV      r0,r9
00029a  4798              BLX      r3
                  |L1.668|
;;;330            }
;;;331          }
;;;332          /* Draw 2. (right) pixel */
;;;333          if (pixels &= 15) {
00029c  f015000f          ANDS     r0,r5,#0xf
0002a0  d00d              BEQ      |L1.702|
;;;334            *(pDest + 1) = *(pTrans + pixels);
0002a2  f8380010          LDRH     r0,[r8,r0,LSL #1]
0002a6  7060              STRB     r0,[r4,#1]
;;;335            if (pUsage) {
0002a8  f1b90f00          CMP      r9,#0
0002ac  d007              BEQ      |L1.702|
;;;336              GUI_USAGE_AddPixel(pUsage, x + 1, y);
0002ae  f8d90008          LDR      r0,[r9,#8]
0002b2  465a              MOV      r2,r11
0002b4  f10a0101          ADD      r1,r10,#1
0002b8  6803              LDR      r3,[r0,#0]
0002ba  4648              MOV      r0,r9
0002bc  4798              BLX      r3
                  |L1.702|
;;;337            }
;;;338          }
;;;339          pDest += 2;
0002be  1ca4              ADDS     r4,r4,#2
;;;340          x += 2;
0002c0  f10a0a02          ADD      r10,r10,#2
;;;341          xsize -= 2;
0002c4  1eb6              SUBS     r6,r6,#2
;;;342          pixels = *++p;
0002c6  f8175f01          LDRB     r5,[r7,#1]!
0002ca  2e02              CMP      r6,#2                 ;324
0002cc  dad5              BGE      |L1.634|
                  |L1.718|
;;;343        }
;;;344        /* Draw incomplete bytes to the right of center area */
;;;345        if (xsize) {
0002ce  2e00              CMP      r6,#0
0002d0  d032              BEQ      |L1.824|
;;;346          if (pixels >>= 4) {
0002d2  0928              LSRS     r0,r5,#4
0002d4  d030              BEQ      |L1.824|
;;;347            *pDest = *(pTrans + pixels);
0002d6  f8380010          LDRH     r0,[r8,r0,LSL #1]
0002da  7020              STRB     r0,[r4,#0]
;;;348            if (pUsage) {
0002dc  f1b90f00          CMP      r9,#0
0002e0  d02a              BEQ      |L1.824|
;;;349              GUI_USAGE_AddPixel(pUsage, x, y);
0002e2  f8d90008          LDR      r0,[r9,#8]
0002e6  465a              MOV      r2,r11
0002e8  4651              MOV      r1,r10
0002ea  6803              LDR      r3,[r0,#0]
0002ec  4648              MOV      r0,r9
0002ee  e8bd5ff0          POP      {r4-r12,lr}
0002f2  4718              BX       r3
                  |L1.756|
0002f4  b139              CBZ      r1,|L1.774|
0002f6  0928              LSRS     r0,r5,#4              ;285
0002f8  f8380010          LDRH     r0,[r8,r0,LSL #1]     ;285
0002fc  7020              STRB     r0,[r4,#0]            ;285
0002fe  1c64              ADDS     r4,r4,#1              ;286
000300  1e76              SUBS     r6,r6,#1              ;287
000302  f8175f01          LDRB     r5,[r7,#1]!           ;288
                  |L1.774|
000306  2e02              CMP      r6,#2                 ;291
000308  db10              BLT      |L1.812|
00030a  1070              ASRS     r0,r6,#1              ;292
00030c  f0060601          AND      r6,r6,#1              ;293
                  |L1.784|
000310  0929              LSRS     r1,r5,#4              ;295
000312  f8381011          LDRH     r1,[r8,r1,LSL #1]     ;295
000316  7021              STRB     r1,[r4,#0]            ;295
000318  f005010f          AND      r1,r5,#0xf            ;296
00031c  f8381011          LDRH     r1,[r8,r1,LSL #1]     ;296
000320  7061              STRB     r1,[r4,#1]            ;296
000322  1ca4              ADDS     r4,r4,#2              ;297
000324  f8175f01          LDRB     r5,[r7,#1]!           ;298
000328  1e40              SUBS     r0,r0,#1              ;299
00032a  d1f1              BNE      |L1.784|
                  |L1.812|
00032c  2e00              CMP      r6,#0                 ;302
00032e  d003              BEQ      |L1.824|
000330  0928              LSRS     r0,r5,#4              ;303
000332  f8380010          LDRH     r0,[r8,r0,LSL #1]     ;303
000336  7020              STRB     r0,[r4,#0]            ;303
                  |L1.824|
;;;350            }
;;;351          }
;;;352        }
;;;353        break;
;;;354      case LCD_DRAWMODE_XOR:;
;;;355      PixelLoopXor:
;;;356        if (PixelCnt > xsize)
;;;357          PixelCnt = xsize;
;;;358        xsize -= PixelCnt;
;;;359        do {
;;;360          if ((pixels & 0xc0)) {
;;;361            *pDest ^= 255;
;;;362          }
;;;363          pDest++;
;;;364          pixels <<= 4;
;;;365        } while (--PixelCnt);
;;;366        if (xsize) {
;;;367          PixelCnt = 2;
;;;368          pixels = *(++p);
;;;369          goto PixelLoopXor;
;;;370        }
;;;371        break;
;;;372      }
;;;373    }
000338  e8bd9ff0          POP      {r4-r12,pc}
00033c  e7ff              B        |L1.830|
                  |L1.830|
00033e  42b0              CMP      r0,r6                 ;356
000340  dd00              BLE      |L1.836|
000342  b2f0              UXTB     r0,r6                 ;357
                  |L1.836|
000344  1a36              SUBS     r6,r6,r0              ;358
                  |L1.838|
000346  f0150fc0          TST      r5,#0xc0              ;360
00034a  d002              BEQ      |L1.850|
00034c  7821              LDRB     r1,[r4,#0]            ;361
00034e  43c9              MVNS     r1,r1                 ;361
000350  7021              STRB     r1,[r4,#0]            ;361
                  |L1.850|
000352  1c64              ADDS     r4,r4,#1              ;363
000354  0729              LSLS     r1,r5,#28             ;364
000356  0e0d              LSRS     r5,r1,#24             ;364
000358  1e40              SUBS     r0,r0,#1              ;365
00035a  f01000ff          ANDS     r0,r0,#0xff           ;365
00035e  d1f2              BNE      |L1.838|
000360  2e00              CMP      r6,#0                 ;366
000362  d0e9              BEQ      |L1.824|
000364  2002              MOVS     r0,#2                 ;367
000366  f8175f01          LDRB     r5,[r7,#1]!           ;368
00036a  e7e8              B        |L1.830|
;;;374    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;378    */
;;;379    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
00036c  e92d47f0          PUSH     {r4-r10,lr}
;;;380                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest) {
000370  4680              MOV      r8,r0
000372  9f09              LDR      r7,[sp,#0x24]
000374  9e08              LDR      r6,[sp,#0x20]
000376  9c0a              LDR      r4,[sp,#0x28]
000378  4689              MOV      r9,r1
00037a  4692              MOV      r10,r2
00037c  461d              MOV      r5,r3
;;;381      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00037e  481c              LDR      r0,|L1.1008|
000380  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000382  f0100003          ANDS     r0,r0,#3
000386  d002              BEQ      |L1.910|
000388  2802              CMP      r0,#2
00038a  d108              BNE      |L1.926|
00038c  e009              B        |L1.930|
                  |L1.910|
;;;382      case 0:    /* Write mode */
;;;383        do {
;;;384          *pDest = *(pTrans + *pSrc);
00038e  7828              LDRB     r0,[r5,#0]
000390  f8370010          LDRH     r0,[r7,r0,LSL #1]
000394  7020              STRB     r0,[r4,#0]
;;;385          pDest++;
000396  1c64              ADDS     r4,r4,#1
;;;386          pSrc++;
000398  1c6d              ADDS     r5,r5,#1
;;;387        } while (--xsize);
00039a  1e76              SUBS     r6,r6,#1
00039c  d1f7              BNE      |L1.910|
                  |L1.926|
;;;388        break;
;;;389      case LCD_DRAWMODE_TRANS:
;;;390        do {
;;;391          if (*pSrc) {
;;;392            *pDest = *(pTrans + *pSrc);
;;;393            if (pUsage) {
;;;394              GUI_USAGE_AddPixel(pUsage, x, y);
;;;395            }
;;;396          }
;;;397          x++;
;;;398          pDest++;
;;;399          pSrc++;
;;;400        } while (--xsize);
;;;401        break;
;;;402      }
;;;403    }
00039e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.930|
0003a2  782b              LDRB     r3,[r5,#0]            ;391
0003a4  b163              CBZ      r3,|L1.960|
0003a6  f8370013          LDRH     r0,[r7,r3,LSL #1]     ;392
0003aa  7020              STRB     r0,[r4,#0]            ;392
0003ac  f1b80f00          CMP      r8,#0                 ;393
0003b0  d006              BEQ      |L1.960|
0003b2  f8d80008          LDR      r0,[r8,#8]            ;394
0003b6  4652              MOV      r2,r10                ;394
0003b8  4649              MOV      r1,r9                 ;394
0003ba  6803              LDR      r3,[r0,#0]            ;394
0003bc  4640              MOV      r0,r8                 ;394
0003be  4798              BLX      r3                    ;394
                  |L1.960|
0003c0  f1090901          ADD      r9,r9,#1              ;397
0003c4  1c64              ADDS     r4,r4,#1              ;398
0003c6  1c6d              ADDS     r5,r5,#1              ;399
0003c8  1e76              SUBS     r6,r6,#1              ;400
0003ca  d1ea              BNE      |L1.930|
0003cc  e8bd87f0          POP      {r4-r10,pc}
;;;404    
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;420    */
;;;421    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, PIXELINDEX* pDest) {
0003d0  e92d47f0          PUSH     {r4-r10,lr}
0003d4  4607              MOV      r7,r0
0003d6  9e08              LDR      r6,[sp,#0x20]
0003d8  9c09              LDR      r4,[sp,#0x24]
0003da  4688              MOV      r8,r1
0003dc  4691              MOV      r9,r2
0003de  461d              MOV      r5,r3
;;;422      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0003e0  4803              LDR      r0,|L1.1008|
0003e2  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0003e4  f0100003          ANDS     r0,r0,#3
0003e8  d006              BEQ      |L1.1016|
0003ea  2802              CMP      r0,#2
0003ec  d11b              BNE      |L1.1062|
0003ee  e00a              B        |L1.1030|
                  |L1.1008|
                          DCD      GUI_Context
                  |L1.1012|
                          DCD      LCD_aMirror
                  |L1.1016|
;;;423      case 0:    /* Write mode */
;;;424        #if GUI_UNI_PTR_USED
;;;425          _Memcopy(pDest, pSrc, xsize);
;;;426        #else
;;;427          memcpy(pDest, pSrc, xsize);
0003f8  4632              MOV      r2,r6
0003fa  4629              MOV      r1,r5
0003fc  4620              MOV      r0,r4
0003fe  e8bd47f0          POP      {r4-r10,lr}
000402  f7ffbffe          B.W      __aeabi_memcpy
                  |L1.1030|
;;;428        #endif
;;;429        break;
;;;430      case LCD_DRAWMODE_TRANS:
;;;431        do {
;;;432          if (*pSrc) {
000406  7828              LDRB     r0,[r5,#0]
000408  b138              CBZ      r0,|L1.1050|
;;;433            *pDest = *pSrc;
00040a  7020              STRB     r0,[r4,#0]
;;;434            if (pUsage) {
00040c  b12f              CBZ      r7,|L1.1050|
;;;435              GUI_USAGE_AddPixel(pUsage, x, y);
00040e  68b8              LDR      r0,[r7,#8]
000410  464a              MOV      r2,r9
000412  4641              MOV      r1,r8
000414  6803              LDR      r3,[r0,#0]
000416  4638              MOV      r0,r7
000418  4798              BLX      r3
                  |L1.1050|
;;;436            }
;;;437          }
;;;438          x++;
00041a  f1080801          ADD      r8,r8,#1
;;;439          pDest++;
00041e  1c64              ADDS     r4,r4,#1
;;;440          pSrc++;
000420  1c6d              ADDS     r5,r5,#1
;;;441        } while (--xsize);
000422  1e76              SUBS     r6,r6,#1
000424  d1ef              BNE      |L1.1030|
                  |L1.1062|
;;;442        break;
;;;443      }
;;;444    }
000426  e8bd87f0          POP      {r4-r10,pc}
;;;445    
                          ENDP

                  _DrawBitmap PROC
;;;449    */
;;;450    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
00042a  e92d4fff          PUSH     {r0-r11,lr}
;;;451                            int BitsPerPixel, int BytesPerLine,
;;;452                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;453    {
00042e  b087              SUB      sp,sp,#0x1c
000430  4607              MOV      r7,r0
000432  f8ddb054          LDR      r11,[sp,#0x54]
000436  f8dd9060          LDR      r9,[sp,#0x60]
00043a  9e16              LDR      r6,[sp,#0x58]
00043c  460d              MOV      r5,r1
00043e  4698              MOV      r8,r3
;;;454      int i;
;;;455      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000440  4cc4              LDR      r4,|L1.1876|
000442  f9b40050          LDRSH    r0,[r4,#0x50]  ; GUI_Context
000446  f7fffffe          BL       GUI_ALLOC_h2p
00044a  9006              STR      r0,[sp,#0x18]
;;;456      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
00044c  9806              LDR      r0,[sp,#0x18]
00044e  f9b00018          LDRSH    r0,[r0,#0x18]
000452  b110              CBZ      r0,|L1.1114|
000454  f7fffffe          BL       GUI_ALLOC_h2p
000458  e000              B        |L1.1116|
                  |L1.1114|
00045a  2000              MOVS     r0,#0
                  |L1.1116|
00045c  9005              STR      r0,[sp,#0x14]
;;;457      unsigned    BytesPerLineDest;
;;;458      PIXELINDEX* pDest;
;;;459      BytesPerLineDest = pDev->BytesPerLine;
00045e  9806              LDR      r0,[sp,#0x18]
000460  f8d0a00c          LDR      r10,[r0,#0xc]
;;;460      x0 += Diff;
000464  9817              LDR      r0,[sp,#0x5c]
000466  4438              ADD      r0,r0,r7
000468  9007              STR      r0,[sp,#0x1c]
;;;461      /* Mark all affected pixels dirty unless transparency is set */
;;;462      if (pUsage) {
00046a  9805              LDR      r0,[sp,#0x14]
00046c  b158              CBZ      r0,|L1.1158|
;;;463        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
00046e  7c20              LDRB     r0,[r4,#0x10]  ; GUI_Context
000470  f0100f02          TST      r0,#2
000474  d107              BNE      |L1.1158|
;;;464          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
000476  f8cd8000          STR      r8,[sp,#0]
00047a  462a              MOV      r2,r5
00047c  9b09              LDR      r3,[sp,#0x24]
00047e  9907              LDR      r1,[sp,#0x1c]
000480  9805              LDR      r0,[sp,#0x14]
000482  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1158|
;;;465        }
;;;466      }
;;;467      pDest = _XY2PTR(x0, y0);
000486  4629              MOV      r1,r5
000488  9807              LDR      r0,[sp,#0x1c]
00048a  f7fffffe          BL       _XY2PTR
00048e  4607              MOV      r7,r0
;;;468    #if BITSPERPIXEL == 16
;;;469      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;470      if (BitsPerPixel == 16) {
;;;471        for (i = 0; i < ysize; i++) {
;;;472          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDest);
;;;473          pData += BytesPerLine;
;;;474          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;475        }
;;;476        return;
;;;477      }
;;;478    #endif
;;;479      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;480      if (BitsPerPixel == 8) {
000490  9814              LDR      r0,[sp,#0x50]
000492  2808              CMP      r0,#8
000494  d003              BEQ      |L1.1182|
;;;481        for (i = 0; i < ysize; i++) {
;;;482          if (pTrans) {
;;;483            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDest);
;;;484          } else {
;;;485            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDest);
;;;486          }
;;;487          pData += BytesPerLine;
;;;488          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;489        }
;;;490        return;
;;;491      }
;;;492      /* Use aID for bitmaps without palette */
;;;493      if (!pTrans) {
000496  f1b90f00          CMP      r9,#0
00049a  d024              BEQ      |L1.1254|
00049c  e025              B        |L1.1258|
                  |L1.1182|
00049e  2400              MOVS     r4,#0                 ;481
0004a0  f1b80f00          CMP      r8,#0                 ;481
0004a4  dd1c              BLE      |L1.1248|
                  |L1.1190|
0004a6  f1b90f00          CMP      r9,#0                 ;482
0004aa  d00b              BEQ      |L1.1220|
0004ac  9909              LDR      r1,[sp,#0x24]         ;483
0004ae  9100              STR      r1,[sp,#0]            ;483
0004b0  9702              STR      r7,[sp,#8]            ;483
0004b2  1962              ADDS     r2,r4,r5              ;483
0004b4  4633              MOV      r3,r6                 ;483
0004b6  f8cd9004          STR      r9,[sp,#4]            ;483
0004ba  9907              LDR      r1,[sp,#0x1c]         ;483
0004bc  9805              LDR      r0,[sp,#0x14]         ;483
0004be  f7fffffe          BL       _DrawBitLine8BPP
0004c2  e008              B        |L1.1238|
                  |L1.1220|
0004c4  9a09              LDR      r2,[sp,#0x24]         ;485
0004c6  9200              STR      r2,[sp,#0]            ;485
0004c8  9701              STR      r7,[sp,#4]            ;485
0004ca  1962              ADDS     r2,r4,r5              ;485
0004cc  4633              MOV      r3,r6                 ;485
0004ce  9907              LDR      r1,[sp,#0x1c]         ;485
0004d0  9805              LDR      r0,[sp,#0x14]         ;485
0004d2  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1238|
0004d6  445e              ADD      r6,r6,r11             ;487
0004d8  4457              ADD      r7,r7,r10             ;488
0004da  1c64              ADDS     r4,r4,#1              ;481
0004dc  4544              CMP      r4,r8                 ;481
0004de  dbe2              BLT      |L1.1190|
                  |L1.1248|
;;;494        pTrans = aID;
;;;495      }
;;;496      for (i = 0; i < ysize; i++) {
;;;497        switch (BitsPerPixel) {
;;;498        case 1:
;;;499          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;500          break;
;;;501        case 2:
;;;502          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;503          break;
;;;504        case 4:
;;;505          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;506          break;
;;;507        }
;;;508        pData += BytesPerLine;
;;;509        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;510      }
;;;511    }
0004e0  b00b              ADD      sp,sp,#0x2c
0004e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1254|
0004e6  f8df9270          LDR      r9,|L1.1880|
                  |L1.1258|
0004ea  2400              MOVS     r4,#0                 ;496
0004ec  f1b80f00          CMP      r8,#0                 ;496
0004f0  ddf6              BLE      |L1.1248|
                  |L1.1266|
0004f2  9814              LDR      r0,[sp,#0x50]         ;497
0004f4  2801              CMP      r0,#1                 ;497
0004f6  d004              BEQ      |L1.1282|
0004f8  2802              CMP      r0,#2                 ;497
0004fa  d012              BEQ      |L1.1314|
0004fc  2804              CMP      r0,#4                 ;497
0004fe  d12b              BNE      |L1.1368|
000500  e01d              B        |L1.1342|
                  |L1.1282|
000502  9a06              LDR      r2,[sp,#0x18]         ;499
000504  9203              STR      r2,[sp,#0xc]          ;499
000506  9809              LDR      r0,[sp,#0x24]         ;499
000508  9b17              LDR      r3,[sp,#0x5c]         ;499
00050a  9300              STR      r3,[sp,#0]            ;499
00050c  f8cd9008          STR      r9,[sp,#8]            ;499
000510  9001              STR      r0,[sp,#4]            ;499
000512  9704              STR      r7,[sp,#0x10]         ;499
000514  1962              ADDS     r2,r4,r5              ;499
000516  4633              MOV      r3,r6                 ;499
000518  9907              LDR      r1,[sp,#0x1c]         ;499
00051a  9805              LDR      r0,[sp,#0x14]         ;499
00051c  f7fffffe          BL       _DrawBitLine1BPP
000520  e01a              B        |L1.1368|
                  |L1.1314|
000522  9817              LDR      r0,[sp,#0x5c]         ;502
000524  9909              LDR      r1,[sp,#0x24]         ;502
000526  f8cd9008          STR      r9,[sp,#8]            ;502
00052a  9101              STR      r1,[sp,#4]            ;502
00052c  9000              STR      r0,[sp,#0]            ;502
00052e  1962              ADDS     r2,r4,r5              ;502
000530  4633              MOV      r3,r6                 ;502
000532  9703              STR      r7,[sp,#0xc]          ;502
000534  9907              LDR      r1,[sp,#0x1c]         ;502
000536  9805              LDR      r0,[sp,#0x14]         ;502
000538  f7fffffe          BL       _DrawBitLine2BPP
00053c  e00c              B        |L1.1368|
                  |L1.1342|
00053e  9817              LDR      r0,[sp,#0x5c]         ;505
000540  9909              LDR      r1,[sp,#0x24]         ;505
000542  f8cd9008          STR      r9,[sp,#8]            ;505
000546  9101              STR      r1,[sp,#4]            ;505
000548  9000              STR      r0,[sp,#0]            ;505
00054a  1962              ADDS     r2,r4,r5              ;505
00054c  4633              MOV      r3,r6                 ;505
00054e  9703              STR      r7,[sp,#0xc]          ;505
000550  9907              LDR      r1,[sp,#0x1c]         ;505
000552  9805              LDR      r0,[sp,#0x14]         ;505
000554  f7fffffe          BL       _DrawBitLine4BPP
                  |L1.1368|
000558  445e              ADD      r6,r6,r11             ;508
00055a  4457              ADD      r7,r7,r10             ;509
00055c  1c64              ADDS     r4,r4,#1              ;496
00055e  4544              CMP      r4,r8                 ;496
000560  dbc7              BLT      |L1.1266|
000562  b00b              ADD      sp,sp,#0x2c
000564  e8bd8ff0          POP      {r4-r11,pc}
;;;512    
                          ENDP

                  _FillRect PROC
;;;516    */
;;;517    static void _FillRect(int x0, int y0, int x1, int y1) {
000568  e92d4ff8          PUSH     {r3-r11,lr}
00056c  4605              MOV      r5,r0
00056e  460e              MOV      r6,r1
000570  4692              MOV      r10,r2
000572  4698              MOV      r8,r3
;;;518      unsigned BytesPerLine;
;;;519      int Len;
;;;520      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000574  4c77              LDR      r4,|L1.1876|
000576  f9b40050          LDRSH    r0,[r4,#0x50]  ; GUI_Context
00057a  f7fffffe          BL       GUI_ALLOC_h2p
00057e  4681              MOV      r9,r0
;;;521      PIXELINDEX* pData  = _XY2PTR(x0, y0);
000580  4631              MOV      r1,r6
000582  4628              MOV      r0,r5
000584  f7fffffe          BL       _XY2PTR
000588  4607              MOV      r7,r0
;;;522      BytesPerLine = pDev->BytesPerLine;
00058a  f8d9b00c          LDR      r11,[r9,#0xc]
;;;523      Len = x1 - x0 + 1;
00058e  ebaa0005          SUB      r0,r10,r5
000592  f1000a01          ADD      r10,r0,#1
;;;524      /* Mark rectangle as modified */
;;;525      if (pDev->hUsage) {
000596  f9b90018          LDRSH    r0,[r9,#0x18]
00059a  b150              CBZ      r0,|L1.1458|
;;;526        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
00059c  f7fffffe          BL       GUI_ALLOC_h2p
0005a0  eba80106          SUB      r1,r8,r6
0005a4  1c4b              ADDS     r3,r1,#1
0005a6  9300              STR      r3,[sp,#0]
0005a8  4653              MOV      r3,r10
0005aa  4632              MOV      r2,r6
0005ac  4629              MOV      r1,r5
0005ae  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1458|
;;;527      }
;;;528      /* Do the drawing */
;;;529      for (; y0 <= y1; y0++) {
0005b2  4546              CMP      r6,r8
0005b4  dc1b              BGT      |L1.1518|
                  |L1.1462|
;;;530        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
0005b6  4867              LDR      r0,|L1.1876|
0005b8  7c01              LDRB     r1,[r0,#0x10]  ; GUI_Context
0005ba  f0110f01          TST      r1,#1
0005be  d00c              BEQ      |L1.1498|
;;;531          int RemPixels;
;;;532          PIXELINDEX* pDest;
;;;533          PIXELINDEX IndexMask;
;;;534          RemPixels = Len;
0005c0  4655              MOV      r5,r10
;;;535          pDest  = pData;
0005c2  463c              MOV      r4,r7
;;;536          IndexMask = pDev->pfGetIndexMask();
0005c4  f8d90024          LDR      r0,[r9,#0x24]
0005c8  4780              BLX      r0
0005ca  b2c0              UXTB     r0,r0
                  |L1.1484|
;;;537          do {
;;;538            *pDest = *pDest ^ IndexMask;
0005cc  7821              LDRB     r1,[r4,#0]
0005ce  4041              EORS     r1,r1,r0
0005d0  7021              STRB     r1,[r4,#0]
;;;539            pDest++;
0005d2  1c64              ADDS     r4,r4,#1
;;;540          } while (--RemPixels);
0005d4  1e6d              SUBS     r5,r5,#1
0005d6  d1f9              BNE      |L1.1484|
0005d8  e005              B        |L1.1510|
                  |L1.1498|
;;;541        } else {  /* Fill */
;;;542          #if BITSPERPIXEL == 8
;;;543            GUI_MEMSET(pData, LCD_COLORINDEX, Len);
0005da  8840              LDRH     r0,[r0,#2]  ; GUI_Context
0005dc  4652              MOV      r2,r10
0005de  b2c1              UXTB     r1,r0
0005e0  4638              MOV      r0,r7
0005e2  f7fffffe          BL       GUI__memset
                  |L1.1510|
;;;544          #elif BITSPERPIXEL == 16
;;;545            GUI__memset16(pData, LCD_COLORINDEX, Len);
;;;546          #else
;;;547            #error Unsupported
;;;548          #endif
;;;549        }
;;;550        pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); 
0005e6  445f              ADD      r7,r7,r11
0005e8  1c76              ADDS     r6,r6,#1              ;529
0005ea  4546              CMP      r6,r8                 ;529
0005ec  dde3              BLE      |L1.1462|
                  |L1.1518|
;;;551      }
;;;552    }
0005ee  e8bd8ff8          POP      {r3-r11,pc}
;;;553    
                          ENDP

                  _DrawHLine PROC
;;;557    */
;;;558    static void _DrawHLine(int x0, int y, int x1) {
0005f2  460b              MOV      r3,r1
;;;559      _FillRect(x0, y, x1, y);
0005f4  e7fe              B        _FillRect
;;;560    }
;;;561    
                          ENDP

                  _DrawVLine PROC
;;;565    */
;;;566    static void _DrawVLine(int x , int y0, int y1) {
0005f6  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
0005fa  460d              MOV      r5,r1
0005fc  4616              MOV      r6,r2
;;;567      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0005fe  f8dfb154          LDR      r11,|L1.1876|
000602  f9bb0050          LDRSH    r0,[r11,#0x50]  ; GUI_Context
000606  f7fffffe          BL       GUI_ALLOC_h2p
00060a  4607              MOV      r7,r0
;;;568      GUI_USAGE_h hUsage = pDev->hUsage; 
00060c  f9b78018          LDRSH    r8,[r7,#0x18]
;;;569      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
000610  f1b80f00          CMP      r8,#0
000614  d004              BEQ      |L1.1568|
000616  4640              MOV      r0,r8
000618  f7fffffe          BL       GUI_ALLOC_h2p
00061c  4681              MOV      r9,r0
00061e  e001              B        |L1.1572|
                  |L1.1568|
000620  f04f0900          MOV      r9,#0
                  |L1.1572|
;;;570      PIXELINDEX* pData  = _XY2PTR(x, y0);
000624  4629              MOV      r1,r5
000626  9800              LDR      r0,[sp,#0]
000628  f7fffffe          BL       _XY2PTR
00062c  4604              MOV      r4,r0
;;;571      unsigned BytesPerLine = pDev->BytesPerLine;
00062e  f8d7a00c          LDR      r10,[r7,#0xc]
;;;572    
;;;573      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000632  f89b0010          LDRB     r0,[r11,#0x10]  ; GUI_Context
000636  f0100f01          TST      r0,#1
00063a  d019              BEQ      |L1.1648|
;;;574        PIXELINDEX IndexMask;
;;;575        IndexMask = pDev->pfGetIndexMask();
00063c  6a78              LDR      r0,[r7,#0x24]
00063e  4780              BLX      r0
000640  f0000aff          AND      r10,r0,#0xff
                  |L1.1604|
;;;576        do {
;;;577          if (hUsage) {
000644  f1b80f00          CMP      r8,#0
000648  d006              BEQ      |L1.1624|
;;;578            GUI_USAGE_AddPixel(pUsage, x, y0);
00064a  f8d90008          LDR      r0,[r9,#8]
00064e  462a              MOV      r2,r5
000650  9900              LDR      r1,[sp,#0]
000652  6803              LDR      r3,[r0,#0]
000654  4648              MOV      r0,r9
000656  4798              BLX      r3
                  |L1.1624|
;;;579          }
;;;580          *pData = *pData ^ IndexMask;
000658  7820              LDRB     r0,[r4,#0]
00065a  ea80000a          EOR      r0,r0,r10
00065e  7020              STRB     r0,[r4,#0]
;;;581          pData = (PIXELINDEX*)((U8*)pData + pDev->BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
000660  68f8              LDR      r0,[r7,#0xc]
000662  4404              ADD      r4,r4,r0
;;;582        } while (++y0 <= y1);
000664  1c6d              ADDS     r5,r5,#1
000666  42b5              CMP      r5,r6
000668  ddec              BLE      |L1.1604|
;;;583      } else {
;;;584        if (hUsage) {
;;;585          do {
;;;586            GUI_USAGE_AddPixel(pUsage, x, y0);
;;;587            *pData = LCD_COLORINDEX;
;;;588            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
;;;589          } while (++y0 <= y1);
;;;590        } else {
;;;591          unsigned NumPixels;
;;;592          NumPixels = y1 - y0 + 1;
;;;593          do {
;;;594            *pData = LCD_COLORINDEX;
;;;595            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
;;;596          } while (--NumPixels);
;;;597        }
;;;598      }
;;;599    }
00066a  b003              ADD      sp,sp,#0xc
00066c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1648|
000670  f1b80f00          CMP      r8,#0                 ;584
000674  d010              BEQ      |L1.1688|
                  |L1.1654|
000676  f8d90008          LDR      r0,[r9,#8]            ;586
00067a  462a              MOV      r2,r5                 ;586
00067c  9900              LDR      r1,[sp,#0]            ;586
00067e  6803              LDR      r3,[r0,#0]            ;586
000680  4648              MOV      r0,r9                 ;586
000682  4798              BLX      r3                    ;586
000684  f8bb0002          LDRH     r0,[r11,#2]           ;587  ; GUI_Context
000688  7020              STRB     r0,[r4,#0]            ;587
00068a  4454              ADD      r4,r4,r10             ;588
00068c  1c6d              ADDS     r5,r5,#1              ;589
00068e  42b5              CMP      r5,r6                 ;589
000690  ddf1              BLE      |L1.1654|
000692  b003              ADD      sp,sp,#0xc
000694  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1688|
000698  1b70              SUBS     r0,r6,r5              ;592
00069a  1c40              ADDS     r0,r0,#1              ;592
                  |L1.1692|
00069c  f8bb1002          LDRH     r1,[r11,#2]           ;594  ; GUI_Context
0006a0  7021              STRB     r1,[r4,#0]            ;594
0006a2  4454              ADD      r4,r4,r10             ;595
0006a4  1e40              SUBS     r0,r0,#1              ;596
0006a6  d1f9              BNE      |L1.1692|
0006a8  b003              ADD      sp,sp,#0xc
0006aa  e8bd8ff0          POP      {r4-r11,pc}
;;;600    
                          ENDP

                  _SetPixelIndex PROC
;;;604    */
;;;605    static void _SetPixelIndex(int x, int y, int Index) {
0006ae  e92d41f0          PUSH     {r4-r8,lr}
0006b2  4606              MOV      r6,r0
0006b4  460f              MOV      r7,r1
0006b6  4615              MOV      r5,r2
;;;606      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0006b8  4826              LDR      r0,|L1.1876|
0006ba  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
0006be  f7fffffe          BL       GUI_ALLOC_h2p
;;;607      GUI_USAGE_h hUsage = pDev->hUsage; 
0006c2  f9b04018          LDRSH    r4,[r0,#0x18]
;;;608      PIXELINDEX* pData = _XY2PTR(x, y);
0006c6  4639              MOV      r1,r7
0006c8  4630              MOV      r0,r6
0006ca  f7fffffe          BL       _XY2PTR
;;;609      *pData = Index;
0006ce  7005              STRB     r5,[r0,#0]
;;;610      if (hUsage) {
0006d0  2c00              CMP      r4,#0
0006d2  d00e              BEQ      |L1.1778|
;;;611        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
0006d4  4620              MOV      r0,r4
0006d6  f7fffffe          BL       GUI_ALLOC_h2p
0006da  4605              MOV      r5,r0
0006dc  4620              MOV      r0,r4
0006de  f7fffffe          BL       GUI_ALLOC_h2p
0006e2  6880              LDR      r0,[r0,#8]
0006e4  463a              MOV      r2,r7
0006e6  4631              MOV      r1,r6
0006e8  6803              LDR      r3,[r0,#0]
0006ea  4628              MOV      r0,r5
0006ec  e8bd41f0          POP      {r4-r8,lr}
0006f0  4718              BX       r3
                  |L1.1778|
;;;612      }
;;;613    }
0006f2  e8bd81f0          POP      {r4-r8,pc}
;;;614    
                          ENDP

                  _XorPixel PROC
;;;618    */
;;;619    static void _XorPixel(int x, int y) {
0006f6  e92d41f0          PUSH     {r4-r8,lr}
0006fa  4607              MOV      r7,r0
0006fc  4688              MOV      r8,r1
;;;620      PIXELINDEX IndexMask;
;;;621      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0006fe  4815              LDR      r0,|L1.1876|
000700  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000704  f7fffffe          BL       GUI_ALLOC_h2p
000708  4605              MOV      r5,r0
;;;622      GUI_USAGE_h hUsage = pDev->hUsage; 
00070a  f9b56018          LDRSH    r6,[r5,#0x18]
;;;623      PIXELINDEX* pData = _XY2PTR(x, y);
00070e  4641              MOV      r1,r8
000710  4638              MOV      r0,r7
000712  f7fffffe          BL       _XY2PTR
000716  4604              MOV      r4,r0
;;;624      IndexMask = pDev->pfGetIndexMask();
000718  6a68              LDR      r0,[r5,#0x24]
00071a  4780              BLX      r0
;;;625      *pData = *pData ^ IndexMask;
00071c  7821              LDRB     r1,[r4,#0]
00071e  4048              EORS     r0,r0,r1
000720  7020              STRB     r0,[r4,#0]
;;;626      if (hUsage) {
000722  2e00              CMP      r6,#0
000724  d00e              BEQ      |L1.1860|
;;;627        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000726  4630              MOV      r0,r6
000728  f7fffffe          BL       GUI_ALLOC_h2p
00072c  4604              MOV      r4,r0
00072e  4630              MOV      r0,r6
000730  f7fffffe          BL       GUI_ALLOC_h2p
000734  6880              LDR      r0,[r0,#8]
000736  4642              MOV      r2,r8
000738  4639              MOV      r1,r7
00073a  6803              LDR      r3,[r0,#0]
00073c  4620              MOV      r0,r4
00073e  e8bd41f0          POP      {r4-r8,lr}
000742  4718              BX       r3
                  |L1.1860|
;;;628      }
;;;629    }
000744  e8bd81f0          POP      {r4-r8,pc}
;;;630    
                          ENDP

                  _GetPixelIndex PROC
;;;634    */
;;;635    static unsigned int _GetPixelIndex(int x, int y) {
000748  b510              PUSH     {r4,lr}
;;;636      PIXELINDEX* pData = _XY2PTR(x, y);
00074a  f7fffffe          BL       _XY2PTR
;;;637      return *pData;
00074e  7800              LDRB     r0,[r0,#0]
;;;638    }
000750  bd10              POP      {r4,pc}
;;;639    
                          ENDP

000752  0000              DCW      0x0000
                  |L1.1876|
                          DCD      GUI_Context
                  |L1.1880|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.constdata||
                  GUI_MEMDEV__APIList8
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000008
