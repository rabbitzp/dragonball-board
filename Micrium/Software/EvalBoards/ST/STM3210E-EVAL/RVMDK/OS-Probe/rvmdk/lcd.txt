; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcd.o --depend=.\rvmdk\lcd.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcd.crf ..\..\..\..\..\uCGUI\GUI\Core\LCD.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetColorIndex PROC
;;;60     */
;;;61     static int _GetColorIndex(int i)  /* i is 0 or 1 */ {
000000  49e5              LDR      r1,|L1.920|
;;;62       return  (GUI_Context.DrawMode & LCD_DRAWMODE_REV) ? i-1 : i;
000002  7c09              LDRB     r1,[r1,#0x10]  ; GUI_Context
000004  f0110f04          TST      r1,#4
000008  d000              BEQ      |L1.12|
00000a  1e40              SUBS     r0,r0,#1
                  |L1.12|
;;;63     }
00000c  4770              BX       lr
;;;64     
                          ENDP

                  LCD_SetColorIndex PROC
;;;74     */
;;;75     void LCD_SetColorIndex(int Index) {
00000e  b510              PUSH     {r4,lr}
000010  4604              MOV      r4,r0
;;;76       LCD_ACOLORINDEX[_GetColorIndex(1)] = Index;
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       _GetColorIndex
000018  49df              LDR      r1,|L1.920|
00001a  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;77     }
00001e  bd10              POP      {r4,pc}
;;;78     
                          ENDP

                  LCD_SetBkColorIndex PROC
;;;82     */
;;;83     void LCD_SetBkColorIndex(int Index) {
000020  b510              PUSH     {r4,lr}
000022  4604              MOV      r4,r0
;;;84       LCD_ACOLORINDEX[_GetColorIndex(0)] = Index;
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       _GetColorIndex
00002a  49db              LDR      r1,|L1.920|
00002c  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;85     }
000030  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  LCD_SetDrawMode PROC
;;;90     */
;;;91     LCD_DRAWMODE LCD_SetDrawMode(LCD_DRAWMODE dm) {
000032  4601              MOV      r1,r0
;;;92       LCD_DRAWMODE OldDM = GUI_Context.DrawMode;
000034  4ad8              LDR      r2,|L1.920|
000036  7c10              LDRB     r0,[r2,#0x10]  ; GUI_Context
;;;93       if ((GUI_Context.DrawMode^dm) & LCD_DRAWMODE_REV) {
000038  ea800301          EOR      r3,r0,r1
00003c  f0130f04          TST      r3,#4
000040  d005              BEQ      |L1.78|
;;;94         LCD_PIXELINDEX temp = LCD_BKCOLORINDEX;
000042  8813              LDRH     r3,[r2,#0]  ; GUI_Context
;;;95         LCD_BKCOLORINDEX    = LCD_COLORINDEX;
000044  f8b2c002          LDRH     r12,[r2,#2]  ; GUI_Context
000048  f8a2c000          STRH     r12,[r2,#0]
;;;96         LCD_COLORINDEX = temp;
00004c  8053              STRH     r3,[r2,#2]
                  |L1.78|
;;;97       }
;;;98       GUI_Context.DrawMode = dm;
00004e  7411              STRB     r1,[r2,#0x10]
;;;99       return OldDM;
;;;100    }
000050  4770              BX       lr
;;;101    
                          ENDP

                  LCD_DrawPixel PROC
;;;105    */
;;;106    void LCD_DrawPixel(int x, int y) {
000052  4ad1              LDR      r2,|L1.920|
;;;107      RETURN_IF_Y_OUT();
000054  f9b2300a          LDRSH    r3,[r2,#0xa]  ; GUI_Context
000058  428b              CMP      r3,r1
00005a  dc16              BGT      |L1.138|
00005c  f9b2300e          LDRSH    r3,[r2,#0xe]  ; GUI_Context
000060  428b              CMP      r3,r1
000062  db12              BLT      |L1.138|
;;;108      RETURN_IF_X_OUT();
000064  f9b23008          LDRSH    r3,[r2,#8]  ; GUI_Context
000068  4283              CMP      r3,r0
00006a  dc0e              BGT      |L1.138|
00006c  f9b2300c          LDRSH    r3,[r2,#0xc]  ; GUI_Context
000070  4283              CMP      r3,r0
000072  db0a              BLT      |L1.138|
;;;109      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000074  7c13              LDRB     r3,[r2,#0x10]  ; GUI_Context
000076  f0130f01          TST      r3,#1
00007a  4613              MOV      r3,r2                 ;107
;;;110        LCDDEV_L0_XorPixel(x, y);
00007c  6cdb              LDR      r3,[r3,#0x4c]
00007e  d001              BEQ      |L1.132|
000080  6a9a              LDR      r2,[r3,#0x28]
000082  4710              BX       r2
                  |L1.132|
;;;111      } else {
;;;112        LCDDEV_L0_SetPixelIndex(x, y, LCD_COLORINDEX);
000084  6a5b              LDR      r3,[r3,#0x24]
000086  8852              LDRH     r2,[r2,#2]  ; GUI_Context
000088  4718              BX       r3
                  |L1.138|
;;;113      }
;;;114    }
00008a  4770              BX       lr
;;;115    
                          ENDP

                  LCD_DrawHLine PROC
;;;119    */
;;;120    void LCD_DrawHLine(int x0, int y,  int x1) {
00008c  f8dfc308          LDR      r12,|L1.920|
;;;121      /* Perform clipping and check if there is something to do */
;;;122      RETURN_IF_Y_OUT();
000090  f9bc300a          LDRSH    r3,[r12,#0xa]  ; GUI_Context
000094  428b              CMP      r3,r1
000096  dc13              BGT      |L1.192|
000098  f9bc300e          LDRSH    r3,[r12,#0xe]  ; GUI_Context
00009c  428b              CMP      r3,r1
00009e  db0f              BLT      |L1.192|
;;;123      CLIP_X();
0000a0  f9bc3008          LDRSH    r3,[r12,#8]  ; GUI_Context
0000a4  4283              CMP      r3,r0
0000a6  dd00              BLE      |L1.170|
0000a8  4618              MOV      r0,r3
                  |L1.170|
0000aa  f9bc300c          LDRSH    r3,[r12,#0xc]  ; GUI_Context
0000ae  4293              CMP      r3,r2
0000b0  da00              BGE      |L1.180|
0000b2  461a              MOV      r2,r3
                  |L1.180|
;;;124      if (x1<x0)
0000b4  4282              CMP      r2,r0
0000b6  db03              BLT      |L1.192|
;;;125        return;
;;;126      /* Call driver to draw */
;;;127      LCDDEV_L0_DrawHLine(x0, y, x1);
0000b8  f8dc304c          LDR      r3,[r12,#0x4c]  ; GUI_Context
0000bc  691b              LDR      r3,[r3,#0x10]
0000be  4718              BX       r3
                  |L1.192|
;;;128    }
0000c0  4770              BX       lr
;;;129    
                          ENDP

                  LCD_FillRect PROC
;;;133    */
;;;134    void LCD_FillRect(int x0, int y0, int x1, int y1) {
0000c2  b430              PUSH     {r4,r5}
;;;135      /* Perform clipping and check if there is something to do */
;;;136      CLIP_X();
0000c4  4cb4              LDR      r4,|L1.920|
0000c6  f9b4c008          LDRSH    r12,[r4,#8]  ; GUI_Context
0000ca  4584              CMP      r12,r0
0000cc  dd00              BLE      |L1.208|
0000ce  4660              MOV      r0,r12
                  |L1.208|
0000d0  f9b4c00c          LDRSH    r12,[r4,#0xc]  ; GUI_Context
0000d4  4594              CMP      r12,r2
0000d6  da00              BGE      |L1.218|
0000d8  4662              MOV      r2,r12
                  |L1.218|
;;;137      if (x1<x0)
0000da  4282              CMP      r2,r0
0000dc  db11              BLT      |L1.258|
;;;138        return;
;;;139      CLIP_Y();
0000de  f9b4c00a          LDRSH    r12,[r4,#0xa]  ; GUI_Context
0000e2  458c              CMP      r12,r1
0000e4  dd00              BLE      |L1.232|
0000e6  4661              MOV      r1,r12
                  |L1.232|
0000e8  f9b4c00e          LDRSH    r12,[r4,#0xe]  ; GUI_Context
0000ec  459c              CMP      r12,r3
0000ee  da00              BGE      |L1.242|
0000f0  4663              MOV      r3,r12
                  |L1.242|
;;;140      if (y1<y0)
0000f2  428b              CMP      r3,r1
0000f4  db05              BLT      |L1.258|
;;;141        return;
;;;142      /* Call driver to draw */
;;;143      LCDDEV_L0_FillRect(x0,y0,x1,y1);
0000f6  f8d4c04c          LDR      r12,[r4,#0x4c]  ; GUI_Context
0000fa  f8dcc018          LDR      r12,[r12,#0x18]
0000fe  bc30              POP      {r4,r5}
000100  4760              BX       r12
                  |L1.258|
;;;144    }
000102  bc30              POP      {r4,r5}
000104  4770              BX       lr
;;;145    
                          ENDP

                  LCD_DrawBitmap PROC
;;;149    */
;;;150    void LCD_DrawBitmap(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000106  e92d4fff          PUSH     {r0-r11,lr}
;;;151                           int BitsPerPixel, int BytesPerLine,
;;;152                           const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;153    {
00010a  b087              SUB      sp,sp,#0x1c
00010c  4607              MOV      r7,r0
00010e  9c18              LDR      r4,[sp,#0x60]
000110  468c              MOV      r12,r1
000112  4692              MOV      r10,r2
;;;154      U8  Data = 0;
000114  2600              MOVS     r6,#0
;;;155      int x1, y1;
;;;156      /* Handle rotation if necessary */
;;;157      #if GUI_SUPPORT_ROTATION
;;;158      if (GUI_pLCD_APIList) {
000116  48a1              LDR      r0,|L1.924|
000118  6805              LDR      r5,[r0,#0]  ; GUI_pLCD_APIList
00011a  b19d              CBZ      r5,|L1.324|
;;;159        GUI_pLCD_APIList->pfDrawBitmap(x0, y0, xsize, ysize, xMul, yMul, BitsPerPixel, BytesPerLine, pPixel, pTrans);
00011c  9b19              LDR      r3,[sp,#0x64]
00011e  9305              STR      r3,[sp,#0x14]
000120  9a14              LDR      r2,[sp,#0x50]
000122  9917              LDR      r1,[sp,#0x5c]
000124  9816              LDR      r0,[sp,#0x58]
000126  9b15              LDR      r3,[sp,#0x54]
000128  9200              STR      r2,[sp,#0]
00012a  9404              STR      r4,[sp,#0x10]
00012c  9103              STR      r1,[sp,#0xc]
00012e  9002              STR      r0,[sp,#8]
000130  9301              STR      r3,[sp,#4]
000132  682c              LDR      r4,[r5,#0]
000134  4652              MOV      r2,r10
000136  4661              MOV      r1,r12
000138  4638              MOV      r0,r7
00013a  9b0a              LDR      r3,[sp,#0x28]
00013c  47a0              BLX      r4
                  |L1.318|
;;;160        return;
;;;161      }
;;;162      #endif
;;;163      /* Handle the optional Y-magnification */
;;;164      y1 = y0 + ysize - 1;
;;;165      x1 = x0 + xsize - 1;
;;;166    /*  Handle BITMAP without magnification */
;;;167      if ((xMul | yMul) == 1) {
;;;168        int Diff;
;;;169        /*  Clip y0 (top) */
;;;170        Diff = GUI_Context.ClipRect.y0 - y0;
;;;171        if (Diff > 0) {
;;;172          ysize -= Diff;
;;;173          if (ysize <= 0) {
;;;174    		    return;
;;;175          }
;;;176          y0     = GUI_Context.ClipRect.y0;
;;;177          #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;178            pPixel += (U32)     Diff * (U32)     BytesPerLine;
;;;179          #else
;;;180            pPixel += (unsigned)Diff * (unsigned)BytesPerLine;
;;;181          #endif
;;;182        }
;;;183        /*  Clip y1 (bottom) */
;;;184        Diff = y1 - GUI_Context.ClipRect.y1;
;;;185        if (Diff > 0) {
;;;186          ysize -= Diff;
;;;187          if (ysize <= 0) {
;;;188    		    return;
;;;189          }
;;;190        }
;;;191        /*        Clip right side    */
;;;192        Diff = x1 - GUI_Context.ClipRect.x1;
;;;193        if (Diff > 0) {
;;;194          xsize -= Diff;
;;;195        }
;;;196        /*        Clip left side ... (The difficult side ...)    */
;;;197        Diff = 0;
;;;198        if (x0 < GUI_Context.ClipRect.x0) {
;;;199          Diff = GUI_Context.ClipRect.x0 - x0;
;;;200    			xsize -= Diff;
;;;201    			switch (BitsPerPixel) {
;;;202    			case 1:
;;;203      			pPixel+= (Diff>>3); x0 += (Diff>>3)<<3; Diff &=7;
;;;204    				break;
;;;205    			case 2:
;;;206    	  		pPixel+= (Diff>>2); x0 += (Diff>>2)<<2; Diff &=3;
;;;207    				break;
;;;208    			case 4:
;;;209    				pPixel+= (Diff>>1); x0 += (Diff>>1)<<1; Diff &=1;
;;;210    				break;
;;;211    			case 8:
;;;212    				pPixel+= Diff;      x0 += Diff; Diff=0;
;;;213    				break;
;;;214    			case 16:
;;;215    				pPixel+= (Diff<<1); x0 += Diff; Diff=0;
;;;216    				break;
;;;217    			}
;;;218        }
;;;219        if (xsize <=0) {
;;;220    		  return;
;;;221        }
;;;222        LCDDEV_L0_DrawBitmap   (x0,y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;223      } else {
;;;224        /**** Handle BITMAP with magnification ***/
;;;225        int x,y;
;;;226        int yi;
;;;227        int Shift = 8-BitsPerPixel;
;;;228        for (y=y0, yi=0; yi<ysize; yi++, y+= yMul, pPixel+=BytesPerLine) {
;;;229          int yMax = y+yMul-1;
;;;230          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;231          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;232            int BitsLeft =0;
;;;233            int xi;
;;;234            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;235            for (x=x0, xi=0; xi<xsize; xi++, x+=xMul) {
;;;236              U8  Index;
;;;237              if (!BitsLeft) {
;;;238                Data = *pDataLine++;
;;;239                BitsLeft =8;
;;;240              }
;;;241              Index = Data>>Shift;
;;;242              Data    <<= BitsPerPixel;
;;;243              BitsLeft -= BitsPerPixel;
;;;244              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) ==0)) {
;;;245                LCD_PIXELINDEX  OldColor = LCD_COLORINDEX;
;;;246                if (pTrans) {
;;;247                  LCD_COLORINDEX = *(pTrans+Index);
;;;248                } else {
;;;249                  LCD_COLORINDEX = Index;
;;;250                }
;;;251                LCD_FillRect(x,y, x+xMul-1, yMax);
;;;252                LCD_COLORINDEX = OldColor;
;;;253              }
;;;254            }
;;;255          }
;;;256        }
;;;257      }
;;;258    }
00013e  b00b              ADD      sp,sp,#0x2c
000140  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.324|
000144  980a              LDR      r0,[sp,#0x28]         ;164
000146  4460              ADD      r0,r0,r12             ;164
000148  1e43              SUBS     r3,r0,#1              ;164
00014a  eb07000a          ADD      r0,r7,r10             ;165
00014e  1e42              SUBS     r2,r0,#1              ;165
000150  9915              LDR      r1,[sp,#0x54]         ;167
000152  9814              LDR      r0,[sp,#0x50]         ;167
000154  4d90              LDR      r5,|L1.920|
000156  4308              ORRS     r0,r0,r1              ;167
000158  2801              CMP      r0,#1                 ;167
00015a  d024              BEQ      |L1.422|
00015c  9816              LDR      r0,[sp,#0x58]         ;227
00015e  f1c00008          RSB      r0,r0,#8              ;227
000162  9003              STR      r0,[sp,#0xc]          ;227
000164  f8cdc014          STR      r12,[sp,#0x14]        ;228
000168  2000              MOVS     r0,#0                 ;228
00016a  9004              STR      r0,[sp,#0x10]         ;228
00016c  980a              LDR      r0,[sp,#0x28]         ;228
00016e  2800              CMP      r0,#0                 ;228
000170  dde5              BLE      |L1.318|
                  |L1.370|
000172  9915              LDR      r1,[sp,#0x54]         ;229
000174  9805              LDR      r0,[sp,#0x14]         ;229
000176  4408              ADD      r0,r0,r1              ;229
000178  9006              STR      r0,[sp,#0x18]         ;229
00017a  1e40              SUBS     r0,r0,#1              ;229
00017c  9002              STR      r0,[sp,#8]            ;229
00017e  4986              LDR      r1,|L1.920|
000180  9802              LDR      r0,[sp,#8]            ;231
000182  f9b1200a          LDRSH    r2,[r1,#0xa]          ;231  ; GUI_Context
000186  4282              CMP      r2,r0                 ;231
000188  dc7e              BGT      |L1.648|
00018a  f9b1200e          LDRSH    r2,[r1,#0xe]          ;231  ; GUI_Context
00018e  9805              LDR      r0,[sp,#0x14]         ;231
000190  4282              CMP      r2,r0                 ;231
000192  db79              BLT      |L1.648|
000194  2500              MOVS     r5,#0                 ;232
000196  46a1              MOV      r9,r4                 ;234
000198  46b8              MOV      r8,r7                 ;235
00019a  46ab              MOV      r11,r5                ;235
00019c  f1ba0f00          CMP      r10,#0                ;235
0001a0  dd72              BLE      |L1.648|
                  |L1.418|
0001a2  b3c5              CBZ      r5,|L1.534|
0001a4  e07d              B        |L1.674|
                  |L1.422|
0001a6  f9b5100a          LDRSH    r1,[r5,#0xa]          ;170  ; GUI_Context
0001aa  eba1000c          SUB      r0,r1,r12             ;170
0001ae  2800              CMP      r0,#0                 ;171
0001b0  dd0e              BLE      |L1.464|
0001b2  f8ddc028          LDR      r12,[sp,#0x28]        ;172
0001b6  ebac0c00          SUB      r12,r12,r0            ;172
0001ba  f8cdc028          STR      r12,[sp,#0x28]        ;172
0001be  f8ddc028          LDR      r12,[sp,#0x28]        ;173
0001c2  f1bc0f00          CMP      r12,#0                ;173
0001c6  ddba              BLE      |L1.318|
0001c8  468c              MOV      r12,r1                ;176
0001ca  9917              LDR      r1,[sp,#0x5c]         ;180
0001cc  fb004401          MLA      r4,r0,r1,r4           ;180
                  |L1.464|
0001d0  f9b5000e          LDRSH    r0,[r5,#0xe]          ;184  ; GUI_Context
0001d4  1a18              SUBS     r0,r3,r0              ;184
0001d6  2800              CMP      r0,#0                 ;185
0001d8  dd05              BLE      |L1.486|
0001da  990a              LDR      r1,[sp,#0x28]         ;186
0001dc  1a08              SUBS     r0,r1,r0              ;186
0001de  900a              STR      r0,[sp,#0x28]         ;186
0001e0  980a              LDR      r0,[sp,#0x28]         ;187
0001e2  2800              CMP      r0,#0                 ;187
0001e4  ddab              BLE      |L1.318|
                  |L1.486|
0001e6  f9b5000c          LDRSH    r0,[r5,#0xc]          ;192  ; GUI_Context
0001ea  1a10              SUBS     r0,r2,r0              ;192
0001ec  2800              CMP      r0,#0                 ;193
0001ee  dd01              BLE      |L1.500|
0001f0  ebaa0a00          SUB      r10,r10,r0            ;194
                  |L1.500|
0001f4  2200              MOVS     r2,#0                 ;197
0001f6  f9b50008          LDRSH    r0,[r5,#8]            ;198  ; GUI_Context
0001fa  42b8              CMP      r0,r7                 ;198
0001fc  dd36              BLE      |L1.620|
0001fe  1bc2              SUBS     r2,r0,r7              ;199
000200  ebaa0a02          SUB      r10,r10,r2            ;200
000204  9816              LDR      r0,[sp,#0x58]         ;201
000206  2804              CMP      r0,#4                 ;201
000208  d020              BEQ      |L1.588|
00020a  dc05              BGT      |L1.536|
00020c  2801              CMP      r0,#1                 ;201
00020e  d00d              BEQ      |L1.556|
000210  2802              CMP      r0,#2                 ;201
000212  d12b              BNE      |L1.620|
000214  e012              B        |L1.572|
                  |L1.534|
000216  e041              B        |L1.668|
                  |L1.536|
000218  495f              LDR      r1,|L1.920|
00021a  f9b11008          LDRSH    r1,[r1,#8]            ;198
00021e  1bc9              SUBS     r1,r1,r7              ;199
000220  4439              ADD      r1,r1,r7              ;212
000222  2808              CMP      r0,#8                 ;201
000224  d01a              BEQ      |L1.604|
000226  2810              CMP      r0,#0x10              ;201
000228  d120              BNE      |L1.620|
00022a  e01b              B        |L1.612|
                  |L1.556|
00022c  eb0404e2          ADD      r4,r4,r2,ASR #3       ;203
000230  f0220007          BIC      r0,r2,#7              ;203
000234  4407              ADD      r7,r7,r0              ;203
000236  f0020207          AND      r2,r2,#7              ;203
00023a  e017              B        |L1.620|
                  |L1.572|
00023c  eb0404a2          ADD      r4,r4,r2,ASR #2       ;206
000240  f0220003          BIC      r0,r2,#3              ;206
000244  4407              ADD      r7,r7,r0              ;206
000246  f0020203          AND      r2,r2,#3              ;206
00024a  e00f              B        |L1.620|
                  |L1.588|
00024c  eb040462          ADD      r4,r4,r2,ASR #1       ;209
000250  f0220001          BIC      r0,r2,#1              ;209
000254  4407              ADD      r7,r7,r0              ;209
000256  f0020201          AND      r2,r2,#1              ;209
00025a  e007              B        |L1.620|
                  |L1.604|
00025c  4414              ADD      r4,r4,r2              ;212
00025e  460f              MOV      r7,r1                 ;212
000260  2200              MOVS     r2,#0                 ;212
000262  e003              B        |L1.620|
                  |L1.612|
000264  eb040442          ADD      r4,r4,r2,LSL #1       ;215
000268  460f              MOV      r7,r1                 ;215
00026a  2200              MOVS     r2,#0                 ;215
                  |L1.620|
00026c  f1ba0f00          CMP      r10,#0                ;219
000270  f77faf65          BLE      |L1.318|
000274  9b19              LDR      r3,[sp,#0x64]         ;222
000276  9817              LDR      r0,[sp,#0x5c]         ;222
000278  9402              STR      r4,[sp,#8]            ;222
00027a  9304              STR      r3,[sp,#0x10]         ;222
00027c  9b16              LDR      r3,[sp,#0x58]         ;222
00027e  9203              STR      r2,[sp,#0xc]          ;222
000280  9001              STR      r0,[sp,#4]            ;222
000282  9300              STR      r3,[sp,#0]            ;222
000284  6ce8              LDR      r0,[r5,#0x4c]         ;222  ; GUI_Context
000286  e000              B        |L1.650|
                  |L1.648|
000288  e039              B        |L1.766|
                  |L1.650|
00028a  68c4              LDR      r4,[r0,#0xc]          ;222
00028c  4652              MOV      r2,r10                ;222
00028e  4661              MOV      r1,r12                ;222
000290  4638              MOV      r0,r7                 ;222
000292  9b0a              LDR      r3,[sp,#0x28]         ;222
000294  47a0              BLX      r4                    ;222
000296  b00b              ADD      sp,sp,#0x2c
000298  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.668|
00029c  f8196b01          LDRB     r6,[r9],#1            ;238
0002a0  2508              MOVS     r5,#8                 ;239
                  |L1.674|
0002a2  9803              LDR      r0,[sp,#0xc]          ;241
0002a4  fa26f000          LSR      r0,r6,r0              ;241
0002a8  9916              LDR      r1,[sp,#0x58]         ;242
0002aa  fa06f101          LSL      r1,r6,r1              ;242
0002ae  b2ce              UXTB     r6,r1                 ;242
0002b0  9916              LDR      r1,[sp,#0x58]         ;243
0002b2  1a6d              SUBS     r5,r5,r1              ;243
0002b4  b920              CBNZ     r0,|L1.704|
0002b6  4938              LDR      r1,|L1.920|
0002b8  7c09              LDRB     r1,[r1,#0x10]         ;244  ; GUI_Context
0002ba  f0110f02          TST      r1,#2                 ;244
0002be  d117              BNE      |L1.752|
                  |L1.704|
0002c0  4935              LDR      r1,|L1.920|
0002c2  8849              LDRH     r1,[r1,#2]            ;245  ; GUI_Context
0002c4  9101              STR      r1,[sp,#4]            ;245
0002c6  9919              LDR      r1,[sp,#0x64]         ;246
0002c8  b129              CBZ      r1,|L1.726|
0002ca  9919              LDR      r1,[sp,#0x64]         ;247
0002cc  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;247
0002d0  4831              LDR      r0,|L1.920|
0002d2  8041              STRH     r1,[r0,#2]            ;247
0002d4  e001              B        |L1.730|
                  |L1.726|
0002d6  4930              LDR      r1,|L1.920|
0002d8  8048              STRH     r0,[r1,#2]            ;249
                  |L1.730|
0002da  9814              LDR      r0,[sp,#0x50]         ;251
0002dc  9b02              LDR      r3,[sp,#8]            ;251
0002de  4440              ADD      r0,r0,r8              ;251
0002e0  1e42              SUBS     r2,r0,#1              ;251
0002e2  4640              MOV      r0,r8                 ;251
0002e4  9905              LDR      r1,[sp,#0x14]         ;251
0002e6  f7fffffe          BL       LCD_FillRect
0002ea  492b              LDR      r1,|L1.920|
0002ec  9801              LDR      r0,[sp,#4]            ;252
0002ee  8048              STRH     r0,[r1,#2]            ;252
                  |L1.752|
0002f0  f10b0b01          ADD      r11,r11,#1            ;235
0002f4  9814              LDR      r0,[sp,#0x50]         ;235
0002f6  4480              ADD      r8,r8,r0              ;235
0002f8  45d3              CMP      r11,r10               ;235
0002fa  f6ffaf52          BLT      |L1.418|
                  |L1.766|
0002fe  9804              LDR      r0,[sp,#0x10]         ;228
000300  1c40              ADDS     r0,r0,#1              ;228
000302  9004              STR      r0,[sp,#0x10]         ;228
000304  9806              LDR      r0,[sp,#0x18]         ;228
000306  9005              STR      r0,[sp,#0x14]         ;228
000308  9817              LDR      r0,[sp,#0x5c]         ;228
00030a  4404              ADD      r4,r4,r0              ;228
00030c  990a              LDR      r1,[sp,#0x28]         ;228
00030e  9804              LDR      r0,[sp,#0x10]         ;228
000310  4288              CMP      r0,r1                 ;228
000312  f6ffaf2e          BLT      |L1.370|
000316  b00b              ADD      sp,sp,#0x2c
000318  e8bd8ff0          POP      {r4-r11,pc}
;;;259    
                          ENDP

                  LCD_SetClipRectMax PROC
;;;263    */
;;;264    void LCD_SetClipRectMax(void) {
00031c  481e              LDR      r0,|L1.920|
;;;265      LCDDEV_L0_GetRect(&GUI_Context.ClipRect);
00031e  6cc1              LDR      r1,[r0,#0x4c]  ; GUI_Context
000320  3008              ADDS     r0,r0,#8
000322  6a09              LDR      r1,[r1,#0x20]
000324  4708              BX       r1
;;;266    }
;;;267    
                          ENDP

                  LCD_Init PROC
;;;271    */
;;;272    int LCD_Init(void) {
000326  b510              PUSH     {r4,lr}
;;;273      int r = 0;
;;;274      GUI_DEBUG_LOG("\nLCD_Init...");
;;;275      LCD_SetClipRectMax();
000328  f7fffffe          BL       LCD_SetClipRectMax
;;;276      r |= LCD_L0_Init();
00032c  f7fffffe          BL       LCD_L0_Init
000330  4604              MOV      r4,r0
;;;277      #if GUI_NUM_LAYERS > 1
;;;278        r |= LCD_L0_1_Init();
;;;279      #endif
;;;280      #if GUI_NUM_LAYERS > 2
;;;281        r |= LCD_L0_2_Init();
;;;282      #endif
;;;283      #if GUI_NUM_LAYERS > 3
;;;284        r |= LCD_L0_3_Init();
;;;285      #endif
;;;286      #if GUI_NUM_LAYERS > 4
;;;287        r |= LCD_L0_4_Init();
;;;288      #endif
;;;289      LCD_InitLUT();
000332  f7fffffe          BL       LCD_InitLUT
;;;290      {
;;;291      #if GUI_NUM_LAYERS > 1
;;;292        int i;
;;;293        for (i = GUI_NUM_LAYERS - 1; i >= 0; i--) {
;;;294          GUI_SelectLayer(i);
;;;295      #else
;;;296        {
;;;297      #endif
;;;298          #if (GUI_DEFAULT_BKCOLOR != GUI_INVALID_COLOR)
;;;299            /* Clear video memory */
;;;300            LCD_SetDrawMode(GUI_DRAWMODE_REV);
000336  2004              MOVS     r0,#4
000338  f7fffffe          BL       LCD_SetDrawMode
;;;301            LCD_FillRect(0,0, GUI_XMAX, GUI_YMAX);
00033c  f64073ff          MOV      r3,#0xfff
000340  2100              MOVS     r1,#0
000342  461a              MOV      r2,r3
000344  4608              MOV      r0,r1
000346  f7fffffe          BL       LCD_FillRect
;;;302            LCD_SetDrawMode(0);
00034a  2000              MOVS     r0,#0
00034c  f7fffffe          BL       LCD_SetDrawMode
;;;303          #endif
;;;304        }
;;;305      }
;;;306      /* Switch LCD on */
;;;307      LCD_On();
000350  f7fffffe          BL       LCD_L0_On
;;;308      return r;
000354  4620              MOV      r0,r4
;;;309    }
000356  bd10              POP      {r4,pc}
;;;310    
                          ENDP

                  LCD_Color2Index PROC
;;;314    */
;;;315    int LCD_Color2Index(LCD_COLOR Color) {
000358  490f              LDR      r1,|L1.920|
;;;316      return LCDDEV_L0_Color2Index(Color);
00035a  6cc9              LDR      r1,[r1,#0x4c]  ; GUI_Context
00035c  6809              LDR      r1,[r1,#0]
00035e  4708              BX       r1
;;;317    }
;;;318    
                          ENDP

                  LCD_Index2Color PROC
;;;322    */
;;;323    LCD_COLOR LCD_Index2Color(int Index) {
000360  490d              LDR      r1,|L1.920|
;;;324      return LCDDEV_L0_Index2Color(Index);
000362  6cc9              LDR      r1,[r1,#0x4c]  ; GUI_Context
000364  6849              LDR      r1,[r1,#4]
000366  4708              BX       r1
;;;325    }
;;;326    
                          ENDP

                  LCD_SetBkColor PROC
;;;330    */
;;;331    void LCD_SetBkColor(GUI_COLOR color) {
000368  b510              PUSH     {r4,lr}
;;;332      if (GUI_Context.BkColor != color) {
00036a  490b              LDR      r1,|L1.920|
00036c  6b8a              LDR      r2,[r1,#0x38]  ; GUI_Context
00036e  4282              CMP      r2,r0
000370  d005              BEQ      |L1.894|
;;;333        GUI_Context.BkColor = color;
000372  6388              STR      r0,[r1,#0x38]  ; GUI_Context
;;;334        LCD_SetBkColorIndex(LCD_Color2Index(color));
000374  f7fffffe          BL       LCD_Color2Index
000378  e8bd4010          POP      {r4,lr}
00037c  e7fe              B        LCD_SetBkColorIndex
                  |L1.894|
;;;335      }
;;;336    }
00037e  bd10              POP      {r4,pc}
;;;337    
                          ENDP

                  LCD_SetColor PROC
;;;341    */
;;;342    void LCD_SetColor(GUI_COLOR color) {
000380  b510              PUSH     {r4,lr}
;;;343      if (GUI_Context.Color != color) {
000382  4905              LDR      r1,|L1.920|
000384  6b4a              LDR      r2,[r1,#0x34]  ; GUI_Context
000386  4282              CMP      r2,r0
000388  d005              BEQ      |L1.918|
;;;344        GUI_Context.Color = color;
00038a  6348              STR      r0,[r1,#0x34]  ; GUI_Context
;;;345        LCD_SetColorIndex(LCD_Color2Index(color));
00038c  f7fffffe          BL       LCD_Color2Index
000390  e8bd4010          POP      {r4,lr}
000394  e7fe              B        LCD_SetColorIndex
                  |L1.918|
;;;346      }
;;;347    }
000396  bd10              POP      {r4,pc}
;;;348    
                          ENDP

                  |L1.920|
                          DCD      GUI_Context
                  |L1.924|
                          DCD      GUI_pLCD_APIList
