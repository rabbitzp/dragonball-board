; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcdp565_index2color.o --depend=.\rvmdk\lcdp565_index2color.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcdp565_index2color.crf ..\..\..\..\..\uCGUI\GUI\Core\LCDP565_Index2Color.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_Index2Color_565 PROC
;;;48     */
;;;49     LCD_COLOR LCD_Index2Color_565(int Index) {
000000  b430              PUSH     {r4,r5}
;;;50       unsigned int r,g,b;
;;;51       /* Seperate the color masks */
;;;52       r = Index                                  & R_MASK;
000002  f000021f          AND      r2,r0,#0x1f
;;;53       g = (Index >> R_BITS)                      & G_MASK;
000006  f3c01145          UBFX     r1,r0,#5,#6
;;;54       b = ((unsigned)Index >> (R_BITS + G_BITS)) & B_MASK;
00000a  f3c020c4          UBFX     r0,r0,#11,#5
;;;55       /* Convert the color masks */
;;;56       r = r * 255 / R_MASK;
00000e  4b0e              LDR      r3,|L1.72|
000010  ebc22402          RSB      r4,r2,r2,LSL #8
000014  469c              MOV      r12,r3
000016  2200              MOVS     r2,#0
000018  fbe4c203          UMLAL    r12,r2,r4,r3
00001c  08d2              LSRS     r2,r2,#3
;;;57       g = g * 255 / G_MASK;
00001e  4d0b              LDR      r5,|L1.76|
000020  ebc12401          RSB      r4,r1,r1,LSL #8
000024  46ac              MOV      r12,r5
000026  2100              MOVS     r1,#0
000028  fbe4c105          UMLAL    r12,r1,r4,r5
00002c  0909              LSRS     r1,r1,#4
;;;58       b = b * 255 / B_MASK;
00002e  ebc02400          RSB      r4,r0,r0,LSL #8
000032  469c              MOV      r12,r3
000034  2000              MOVS     r0,#0
000036  fbe4c003          UMLAL    r12,r0,r4,r3
00003a  08c0              LSRS     r0,r0,#3
;;;59       return r + (g<<8) + (((U32)b)<<16);
00003c  eb022101          ADD      r1,r2,r1,LSL #8
;;;60     }
000040  bc30              POP      {r4,r5}
000042  eb014000          ADD      r0,r1,r0,LSL #16      ;59
000046  4770              BX       lr
;;;61     
                          ENDP

                  |L1.72|
                          DCD      0x42108421
                  |L1.76|
                          DCD      0x41041041
