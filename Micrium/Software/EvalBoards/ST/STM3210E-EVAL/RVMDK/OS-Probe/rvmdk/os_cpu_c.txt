; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\os_cpu_c.o --depend=.\rvmdk\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\os_cpu_c.crf ..\..\..\..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView\os_cpu_c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSInitHookBegin PROC
;;;66     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;67     void  OSInitHookBegin (void)
000000  4770              BX       lr
;;;68     {
;;;69     #if OS_TMR_EN > 0
;;;70         OSTmrCtr = 0;
;;;71     #endif
;;;72     }
;;;73     #endif
                          ENDP

                  OSInitHookEnd PROC
;;;87     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;88     void  OSInitHookEnd (void)
000002  4770              BX       lr
;;;89     {
;;;90     }
;;;91     #endif
                          ENDP

                  OSTaskCreateHook PROC
;;;104    #if OS_CPU_HOOKS_EN > 0
;;;105    void  OSTaskCreateHook (OS_TCB *ptcb)
000004  f7ffbffe          B.W      App_TaskCreateHook
;;;106    {
;;;107    #if OS_APP_HOOKS_EN > 0
;;;108        App_TaskCreateHook(ptcb);
;;;109    #else
;;;110        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;111    #endif
;;;112    }
;;;113    #endif
                          ENDP

                  OSTaskDelHook PROC
;;;127    #if OS_CPU_HOOKS_EN > 0
;;;128    void  OSTaskDelHook (OS_TCB *ptcb)
000008  f7ffbffe          B.W      App_TaskDelHook
;;;129    {
;;;130    #if OS_APP_HOOKS_EN > 0
;;;131        App_TaskDelHook(ptcb);
;;;132    #else
;;;133        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;134    #endif
;;;135    }
;;;136    #endif
                          ENDP

                  OSTaskIdleHook PROC
;;;150    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
;;;151    void  OSTaskIdleHook (void)
00000c  f7ffbffe          B.W      App_TaskIdleHook
;;;152    {
;;;153    #if OS_APP_HOOKS_EN > 0
;;;154        App_TaskIdleHook();
;;;155    #endif
;;;156    }
;;;157    #endif
                          ENDP

                  OSTaskStatHook PROC
;;;170    #if OS_CPU_HOOKS_EN > 0
;;;171    void  OSTaskStatHook (void)
000010  f7ffbffe          B.W      App_TaskStatHook
;;;172    {
;;;173    #if OS_APP_HOOKS_EN > 0
;;;174        App_TaskStatHook();
;;;175    #endif
;;;176    }
;;;177    #endif
                          ENDP

                  OSTaskStkInit PROC
;;;207    
;;;208    OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
000014  f04f7380          MOV      r3,#0x1000000
;;;209    {
;;;210        OS_STK *stk;
;;;211    
;;;212    
;;;213        (void)opt;                                   /* 'opt' is not used, prevent warning                 */
;;;214        stk       = ptos;                            /* Load stack pointer                                 */
;;;215    
;;;216                                                     /* Registers stacked as if auto-saved on exception    */
;;;217        *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
000018  6013              STR      r3,[r2,#0]
;;;218        *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
00001a  f8420d04          STR      r0,[r2,#-4]!
;;;219        *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
00001e  f06f0301          MVN      r3,#1
000022  1f10              SUBS     r0,r2,#4
000024  f8423c04          STR      r3,[r2,#-4]
;;;220        *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
000028  f04f3212          MOV      r2,#0x12121212
00002c  f8402d04          STR      r2,[r0,#-4]!
;;;221        *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
000030  f04f3203          MOV      r2,#0x3030303
000034  f8402d04          STR      r2,[r0,#-4]!
;;;222        *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
000038  f04f3202          MOV      r2,#0x2020202
00003c  f8402d04          STR      r2,[r0,#-4]!
;;;223        *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
000040  1052              ASRS     r2,r2,#1
000042  f8402d04          STR      r2,[r0,#-4]!
;;;224        *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
000046  f8401d04          STR      r1,[r0,#-4]!
;;;225    
;;;226                                                     /* Remaining registers saved on process stack         */
;;;227        *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
00004a  f04f3111          MOV      r1,#0x11111111
00004e  f8401d04          STR      r1,[r0,#-4]!
;;;228        *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
000052  0111              LSLS     r1,r2,#4
000054  f8401d04          STR      r1,[r0,#-4]!
;;;229        *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
000058  f04f3109          MOV      r1,#0x9090909
00005c  f8401d04          STR      r1,[r0,#-4]!
;;;230        *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
000060  00d1              LSLS     r1,r2,#3
000062  f8401d04          STR      r1,[r0,#-4]!
;;;231        *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
000066  f04f3107          MOV      r1,#0x7070707
00006a  f8401d04          STR      r1,[r0,#-4]!
;;;232        *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
00006e  f04f3106          MOV      r1,#0x6060606
000072  f8401d04          STR      r1,[r0,#-4]!
;;;233        *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
000076  f04f3105          MOV      r1,#0x5050505
00007a  f8401d04          STR      r1,[r0,#-4]!
;;;234        *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
00007e  0091              LSLS     r1,r2,#2
000080  f8401d04          STR      r1,[r0,#-4]!
;;;235    
;;;236        return (stk);
;;;237    }
000084  4770              BX       lr
;;;238    
                          ENDP

                  OSTaskSwHook PROC
;;;254    #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
;;;255    void  OSTaskSwHook (void)
000086  f7ffbffe          B.W      App_TaskSwHook
;;;256    {
;;;257    #if OS_APP_HOOKS_EN > 0
;;;258        App_TaskSwHook();
;;;259    #endif
;;;260    }
;;;261    #endif
                          ENDP

                  OSTCBInitHook PROC
;;;274    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;275    void  OSTCBInitHook (OS_TCB *ptcb)
00008a  f7ffbffe          B.W      App_TCBInitHook
;;;276    {
;;;277    #if OS_APP_HOOKS_EN > 0
;;;278        App_TCBInitHook(ptcb);
;;;279    #else
;;;280        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;281    #endif
;;;282    }
;;;283    #endif
                          ENDP

                  OSTimeTickHook PROC
;;;297    #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
;;;298    void  OSTimeTickHook (void)
00008e  f7ffbffe          B.W      App_TimeTickHook
;;;299    {
;;;300    #if OS_APP_HOOKS_EN > 0
;;;301        App_TimeTickHook();
;;;302    #endif
;;;303    
;;;304    #if OS_TMR_EN > 0
;;;305        OSTmrCtr++;
;;;306        if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
;;;307            OSTmrCtr = 0;
;;;308            OSTmrSignal();
;;;309        }
;;;310    #endif
;;;311    }
;;;312    #endif
                          ENDP

                  OS_CPU_SysTickHandler PROC
;;;328    
;;;329    void  OS_CPU_SysTickHandler (void)
000092  b510              PUSH     {r4,lr}
;;;330    {
;;;331        OS_CPU_SR  cpu_sr;
;;;332    
;;;333    
;;;334        OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
000094  f7fffffe          BL       OS_CPU_SR_Save
;;;335        OSIntNesting++;
000098  490f              LDR      r1,|L1.216|
00009a  780a              LDRB     r2,[r1,#0]  ; OSIntNesting
00009c  1c52              ADDS     r2,r2,#1
00009e  700a              STRB     r2,[r1,#0]
;;;336        OS_EXIT_CRITICAL();
0000a0  f7fffffe          BL       OS_CPU_SR_Restore
;;;337    
;;;338        OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
0000a4  f7fffffe          BL       OSTimeTick
;;;339    
;;;340        OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
0000a8  e8bd4010          POP      {r4,lr}
0000ac  f7ffbffe          B.W      OSIntExit
;;;341    }
;;;342    
                          ENDP

                  OS_CPU_SysTickInit PROC
;;;355    
;;;356    void  OS_CPU_SysTickInit (void)
0000b0  b510              PUSH     {r4,lr}
;;;357    {
;;;358        INT32U  cnts;
;;;359    
;;;360    
;;;361        cnts = OS_CPU_SysTickClkFreq() / OS_TICKS_PER_SEC;
0000b2  f7fffffe          BL       OS_CPU_SysTickClkFreq
0000b6  f44f717a          MOV      r1,#0x3e8
0000ba  fbb0f0f1          UDIV     r0,r0,r1
;;;362    
;;;363        OS_CPU_CM3_NVIC_ST_RELOAD = (cnts - 1);
0000be  1e41              SUBS     r1,r0,#1
0000c0  f04f20e0          MOV      r0,#0xe000e000
0000c4  6141              STR      r1,[r0,#0x14]
;;;364                                                     /* Enable timer.                                      */
;;;365        OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
0000c6  6901              LDR      r1,[r0,#0x10]
0000c8  f0410105          ORR      r1,r1,#5
0000cc  6101              STR      r1,[r0,#0x10]
;;;366                                                     /* Enable timer interrupt.                            */
;;;367        OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
0000ce  6901              LDR      r1,[r0,#0x10]
0000d0  f0410102          ORR      r1,r1,#2
0000d4  6101              STR      r1,[r0,#0x10]
;;;368    
;;;369    }
0000d6  bd10              POP      {r4,pc}
                          ENDP

                  |L1.216|
                          DCD      OSIntNesting
