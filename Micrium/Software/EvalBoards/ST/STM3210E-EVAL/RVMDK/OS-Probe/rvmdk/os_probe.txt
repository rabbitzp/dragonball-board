; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\os_probe.o --depend=.\rvmdk\os_probe.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\os_probe.crf ..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\os_probe.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSProbe_Task PROC
;;;435    #if (OS_PROBE_TASK > 0)
;;;436    static  void  OSProbe_Task (void *p_arg)
000000  b082              SUB      sp,sp,#8
;;;437    {
;;;438                OS_TCB  *ptcb;
;;;439                INT16U   i;
;;;440                INT32U   cycles_tot;
;;;441        static  INT32U   cycles_dif[OS_MAX_TASKS];
;;;442        static  INT32U   cycles_tot_last[OS_MAX_TASKS];
;;;443    #if (OS_PROBE_USE_FP == 0)
;;;444                INT32U   max;
;;;445    #endif
;;;446    
;;;447    
;;;448        (void)p_arg;
;;;449    
;;;450                                                                    /* Initialize stored CyclesTot values.                  */
;;;451        for (i = 0; i < OS_MAX_TASKS; i++) {
000002  2000              MOVS     r0,#0
;;;452            cycles_tot_last[i]      = 0;
000004  f8dfa17c          LDR      r10,|L1.388|
000008  4681              MOV      r9,r0                 ;451
;;;453            OSProbe_TaskStkUsage[i] = 0;
00000a  f10a07a0          ADD      r7,r10,#0xa0
;;;454            OSProbe_TaskCPUUsage[i] = 0;
00000e  f1a70b50          SUB      r11,r7,#0x50
                  |L1.18|
000012  f84a9020          STR      r9,[r10,r0,LSL #2]    ;452
000016  f8479020          STR      r9,[r7,r0,LSL #2]     ;453
00001a  f84b9020          STR      r9,[r11,r0,LSL #2]
00001e  1c40              ADDS     r0,r0,#1              ;451
000020  b280              UXTH     r0,r0                 ;451
000022  2814              CMP      r0,#0x14              ;451
000024  d3f5              BCC      |L1.18|
;;;455        }
;;;456    
;;;457        while (1) {
;;;458            OSTimeDlyHMSM(0, 0, 0, OSProbe_Delay);
;;;459            if (OSProbe_CallbackFnct != (void (*)(void))0) {
;;;460                OSProbe_CallbackFnct();
;;;461            }
;;;462    
;;;463                                                                    /* Update task CPU usage                                */
;;;464            i          = 0;
;;;465            cycles_tot = 0;
;;;466            ptcb       = &OSTCBTbl[0];                              /*  ... Get pointer to first TCB ...                    */
;;;467    
;;;468            while ((i    < OS_MAX_TASKS) &&
;;;469                   (ptcb != (OS_TCB *)0) &&
;;;470                   (ptcb != (OS_TCB *)1)) {
;;;471                                                                    /*  ... Calculate new CyclesDif, the number of cycles   */
;;;472                                                                    /*  ... used by the task since the last reading.  Half  */
;;;473                                                                    /*  ... the previous value is added to provide some     */
;;;474                                                                    /*  ... hysteresis, thereby reducing the natural        */
;;;475                                                                    /*  ... "jitter" in the data.                           */
;;;476                cycles_dif[i]       = (ptcb->OSTCBCyclesTot - cycles_tot_last[i]) / 2 + (cycles_dif[i] / 2);
000026  f8df8160          LDR      r8,|L1.392|
00002a  e041              B        |L1.176|
                  |L1.44|
00002c  4780              BLX      r0                    ;460
                  |L1.46|
00002e  2500              MOVS     r5,#0                 ;464
000030  2600              MOVS     r6,#0                 ;465
000032  4c56              LDR      r4,|L1.396|
000034  e023              B        |L1.126|
                  |L1.54|
000036  f85a1025          LDR      r1,[r10,r5,LSL #2]
00003a  6be0              LDR      r0,[r4,#0x3c]
00003c  1a40              SUBS     r0,r0,r1
00003e  f8581025          LDR      r1,[r8,r5,LSL #2]
000042  0840              LSRS     r0,r0,#1
000044  eb000051          ADD      r0,r0,r1,LSR #1
000048  f8480025          STR      r0,[r8,r5,LSL #2]
;;;477                cycles_tot_last[i]  = ptcb->OSTCBCyclesTot;
00004c  6be1              LDR      r1,[r4,#0x3c]
00004e  f84a1025          STR      r1,[r10,r5,LSL #2]
;;;478                cycles_tot         += cycles_dif[i];
000052  4406              ADD      r6,r6,r0
;;;479    
;;;480                if (ptcb->OSTCBStkSize == 0) {
000054  68e0              LDR      r0,[r4,#0xc]
000056  b3b0              CBZ      r0,|L1.198|
;;;481                    OSProbe_TaskStkUsage[i] = 0;
;;;482                } else {
;;;483    #if (OS_PROBE_USE_FP > 0)
;;;484    #if (OS_STK_GROWTH == 1)
;;;485                    OSProbe_TaskStkUsage[i] = (FP32)(((INT32U)(ptcb->OSTCBStkBase) - (INT32U)(ptcb->OSTCBStkPtr))  * 100)
000058  0080              LSLS     r0,r0,#2
00005a  f7fffffe          BL       __aeabi_ui2f
00005e  9001              STR      r0,[sp,#4]
000060  6821              LDR      r1,[r4,#0]
000062  6c60              LDR      r0,[r4,#0x44]
000064  1a40              SUBS     r0,r0,r1
000066  2164              MOVS     r1,#0x64
000068  4348              MULS     r0,r1,r0
00006a  f7fffffe          BL       __aeabi_ui2f
00006e  9901              LDR      r1,[sp,#4]
000070  f7fffffe          BL       __aeabi_fdiv
000074  f8470025          STR      r0,[r7,r5,LSL #2]
                  |L1.120|
;;;486                                            / ((ptcb->OSTCBStkSize) * sizeof (OS_STK));
;;;487    #else
;;;488                    OSProbe_TaskStkUsage[i] = (FP32)(((INT32U)(ptcb->OSTCBStkPtr)  - (INT32U)(ptcb->OSTCBStkBase)) * 100)
;;;489                                            / ((ptcb->OSTCBStkSize) * sizeof (OS_STK));
;;;490    #endif
;;;491    #else
;;;492                    max = ((ptcb->OSTCBStkSize) * sizeof (OS_STK)) / 100L;
;;;493    
;;;494    #if (OS_STK_GROWTH == 1)
;;;495                    OSProbe_TaskStkUsage[i] = (INT16U)(((INT32U)(ptcb->OSTCBStkBase) - (INT32U)(ptcb->OSTCBStkPtr))  / max);
;;;496    #else
;;;497                    OSProbe_TaskStkUsage[i] = (INT16U)(((INT32U)(ptcb->OSTCBStkPtr)  - (INT32U)(ptcb->OSTCBStkBase)) / max);
;;;498    #endif
;;;499    #endif
;;;500                }
;;;501    
;;;502                ptcb = ptcb->OSTCBPrev;
000078  69a4              LDR      r4,[r4,#0x18]
;;;503    
;;;504                i++;
00007a  1c68              ADDS     r0,r5,#1
00007c  b285              UXTH     r5,r0
                  |L1.126|
00007e  2d14              CMP      r5,#0x14              ;468
000080  d202              BCS      |L1.136|
000082  b10c              CBZ      r4,|L1.136|
000084  2c01              CMP      r4,#1                 ;470
000086  d1d6              BNE      |L1.54|
                  |L1.136|
;;;505            }
;;;506    
;;;507    #if (OS_PROBE_USE_FP == 0)
;;;508            max = cycles_tot / 100L;
;;;509    #endif
;;;510                                                                    /*  ... For each task, calculate percent CPU usage.     */
;;;511            for (i = 0; i < OS_MAX_TASKS; i++) {
000088  2400              MOVS     r4,#0
00008a  4630              MOV      r0,r6                 ;440
;;;512    #if (OS_PROBE_USE_FP > 0)
;;;513                OSProbe_TaskCPUUsage[i] = (FP32)(cycles_dif[i] * 100) / cycles_tot;
00008c  f7fffffe          BL       __aeabi_ui2f
000090  4605              MOV      r5,r0
                  |L1.146|
000092  f8580024          LDR      r0,[r8,r4,LSL #2]
000096  2164              MOVS     r1,#0x64
000098  4348              MULS     r0,r1,r0
00009a  f7fffffe          BL       __aeabi_ui2f
00009e  4629              MOV      r1,r5
0000a0  f7fffffe          BL       __aeabi_fdiv
0000a4  f84b0024          STR      r0,[r11,r4,LSL #2]
0000a8  1c60              ADDS     r0,r4,#1              ;511
0000aa  b284              UXTH     r4,r0                 ;511
0000ac  2c14              CMP      r4,#0x14              ;511
0000ae  d3f0              BCC      |L1.146|
                  |L1.176|
0000b0  4c37              LDR      r4,|L1.400|
0000b2  2200              MOVS     r2,#0                 ;458
0000b4  4611              MOV      r1,r2                 ;458
0000b6  8823              LDRH     r3,[r4,#0]            ;458  ; OSProbe_Delay
0000b8  4610              MOV      r0,r2                 ;458
0000ba  f7fffffe          BL       OSTimeDlyHMSM
0000be  6860              LDR      r0,[r4,#4]            ;459  ; OSProbe_CallbackFnct
0000c0  2800              CMP      r0,#0                 ;459
0000c2  d0b4              BEQ      |L1.46|
0000c4  e7b2              B        |L1.44|
                  |L1.198|
0000c6  e7ff              B        |L1.200|
                  |L1.200|
0000c8  f8479025          STR      r9,[r7,r5,LSL #2]     ;481
0000cc  e7d4              B        |L1.120|
;;;514    #else
;;;515                OSProbe_TaskCPUUsage[i] = (INT16U)(cycles_dif[i] / max);
;;;516    #endif
;;;517            }
;;;518        }
;;;519    }
;;;520    #endif
                          ENDP

                  OSProbe_InitOS PROC
;;;367    #if (OS_PROBE_TASK > 0)
;;;368    static  void  OSProbe_InitOS (void)
0000ce  b500              PUSH     {lr}
;;;369    {
0000d0  b087              SUB      sp,sp,#0x1c
;;;370        INT8U  err;
;;;371    
;;;372    
;;;373    #if (OS_TASK_CREATE_EXT_EN > 0)
;;;374        #if (OS_STK_GROWTH == 1)
;;;375        err = OSTaskCreateExt((void (*)(void *)) OSProbe_Task,
0000d2  2303              MOVS     r3,#3
0000d4  2200              MOVS     r2,#0
0000d6  e9cd2303          STRD     r2,r3,[sp,#0xc]
0000da  482e              LDR      r0,|L1.404|
0000dc  2180              MOVS     r1,#0x80
0000de  9102              STR      r1,[sp,#8]
0000e0  9001              STR      r0,[sp,#4]
0000e2  231c              MOVS     r3,#0x1c
0000e4  f50072fe          ADD      r2,r0,#0x1fc
0000e8  2100              MOVS     r1,#0
0000ea  482b              LDR      r0,|L1.408|
0000ec  9300              STR      r3,[sp,#0]
0000ee  f7fffffe          BL       OSTaskCreateExt
0000f2  9006              STR      r0,[sp,#0x18]
;;;376                              (void          * ) 0,
;;;377                              (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
;;;378                              (INT8U           ) OS_PROBE_TASK_PRIO,
;;;379                              (INT16U          ) OS_PROBE_TASK_PRIO,
;;;380                              (OS_STK        * )&OSProbe_TaskStk[0],
;;;381                              (INT32U          ) OS_PROBE_TASK_STK_SIZE,
;;;382                              (void          * ) 0,
;;;383                              (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;384        #else
;;;385        err = OSTaskCreateExt((void (*)(void *)) OSProbe_Task,
;;;386                              (void          * ) 0,
;;;387                              (OS_STK        * )&OSProbe_TaskStk[0],
;;;388                              (INT8U           ) OS_PROBE_TASK_PRIO,
;;;389                              (INT16U          ) OS_PROBE_TASK_PRIO,
;;;390                              (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
;;;391                              (INT32U          ) OS_PROBE_TASK_STK_SIZE,
;;;392                              (void          * ) 0,
;;;393                              (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;394        #endif
;;;395    #else
;;;396        #if (OS_STK_GROWTH == 1)
;;;397        err = OSTaskCreate((void (*)(void *)) OSProbe_Task,
;;;398                           (void          * ) 0,
;;;399                           (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
;;;400                           (INT8U           ) OS_PROBE_TASK_PRIO);
;;;401        #else
;;;402        err = OSTaskCreate((void (*)(void *)) OSProbe_Task,
;;;403                           (void          * ) 0,
;;;404                           (OS_STK        * )&OSProbe_TaskStk[0],
;;;405                           (INT8U           ) OS_PROBE_TASK_PRIO);
;;;406        #endif
;;;407    #endif
;;;408    
;;;409    #if (OS_TASK_NAME_SIZE > 15)
;;;410        OSTaskNameSet(OS_PROBE_TASK_PRIO, (INT8U *)"Probe OS PlugIn", &err);
0000f4  aa06              ADD      r2,sp,#0x18
0000f6  a129              ADR      r1,|L1.412|
0000f8  201c              MOVS     r0,#0x1c
0000fa  f7fffffe          BL       OSTaskNameSet
;;;411    #endif
;;;412    
;;;413        (void)&err;
;;;414    }
0000fe  b007              ADD      sp,sp,#0x1c
000100  bd00              POP      {pc}
;;;415    #endif
                          ENDP

                  OSProbe_SetCallback PROC
;;;137    #if (OS_PROBE_TASK > 0)
;;;138    void  OSProbe_SetCallback (void (*call_back)(void))
000102  4923              LDR      r1,|L1.400|
;;;139    {
;;;140        OSProbe_CallbackFnct = call_back;
000104  6048              STR      r0,[r1,#4]  ; OSProbe_CallbackFnct
;;;141    }
000106  4770              BX       lr
;;;142    #endif
                          ENDP

                  OSProbe_SetDelay PROC
;;;161    #if (OS_PROBE_TASK > 0)
;;;162    void  OSProbe_SetDelay (INT16U  delay)
000108  4921              LDR      r1,|L1.400|
;;;163    {
;;;164        OSProbe_Delay = delay;
00010a  8008              STRH     r0,[r1,#0]
;;;165    }
00010c  4770              BX       lr
;;;166    #endif
                          ENDP

                  OSProbe_Init PROC
;;;103    
;;;104    void  OSProbe_Init (void)
00010e  b510              PUSH     {r4,lr}
;;;105    {
;;;106    #if (OS_PROBE_TASK > 0)
;;;107        OSProbe_SetDelay(100);
000110  2064              MOVS     r0,#0x64
000112  f7fffffe          BL       OSProbe_SetDelay
;;;108        OSProbe_SetCallback((void (*)(void))0);                     /* Force terminal callback function to 'nothing'.       */
000116  2000              MOVS     r0,#0
000118  f7fffffe          BL       OSProbe_SetCallback
;;;109    
;;;110        OSProbe_InitOS();
00011c  f7fffffe          BL       OSProbe_InitOS
;;;111    #endif
;;;112    
;;;113    #if (OS_PROBE_HOOKS_EN > 0)
;;;114        OSProbe_TmrInit();
000120  f7fffffe          BL       OSProbe_TmrInit
;;;115    
;;;116        OSProbe_CyclesCtr   = 0;
000124  481a              LDR      r0,|L1.400|
000126  2100              MOVS     r1,#0
000128  6081              STR      r1,[r0,#8]  ; OSProbe_CyclesCtr
;;;117        OSProbe_TmrCntsPrev = 0;
00012a  8041              STRH     r1,[r0,#2]
;;;118    #endif
;;;119    }
00012c  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  OSProbe_TimeGetCycles PROC
;;;210    #if (OS_PROBE_HOOKS_EN > 0)
;;;211    INT32U  OSProbe_TimeGetCycles (void)
00012e  b570              PUSH     {r4-r6,lr}
;;;212    {
;;;213        INT32U     cycles;
;;;214    #if (OS_PROBE_TMR_32_BITS > 0)
;;;215        INT32U     cnts32;
;;;216        INT32U     cnts32_delta;
;;;217    #else
;;;218        INT16U     cnts16;
;;;219        INT16U     cnts16_delta;
;;;220    #endif
;;;221    #if (OS_CRITICAL_METHOD == 3)                                   /* Allocate storage for CPU status register.            */
;;;222        OS_CPU_SR  cpu_sr = 0;
;;;223    #endif
;;;224    
;;;225    
;;;226        OS_ENTER_CRITICAL();
000130  f7fffffe          BL       OS_CPU_SR_Save
000134  4605              MOV      r5,r0
;;;227    #if (OS_PROBE_TMR_32_BITS > 0)
;;;228        cnts32               = OSProbe_TmrRd();                     /* Read current counts of the free running counter.     */
;;;229        cnts32_delta         = cnts32 - OSProbe_TmrCntsPrev;
;;;230        OSProbe_TmrCntsPrev  = cnts32;                              /* Save current counts for next time.                   */
;;;231        OSProbe_CyclesCtr   += cnts32_delta;
;;;232    #else
;;;233        cnts16               = (INT16U)OSProbe_TmrRd();             /* Read current counts of the free running counter.     */
000136  f7fffffe          BL       OSProbe_TmrRd
;;;234        cnts16_delta         = cnts16 - OSProbe_TmrCntsPrev;
00013a  4915              LDR      r1,|L1.400|
00013c  884a              LDRH     r2,[r1,#2]  ; OSProbe_TmrCntsPrev
00013e  1a82              SUBS     r2,r0,r2
000140  b292              UXTH     r2,r2
;;;235        OSProbe_TmrCntsPrev  = cnts16;                              /* Save current counts for next time.                   */
000142  8048              STRH     r0,[r1,#2]
;;;236        OSProbe_CyclesCtr   += (INT32U)cnts16_delta;
000144  6888              LDR      r0,[r1,#8]  ; OSProbe_CyclesCtr
000146  1884              ADDS     r4,r0,r2
000148  608c              STR      r4,[r1,#8]  ; OSProbe_CyclesCtr
;;;237    #endif
;;;238        cycles               = OSProbe_CyclesCtr;
;;;239        OS_EXIT_CRITICAL();
00014a  4628              MOV      r0,r5
00014c  f7fffffe          BL       OS_CPU_SR_Restore
;;;240    
;;;241        return (cycles);
000150  4620              MOV      r0,r4
;;;242    }
000152  bd70              POP      {r4-r6,pc}
;;;243    #endif
                          ENDP

                  OSProbe_TaskCreateHook PROC
;;;272    #if (OS_PROBE_HOOKS_EN > 0)
;;;273    void  OSProbe_TaskCreateHook (OS_TCB *ptcb)
000154  b510              PUSH     {r4,lr}
;;;274    {
000156  4604              MOV      r4,r0
;;;275        ptcb->OSTCBCyclesStart = OSProbe_TimeGetCycles();           /* Get the current start time for this task.            */
000158  f7fffffe          BL       OSProbe_TimeGetCycles
00015c  6420              STR      r0,[r4,#0x40]
;;;276        ptcb->OSTCBCyclesTot   = 0;                                 /* Update the task's total execution time.              */
00015e  2000              MOVS     r0,#0
000160  63e0              STR      r0,[r4,#0x3c]
;;;277    }
000162  bd10              POP      {r4,pc}
;;;278    #endif
                          ENDP

                  OSProbe_TaskSwHook PROC
;;;303    #if (OS_PROBE_HOOKS_EN > 0)
;;;304    void  OSProbe_TaskSwHook (void)
000164  b510              PUSH     {r4,lr}
;;;305    {
;;;306        INT32U  cycles;
;;;307    
;;;308    
;;;309        cycles                         = OSProbe_TimeGetCycles();   /* This task is done.                                   */
000166  f7fffffe          BL       OSProbe_TimeGetCycles
;;;310        OSTCBCur->OSTCBCyclesTot      += cycles - OSTCBCur->OSTCBCyclesStart;
00016a  4910              LDR      r1,|L1.428|
00016c  6809              LDR      r1,[r1,#0]  ; OSTCBCur
00016e  6c0b              LDR      r3,[r1,#0x40]
000170  6bca              LDR      r2,[r1,#0x3c]
000172  1ac3              SUBS     r3,r0,r3
000174  441a              ADD      r2,r2,r3
000176  63ca              STR      r2,[r1,#0x3c]
;;;311        OSTCBHighRdy->OSTCBCyclesStart = cycles;                    /* Save absolute #cycles at task activation.            */
000178  490d              LDR      r1,|L1.432|
00017a  6809              LDR      r1,[r1,#0]  ; OSTCBHighRdy
00017c  6408              STR      r0,[r1,#0x40]
;;;312    }
00017e  bd10              POP      {r4,pc}
;;;313    #endif
                          ENDP

                  OSProbe_TickHook PROC
;;;334    #if (OS_PROBE_HOOKS_EN > 0)
;;;335    void  OSProbe_TickHook (void)
000180  e7fe              B        OSProbe_TimeGetCycles
;;;336    {
;;;337        (void)OSProbe_TimeGetCycles();
;;;338    }
;;;339    #endif
                          ENDP

000182  0000              DCW      0x0000
                  |L1.388|
                          DCD      ||.bss||+0x50
                  |L1.392|
                          DCD      ||.bss||
                  |L1.396|
                          DCD      OSTCBTbl
                  |L1.400|
                          DCD      ||.data||
                  |L1.404|
                          DCD      ||.bss||+0x140
                  |L1.408|
                          DCD      OSProbe_Task
                  |L1.412|
00019c  50726f62          DCB      "Probe OS PlugIn",0
0001a0  65204f53
0001a4  20506c75
0001a8  67496e00
                  |L1.428|
                          DCD      OSTCBCur
                  |L1.432|
                          DCD      OSTCBHighRdy

                          AREA ||.bss||, DATA, NOINIT, ALIGN=6

                  cycles_dif
                          %        80
                  cycles_tot_last
                          %        80
                  OSProbe_TaskCPUUsage
                          %        80
                  OSProbe_TaskStkUsage
                          %        80
                  OSProbe_TaskStk
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  OSProbe_Delay
000000  0000              DCB      0x00,0x00
                  OSProbe_TmrCntsPrev
000002  0000              DCB      0x00,0x00
                  OSProbe_CallbackFnct
                          DCD      0x00000000
                  OSProbe_CyclesCtr
                          DCD      0x00000000
