; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\stm32f10x_rtc.o --depend=.\rvmdk\stm32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\stm32f10x_rtc.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_rtc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;46     *******************************************************************************/
;;;47     void RTC_ITConfig(u16 RTC_IT, FunctionalState NewState)
000000  4a40              LDR      r2,|L1.260|
;;;48     {
;;;49       /* Check the parameters */
;;;50       assert_param(IS_RTC_IT(RTC_IT));  
;;;51       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;52       
;;;53       if (NewState != DISABLE)
000002  b129              CBZ      r1,|L1.16|
;;;54       {
;;;55         RTC->CRH |= RTC_IT;
000004  f8b21800          LDRH     r1,[r2,#0x800]
000008  4308              ORRS     r0,r0,r1
00000a  f8a20800          STRH     r0,[r2,#0x800]
;;;56       }
;;;57       else
;;;58       {
;;;59         RTC->CRH &= (u16)~RTC_IT;
;;;60       }
;;;61     }
00000e  4770              BX       lr
                  |L1.16|
000010  f8b21800          LDRH     r1,[r2,#0x800]        ;59
000014  ea210000          BIC      r0,r1,r0              ;59
000018  f8a20800          STRH     r0,[r2,#0x800]        ;59
00001c  4770              BX       lr
;;;62     
                          ENDP

                  RTC_EnterConfigMode PROC
;;;69     *******************************************************************************/
;;;70     void RTC_EnterConfigMode(void)
00001e  483a              LDR      r0,|L1.264|
;;;71     {
;;;72       /* Set the CNF flag to enter in the Configuration Mode */
;;;73       RTC->CRL |= CRL_CNF_Set;
000020  8801              LDRH     r1,[r0,#0]
000022  f0410110          ORR      r1,r1,#0x10
000026  8001              STRH     r1,[r0,#0]
;;;74     }
000028  4770              BX       lr
;;;75     
                          ENDP

                  RTC_ExitConfigMode PROC
;;;82     *******************************************************************************/
;;;83     void RTC_ExitConfigMode(void)
00002a  4837              LDR      r0,|L1.264|
;;;84     {
;;;85       /* Reset the CNF flag to exit from the Configuration Mode */
;;;86       RTC->CRL &= CRL_CNF_Reset;
00002c  8801              LDRH     r1,[r0,#0]
00002e  f0210110          BIC      r1,r1,#0x10
000032  8001              STRH     r1,[r0,#0]
;;;87     }
000034  4770              BX       lr
;;;88     
                          ENDP

                  RTC_GetCounter PROC
;;;95     *******************************************************************************/
;;;96     u32 RTC_GetCounter(void)
000036  4935              LDR      r1,|L1.268|
;;;97     {
;;;98       u16 tmp = 0;
;;;99       tmp = RTC->CNTL;
000038  8888              LDRH     r0,[r1,#4]
;;;100    
;;;101      return (((u32)RTC->CNTH << 16 ) | tmp) ;
00003a  8809              LDRH     r1,[r1,#0]
00003c  ea404001          ORR      r0,r0,r1,LSL #16
;;;102    }
000040  4770              BX       lr
;;;103    
                          ENDP

                  RTC_SetCounter PROC
;;;110    *******************************************************************************/
;;;111    void RTC_SetCounter(u32 CounterValue)
000042  b500              PUSH     {lr}
;;;112    { 
000044  4602              MOV      r2,r0
;;;113      RTC_EnterConfigMode();
000046  f7fffffe          BL       RTC_EnterConfigMode
;;;114    
;;;115      /* Set RTC COUNTER MSB word */
;;;116      RTC->CNTH = CounterValue >> 16;
00004a  4830              LDR      r0,|L1.268|
00004c  0c11              LSRS     r1,r2,#16
00004e  8001              STRH     r1,[r0,#0]
;;;117      /* Set RTC COUNTER LSB word */
;;;118      RTC->CNTL = (CounterValue & RTC_LSB_Mask);
000050  8082              STRH     r2,[r0,#4]
;;;119    
;;;120      RTC_ExitConfigMode();
000052  f85deb04          POP      {lr}
000056  e7fe              B        RTC_ExitConfigMode
;;;121    }
;;;122    
                          ENDP

                  RTC_SetPrescaler PROC
;;;129    *******************************************************************************/
;;;130    void RTC_SetPrescaler(u32 PrescalerValue)
000058  b500              PUSH     {lr}
;;;131    {
00005a  4602              MOV      r2,r0
;;;132      /* Check the parameters */
;;;133      assert_param(IS_RTC_PRESCALER(PrescalerValue));
;;;134      
;;;135      RTC_EnterConfigMode();
00005c  f7fffffe          BL       RTC_EnterConfigMode
;;;136    
;;;137      /* Set RTC PRESCALER MSB word */
;;;138      RTC->PRLH = (PrescalerValue & PRLH_MSB_Mask) >> 16;
000060  482b              LDR      r0,|L1.272|
000062  f3c24103          UBFX     r1,r2,#16,#4
000066  8001              STRH     r1,[r0,#0]
;;;139      /* Set RTC PRESCALER LSB word */
;;;140      RTC->PRLL = (PrescalerValue & RTC_LSB_Mask);
000068  8082              STRH     r2,[r0,#4]
;;;141    
;;;142      RTC_ExitConfigMode();
00006a  f85deb04          POP      {lr}
00006e  e7fe              B        RTC_ExitConfigMode
;;;143    }
;;;144    
                          ENDP

                  RTC_SetAlarm PROC
;;;151    *******************************************************************************/
;;;152    void RTC_SetAlarm(u32 AlarmValue)
000070  b500              PUSH     {lr}
;;;153    {  
000072  4602              MOV      r2,r0
;;;154      RTC_EnterConfigMode();
000074  f7fffffe          BL       RTC_EnterConfigMode
;;;155    
;;;156      /* Set the ALARM MSB word */
;;;157      RTC->ALRH = AlarmValue >> 16;
000078  4826              LDR      r0,|L1.276|
00007a  0c11              LSRS     r1,r2,#16
00007c  8001              STRH     r1,[r0,#0]
;;;158      /* Set the ALARM LSB word */
;;;159      RTC->ALRL = (AlarmValue & RTC_LSB_Mask);
00007e  8082              STRH     r2,[r0,#4]
;;;160    
;;;161      RTC_ExitConfigMode();
000080  f85deb04          POP      {lr}
000084  e7fe              B        RTC_ExitConfigMode
;;;162    }
;;;163    
                          ENDP

                  RTC_GetDivider PROC
;;;170    *******************************************************************************/
;;;171    u32 RTC_GetDivider(void)
000086  4924              LDR      r1,|L1.280|
;;;172    {
;;;173      u32 tmp = 0x00;
;;;174    
;;;175      tmp = ((u32)RTC->DIVH & (u32)0x000F) << 16;
000088  8808              LDRH     r0,[r1,#0]
00008a  ea4f7000          LSL      r0,r0,#28
00008e  ea4f3010          LSR      r0,r0,#12
;;;176      tmp |= RTC->DIVL;
000092  8889              LDRH     r1,[r1,#4]
000094  ea410000          ORR      r0,r1,r0
;;;177    
;;;178      return tmp;
;;;179    }
000098  4770              BX       lr
;;;180    
                          ENDP

                  RTC_WaitForLastTask PROC
;;;188    *******************************************************************************/
;;;189    void RTC_WaitForLastTask(void)
00009a  481a              LDR      r0,|L1.260|
                  |L1.156|
;;;190    {
;;;191      /* Loop until RTOFF flag is set */
;;;192      while ((RTC->CRL & RTC_FLAG_RTOFF) == (u16)RESET)
00009c  f8b01804          LDRH     r1,[r0,#0x804]
0000a0  f0110f20          TST      r1,#0x20
0000a4  d0fa              BEQ      |L1.156|
;;;193      {
;;;194      }
;;;195    }
0000a6  4770              BX       lr
;;;196    
                          ENDP

                  RTC_WaitForSynchro PROC
;;;206    *******************************************************************************/
;;;207    void RTC_WaitForSynchro(void)
0000a8  4816              LDR      r0,|L1.260|
;;;208    {
;;;209      /* Clear RSF flag */
;;;210      RTC->CRL &= (u16)~RTC_FLAG_RSF;
0000aa  f8b01804          LDRH     r1,[r0,#0x804]
0000ae  f0210108          BIC      r1,r1,#8
0000b2  f8a01804          STRH     r1,[r0,#0x804]
                  |L1.182|
;;;211    
;;;212      /* Loop until RSF flag is set */
;;;213      while ((RTC->CRL & RTC_FLAG_RSF) == (u16)RESET)
0000b6  f8b01804          LDRH     r1,[r0,#0x804]
0000ba  f0110f08          TST      r1,#8
0000be  d0fa              BEQ      |L1.182|
;;;214      {
;;;215      }
;;;216    }
0000c0  4770              BX       lr
;;;217    
                          ENDP

                  RTC_GetFlagStatus PROC
;;;230    *******************************************************************************/
;;;231    FlagStatus RTC_GetFlagStatus(u16 RTC_FLAG)
0000c2  4601              MOV      r1,r0
;;;232    {
;;;233      FlagStatus bitstatus = RESET;
0000c4  2000              MOVS     r0,#0
;;;234      
;;;235      /* Check the parameters */
;;;236      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
;;;237      
;;;238      if ((RTC->CRL & RTC_FLAG) != (u16)RESET)
0000c6  4a10              LDR      r2,|L1.264|
0000c8  8812              LDRH     r2,[r2,#0]
0000ca  420a              TST      r2,r1
0000cc  d000              BEQ      |L1.208|
;;;239      {
;;;240        bitstatus = SET;
0000ce  2001              MOVS     r0,#1
                  |L1.208|
;;;241      }
;;;242      else
;;;243      {
;;;244        bitstatus = RESET;
;;;245      }
;;;246      return bitstatus;
;;;247    }
0000d0  4770              BX       lr
;;;248    
                          ENDP

                  RTC_ClearFlag PROC
;;;261    *******************************************************************************/
;;;262    void RTC_ClearFlag(u16 RTC_FLAG)
0000d2  490d              LDR      r1,|L1.264|
;;;263    {
;;;264      /* Check the parameters */
;;;265      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
;;;266        
;;;267      /* Clear the coressponding RTC flag */
;;;268      RTC->CRL &= (u16)~RTC_FLAG;
0000d4  880a              LDRH     r2,[r1,#0]
0000d6  ea220000          BIC      r0,r2,r0
0000da  8008              STRH     r0,[r1,#0]
;;;269    }
0000dc  4770              BX       lr
;;;270    
                          ENDP

                  RTC_GetITStatus PROC
;;;281    *******************************************************************************/
;;;282    ITStatus RTC_GetITStatus(u16 RTC_IT)
0000de  4a0f              LDR      r2,|L1.284|
;;;283    {
;;;284      ITStatus bitstatus = RESET;
;;;285    
;;;286      /* Check the parameters */
;;;287      assert_param(IS_RTC_GET_IT(RTC_IT)); 
;;;288      
;;;289      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
0000e0  8891              LDRH     r1,[r2,#4]
0000e2  ea010100          AND      r1,r1,r0
0000e6  b2c9              UXTB     r1,r1
;;;290    
;;;291      if (((RTC->CRH & RTC_IT) != (u16)RESET) && (bitstatus != (u16)RESET))
0000e8  8812              LDRH     r2,[r2,#0]
0000ea  4202              TST      r2,r0
0000ec  d002              BEQ      |L1.244|
0000ee  b109              CBZ      r1,|L1.244|
;;;292      {
;;;293        bitstatus = SET;
0000f0  2001              MOVS     r0,#1
;;;294      }
;;;295      else
;;;296      {
;;;297        bitstatus = RESET;
;;;298      }
;;;299      return bitstatus;
;;;300    }
0000f2  4770              BX       lr
                  |L1.244|
0000f4  2000              MOVS     r0,#0                 ;297
0000f6  4770              BX       lr
;;;301    
                          ENDP

                  RTC_ClearITPendingBit PROC
;;;312    *******************************************************************************/
;;;313    void RTC_ClearITPendingBit(u16 RTC_IT)
0000f8  4903              LDR      r1,|L1.264|
;;;314    {
;;;315      /* Check the parameters */
;;;316      assert_param(IS_RTC_IT(RTC_IT));  
;;;317      
;;;318      /* Clear the coressponding RTC pending bit */
;;;319      RTC->CRL &= (u16)~RTC_IT;
0000fa  880a              LDRH     r2,[r1,#0]
0000fc  ea220000          BIC      r0,r2,r0
000100  8008              STRH     r0,[r1,#0]
;;;320    }
000102  4770              BX       lr
;;;321    
                          ENDP

                  |L1.260|
                          DCD      0x40002000
                  |L1.264|
                          DCD      0x40002804
                  |L1.268|
                          DCD      0x40002818
                  |L1.272|
                          DCD      0x40002808
                  |L1.276|
                          DCD      0x40002820
                  |L1.280|
                          DCD      0x40002810
                  |L1.284|
                          DCD      0x40002800
