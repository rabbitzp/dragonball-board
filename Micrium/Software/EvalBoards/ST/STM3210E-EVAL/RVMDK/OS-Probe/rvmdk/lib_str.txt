; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lib_str.o --depend=.\rvmdk\lib_str.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lib_str.crf ..\..\..\..\..\uC-LIB\lib_str.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  Str_Len PROC
;;;139    
;;;140    CPU_SIZE_T  Str_Len (CPU_CHAR  *pstr)
000000  2100              MOVS     r1,#0
;;;141    {
;;;142        CPU_SIZE_T  len;
;;;143    
;;;144    
;;;145        len = 0;
;;;146        while (( pstr != (CPU_CHAR *)0) &&                          /* Calc str len until NULL ptr (see Note #2a) ...       */
000002  e001              B        |L1.8|
                  |L1.4|
;;;147               (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found      (see Note #2b).          */
;;;148            len++;
000004  1c49              ADDS     r1,r1,#1
;;;149            pstr++;
000006  1c40              ADDS     r0,r0,#1
                  |L1.8|
000008  b110              CBZ      r0,|L1.16|
00000a  7802              LDRB     r2,[r0,#0]            ;147
00000c  2a00              CMP      r2,#0                 ;147
00000e  d1f9              BNE      |L1.4|
                  |L1.16|
;;;150        }
;;;151    
;;;152        return (len);
000010  4608              MOV      r0,r1
;;;153    }
000012  4770              BX       lr
;;;154    
                          ENDP

                  Str_Copy PROC
;;;193    
;;;194    CPU_CHAR  *Str_Copy (CPU_CHAR  *pdest,
000014  b120              CBZ      r0,|L1.32|
;;;195                         CPU_CHAR  *psrc)
;;;196    {
;;;197        CPU_CHAR  *pstr;
;;;198        CPU_CHAR  *pstr_next;
;;;199    
;;;200                                                                    /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
;;;201        if (pdest == (CPU_CHAR *)0) {
;;;202            return  ((CPU_CHAR *)0);
;;;203        }
;;;204        if (psrc  == (CPU_CHAR *)0) {
000016  b129              CBZ      r1,|L1.36|
;;;205            return  ((CPU_CHAR *)0);
;;;206        }
;;;207    
;;;208    
;;;209        pstr      = pdest;
000018  4602              MOV      r2,r0
;;;210        pstr_next = pstr;
00001a  4610              MOV      r0,r2
;;;211        pstr_next++;
00001c  1c43              ADDS     r3,r0,#1
;;;212        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s) (see Note #2b) ...        */
00001e  e008              B        |L1.50|
                  |L1.32|
000020  2000              MOVS     r0,#0                 ;202
;;;213               ( psrc      != (CPU_CHAR *)0) &&
;;;214               (*psrc      != (CPU_CHAR  )0)) {                     /* ... or NULL char found     (see Note #2c).           */
;;;215           *pstr = *psrc;
;;;216            pstr++;
;;;217            pstr_next++;
;;;218            psrc++;
;;;219        }
;;;220    
;;;221       *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2b2).                    */
;;;222    
;;;223    
;;;224        return (pdest);
;;;225    }
000022  4770              BX       lr
                  |L1.36|
000024  2000              MOVS     r0,#0                 ;205
000026  4770              BX       lr
                  |L1.40|
000028  f882c000          STRB     r12,[r2,#0]           ;215
00002c  1c52              ADDS     r2,r2,#1              ;216
00002e  1c5b              ADDS     r3,r3,#1              ;217
000030  1c49              ADDS     r1,r1,#1              ;218
                  |L1.50|
000032  b12b              CBZ      r3,|L1.64|
000034  b121              CBZ      r1,|L1.64|
000036  f891c000          LDRB     r12,[r1,#0]           ;214
00003a  f1bc0f00          CMP      r12,#0                ;214
00003e  d1f3              BNE      |L1.40|
                  |L1.64|
000040  2100              MOVS     r1,#0                 ;221
000042  7011              STRB     r1,[r2,#0]            ;221
000044  4770              BX       lr
;;;226    
                          ENDP

                  Str_Copy_N PROC
;;;272    
;;;273    CPU_CHAR  *Str_Copy_N (CPU_CHAR    *pdest,
000046  b430              PUSH     {r4,r5}
;;;274                           CPU_CHAR    *psrc,
;;;275                           CPU_SIZE_T   len_max)
;;;276    {
;;;277        CPU_CHAR    *pstr;
;;;278        CPU_CHAR    *pstr_next;
;;;279        CPU_SIZE_T   len_copy;
;;;280    
;;;281                                                                    /* Rtn NULL if str ptr(s) NULL      (see Note #2a).     */
;;;282        if (pdest == (CPU_CHAR *)0) {
000048  b138              CBZ      r0,|L1.90|
;;;283            return  ((CPU_CHAR *)0);
;;;284        }
;;;285        if (psrc  == (CPU_CHAR *)0) {
00004a  b149              CBZ      r1,|L1.96|
;;;286            return  ((CPU_CHAR *)0);
;;;287        }
;;;288    
;;;289        if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if copy len equals zero (see Note #2d).     */
00004c  b15a              CBZ      r2,|L1.102|
;;;290            return  ((CPU_CHAR *)0);
;;;291        }
;;;292    
;;;293    
;;;294        pstr      = pdest;
00004e  4603              MOV      r3,r0
;;;295        pstr_next = pstr;
000050  4618              MOV      r0,r3
;;;296        pstr_next++;
000052  1c44              ADDS     r4,r0,#1
;;;297        len_copy  = 0;
000054  f04f0c00          MOV      r12,#0
;;;298    
;;;299        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s)  (see Note #2b)  ...      */
000058  e00e              B        |L1.120|
                  |L1.90|
;;;300               ( psrc      != (CPU_CHAR *)0) &&
;;;301               (*psrc      != (CPU_CHAR  )0) &&                     /* ... or NULL char found      (see Note #2c); ...      */
;;;302               ( len_copy  <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars copied (see Note #2d).          */
;;;303           *pstr = *psrc;
;;;304            pstr++;
;;;305            pstr_next++;
;;;306            psrc++;
;;;307            len_copy++;
;;;308        }
;;;309    
;;;310       *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2b2).                    */
;;;311    
;;;312    
;;;313        return (pdest);
;;;314    }
00005a  bc30              POP      {r4,r5}
00005c  2000              MOVS     r0,#0                 ;283
00005e  4770              BX       lr
                  |L1.96|
000060  bc30              POP      {r4,r5}
000062  2000              MOVS     r0,#0                 ;286
000064  4770              BX       lr
                  |L1.102|
000066  bc30              POP      {r4,r5}
000068  2000              MOVS     r0,#0                 ;290
00006a  4770              BX       lr
                  |L1.108|
00006c  701d              STRB     r5,[r3,#0]            ;303
00006e  1c5b              ADDS     r3,r3,#1              ;304
000070  1c64              ADDS     r4,r4,#1              ;305
000072  1c49              ADDS     r1,r1,#1              ;306
000074  f10c0c01          ADD      r12,r12,#1            ;307
                  |L1.120|
000078  b124              CBZ      r4,|L1.132|
00007a  b119              CBZ      r1,|L1.132|
00007c  780d              LDRB     r5,[r1,#0]            ;301
00007e  b10d              CBZ      r5,|L1.132|
000080  4594              CMP      r12,r2                ;302
000082  d3f3              BCC      |L1.108|
                  |L1.132|
000084  2100              MOVS     r1,#0                 ;310
000086  7019              STRB     r1,[r3,#0]            ;310
000088  bc30              POP      {r4,r5}
00008a  4770              BX       lr
;;;315    
                          ENDP

                  Str_Cat PROC
;;;357    
;;;358    CPU_CHAR  *Str_Cat (CPU_CHAR  *pdest,
00008c  b110              CBZ      r0,|L1.148|
;;;359                        CPU_CHAR  *pstr_cat)
;;;360    {
;;;361        CPU_CHAR  *pstr;
;;;362        CPU_CHAR  *pstr_next;
;;;363    
;;;364                                                                    /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
;;;365        if (pdest == (CPU_CHAR *)0) {
;;;366            return  ((CPU_CHAR *)0);
;;;367        }
;;;368        if (pstr_cat == (CPU_CHAR *)0) {
00008e  b119              CBZ      r1,|L1.152|
;;;369            return  ((CPU_CHAR *)0);
;;;370        }
;;;371    
;;;372    
;;;373        pstr = pdest;
000090  4602              MOV      r2,r0
;;;374        while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
000092  e004              B        |L1.158|
                  |L1.148|
000094  2000              MOVS     r0,#0                 ;366
;;;375               (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
;;;376            pstr++;
;;;377        }
;;;378        if (pstr == (CPU_CHAR *)0) {                                /* If NULL str overrun, rtn NULL (see Note #2b).        */
;;;379            return ((CPU_CHAR *)0);
;;;380        }
;;;381    
;;;382        pstr_next = pstr;
;;;383        pstr_next++;
;;;384        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s) (see Note #2c) ...         */
;;;385               ( pstr_cat  != (CPU_CHAR *)0) &&
;;;386               (*pstr_cat  != (CPU_CHAR  )0)) {                     /* ... or NULL char found    (see Note #2d).            */
;;;387           *pstr = *pstr_cat;
;;;388            pstr++;
;;;389            pstr_next++;
;;;390            pstr_cat++;
;;;391        }
;;;392    
;;;393       *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2c2).                    */
;;;394    
;;;395    
;;;396        return (pdest);
;;;397    }
000096  4770              BX       lr
                  |L1.152|
000098  2000              MOVS     r0,#0                 ;369
00009a  4770              BX       lr
                  |L1.156|
00009c  1c52              ADDS     r2,r2,#1              ;376
                  |L1.158|
00009e  b112              CBZ      r2,|L1.166|
0000a0  7813              LDRB     r3,[r2,#0]            ;375
0000a2  2b00              CMP      r3,#0                 ;375
0000a4  d1fa              BNE      |L1.156|
                  |L1.166|
0000a6  b10a              CBZ      r2,|L1.172|
0000a8  1c53              ADDS     r3,r2,#1              ;383
0000aa  e006              B        |L1.186|
                  |L1.172|
0000ac  2000              MOVS     r0,#0                 ;379
0000ae  4770              BX       lr
                  |L1.176|
0000b0  f882c000          STRB     r12,[r2,#0]           ;387
0000b4  1c52              ADDS     r2,r2,#1              ;388
0000b6  1c5b              ADDS     r3,r3,#1              ;389
0000b8  1c49              ADDS     r1,r1,#1              ;390
                  |L1.186|
0000ba  b12b              CBZ      r3,|L1.200|
0000bc  b121              CBZ      r1,|L1.200|
0000be  f891c000          LDRB     r12,[r1,#0]           ;386
0000c2  f1bc0f00          CMP      r12,#0                ;386
0000c6  d1f3              BNE      |L1.176|
                  |L1.200|
0000c8  2100              MOVS     r1,#0                 ;393
0000ca  7011              STRB     r1,[r2,#0]            ;393
0000cc  4770              BX       lr
;;;398    
                          ENDP

                  Str_Cat_N PROC
;;;447    /*$PAGE*/
;;;448    CPU_CHAR  *Str_Cat_N (CPU_CHAR    *pdest,
0000ce  b430              PUSH     {r4,r5}
;;;449                          CPU_CHAR    *pstr_cat,
;;;450                          CPU_SIZE_T   len_max)
;;;451    {
;;;452        CPU_CHAR    *pstr;
;;;453        CPU_CHAR    *pstr_next;
;;;454        CPU_SIZE_T   len_cat;
;;;455    
;;;456                                                                    /* Rtn NULL if str ptr(s) NULL     (see Note #2a).      */
;;;457        if (pdest == (CPU_CHAR *)0) {
0000d0  b118              CBZ      r0,|L1.218|
;;;458            return  ((CPU_CHAR *)0);
;;;459        }
;;;460        if (pstr_cat == (CPU_CHAR *)0) {
0000d2  b129              CBZ      r1,|L1.224|
;;;461            return  ((CPU_CHAR *)0);
;;;462        }
;;;463    
;;;464        if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if cat len equals zero (see Note #2e).      */
0000d4  b13a              CBZ      r2,|L1.230|
;;;465            return  ((CPU_CHAR *)0);
;;;466        }
;;;467    
;;;468    
;;;469        pstr = pdest;
0000d6  4603              MOV      r3,r0
;;;470        while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
0000d8  e009              B        |L1.238|
                  |L1.218|
;;;471               (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
;;;472            pstr++;
;;;473        }
;;;474        if (pstr == (CPU_CHAR *)0) {                                /* If NULL str overrun, rtn NULL (see Note #2b).        */
;;;475            return ((CPU_CHAR *)0);
;;;476        }
;;;477    
;;;478        pstr_next = pstr;
;;;479        pstr_next++;
;;;480        len_cat   = 0;
;;;481    
;;;482        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s)  (see Note #2c)  ...       */
;;;483               ( pstr_cat  != (CPU_CHAR *)0) &&
;;;484               (*pstr_cat  != (CPU_CHAR  )0) &&                     /* ... or NULL char found     (see Note #2d); ...       */
;;;485               ( len_cat   <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars cat'd (see Note #2d).           */
;;;486           *pstr = *pstr_cat;
;;;487            pstr++;
;;;488            pstr_next++;
;;;489            pstr_cat++;
;;;490            len_cat++;
;;;491        }
;;;492    
;;;493       *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2c2).                    */
;;;494    
;;;495    
;;;496        return (pdest);
;;;497    }
0000da  bc30              POP      {r4,r5}
0000dc  2000              MOVS     r0,#0                 ;458
0000de  4770              BX       lr
                  |L1.224|
0000e0  bc30              POP      {r4,r5}
0000e2  2000              MOVS     r0,#0                 ;461
0000e4  4770              BX       lr
                  |L1.230|
0000e6  bc30              POP      {r4,r5}
0000e8  2000              MOVS     r0,#0                 ;465
0000ea  4770              BX       lr
                  |L1.236|
0000ec  1c5b              ADDS     r3,r3,#1              ;472
                  |L1.238|
0000ee  b123              CBZ      r3,|L1.250|
0000f0  f893c000          LDRB     r12,[r3,#0]           ;471
0000f4  f1bc0f00          CMP      r12,#0                ;471
0000f8  d1f8              BNE      |L1.236|
                  |L1.250|
0000fa  b11b              CBZ      r3,|L1.260|
0000fc  1c5c              ADDS     r4,r3,#1              ;479
0000fe  f04f0c00          MOV      r12,#0                ;480
000102  e008              B        |L1.278|
                  |L1.260|
000104  bc30              POP      {r4,r5}
000106  2000              MOVS     r0,#0                 ;475
000108  4770              BX       lr
                  |L1.266|
00010a  701d              STRB     r5,[r3,#0]            ;486
00010c  1c5b              ADDS     r3,r3,#1              ;487
00010e  1c64              ADDS     r4,r4,#1              ;488
000110  1c49              ADDS     r1,r1,#1              ;489
000112  f10c0c01          ADD      r12,r12,#1            ;490
                  |L1.278|
000116  b124              CBZ      r4,|L1.290|
000118  b119              CBZ      r1,|L1.290|
00011a  780d              LDRB     r5,[r1,#0]            ;484
00011c  b10d              CBZ      r5,|L1.290|
00011e  4594              CMP      r12,r2                ;485
000120  d3f3              BCC      |L1.266|
                  |L1.290|
000122  2100              MOVS     r1,#0                 ;493
000124  7019              STRB     r1,[r3,#0]            ;493
000126  bc30              POP      {r4,r5}
000128  4770              BX       lr
;;;498    
                          ENDP

                  Str_Cmp PROC
;;;559    /*$PAGE*/
;;;560    CPU_INT16S  Str_Cmp (CPU_CHAR  *p1_str,
00012a  b410              PUSH     {r4}
;;;561                         CPU_CHAR  *p2_str)
;;;562    {
;;;563        CPU_CHAR    *p1_str_next;
;;;564        CPU_CHAR    *p2_str_next;
;;;565        CPU_INT16S   cmp_val;
;;;566    
;;;567    
;;;568        if (p1_str == (CPU_CHAR *)0) {
00012c  b118              CBZ      r0,|L1.310|
;;;569            if (p2_str == (CPU_CHAR *)0) {
;;;570                return ((CPU_INT16S)0);                             /* If BOTH str ptrs NULL, rtn 0 (see Note #2a).         */
;;;571            }
;;;572            cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
;;;573            return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #2b).   */
;;;574        }
;;;575        if (p2_str == (CPU_CHAR *)0) {
00012e  b151              CBZ      r1,|L1.326|
;;;576            cmp_val = (CPU_INT16S)(*p1_str);
;;;577            return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #2c).   */
;;;578        }
;;;579    
;;;580    
;;;581        p1_str_next = p1_str;
;;;582        p2_str_next = p2_str;
;;;583        p1_str_next++;
000130  1c42              ADDS     r2,r0,#1
;;;584        p2_str_next++;
000132  1c4b              ADDS     r3,r1,#1
;;;585        while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
000134  e00e              B        |L1.340|
                  |L1.310|
000136  b119              CBZ      r1,|L1.320|
000138  7808              LDRB     r0,[r1,#0]            ;572
00013a  4240              RSBS     r0,r0,#0              ;572
;;;586               (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
;;;587               ( p1_str_next != (CPU_CHAR *)0) &&                   /* .. or NULL ptr(s) found (see Notes #2f, #2g, & #2h). */
;;;588               ( p2_str_next != (CPU_CHAR *)0)) {
;;;589            p1_str_next++;
;;;590            p2_str_next++;
;;;591            p1_str++;
;;;592            p2_str++;
;;;593        }
;;;594    
;;;595    
;;;596        if (*p1_str != *p2_str) {                                           /* If strs NOT identical, ...                   */
;;;597             cmp_val = (CPU_INT16S)(*p1_str) - (CPU_INT16S)(*p2_str);       /* ... calc & rtn char diff  (see Note #2d1).   */
;;;598    
;;;599        } else if (*p1_str == (CPU_CHAR)0) {                                /* If NULL char(s) found, ...                   */
;;;600             cmp_val = 0;                                                   /* ... strs identical; rtn 0 (see Note #2e).    */
;;;601    
;;;602        } else {
;;;603            if (p1_str_next == (CPU_CHAR *)0) {
;;;604                if (p2_str_next == (CPU_CHAR *)0) {                         /* If BOTH next str ptrs NULL, ...              */
;;;605                    cmp_val = (CPU_INT16S)0;                                /* ... rtn 0                   (see Note #2f).  */
;;;606                } else {                                                    /* If p1_str_next NULL, ...                     */
;;;607                    cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_next);   /* ... rtn neg p2_str_next val (see Note #2g).  */
;;;608                }
;;;609            } else {                                                        /* If p2_str_next NULL, ...                     */
;;;610                cmp_val = (CPU_INT16S)(*p1_str_next);                       /* ... rtn pos p1_str_next val (see Note #2h).  */
;;;611            }
;;;612        }
;;;613    
;;;614    
;;;615        return (cmp_val);
;;;616    }
00013c  bc10              POP      {r4}
00013e  4770              BX       lr
                  |L1.320|
000140  bc10              POP      {r4}
000142  2000              MOVS     r0,#0                 ;570
000144  4770              BX       lr
                  |L1.326|
000146  7800              LDRB     r0,[r0,#0]            ;576
000148  bc10              POP      {r4}
00014a  4770              BX       lr
                  |L1.332|
00014c  1c52              ADDS     r2,r2,#1              ;589
00014e  1c5b              ADDS     r3,r3,#1              ;590
000150  1c40              ADDS     r0,r0,#1              ;591
000152  1c49              ADDS     r1,r1,#1              ;592
                  |L1.340|
000154  f890c000          LDRB     r12,[r0,#0]           ;585
000158  780c              LDRB     r4,[r1,#0]            ;585
00015a  45a4              CMP      r12,r4                ;585
00015c  d105              BNE      |L1.362|
00015e  f1bc0f00          CMP      r12,#0                ;586
000162  d002              BEQ      |L1.362|
000164  b10a              CBZ      r2,|L1.362|
000166  2b00              CMP      r3,#0                 ;588
000168  d1f0              BNE      |L1.332|
                  |L1.362|
00016a  7804              LDRB     r4,[r0,#0]            ;596
00016c  7808              LDRB     r0,[r1,#0]            ;596
00016e  4284              CMP      r4,r0                 ;596
000170  d003              BEQ      |L1.378|
000172  bc10              POP      {r4}
000174  ebac0000          SUB      r0,r12,r0             ;597
000178  4770              BX       lr
                  |L1.378|
00017a  f1bc0f00          CMP      r12,#0                ;599
00017e  d003              BEQ      |L1.392|
000180  b12a              CBZ      r2,|L1.398|
000182  7810              LDRB     r0,[r2,#0]            ;610
000184  bc10              POP      {r4}
000186  4770              BX       lr
                  |L1.392|
000188  bc10              POP      {r4}
00018a  2000              MOVS     r0,#0                 ;600
00018c  4770              BX       lr
                  |L1.398|
00018e  b11b              CBZ      r3,|L1.408|
000190  7818              LDRB     r0,[r3,#0]            ;607
000192  bc10              POP      {r4}
000194  4240              RSBS     r0,r0,#0              ;607
000196  4770              BX       lr
                  |L1.408|
000198  bc10              POP      {r4}
00019a  2000              MOVS     r0,#0                 ;605
00019c  4770              BX       lr
;;;617    
                          ENDP

                  Str_Cmp_N PROC
;;;686    /*$PAGE*/
;;;687    CPU_INT16S  Str_Cmp_N (CPU_CHAR    *p1_str,
00019e  b470              PUSH     {r4-r6}
;;;688                           CPU_CHAR    *p2_str,
;;;689                           CPU_SIZE_T   len_max)
;;;690    {
;;;691        CPU_CHAR    *p1_str_next;
;;;692        CPU_CHAR    *p2_str_next;
;;;693        CPU_INT16S   cmp_val;
;;;694        CPU_SIZE_T   cmp_len;
;;;695    
;;;696    
;;;697        if (len_max == 0) {                                         /* If cmp len equals zero, rtn 0      (see Note #2i).   */
0001a0  b132              CBZ      r2,|L1.432|
;;;698            return ((CPU_INT16S)0);
;;;699        }
;;;700    
;;;701        if (p1_str == (CPU_CHAR *)0) {
0001a2  b140              CBZ      r0,|L1.438|
;;;702            if (p2_str == (CPU_CHAR *)0) {
;;;703                return ((CPU_INT16S)0);                             /* If BOTH str ptrs NULL,  rtn 0      (see Note #2a).   */
;;;704            }
;;;705            cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
;;;706            return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #2b).   */
;;;707        }
;;;708        if (p2_str == (CPU_CHAR *)0) {
0001a4  b179              CBZ      r1,|L1.454|
;;;709            cmp_val = (CPU_INT16S)(*p1_str);
;;;710            return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #2c).   */
;;;711        }
;;;712    
;;;713    
;;;714        p1_str_next = p1_str;
;;;715        p2_str_next = p2_str;
;;;716        p1_str_next++;
0001a6  1c43              ADDS     r3,r0,#1
;;;717        p2_str_next++;
0001a8  f1010c01          ADD      r12,r1,#1
;;;718        cmp_len     = 0;
0001ac  2400              MOVS     r4,#0
;;;719        while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
0001ae  e013              B        |L1.472|
                  |L1.432|
;;;720               (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
;;;721               ( p1_str_next != (CPU_CHAR *)0) &&                   /* .. or NULL ptr(s) found (see Notes #2f, #2g, & #2h); */
;;;722               ( p2_str_next != (CPU_CHAR *)0) &&
;;;723               ( cmp_len     <  (CPU_SIZE_T)len_max)) {             /* .. or len nbr chars cmp'd        (see Note #2j).     */
;;;724            p1_str_next++;
;;;725            p2_str_next++;
;;;726            p1_str++;
;;;727            p2_str++;
;;;728            cmp_len++;
;;;729        }
;;;730    
;;;731    
;;;732        if (cmp_len == len_max) {                                           /* If strs     identical for len nbr of chars,  */
;;;733            return ((CPU_INT16S)0);                                         /* ... rtn 0 (see Note #2j).                    */
;;;734        }
;;;735    
;;;736        if (*p1_str != *p2_str) {                                           /* If strs NOT identical, ...                   */
;;;737             cmp_val = (CPU_INT16S)(*p1_str) - (CPU_INT16S)(*p2_str);       /* ... calc & rtn char diff  (see Note #2d1).   */
;;;738    
;;;739        } else if (*p1_str == (CPU_CHAR)0) {                                /* If NULL char(s) found, ...                   */
;;;740             cmp_val = 0;                                                   /* ... strs identical; rtn 0 (see Note #2e).    */
;;;741    
;;;742        } else {
;;;743            if (p1_str_next == (CPU_CHAR *)0) {
;;;744                if (p2_str_next == (CPU_CHAR *)0) {                         /* If BOTH next str ptrs NULL, ...              */
;;;745                    cmp_val = (CPU_INT16S)0;                                /* ... rtn 0                   (see Note #2f).  */
;;;746                } else {                                                    /* If p1_str_next NULL, ...                     */
;;;747                    cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_next);   /* ... rtn neg p2_str_next val (see Note #2g).  */
;;;748                }
;;;749            } else {                                                        /* If p2_str_next NULL, ...                     */
;;;750                cmp_val = (CPU_INT16S)(*p1_str_next);                       /* ... rtn pos p1_str_next val (see Note #2h).  */
;;;751            }
;;;752        }
;;;753    
;;;754    
;;;755        return (cmp_val);
;;;756    }
0001b0  bc70              POP      {r4-r6}
0001b2  2000              MOVS     r0,#0                 ;698
0001b4  4770              BX       lr
                  |L1.438|
0001b6  b119              CBZ      r1,|L1.448|
0001b8  7808              LDRB     r0,[r1,#0]            ;705
0001ba  4240              RSBS     r0,r0,#0              ;705
0001bc  bc70              POP      {r4-r6}
0001be  4770              BX       lr
                  |L1.448|
0001c0  bc70              POP      {r4-r6}
0001c2  2000              MOVS     r0,#0                 ;703
0001c4  4770              BX       lr
                  |L1.454|
0001c6  7800              LDRB     r0,[r0,#0]            ;709
0001c8  bc70              POP      {r4-r6}
0001ca  4770              BX       lr
                  |L1.460|
0001cc  1c5b              ADDS     r3,r3,#1              ;724
0001ce  f10c0c01          ADD      r12,r12,#1            ;725
0001d2  1c40              ADDS     r0,r0,#1              ;726
0001d4  1c49              ADDS     r1,r1,#1              ;727
0001d6  1c64              ADDS     r4,r4,#1              ;728
                  |L1.472|
0001d8  7805              LDRB     r5,[r0,#0]            ;719
0001da  780e              LDRB     r6,[r1,#0]            ;719
0001dc  42b5              CMP      r5,r6                 ;719
0001de  d106              BNE      |L1.494|
0001e0  b12d              CBZ      r5,|L1.494|
0001e2  b123              CBZ      r3,|L1.494|
0001e4  f1bc0f00          CMP      r12,#0                ;722
0001e8  d001              BEQ      |L1.494|
0001ea  4294              CMP      r4,r2                 ;723
0001ec  d3ee              BCC      |L1.460|
                  |L1.494|
0001ee  4294              CMP      r4,r2                 ;732
0001f0  d102              BNE      |L1.504|
0001f2  bc70              POP      {r4-r6}
0001f4  2000              MOVS     r0,#0                 ;733
0001f6  4770              BX       lr
                  |L1.504|
0001f8  7802              LDRB     r2,[r0,#0]            ;736
0001fa  7808              LDRB     r0,[r1,#0]            ;736
0001fc  4282              CMP      r2,r0                 ;736
0001fe  d002              BEQ      |L1.518|
000200  1a28              SUBS     r0,r5,r0              ;737
000202  bc70              POP      {r4-r6}
000204  4770              BX       lr
                  |L1.518|
000206  b11d              CBZ      r5,|L1.528|
000208  b12b              CBZ      r3,|L1.534|
00020a  7818              LDRB     r0,[r3,#0]            ;750
00020c  bc70              POP      {r4-r6}
00020e  4770              BX       lr
                  |L1.528|
000210  bc70              POP      {r4-r6}
000212  2000              MOVS     r0,#0                 ;740
000214  4770              BX       lr
                  |L1.534|
000216  f1bc0f00          CMP      r12,#0                ;744
00021a  d004              BEQ      |L1.550|
00021c  f89c0000          LDRB     r0,[r12,#0]           ;747
000220  bc70              POP      {r4-r6}
000222  4240              RSBS     r0,r0,#0              ;747
000224  4770              BX       lr
                  |L1.550|
000226  bc70              POP      {r4-r6}
000228  2000              MOVS     r0,#0                 ;745
00022a  4770              BX       lr
;;;757    
                          ENDP

                  Str_Char PROC
;;;795    
;;;796    CPU_CHAR  *Str_Char (CPU_CHAR  *pstr,
00022c  b108              CBZ      r0,|L1.562|
;;;797                         CPU_CHAR   srch_char)
;;;798    {
;;;799        CPU_CHAR  *pstr_next;
;;;800    
;;;801    
;;;802        if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL (see Note #2a).        */
;;;803            return ((CPU_CHAR *)0);
;;;804        }
;;;805    
;;;806    
;;;807        pstr_next = pstr;
;;;808        pstr_next++;
00022e  1c42              ADDS     r2,r0,#1
;;;809        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Srch str until NULL ptr(s) (see Note #2b) ...        */
000230  e003              B        |L1.570|
                  |L1.562|
000232  2000              MOVS     r0,#0                 ;803
                  |L1.564|
;;;810               (*pstr      != (CPU_CHAR  )0) &&                     /* ... or NULL char           (see Note #2c) ...        */
;;;811               (*pstr      != (CPU_CHAR  )srch_char)) {             /* ... or srch char found     (see Note #2d).           */
;;;812            pstr++;
;;;813            pstr_next++;
;;;814        }
;;;815    
;;;816    
;;;817        if (*pstr != srch_char) {                                   /* If srch char NOT found, str points to NULL; ...      */
;;;818            return ((CPU_CHAR *)0);                                 /* ... rtn NULL (see Notes #2b & #2c).                  */
;;;819        }
;;;820    
;;;821        return (pstr);                                              /* Else rtn ptr to found srch char (see Note #2d).      */
;;;822    }
000234  4770              BX       lr
                  |L1.566|
000236  1c40              ADDS     r0,r0,#1              ;812
000238  1c52              ADDS     r2,r2,#1              ;813
                  |L1.570|
00023a  b11a              CBZ      r2,|L1.580|
00023c  7803              LDRB     r3,[r0,#0]            ;810
00023e  b10b              CBZ      r3,|L1.580|
000240  428b              CMP      r3,r1                 ;811
000242  d1f8              BNE      |L1.566|
                  |L1.580|
000244  7802              LDRB     r2,[r0,#0]            ;817
000246  428a              CMP      r2,r1                 ;817
000248  d0f4              BEQ      |L1.564|
00024a  2000              MOVS     r0,#0                 ;818
00024c  4770              BX       lr
;;;823    
                          ENDP

                  Str_Char_N PROC
;;;871    
;;;872    CPU_CHAR  *Str_Char_N (CPU_CHAR    *pstr,
00024e  b410              PUSH     {r4}
;;;873                           CPU_SIZE_T   len_max,
;;;874                           CPU_CHAR     srch_char)
;;;875    {
;;;876        CPU_CHAR    *pstr_next;
;;;877        CPU_SIZE_T   len_srch;
;;;878    
;;;879    
;;;880        if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL    (see Note #2a).     */
000250  b120              CBZ      r0,|L1.604|
;;;881            return ((CPU_CHAR *)0);
;;;882        }
;;;883    
;;;884        if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if srch len equals zero (see Note #2e).     */
000252  b131              CBZ      r1,|L1.610|
;;;885            return ((CPU_CHAR *)0);
;;;886        }
;;;887    
;;;888    
;;;889        pstr_next = pstr;
;;;890        pstr_next++;
000254  f1000c01          ADD      r12,r0,#1
;;;891        len_srch  = 0;
000258  2300              MOVS     r3,#0
;;;892        while (( pstr_next != (CPU_CHAR *)0)         &&             /* Srch str until NULL ptr(s)  (see Note #2b)  ...      */
00025a  e009              B        |L1.624|
                  |L1.604|
;;;893               (*pstr      != (CPU_CHAR  )0)         &&             /* ... or NULL char            (see Note #2c)  ...      */
;;;894               (*pstr      != (CPU_CHAR  )srch_char) &&             /* ... or srch char found      (see Note #2d); ...      */
;;;895               ( len_srch  <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars srch'd (see Note #2e).          */
;;;896            pstr++;
;;;897            pstr_next++;
;;;898            len_srch++;
;;;899        }
;;;900    
;;;901    
;;;902        if (*pstr != srch_char) {                                   /* If srch char NOT found, str points to NULL; ...      */
;;;903            return ((CPU_CHAR *)0);                                 /* ... rtn NULL (see Notes #2b & #2c).                  */
;;;904        }
;;;905    
;;;906        return (pstr);                                              /* Else rtn ptr to found srch char (see Note #2d).      */
;;;907    }
00025c  bc10              POP      {r4}
00025e  2000              MOVS     r0,#0                 ;881
000260  4770              BX       lr
                  |L1.610|
000262  2000              MOVS     r0,#0                 ;885
                  |L1.612|
000264  bc10              POP      {r4}
000266  4770              BX       lr
                  |L1.616|
000268  1c40              ADDS     r0,r0,#1              ;896
00026a  f10c0c01          ADD      r12,r12,#1            ;897
00026e  1c5b              ADDS     r3,r3,#1              ;898
                  |L1.624|
000270  f1bc0f00          CMP      r12,#0                ;892
000274  d005              BEQ      |L1.642|
000276  7804              LDRB     r4,[r0,#0]            ;893
000278  b11c              CBZ      r4,|L1.642|
00027a  4294              CMP      r4,r2                 ;894
00027c  d001              BEQ      |L1.642|
00027e  428b              CMP      r3,r1                 ;895
000280  d3f2              BCC      |L1.616|
                  |L1.642|
000282  7801              LDRB     r1,[r0,#0]            ;902
000284  4291              CMP      r1,r2                 ;902
000286  d0ed              BEQ      |L1.612|
000288  bc10              POP      {r4}
00028a  2000              MOVS     r0,#0                 ;903
00028c  4770              BX       lr
;;;908    
                          ENDP

                  Str_Char_Last PROC
;;;947    
;;;948    CPU_CHAR  *Str_Char_Last (CPU_CHAR  *pstr,
00028e  b510              PUSH     {r4,lr}
;;;949                              CPU_CHAR   srch_char)
;;;950    {
000290  4603              MOV      r3,r0
000292  460c              MOV      r4,r1
;;;951        CPU_CHAR    *pstr_next;
;;;952        CPU_SIZE_T   str_len;
;;;953    
;;;954    
;;;955        if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL (see Note #2a).        */
000294  b123              CBZ      r3,|L1.672|
;;;956            return ((CPU_CHAR *)0);
;;;957        }
;;;958    
;;;959    
;;;960        pstr_next  = pstr;
;;;961        str_len    = Str_Len(pstr);
000296  4618              MOV      r0,r3
000298  f7fffffe          BL       Str_Len
;;;962        pstr_next += str_len;
00029c  4418              ADD      r0,r0,r3
;;;963        while (( pstr_next != pstr) &&                              /* Srch str from end until beg (see Note #2c) ...       */
00029e  e002              B        |L1.678|
                  |L1.672|
0002a0  2000              MOVS     r0,#0                 ;956
                  |L1.674|
;;;964               (*pstr_next != srch_char)) {                         /* ... until srch char found   (see Note #2d).          */
;;;965            pstr_next--;
;;;966        }
;;;967    
;;;968    
;;;969        if (*pstr_next != srch_char) {                              /* If srch char NOT found, str points to NULL; ...      */
;;;970            return ((CPU_CHAR *)0);                                 /* ... rtn NULL (see Notes #2b & #2c).                  */
;;;971        }
;;;972    
;;;973        return (pstr_next);                                         /* Else rtn ptr to found srch char (see Note #2d).      */
;;;974    }
0002a2  bd10              POP      {r4,pc}
                  |L1.676|
0002a4  1e40              SUBS     r0,r0,#1              ;965
                  |L1.678|
0002a6  4298              CMP      r0,r3                 ;963
0002a8  d002              BEQ      |L1.688|
0002aa  7802              LDRB     r2,[r0,#0]            ;964
0002ac  42a2              CMP      r2,r4                 ;964
0002ae  d1f9              BNE      |L1.676|
                  |L1.688|
0002b0  7801              LDRB     r1,[r0,#0]            ;969
0002b2  42a1              CMP      r1,r4                 ;969
0002b4  d0f5              BEQ      |L1.674|
0002b6  2000              MOVS     r0,#0                 ;970
0002b8  bd10              POP      {r4,pc}
;;;975    
                          ENDP

                  Str_Str PROC
;;;1017   
;;;1018   CPU_CHAR  *Str_Str (CPU_CHAR  *pstr,
0002ba  e92d43f0          PUSH     {r4-r9,lr}
;;;1019                       CPU_CHAR  *psrch_str)
;;;1020   {
0002be  4605              MOV      r5,r0
0002c0  4689              MOV      r9,r1
;;;1021       CPU_SIZE_T    str_len;
;;;1022       CPU_SIZE_T    srch_str_len;
;;;1023       CPU_SIZE_T    srch_len;
;;;1024       CPU_SIZE_T    srch_ix;
;;;1025       CPU_BOOLEAN   srch_done;
;;;1026       CPU_INT16S    srch_cmp;
;;;1027       CPU_CHAR     *pstr_srch_ix;
;;;1028   
;;;1029                                                                   /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
;;;1030       if (pstr == (CPU_CHAR *)0) {
0002c2  b17d              CBZ      r5,|L1.740|
;;;1031           return ((CPU_CHAR *)0);
;;;1032       }
;;;1033       if (psrch_str == (CPU_CHAR *)0) {
0002c4  f1b90f00          CMP      r9,#0
0002c8  d00f              BEQ      |L1.746|
;;;1034           return ((CPU_CHAR *)0);
;;;1035       }
;;;1036   
;;;1037   
;;;1038       str_len      = Str_Len(pstr);
0002ca  4628              MOV      r0,r5
0002cc  f7fffffe          BL       Str_Len
0002d0  4604              MOV      r4,r0
;;;1039       srch_str_len = Str_Len(psrch_str);
0002d2  4648              MOV      r0,r9
0002d4  f7fffffe          BL       Str_Len
0002d8  4606              MOV      r6,r0
;;;1040       if (srch_str_len > str_len) {                               /* If srch str len > str len, rtn NULL  (see Note #2b). */
0002da  42a6              CMP      r6,r4
0002dc  d908              BLS      |L1.752|
;;;1041           return ((CPU_CHAR *)0);
0002de  2000              MOVS     r0,#0
;;;1042       }
;;;1043       if (srch_str_len == 0) {                                    /* If srch str len = 0, srch str equal NULL str; ...    */
;;;1044           pstr_srch_ix = (CPU_CHAR *)(pstr + str_len);            /* ... rtn ptr to NULL str found in str (see Note #2c). */
;;;1045           return (pstr_srch_ix);
;;;1046       }
;;;1047   
;;;1048       srch_len  = str_len - srch_str_len;                         /* Determine srch len (see Note #2d1).                  */
;;;1049       srch_ix   = 0;
;;;1050       srch_done = DEF_NO;
;;;1051       while ((srch_done == DEF_NO) && (srch_ix <= srch_len)) {
;;;1052           pstr_srch_ix = (CPU_CHAR *)(pstr + srch_ix);
;;;1053           srch_cmp     =  Str_Cmp_N(pstr_srch_ix, psrch_str, srch_str_len);
;;;1054           srch_done    = (srch_cmp == 0) ? DEF_YES : DEF_NO;
;;;1055           srch_ix++;
;;;1056       }
;;;1057   
;;;1058   
;;;1059       if (srch_cmp != 0) {                                        /* If srch str NOT found, rtn NULL  (see Note #2d).     */
;;;1060           return ((CPU_CHAR *)0);
;;;1061       }
;;;1062   
;;;1063       return (pstr_srch_ix);                                      /* Rtn ptr to srch str found in str (see Note #2e).     */
;;;1064   }
0002e0  e8bd83f0          POP      {r4-r9,pc}
                  |L1.740|
0002e4  2000              MOVS     r0,#0                 ;1031
0002e6  e8bd83f0          POP      {r4-r9,pc}
                  |L1.746|
0002ea  2000              MOVS     r0,#0                 ;1034
0002ec  e8bd83f0          POP      {r4-r9,pc}
                  |L1.752|
0002f0  b11e              CBZ      r6,|L1.762|
0002f2  1ba7              SUBS     r7,r4,r6              ;1048
0002f4  2400              MOVS     r4,#0                 ;1049
0002f6  2000              MOVS     r0,#0                 ;1050
0002f8  e00d              B        |L1.790|
                  |L1.762|
0002fa  1928              ADDS     r0,r5,r4              ;1044
0002fc  e8bd83f0          POP      {r4-r9,pc}
                  |L1.768|
000300  eb050804          ADD      r8,r5,r4              ;1052
000304  4632              MOV      r2,r6                 ;1053
000306  4649              MOV      r1,r9                 ;1053
000308  4640              MOV      r0,r8                 ;1053
00030a  f7fffffe          BL       Str_Cmp_N
00030e  4603              MOV      r3,r0                 ;1053
000310  b11b              CBZ      r3,|L1.794|
000312  2000              MOVS     r0,#0                 ;1054
                  |L1.788|
000314  1c64              ADDS     r4,r4,#1              ;1055
                  |L1.790|
000316  b110              CBZ      r0,|L1.798|
000318  e003              B        |L1.802|
                  |L1.794|
00031a  2001              MOVS     r0,#1                 ;1054
00031c  e7fa              B        |L1.788|
                  |L1.798|
00031e  42bc              CMP      r4,r7                 ;1051
000320  d9ee              BLS      |L1.768|
                  |L1.802|
000322  b113              CBZ      r3,|L1.810|
000324  2000              MOVS     r0,#0                 ;1060
000326  e8bd83f0          POP      {r4-r9,pc}
                  |L1.810|
00032a  4640              MOV      r0,r8                 ;1063
00032c  e8bd83f0          POP      {r4-r9,pc}
;;;1065   
                          ENDP

