; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\os_mbox.o --depend=.\rvmdk\os_mbox.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\os_mbox.crf ..\..\..\..\..\uCOS-II\Source\os_mbox.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSMboxAccept PROC
;;;46     #if OS_MBOX_ACCEPT_EN > 0
;;;47     void  *OSMboxAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;48     {
000002  4604              MOV      r4,r0
;;;49         void      *pmsg;
;;;50     #if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
;;;51         OS_CPU_SR  cpu_sr = 0;
;;;52     #endif
;;;53     
;;;54     
;;;55     
;;;56     #if OS_ARG_CHK_EN > 0
;;;57         if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
;;;58             return ((void *)0);
;;;59         }
;;;60     #endif
;;;61         if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
000004  7820              LDRB     r0,[r4,#0]
000006  2801              CMP      r0,#1
000008  d001              BEQ      |L1.14|
;;;62             return ((void *)0);
00000a  2000              MOVS     r0,#0
;;;63         }
;;;64         OS_ENTER_CRITICAL();
;;;65         pmsg               = pevent->OSEventPtr;
;;;66         pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
;;;67         OS_EXIT_CRITICAL();
;;;68         return (pmsg);                                        /* Return the message received (or NULL)     */
;;;69     }
00000c  bd70              POP      {r4-r6,pc}
                  |L1.14|
00000e  f7fffffe          BL       OS_CPU_SR_Save
000012  6865              LDR      r5,[r4,#4]            ;65
000014  2100              MOVS     r1,#0                 ;66
000016  6061              STR      r1,[r4,#4]            ;66
000018  f7fffffe          BL       OS_CPU_SR_Restore
00001c  4628              MOV      r0,r5                 ;68
00001e  bd70              POP      {r4-r6,pc}
;;;70     #endif
                          ENDP

                  OSMboxCreate PROC
;;;87     
;;;88     OS_EVENT  *OSMboxCreate (void *pmsg)
000020  b570              PUSH     {r4-r6,lr}
;;;89     {
000022  4605              MOV      r5,r0
;;;90         OS_EVENT  *pevent;
;;;91     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;92         OS_CPU_SR  cpu_sr = 0;
;;;93     #endif
;;;94     
;;;95     
;;;96     
;;;97         if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
000024  48d4              LDR      r0,|L1.888|
000026  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000028  b108              CBZ      r0,|L1.46|
;;;98             return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
00002a  2000              MOVS     r0,#0
;;;99         }
;;;100        OS_ENTER_CRITICAL();
;;;101        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;102        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;103            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;104        }
;;;105        OS_EXIT_CRITICAL();
;;;106        if (pevent != (OS_EVENT *)0) {
;;;107            pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
;;;108            pevent->OSEventCnt     = 0;
;;;109            pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
;;;110    #if OS_EVENT_NAME_SIZE > 1
;;;111            pevent->OSEventName[0] = '?';
;;;112            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;113    #endif
;;;114            OS_EventWaitListInit(pevent);
;;;115        }
;;;116        return (pevent);                             /* Return pointer to event control block              */
;;;117    }
00002c  bd70              POP      {r4-r6,pc}
                  |L1.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4601              MOV      r1,r0                 ;100
000034  48d1              LDR      r0,|L1.892|
000036  6804              LDR      r4,[r0,#0]            ;101  ; OSEventFreeList
000038  b10c              CBZ      r4,|L1.62|
00003a  6862              LDR      r2,[r4,#4]            ;103
00003c  6002              STR      r2,[r0,#0]            ;103  ; OSEventFreeList
                  |L1.62|
00003e  4608              MOV      r0,r1                 ;105
000040  f7fffffe          BL       OS_CPU_SR_Restore
000044  b154              CBZ      r4,|L1.92|
000046  2001              MOVS     r0,#1                 ;107
000048  7020              STRB     r0,[r4,#0]            ;107
00004a  2000              MOVS     r0,#0                 ;108
00004c  8120              STRH     r0,[r4,#8]            ;108
00004e  6065              STR      r5,[r4,#4]            ;109
000050  213f              MOVS     r1,#0x3f              ;111
000052  73e1              STRB     r1,[r4,#0xf]          ;111
000054  7420              STRB     r0,[r4,#0x10]         ;112
000056  4620              MOV      r0,r4                 ;114
000058  f7fffffe          BL       OS_EventWaitListInit
                  |L1.92|
00005c  4620              MOV      r0,r4                 ;116
00005e  bd70              POP      {r4-r6,pc}
;;;118    /*$PAGE*/
                          ENDP

                  OSMboxDel PROC
;;;155    #if OS_MBOX_DEL_EN > 0
;;;156    OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000060  e92d5ff0          PUSH     {r4-r12,lr}
;;;157    {
000064  4604              MOV      r4,r0
000066  468b              MOV      r11,r1
000068  4615              MOV      r5,r2
;;;158        BOOLEAN    tasks_waiting;
;;;159        OS_EVENT  *pevent_return;
;;;160    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;161        OS_CPU_SR  cpu_sr = 0;
;;;162    #endif
;;;163    
;;;164    
;;;165    
;;;166    #if OS_ARG_CHK_EN > 0
;;;167        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;168            return (pevent);
;;;169        }
;;;170        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;171            *perr = OS_ERR_PEVENT_NULL;
;;;172            return (pevent);
;;;173        }
;;;174    #endif
;;;175        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00006a  7820              LDRB     r0,[r4,#0]
00006c  2801              CMP      r0,#1
00006e  d004              BEQ      |L1.122|
;;;176            *perr = OS_ERR_EVENT_TYPE;
000070  2001              MOVS     r0,#1
000072  7028              STRB     r0,[r5,#0]
;;;177            return (pevent);
000074  4620              MOV      r0,r4
;;;178        }
;;;179        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;180            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;181            return (pevent);
;;;182        }
;;;183        OS_ENTER_CRITICAL();
;;;184        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
;;;185            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;186        } else {
;;;187            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;188        }
;;;189        switch (opt) {
;;;190            case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
;;;191                 if (tasks_waiting == OS_FALSE) {
;;;192    #if OS_EVENT_NAME_SIZE > 1
;;;193                     pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;194                     pevent->OSEventName[1] = OS_ASCII_NUL;
;;;195    #endif
;;;196                     pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;197                     pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;198                     pevent->OSEventCnt  = 0;
;;;199                     OSEventFreeList     = pevent;             /* Get next free event control block        */
;;;200                     OS_EXIT_CRITICAL();
;;;201                     *perr               = OS_ERR_NONE;
;;;202                     pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
;;;203                 } else {
;;;204                     OS_EXIT_CRITICAL();
;;;205                     *perr               = OS_ERR_TASK_WAITING;
;;;206                     pevent_return       = pevent;
;;;207                 }
;;;208                 break;
;;;209    
;;;210            case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
;;;211                 while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
;;;212                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;213                 }
;;;214    #if OS_EVENT_NAME_SIZE > 1
;;;215                 pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;216                 pevent->OSEventName[1] = OS_ASCII_NUL;
;;;217    #endif
;;;218                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;219                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;220                 pevent->OSEventCnt     = 0;
;;;221                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;222                 OS_EXIT_CRITICAL();
;;;223                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;224                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;225                 }
;;;226                 *perr         = OS_ERR_NONE;
;;;227                 pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
;;;228                 break;
;;;229    
;;;230            default:
;;;231                 OS_EXIT_CRITICAL();
;;;232                 *perr         = OS_ERR_INVALID_OPT;
;;;233                 pevent_return = pevent;
;;;234                 break;
;;;235        }
;;;236        return (pevent_return);
;;;237    }
000076  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.122|
00007a  48bf              LDR      r0,|L1.888|
00007c  7800              LDRB     r0,[r0,#0]            ;179  ; OSIntNesting
00007e  b120              CBZ      r0,|L1.138|
000080  200f              MOVS     r0,#0xf               ;180
000082  7028              STRB     r0,[r5,#0]            ;180
000084  4620              MOV      r0,r4                 ;181
000086  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.138|
00008a  f7fffffe          BL       OS_CPU_SR_Save
00008e  4682              MOV      r10,r0                ;183
000090  7aa0              LDRB     r0,[r4,#0xa]          ;184
000092  b108              CBZ      r0,|L1.152|
000094  2601              MOVS     r6,#1                 ;185
000096  e000              B        |L1.154|
                  |L1.152|
000098  2600              MOVS     r6,#0                 ;187
                  |L1.154|
00009a  f8df82e0          LDR      r8,|L1.892|
00009e  2700              MOVS     r7,#0                 ;161
0000a0  f04f093f          MOV      r9,#0x3f              ;193
0000a4  f1bb0f00          CMP      r11,#0                ;189
0000a8  d00a              BEQ      |L1.192|
0000aa  f1bb0f01          CMP      r11,#1                ;189
0000ae  d021              BEQ      |L1.244|
0000b0  4650              MOV      r0,r10                ;231
0000b2  f7fffffe          BL       OS_CPU_SR_Restore
0000b6  2007              MOVS     r0,#7                 ;232
0000b8  7028              STRB     r0,[r5,#0]            ;232
0000ba  4620              MOV      r0,r4                 ;233
0000bc  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.192|
0000c0  b13e              CBZ      r6,|L1.210|
0000c2  4650              MOV      r0,r10                ;204
0000c4  f7fffffe          BL       OS_CPU_SR_Restore
0000c8  2049              MOVS     r0,#0x49              ;205
0000ca  7028              STRB     r0,[r5,#0]            ;205
0000cc  4620              MOV      r0,r4                 ;206
0000ce  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.210|
0000d2  f884900f          STRB     r9,[r4,#0xf]          ;193
0000d6  7427              STRB     r7,[r4,#0x10]         ;194
0000d8  7027              STRB     r7,[r4,#0]            ;196
0000da  f8d80000          LDR      r0,[r8,#0]            ;197  ; OSEventFreeList
0000de  6060              STR      r0,[r4,#4]            ;197
0000e0  8127              STRH     r7,[r4,#8]            ;198
0000e2  f8c84000          STR      r4,[r8,#0]            ;199  ; OSEventFreeList
0000e6  4650              MOV      r0,r10                ;200
0000e8  f7fffffe          BL       OS_CPU_SR_Restore
0000ec  702f              STRB     r7,[r5,#0]            ;201
0000ee  2000              MOVS     r0,#0                 ;202
0000f0  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.244|
0000f4  b140              CBZ      r0,|L1.264|
                  |L1.246|
0000f6  2300              MOVS     r3,#0                 ;212
0000f8  2202              MOVS     r2,#2                 ;212
0000fa  4619              MOV      r1,r3                 ;212
0000fc  4620              MOV      r0,r4                 ;212
0000fe  f7fffffe          BL       OS_EventTaskRdy
000102  7aa0              LDRB     r0,[r4,#0xa]          ;211
000104  2800              CMP      r0,#0                 ;211
000106  d1f6              BNE      |L1.246|
                  |L1.264|
000108  f884900f          STRB     r9,[r4,#0xf]          ;215
00010c  7427              STRB     r7,[r4,#0x10]         ;216
00010e  7027              STRB     r7,[r4,#0]            ;218
000110  f8d80000          LDR      r0,[r8,#0]            ;219  ; OSEventFreeList
000114  6060              STR      r0,[r4,#4]            ;219
000116  8127              STRH     r7,[r4,#8]            ;220
000118  f8c84000          STR      r4,[r8,#0]            ;221  ; OSEventFreeList
00011c  4650              MOV      r0,r10                ;222
00011e  f7fffffe          BL       OS_CPU_SR_Restore
000122  2e01              CMP      r6,#1                 ;223
000124  d101              BNE      |L1.298|
000126  f7fffffe          BL       OS_Sched
                  |L1.298|
00012a  702f              STRB     r7,[r5,#0]            ;226
00012c  2000              MOVS     r0,#0                 ;227
00012e  e8bd9ff0          POP      {r4-r12,pc}
;;;238    #endif
                          ENDP

                  OSMboxPend PROC
;;;273    /*$PAGE*/
;;;274    void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
000132  e92d47f0          PUSH     {r4-r10,lr}
;;;275    {
000136  4605              MOV      r5,r0
000138  4689              MOV      r9,r1
00013a  4614              MOV      r4,r2
;;;276        void      *pmsg;
;;;277    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;278        OS_CPU_SR  cpu_sr = 0;
;;;279    #endif
;;;280    
;;;281    
;;;282    
;;;283    #if OS_ARG_CHK_EN > 0
;;;284        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
;;;285            return ((void *)0);
;;;286        }
;;;287        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;288            *perr = OS_ERR_PEVENT_NULL;
;;;289            return ((void *)0);
;;;290        }
;;;291    #endif
;;;292        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
00013c  7828              LDRB     r0,[r5,#0]
00013e  2801              CMP      r0,#1
000140  d004              BEQ      |L1.332|
;;;293            *perr = OS_ERR_EVENT_TYPE;
000142  2001              MOVS     r0,#1
000144  7020              STRB     r0,[r4,#0]
;;;294            return ((void *)0);
000146  2000              MOVS     r0,#0
;;;295        }
;;;296        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
;;;297            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;298            return ((void *)0);
;;;299        }
;;;300        if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
;;;301            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;302            return ((void *)0);
;;;303        }
;;;304        OS_ENTER_CRITICAL();
;;;305        pmsg = pevent->OSEventPtr;
;;;306        if (pmsg != (void *)0) {                          /* See if there is already a message             */
;;;307            pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
;;;308            OS_EXIT_CRITICAL();
;;;309            *perr = OS_ERR_NONE;
;;;310            return (pmsg);                                /* Return the message received (or NULL)         */
;;;311        }
;;;312        OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
;;;313        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;314        OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
;;;315        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;316        OS_EXIT_CRITICAL();
;;;317        OS_Sched();                                       /* Find next highest priority task ready to run  */
;;;318        OS_ENTER_CRITICAL();
;;;319        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;320            case OS_STAT_PEND_OK:
;;;321                 pmsg =  OSTCBCur->OSTCBMsg;
;;;322                *perr =  OS_ERR_NONE;
;;;323                 break;
;;;324    
;;;325            case OS_STAT_PEND_ABORT:
;;;326                 pmsg = (void *)0;
;;;327                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;328                 break;
;;;329    
;;;330            case OS_STAT_PEND_TO:
;;;331            default:
;;;332                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;333                 pmsg = (void *)0;
;;;334                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;335                 break;
;;;336        }
;;;337        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;338        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;339        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;340    #if (OS_EVENT_MULTI_EN > 0)
;;;341        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;342    #endif
;;;343        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;344        OS_EXIT_CRITICAL();
;;;345        return (pmsg);                                    /* Return received message                       */
;;;346    }
000148  e8bd87f0          POP      {r4-r10,pc}
                  |L1.332|
00014c  488a              LDR      r0,|L1.888|
00014e  7800              LDRB     r0,[r0,#0]            ;296  ; OSIntNesting
000150  b120              CBZ      r0,|L1.348|
000152  2002              MOVS     r0,#2                 ;297
000154  7020              STRB     r0,[r4,#0]            ;297
000156  2000              MOVS     r0,#0                 ;298
000158  e8bd87f0          POP      {r4-r10,pc}
                  |L1.348|
00015c  4888              LDR      r0,|L1.896|
00015e  7800              LDRB     r0,[r0,#0]            ;300  ; OSLockNesting
000160  b120              CBZ      r0,|L1.364|
000162  200d              MOVS     r0,#0xd               ;301
000164  7020              STRB     r0,[r4,#0]            ;301
000166  2000              MOVS     r0,#0                 ;302
000168  e8bd87f0          POP      {r4-r10,pc}
                  |L1.364|
00016c  f7fffffe          BL       OS_CPU_SR_Save
000170  4682              MOV      r10,r0                ;304
000172  686e              LDR      r6,[r5,#4]            ;305
000174  2700              MOVS     r7,#0                 ;278
000176  b13e              CBZ      r6,|L1.392|
000178  606f              STR      r7,[r5,#4]            ;307
00017a  4650              MOV      r0,r10                ;308
00017c  f7fffffe          BL       OS_CPU_SR_Restore
000180  7027              STRB     r7,[r4,#0]            ;309
000182  4630              MOV      r0,r6                 ;310
000184  e8bd87f0          POP      {r4-r10,pc}
                  |L1.392|
000188  f8df81f8          LDR      r8,|L1.900|
00018c  f8d80000          LDR      r0,[r8,#0]            ;312  ; OSTCBCur
000190  f8901030          LDRB     r1,[r0,#0x30]         ;312
000194  f0410102          ORR      r1,r1,#2              ;312
000198  f8801030          STRB     r1,[r0,#0x30]         ;312
00019c  f8807031          STRB     r7,[r0,#0x31]         ;313
0001a0  f8a0902e          STRH     r9,[r0,#0x2e]         ;314
0001a4  4628              MOV      r0,r5                 ;315
0001a6  f7fffffe          BL       OS_EventTaskWait
0001aa  4650              MOV      r0,r10                ;316
0001ac  f7fffffe          BL       OS_CPU_SR_Restore
0001b0  f7fffffe          BL       OS_Sched
0001b4  f7fffffe          BL       OS_CPU_SR_Save
0001b8  4681              MOV      r9,r0                 ;318
0001ba  f8d80000          LDR      r0,[r8,#0]            ;319  ; OSTCBCur
0001be  f8901031          LDRB     r1,[r0,#0x31]         ;319
0001c2  b1a9              CBZ      r1,|L1.496|
0001c4  2902              CMP      r1,#2                 ;319
0001c6  d016              BEQ      |L1.502|
0001c8  4629              MOV      r1,r5                 ;332
0001ca  f7fffffe          BL       OS_EventTaskRemove
0001ce  200a              MOVS     r0,#0xa               ;334
0001d0  7020              STRB     r0,[r4,#0]            ;334
                  |L1.466|
0001d2  f8d80000          LDR      r0,[r8,#0]            ;337  ; OSTCBCur
0001d6  f8807030          STRB     r7,[r0,#0x30]         ;337
0001da  f8807031          STRB     r7,[r0,#0x31]         ;338
0001de  61c7              STR      r7,[r0,#0x1c]         ;339
0001e0  6207              STR      r7,[r0,#0x20]         ;341
0001e2  6247              STR      r7,[r0,#0x24]         ;343
0001e4  4648              MOV      r0,r9                 ;344
0001e6  f7fffffe          BL       OS_CPU_SR_Restore
0001ea  4630              MOV      r0,r6                 ;345
0001ec  e8bd87f0          POP      {r4-r10,pc}
                  |L1.496|
0001f0  6a46              LDR      r6,[r0,#0x24]         ;321
0001f2  7027              STRB     r7,[r4,#0]            ;322
0001f4  e7ed              B        |L1.466|
                  |L1.502|
0001f6  200e              MOVS     r0,#0xe               ;327
0001f8  7020              STRB     r0,[r4,#0]            ;327
0001fa  e7ea              B        |L1.466|
;;;347    /*$PAGE*/
                          ENDP

                  OSMboxPendAbort PROC
;;;380    #if OS_MBOX_PEND_ABORT_EN > 0
;;;381    INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
0001fc  e92d41f0          PUSH     {r4-r8,lr}
;;;382    {
000200  4605              MOV      r5,r0
000202  4688              MOV      r8,r1
000204  4616              MOV      r6,r2
;;;383        INT8U      nbr_tasks;
;;;384    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;385        OS_CPU_SR  cpu_sr = 0;
;;;386    #endif
;;;387    
;;;388    
;;;389    
;;;390    #if OS_ARG_CHK_EN > 0
;;;391        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;392            return (0);
;;;393        }
;;;394        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;395            *perr = OS_ERR_PEVENT_NULL;
;;;396            return (0);
;;;397        }
;;;398    #endif
;;;399        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
000206  7829              LDRB     r1,[r5,#0]
000208  2001              MOVS     r0,#1
00020a  2901              CMP      r1,#1
00020c  d003              BEQ      |L1.534|
;;;400            *perr = OS_ERR_EVENT_TYPE;
00020e  7030              STRB     r0,[r6,#0]
;;;401            return (0);
000210  2000              MOVS     r0,#0
;;;402        }
;;;403        OS_ENTER_CRITICAL();
;;;404        if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
;;;405            nbr_tasks = 0;
;;;406            switch (opt) {
;;;407                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;408                     while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
;;;409                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;410                         nbr_tasks++;
;;;411                     }
;;;412                     break;
;;;413                 
;;;414                case OS_PEND_OPT_NONE:
;;;415                default:                                       /* No,  ready HPT       waiting on mailbox  */
;;;416                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;417                     nbr_tasks++;
;;;418                     break;
;;;419            }
;;;420            OS_EXIT_CRITICAL();
;;;421            OS_Sched();                                        /* Find HPT ready to run                    */
;;;422            *perr = OS_ERR_PEND_ABORT;
;;;423            return (nbr_tasks);
;;;424        }
;;;425        OS_EXIT_CRITICAL();
;;;426        *perr = OS_ERR_NONE;
;;;427        return (0);                                            /* No tasks waiting on mailbox              */
;;;428    }
000212  e8bd81f0          POP      {r4-r8,pc}
                  |L1.534|
000216  f7fffffe          BL       OS_CPU_SR_Save
00021a  4607              MOV      r7,r0                 ;403
00021c  7aa8              LDRB     r0,[r5,#0xa]          ;404
00021e  b300              CBZ      r0,|L1.610|
000220  2400              MOVS     r4,#0                 ;405
000222  f1b80f01          CMP      r8,#1                 ;406
000226  d010              BEQ      |L1.586|
000228  2302              MOVS     r3,#2                 ;416
00022a  461a              MOV      r2,r3                 ;416
00022c  2100              MOVS     r1,#0                 ;416
00022e  4628              MOV      r0,r5                 ;416
000230  f7fffffe          BL       OS_EventTaskRdy
000234  2401              MOVS     r4,#1                 ;417
                  |L1.566|
000236  4638              MOV      r0,r7                 ;420
000238  f7fffffe          BL       OS_CPU_SR_Restore
00023c  f7fffffe          BL       OS_Sched
000240  200e              MOVS     r0,#0xe               ;422
000242  7030              STRB     r0,[r6,#0]            ;422
000244  4620              MOV      r0,r4                 ;423
000246  e8bd81f0          POP      {r4-r8,pc}
                  |L1.586|
00024a  2302              MOVS     r3,#2                 ;409
00024c  461a              MOV      r2,r3                 ;409
00024e  2100              MOVS     r1,#0                 ;409
000250  4628              MOV      r0,r5                 ;409
000252  f7fffffe          BL       OS_EventTaskRdy
000256  1c60              ADDS     r0,r4,#1              ;410
000258  b2c4              UXTB     r4,r0                 ;410
00025a  7aa8              LDRB     r0,[r5,#0xa]          ;408
00025c  2800              CMP      r0,#0                 ;408
00025e  d1f4              BNE      |L1.586|
000260  e7e9              B        |L1.566|
                  |L1.610|
000262  4638              MOV      r0,r7                 ;425
000264  f7fffffe          BL       OS_CPU_SR_Restore
000268  2000              MOVS     r0,#0                 ;426
00026a  7030              STRB     r0,[r6,#0]            ;426
00026c  e8bd81f0          POP      {r4-r8,pc}
;;;429    #endif
                          ENDP

                  OSMboxPost PROC
;;;454    #if OS_MBOX_POST_EN > 0
;;;455    INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
000270  b570              PUSH     {r4-r6,lr}
;;;456    {
000272  4604              MOV      r4,r0
000274  460d              MOV      r5,r1
;;;457    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;458        OS_CPU_SR  cpu_sr = 0;
;;;459    #endif
;;;460    
;;;461    
;;;462    
;;;463    #if OS_ARG_CHK_EN > 0
;;;464        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;465            return (OS_ERR_PEVENT_NULL);
;;;466        }
;;;467        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;468            return (OS_ERR_POST_NULL_PTR);
;;;469        }
;;;470    #endif
;;;471        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
000276  7820              LDRB     r0,[r4,#0]
000278  2801              CMP      r0,#1
00027a  d001              BEQ      |L1.640|
;;;472            return (OS_ERR_EVENT_TYPE);
00027c  2001              MOVS     r0,#1
;;;473        }
;;;474        OS_ENTER_CRITICAL();
;;;475        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;476                                                          /* Ready HPT waiting on event                    */
;;;477            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;478            OS_EXIT_CRITICAL();
;;;479            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;480            return (OS_ERR_NONE);
;;;481        }
;;;482        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;483            OS_EXIT_CRITICAL();
;;;484            return (OS_ERR_MBOX_FULL);
;;;485        }
;;;486        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;487        OS_EXIT_CRITICAL();
;;;488        return (OS_ERR_NONE);
;;;489    }
00027e  bd70              POP      {r4-r6,pc}
                  |L1.640|
000280  f7fffffe          BL       OS_CPU_SR_Save
000284  4606              MOV      r6,r0                 ;474
000286  7aa0              LDRB     r0,[r4,#0xa]          ;475
000288  b160              CBZ      r0,|L1.676|
00028a  2300              MOVS     r3,#0                 ;477
00028c  2202              MOVS     r2,#2                 ;477
00028e  4629              MOV      r1,r5                 ;477
000290  4620              MOV      r0,r4                 ;477
000292  f7fffffe          BL       OS_EventTaskRdy
000296  4630              MOV      r0,r6                 ;478
000298  f7fffffe          BL       OS_CPU_SR_Restore
00029c  f7fffffe          BL       OS_Sched
0002a0  2000              MOVS     r0,#0                 ;480
0002a2  bd70              POP      {r4-r6,pc}
                  |L1.676|
0002a4  6860              LDR      r0,[r4,#4]            ;482
0002a6  b120              CBZ      r0,|L1.690|
0002a8  4630              MOV      r0,r6                 ;483
0002aa  f7fffffe          BL       OS_CPU_SR_Restore
0002ae  2014              MOVS     r0,#0x14              ;484
0002b0  bd70              POP      {r4-r6,pc}
                  |L1.690|
0002b2  6065              STR      r5,[r4,#4]            ;486
0002b4  4630              MOV      r0,r6                 ;487
0002b6  f7fffffe          BL       OS_CPU_SR_Restore
0002ba  2000              MOVS     r0,#0                 ;488
0002bc  bd70              POP      {r4-r6,pc}
;;;490    #endif
                          ENDP

                  OSMboxPostOpt PROC
;;;525    #if OS_MBOX_POST_OPT_EN > 0
;;;526    INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
0002be  e92d41f0          PUSH     {r4-r8,lr}
;;;527    {
0002c2  4604              MOV      r4,r0
0002c4  460e              MOV      r6,r1
0002c6  4615              MOV      r5,r2
;;;528    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;529        OS_CPU_SR  cpu_sr = 0;
;;;530    #endif
;;;531    
;;;532    
;;;533    
;;;534    #if OS_ARG_CHK_EN > 0
;;;535        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;536            return (OS_ERR_PEVENT_NULL);
;;;537        }
;;;538        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;539            return (OS_ERR_POST_NULL_PTR);
;;;540        }
;;;541    #endif
;;;542        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
0002c8  7820              LDRB     r0,[r4,#0]
0002ca  2801              CMP      r0,#1
0002cc  d002              BEQ      |L1.724|
;;;543            return (OS_ERR_EVENT_TYPE);
0002ce  2001              MOVS     r0,#1
;;;544        }
;;;545        OS_ENTER_CRITICAL();
;;;546        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;547            if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
;;;548                while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
;;;549                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;550                }
;;;551            } else {                                      /* No,  Post to HPT waiting on mbox              */
;;;552                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;553            }
;;;554            OS_EXIT_CRITICAL();
;;;555            if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
;;;556                OS_Sched();                               /* Find HPT ready to run                         */
;;;557            }
;;;558            return (OS_ERR_NONE);
;;;559        }
;;;560        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;561            OS_EXIT_CRITICAL();
;;;562            return (OS_ERR_MBOX_FULL);
;;;563        }
;;;564        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;565        OS_EXIT_CRITICAL();
;;;566        return (OS_ERR_NONE);
;;;567    }
0002d0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.724|
0002d4  f7fffffe          BL       OS_CPU_SR_Save
0002d8  4607              MOV      r7,r0                 ;545
0002da  7aa0              LDRB     r0,[r4,#0xa]          ;546
0002dc  b1e8              CBZ      r0,|L1.794|
0002de  f0150f01          TST      r5,#1                 ;547
0002e2  d009              BEQ      |L1.760|
                  |L1.740|
0002e4  2300              MOVS     r3,#0                 ;549
0002e6  2202              MOVS     r2,#2                 ;549
0002e8  4631              MOV      r1,r6                 ;549
0002ea  4620              MOV      r0,r4                 ;549
0002ec  f7fffffe          BL       OS_EventTaskRdy
0002f0  7aa0              LDRB     r0,[r4,#0xa]          ;548
0002f2  2800              CMP      r0,#0                 ;548
0002f4  d1f6              BNE      |L1.740|
0002f6  e005              B        |L1.772|
                  |L1.760|
0002f8  2300              MOVS     r3,#0                 ;552
0002fa  2202              MOVS     r2,#2                 ;552
0002fc  4631              MOV      r1,r6                 ;552
0002fe  4620              MOV      r0,r4                 ;552
000300  f7fffffe          BL       OS_EventTaskRdy
                  |L1.772|
000304  4638              MOV      r0,r7                 ;554
000306  f7fffffe          BL       OS_CPU_SR_Restore
00030a  f0150f04          TST      r5,#4                 ;555
00030e  d101              BNE      |L1.788|
000310  f7fffffe          BL       OS_Sched
                  |L1.788|
000314  2000              MOVS     r0,#0                 ;558
000316  e8bd81f0          POP      {r4-r8,pc}
                  |L1.794|
00031a  6860              LDR      r0,[r4,#4]            ;560
00031c  b128              CBZ      r0,|L1.810|
00031e  4638              MOV      r0,r7                 ;561
000320  f7fffffe          BL       OS_CPU_SR_Restore
000324  2014              MOVS     r0,#0x14              ;562
000326  e8bd81f0          POP      {r4-r8,pc}
                  |L1.810|
00032a  6066              STR      r6,[r4,#4]            ;564
00032c  4638              MOV      r0,r7                 ;565
00032e  f7fffffe          BL       OS_CPU_SR_Restore
000332  2000              MOVS     r0,#0                 ;566
000334  e8bd81f0          POP      {r4-r8,pc}
;;;568    #endif
                          ENDP

                  OSMboxQuery PROC
;;;589    #if OS_MBOX_QUERY_EN > 0
;;;590    INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
000338  b570              PUSH     {r4-r6,lr}
;;;591    {
00033a  4604              MOV      r4,r0
00033c  460d              MOV      r5,r1
;;;592        INT8U      i;
;;;593    #if OS_LOWEST_PRIO <= 63
;;;594        INT8U     *psrc;
;;;595        INT8U     *pdest;
;;;596    #else
;;;597        INT16U    *psrc;
;;;598        INT16U    *pdest;
;;;599    #endif
;;;600    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;601        OS_CPU_SR  cpu_sr = 0;
;;;602    #endif
;;;603    
;;;604    
;;;605    
;;;606    #if OS_ARG_CHK_EN > 0
;;;607        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;608            return (OS_ERR_PEVENT_NULL);
;;;609        }
;;;610        if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
;;;611            return (OS_ERR_PDATA_NULL);
;;;612        }
;;;613    #endif
;;;614        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00033e  7820              LDRB     r0,[r4,#0]
000340  2801              CMP      r0,#1
000342  d001              BEQ      |L1.840|
;;;615            return (OS_ERR_EVENT_TYPE);
000344  2001              MOVS     r0,#1
;;;616        }
;;;617        OS_ENTER_CRITICAL();
;;;618        p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
;;;619        psrc                    = &pevent->OSEventTbl[0];
;;;620        pdest                   = &p_mbox_data->OSEventTbl[0];
;;;621        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;622            *pdest++ = *psrc++;
;;;623        }
;;;624        p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
;;;625        OS_EXIT_CRITICAL();
;;;626        return (OS_ERR_NONE);
;;;627    }
000346  bd70              POP      {r4-r6,pc}
                  |L1.840|
000348  f7fffffe          BL       OS_CPU_SR_Save
00034c  7aa1              LDRB     r1,[r4,#0xa]          ;618
00034e  7229              STRB     r1,[r5,#8]            ;618
000350  f104030b          ADD      r3,r4,#0xb            ;619
000354  f1050c04          ADD      r12,r5,#4             ;620
000358  2200              MOVS     r2,#0                 ;621
                  |L1.858|
00035a  f8131b01          LDRB     r1,[r3],#1            ;622
00035e  f80c1b01          STRB     r1,[r12],#1           ;622
000362  1c51              ADDS     r1,r2,#1              ;621
000364  b2ca              UXTB     r2,r1                 ;621
000366  2a04              CMP      r2,#4                 ;621
000368  d3f7              BCC      |L1.858|
00036a  6861              LDR      r1,[r4,#4]            ;624
00036c  6029              STR      r1,[r5,#0]            ;624
00036e  f7fffffe          BL       OS_CPU_SR_Restore
000372  2000              MOVS     r0,#0                 ;626
000374  bd70              POP      {r4-r6,pc}
;;;628    #endif                                                     /* OS_MBOX_QUERY_EN                         */
                          ENDP

000376  0000              DCW      0x0000
                  |L1.888|
                          DCD      OSIntNesting
                  |L1.892|
                          DCD      OSEventFreeList
                  |L1.896|
                          DCD      OSLockNesting
                  |L1.900|
                          DCD      OSTCBCur
