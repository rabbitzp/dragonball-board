; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_gif.o --depend=.\rvmdk\gui_gif.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_gif.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_GIF.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ReadU8 PROC
;;;122    */
;;;123    static U8 _ReadU8(void) {
000000  4afa              LDR      r2,|L1.1004|
;;;124      U8 Value;
;;;125      _Source.RemBytes -= 1;
000002  6850              LDR      r0,[r2,#4]  ; _Source
000004  1e40              SUBS     r0,r0,#1
000006  6050              STR      r0,[r2,#4]  ; _Source
;;;126      if (_Source.RemBytes < 0) {
000008  2800              CMP      r0,#0
00000a  da01              BGE      |L1.16|
;;;127        return 0;
00000c  2000              MOVS     r0,#0
;;;128      }
;;;129      Value = *(_Source.pSrc++);
;;;130      return Value;
;;;131    }
00000e  4770              BX       lr
                  |L1.16|
000010  6811              LDR      r1,[r2,#0]            ;129  ; _Source
000012  f8110b01          LDRB     r0,[r1],#1            ;129
000016  6011              STR      r1,[r2,#0]            ;129  ; _Source
000018  4770              BX       lr
;;;132    
                          ENDP

                  _ReadU16 PROC
;;;139    */
;;;140    static U16 _ReadU16(void) {
00001a  b510              PUSH     {r4,lr}
;;;141      U16 Value;
;;;142      U8 Byte0, Byte1;
;;;143      Byte0 = _ReadU8();
00001c  f7fffffe          BL       _ReadU8
000020  4604              MOV      r4,r0
;;;144      Byte1 = _ReadU8();
000022  f7fffffe          BL       _ReadU8
;;;145      Value = (Byte1 << 8) | Byte0;
000026  ea442000          ORR      r0,r4,r0,LSL #8
;;;146      return Value;
;;;147    }
00002a  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  _ReadBytes PROC
;;;155    */
;;;156    static void _ReadBytes(U8 * pBuffer, int Len) {
00002c  b570              PUSH     {r4-r6,lr}
00002e  460c              MOV      r4,r1
;;;157      if (_Source.RemBytes < 0) {
000030  4dee              LDR      r5,|L1.1004|
000032  6869              LDR      r1,[r5,#4]  ; _Source
000034  2900              CMP      r1,#0
000036  db0a              BLT      |L1.78|
;;;158        return;
;;;159      }
;;;160      if (_Source.RemBytes < Len) {
000038  42a1              CMP      r1,r4
00003a  db08              BLT      |L1.78|
;;;161        Len = _Source.RemBytes;
;;;162        return;
;;;163      }
;;;164      _Source.RemBytes -= Len;
00003c  1b09              SUBS     r1,r1,r4
00003e  6069              STR      r1,[r5,#4]  ; _Source
;;;165      memcpy(pBuffer, _Source.pSrc, Len);
000040  4622              MOV      r2,r4
000042  6829              LDR      r1,[r5,#0]  ; _Source
000044  f7fffffe          BL       __aeabi_memcpy
;;;166      _Source.pSrc += Len;
000048  6828              LDR      r0,[r5,#0]  ; _Source
00004a  4420              ADD      r0,r0,r4
00004c  6028              STR      r0,[r5,#0]  ; _Source
                  |L1.78|
;;;167    }
00004e  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

                  _SkipBytes PROC
;;;175    */
;;;176    static void _SkipBytes(int Len) {
000050  4ae6              LDR      r2,|L1.1004|
;;;177      if (_Source.RemBytes < 0) {
000052  6851              LDR      r1,[r2,#4]  ; _Source
000054  2900              CMP      r1,#0
000056  db06              BLT      |L1.102|
;;;178        return;
;;;179      }
;;;180      if (_Source.RemBytes < Len) {
000058  4281              CMP      r1,r0
00005a  db04              BLT      |L1.102|
;;;181        Len = _Source.RemBytes;
;;;182        return;
;;;183      }
;;;184      _Source.RemBytes -= Len;
00005c  1a09              SUBS     r1,r1,r0
00005e  6051              STR      r1,[r2,#4]  ; _Source
;;;185      _Source.pSrc += Len;
000060  6811              LDR      r1,[r2,#0]  ; _Source
000062  4408              ADD      r0,r0,r1
000064  6010              STR      r0,[r2,#0]  ; _Source
                  |L1.102|
;;;186    }
000066  4770              BX       lr
;;;187    
                          ENDP

                  _InitLZW PROC
;;;194    */
;;;195    static void _InitLZW(int InputCodeSize) {
000068  b510              PUSH     {r4,lr}
00006a  4604              MOV      r4,r0
;;;196      GUI__memset((U8 *)&_LZWContext, 0, sizeof(LZW_CONTEXT));
00006c  f64342f4          MOV      r2,#0x3cf4
000070  2100              MOVS     r1,#0
000072  48df              LDR      r0,|L1.1008|
000074  f7fffffe          BL       GUI__memset
;;;197      _LZWContext.SetCodeSize  = InputCodeSize;
000078  49de              LDR      r1,|L1.1012|
00007a  f8c14cd8          STR      r4,[r1,#0xcd8]
;;;198      _LZWContext.CodeSize     = InputCodeSize + 1;
00007e  1c60              ADDS     r0,r4,#1
000080  f8c10cd4          STR      r0,[r1,#0xcd4]
;;;199      _LZWContext.ClearCode    = (1 << InputCodeSize);
000084  2201              MOVS     r2,#1
000086  fa02f004          LSL      r0,r2,r4
00008a  f8c10ce4          STR      r0,[r1,#0xce4]
;;;200      _LZWContext.EndCode      = (1 << InputCodeSize) + 1;
00008e  1c43              ADDS     r3,r0,#1
000090  f8c13ce8          STR      r3,[r1,#0xce8]
;;;201      _LZWContext.MaxCode      = (1 << InputCodeSize) + 2;
000094  1c83              ADDS     r3,r0,#2
000096  f8c13cdc          STR      r3,[r1,#0xcdc]
;;;202      _LZWContext.MaxCodeSize  = (1 << InputCodeSize) << 1;
00009a  0040              LSLS     r0,r0,#1
00009c  f8c10ce0          STR      r0,[r1,#0xce0]
;;;203      _LZWContext.ReturnClear  = 1;
0000a0  f8c12cd0          STR      r2,[r1,#0xcd0]
;;;204      _LZWContext.LastByte     = 2;
0000a4  2002              MOVS     r0,#2
0000a6  f8c10ccc          STR      r0,[r1,#0xccc]
;;;205      _LZWContext.sp           = _LZWContext.aDecompBuffer;
0000aa  f5017081          ADD      r0,r1,#0x102
0000ae  f8c10cbc          STR      r0,[r1,#0xcbc]
;;;206    }
0000b2  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  _GetDataBlock PROC
;;;218    */
;;;219    static int _GetDataBlock(U8 * pBuffer) {
0000b4  b570              PUSH     {r4-r6,lr}
0000b6  4605              MOV      r5,r0
;;;220      U8 Count;
;;;221      Count = _ReadU8(); /* Read the length of the data block */
0000b8  f7fffffe          BL       _ReadU8
0000bc  4604              MOV      r4,r0
;;;222      if (Count) {
0000be  b14c              CBZ      r4,|L1.212|
;;;223        if (pBuffer) {
0000c0  b125              CBZ      r5,|L1.204|
;;;224          _ReadBytes(pBuffer, Count);
0000c2  4621              MOV      r1,r4
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       _ReadBytes
0000ca  e003              B        |L1.212|
                  |L1.204|
;;;225        } else {
;;;226          _Source.pSrc += Count;
0000cc  48c7              LDR      r0,|L1.1004|
0000ce  6801              LDR      r1,[r0,#0]  ; _Source
0000d0  4421              ADD      r1,r1,r4
0000d2  6001              STR      r1,[r0,#0]  ; _Source
                  |L1.212|
;;;227        }
;;;228      }
;;;229      return((int)Count);
0000d4  4620              MOV      r0,r4
;;;230    }
0000d6  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

                  _GetNextCode PROC
;;;242    */
;;;243    static int _GetNextCode(void) {
0000d8  b570              PUSH     {r4-r6,lr}
;;;244      int i, j, End;
;;;245      long Result;
;;;246      if (_LZWContext.ReturnClear) {
0000da  4cc6              LDR      r4,|L1.1012|
0000dc  f8d40cd0          LDR      r0,[r4,#0xcd0]
0000e0  b128              CBZ      r0,|L1.238|
;;;247        /* The first code should be a clear code. */
;;;248        _LZWContext.ReturnClear = 0;
0000e2  2000              MOVS     r0,#0
0000e4  f8c40cd0          STR      r0,[r4,#0xcd0]
;;;249        return _LZWContext.ClearCode;
0000e8  f8d40ce4          LDR      r0,[r4,#0xce4]
;;;250      }
;;;251      End = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;252      if (End >= _LZWContext.LastBit) {
;;;253        int Count;
;;;254        if (_LZWContext.GetDone) {
;;;255          return -1; /* Error */
;;;256        }
;;;257        _LZWContext.aBuffer[0] = _LZWContext.aBuffer[_LZWContext.LastByte - 2];
;;;258        _LZWContext.aBuffer[1] = _LZWContext.aBuffer[_LZWContext.LastByte - 1];
;;;259        if ((Count = _GetDataBlock(&_LZWContext.aBuffer[2])) == 0) {
;;;260          _LZWContext.GetDone = 1;
;;;261        }
;;;262        if (Count < 0) {
;;;263          return -1; /* Error */
;;;264        }
;;;265        _LZWContext.LastByte = 2 + Count;
;;;266        _LZWContext.CurBit   = (_LZWContext.CurBit - _LZWContext.LastBit) + 16;
;;;267        _LZWContext.LastBit  = (2 + Count) * 8 ;
;;;268        End                  = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;269      }
;;;270      j = End >> 3;
;;;271      i = _LZWContext.CurBit >> 3;
;;;272      if (i == j) {
;;;273        Result = (long)_LZWContext.aBuffer[i];
;;;274      } else if (i + 1 == j) {
;;;275        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8);
;;;276      }  else {
;;;277        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8) | ((long)_LZWContext.aBuffer[i + 2] << 16);
;;;278      }
;;;279      Result = (Result >> (_LZWContext.CurBit & 0x7)) & _aMaskTbl[_LZWContext.CodeSize];
;;;280      _LZWContext.CurBit += _LZWContext.CodeSize;
;;;281      return (int)Result;
;;;282    }
0000ec  bd70              POP      {r4-r6,pc}
                  |L1.238|
0000ee  f8d41cd4          LDR      r1,[r4,#0xcd4]        ;251
0000f2  f8d40cc0          LDR      r0,[r4,#0xcc0]        ;251
0000f6  4408              ADD      r0,r0,r1              ;251
0000f8  f8d41cc4          LDR      r1,[r4,#0xcc4]        ;252
0000fc  4dbc              LDR      r5,|L1.1008|
0000fe  4281              CMP      r1,r0                 ;252
000100  dc2b              BGT      |L1.346|
000102  f8d40cc8          LDR      r0,[r4,#0xcc8]        ;254
000106  b110              CBZ      r0,|L1.270|
000108  f04f30ff          MOV      r0,#0xffffffff        ;255
00010c  bd70              POP      {r4-r6,pc}
                  |L1.270|
00010e  49ba              LDR      r1,|L1.1016|
000110  f8d40ccc          LDR      r0,[r4,#0xccc]        ;257
000114  5c41              LDRB     r1,[r0,r1]            ;257
000116  7029              STRB     r1,[r5,#0]            ;257
000118  49b8              LDR      r1,|L1.1020|
00011a  5c40              LDRB     r0,[r0,r1]            ;258
00011c  7068              STRB     r0,[r5,#1]            ;258
00011e  1ca8              ADDS     r0,r5,#2              ;259
000120  f7fffffe          BL       _GetDataBlock
000124  2800              CMP      r0,#0                 ;259
000126  d103              BNE      |L1.304|
000128  f04f0101          MOV      r1,#1                 ;260
00012c  f8c41cc8          STR      r1,[r4,#0xcc8]        ;260
                  |L1.304|
000130  da02              BGE      |L1.312|
000132  f04f30ff          MOV      r0,#0xffffffff        ;263
000136  bd70              POP      {r4-r6,pc}
                  |L1.312|
000138  1c80              ADDS     r0,r0,#2              ;265
00013a  f8c40ccc          STR      r0,[r4,#0xccc]        ;265
00013e  f8d42cc4          LDR      r2,[r4,#0xcc4]        ;266
000142  f8d41cc0          LDR      r1,[r4,#0xcc0]        ;266
000146  1a89              SUBS     r1,r1,r2              ;266
000148  3110              ADDS     r1,r1,#0x10           ;266
00014a  f8c41cc0          STR      r1,[r4,#0xcc0]        ;266
00014e  00c0              LSLS     r0,r0,#3              ;267
000150  f8c40cc4          STR      r0,[r4,#0xcc4]        ;267
000154  f8d40cd4          LDR      r0,[r4,#0xcd4]        ;268
000158  4408              ADD      r0,r0,r1              ;268
                  |L1.346|
00015a  10c2              ASRS     r2,r0,#3              ;270
00015c  f8d41cc0          LDR      r1,[r4,#0xcc0]        ;271
000160  10c8              ASRS     r0,r1,#3              ;271
000162  4290              CMP      r0,r2                 ;272
000164  d101              BNE      |L1.362|
000166  5c28              LDRB     r0,[r5,r0]            ;273
000168  e010              B        |L1.396|
                  |L1.362|
00016a  1c43              ADDS     r3,r0,#1              ;274
00016c  4293              CMP      r3,r2                 ;274
00016e  d105              BNE      |L1.380|
000170  5c2a              LDRB     r2,[r5,r0]            ;275
000172  4428              ADD      r0,r0,r5              ;275
000174  7840              LDRB     r0,[r0,#1]            ;275
000176  ea422000          ORR      r0,r2,r0,LSL #8       ;275
00017a  e007              B        |L1.396|
                  |L1.380|
00017c  182a              ADDS     r2,r5,r0              ;277
00017e  5c28              LDRB     r0,[r5,r0]            ;277
000180  7853              LDRB     r3,[r2,#1]            ;277
000182  7892              LDRB     r2,[r2,#2]            ;277
000184  021b              LSLS     r3,r3,#8              ;277
000186  ea434202          ORR      r2,r3,r2,LSL #16      ;277
00018a  4310              ORRS     r0,r0,r2              ;277
                  |L1.396|
00018c  f0010207          AND      r2,r1,#7              ;279
000190  4110              ASRS     r0,r0,r2              ;279
000192  4b9b              LDR      r3,|L1.1024|
000194  f8d42cd4          LDR      r2,[r4,#0xcd4]        ;279
000198  f8533022          LDR      r3,[r3,r2,LSL #2]     ;279
00019c  4018              ANDS     r0,r0,r3              ;279
00019e  4411              ADD      r1,r1,r2              ;280
0001a0  f8c41cc0          STR      r1,[r4,#0xcc0]        ;280
0001a4  bd70              POP      {r4-r6,pc}
;;;283    
                          ENDP

                  _GetNextByte PROC
;;;295    */
;;;296    static int _GetNextByte(void) {
0001a6  e92d41f0          PUSH     {r4-r8,lr}
;;;297      int i, Code, Incode;
;;;298      while ((Code = _GetNextCode()) >= 0) {
0001aa  f7fffffe          BL       _GetNextCode
0001ae  2800              CMP      r0,#0
0001b0  db12              BLT      |L1.472|
;;;299        if (Code == _LZWContext.ClearCode) {
0001b2  4e8f              LDR      r6,|L1.1008|
;;;300          /* Corrupt GIFs can make this happen */
;;;301          if (_LZWContext.ClearCode >= (1 << MAX_NUM_LWZ_BITS)) {
;;;302            return -1; /* Error */
;;;303          }
;;;304          /* Clear the tables */
;;;305          GUI__memset((U8 *)_LZWContext.aCode, 0, sizeof(_LZWContext.aCode));
;;;306          for (i = 0; i < _LZWContext.ClearCode; ++i) {
;;;307            _LZWContext.aPrefix[i] = i;
;;;308          }
;;;309          /* Calculate the 'special codes' in dependence of the initial code size
;;;310             and initialize the stack pointer */
;;;311          _LZWContext.CodeSize    = _LZWContext.SetCodeSize + 1;
;;;312          _LZWContext.MaxCodeSize = _LZWContext.ClearCode << 1;
;;;313          _LZWContext.MaxCode     = _LZWContext.ClearCode + 2;
;;;314          _LZWContext.sp          = _LZWContext.aDecompBuffer;
0001b4  f2431102          MOV      r1,#0x3102
;;;315          /* Read the first code from the stack after clearing and initializing */
;;;316          do {
;;;317            _LZWContext.FirstCode = _GetNextCode();
;;;318          } while (_LZWContext.FirstCode == _LZWContext.ClearCode);
;;;319          _LZWContext.OldCode = _LZWContext.FirstCode;
;;;320          return _LZWContext.FirstCode;
;;;321        }
;;;322        if (Code == _LZWContext.EndCode) {
;;;323          return -2; /* End code */
;;;324        }
;;;325        Incode = Code;
;;;326        if (Code >= _LZWContext.MaxCode) {
;;;327          *(_LZWContext.sp)++ = _LZWContext.FirstCode;
;;;328          Code = _LZWContext.OldCode;
;;;329        }
;;;330        while (Code >= _LZWContext.ClearCode) {
;;;331          *(_LZWContext.sp)++ = _LZWContext.aPrefix[Code];
;;;332          if (Code == _LZWContext.aCode[Code]) {
;;;333            return Code;
;;;334          }
;;;335          if ((_LZWContext.sp - _LZWContext.aDecompBuffer) >= sizeof(_LZWContext.aDecompBuffer)) {
0001b8  f64037b8          MOV      r7,#0xbb8
0001bc  1875              ADDS     r5,r6,r1              ;314
0001be  f5065440          ADD      r4,r6,#0x3000         ;299
                  |L1.450|
0001c2  f8d41ce4          LDR      r1,[r4,#0xce4]        ;299
0001c6  4281              CMP      r1,r0                 ;299
0001c8  d13b              BNE      |L1.578|
0001ca  f8d40ce4          LDR      r0,[r4,#0xce4]        ;301
0001ce  f5b05f80          CMP      r0,#0x1000            ;301
0001d2  db03              BLT      |L1.476|
0001d4  f04f30ff          MOV      r0,#0xffffffff        ;302
                  |L1.472|
;;;336            return Code;
;;;337          }
;;;338          Code = _LZWContext.aCode[Code];
;;;339        }
;;;340        *(_LZWContext.sp)++ = _LZWContext.FirstCode = _LZWContext.aPrefix[Code];
;;;341        if ((Code = _LZWContext.MaxCode) < (1 << MAX_NUM_LWZ_BITS)) {
;;;342          _LZWContext.aCode  [Code] = _LZWContext.OldCode;
;;;343          _LZWContext.aPrefix[Code] = _LZWContext.FirstCode;
;;;344          ++_LZWContext.MaxCode;
;;;345          if ((_LZWContext.MaxCode >= _LZWContext.MaxCodeSize) && (_LZWContext.MaxCodeSize < (1 << MAX_NUM_LWZ_BITS))) {
;;;346            _LZWContext.MaxCodeSize <<= 1;
;;;347            ++_LZWContext.CodeSize;
;;;348          }
;;;349        }
;;;350        _LZWContext.OldCode = Incode;
;;;351        if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
;;;352          return *--(_LZWContext.sp);
;;;353        }
;;;354      }
;;;355      return Code;
;;;356    }
0001d8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.476|
0001dc  f44f5200          MOV      r2,#0x2000            ;305
0001e0  2100              MOVS     r1,#0                 ;305
0001e2  f5067081          ADD      r0,r6,#0x102          ;305
0001e6  f7fffffe          BL       GUI__memset
0001ea  2000              MOVS     r0,#0                 ;306
0001ec  f8d41ce4          LDR      r1,[r4,#0xce4]        ;306
0001f0  2900              CMP      r1,#0                 ;306
0001f2  dd09              BLE      |L1.520|
                  |L1.500|
0001f4  1831              ADDS     r1,r6,r0              ;307
0001f6  f5015100          ADD      r1,r1,#0x2000         ;307
0001fa  f8810102          STRB     r0,[r1,#0x102]        ;307
0001fe  1c40              ADDS     r0,r0,#1              ;306
000200  f8d41ce4          LDR      r1,[r4,#0xce4]        ;306
000204  4281              CMP      r1,r0                 ;306
000206  dcf5              BGT      |L1.500|
                  |L1.520|
000208  f8d40cd8          LDR      r0,[r4,#0xcd8]        ;311
00020c  1c40              ADDS     r0,r0,#1              ;311
00020e  f8c40cd4          STR      r0,[r4,#0xcd4]        ;311
000212  f8d40ce4          LDR      r0,[r4,#0xce4]        ;312
000216  0041              LSLS     r1,r0,#1              ;312
000218  f8c41ce0          STR      r1,[r4,#0xce0]        ;312
00021c  1c80              ADDS     r0,r0,#2              ;313
00021e  f8c40cdc          STR      r0,[r4,#0xcdc]        ;313
000222  f8c45cbc          STR      r5,[r4,#0xcbc]        ;314
                  |L1.550|
000226  f7fffffe          BL       _GetNextCode
00022a  f8c40cec          STR      r0,[r4,#0xcec]        ;317
00022e  f8d41ce4          LDR      r1,[r4,#0xce4]        ;318
000232  4288              CMP      r0,r1                 ;318
000234  d0f7              BEQ      |L1.550|
000236  f8d40cec          LDR      r0,[r4,#0xcec]        ;319
00023a  f8c40cf0          STR      r0,[r4,#0xcf0]        ;319
00023e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.578|
000242  f8d41ce8          LDR      r1,[r4,#0xce8]        ;322
000246  4281              CMP      r1,r0                 ;322
000248  d103              BNE      |L1.594|
00024a  f06f0001          MVN      r0,#1                 ;323
                  |L1.590|
00024e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.594|
000252  4603              MOV      r3,r0                 ;325
000254  f8d41cdc          LDR      r1,[r4,#0xcdc]        ;326
000258  4281              CMP      r1,r0                 ;326
00025a  dc0b              BGT      |L1.628|
00025c  f8d41cbc          LDR      r1,[r4,#0xcbc]        ;327
000260  f8d40cec          LDR      r0,[r4,#0xcec]        ;327
000264  7008              STRB     r0,[r1,#0]            ;327
000266  f8d40cbc          LDR      r0,[r4,#0xcbc]        ;327
00026a  1c40              ADDS     r0,r0,#1              ;327
00026c  f8c40cbc          STR      r0,[r4,#0xcbc]        ;327
000270  f8d40cf0          LDR      r0,[r4,#0xcf0]        ;328
                  |L1.628|
000274  f8d41ce4          LDR      r1,[r4,#0xce4]        ;330
000278  4281              CMP      r1,r0                 ;330
00027a  dc1d              BGT      |L1.696|
                  |L1.636|
00027c  1831              ADDS     r1,r6,r0              ;331
00027e  f5015100          ADD      r1,r1,#0x2000         ;331
000282  f8d42cbc          LDR      r2,[r4,#0xcbc]        ;331
000286  f8911102          LDRB     r1,[r1,#0x102]        ;331
00028a  7011              STRB     r1,[r2,#0]            ;331
00028c  f8d41cbc          LDR      r1,[r4,#0xcbc]        ;331
000290  1c49              ADDS     r1,r1,#1              ;331
000292  f8c41cbc          STR      r1,[r4,#0xcbc]        ;331
000296  eb060240          ADD      r2,r6,r0,LSL #1       ;332
00029a  f9b22102          LDRSH    r2,[r2,#0x102]        ;332
00029e  4282              CMP      r2,r0                 ;332
0002a0  d0d5              BEQ      |L1.590|
0002a2  1b89              SUBS     r1,r1,r6              ;335
0002a4  f5a15144          SUB      r1,r1,#0x3100         ;335
0002a8  3902              SUBS     r1,#2                 ;335
0002aa  42b9              CMP      r1,r7                 ;335
0002ac  d2cf              BCS      |L1.590|
0002ae  4610              MOV      r0,r2                 ;338
0002b0  f8d41ce4          LDR      r1,[r4,#0xce4]        ;330
0002b4  4281              CMP      r1,r0                 ;330
0002b6  dde1              BLE      |L1.636|
                  |L1.696|
0002b8  4430              ADD      r0,r0,r6              ;340
0002ba  f5005000          ADD      r0,r0,#0x2000         ;340
0002be  f8900102          LDRB     r0,[r0,#0x102]        ;340
0002c2  f8c40cec          STR      r0,[r4,#0xcec]        ;340
0002c6  f8d41cbc          LDR      r1,[r4,#0xcbc]        ;340
0002ca  7008              STRB     r0,[r1,#0]            ;340
0002cc  f8d40cbc          LDR      r0,[r4,#0xcbc]        ;340
0002d0  1c40              ADDS     r0,r0,#1              ;340
0002d2  f8c40cbc          STR      r0,[r4,#0xcbc]        ;340
0002d6  f8d40cdc          LDR      r0,[r4,#0xcdc]        ;341
0002da  f5b05f80          CMP      r0,#0x1000            ;341
0002de  da20              BGE      |L1.802|
0002e0  eb060240          ADD      r2,r6,r0,LSL #1       ;342
0002e4  f8d41cf0          LDR      r1,[r4,#0xcf0]        ;342
0002e8  f8a21102          STRH     r1,[r2,#0x102]        ;342
0002ec  4430              ADD      r0,r0,r6              ;343
0002ee  f5005000          ADD      r0,r0,#0x2000         ;343
0002f2  f8d41cec          LDR      r1,[r4,#0xcec]        ;343
0002f6  f8801102          STRB     r1,[r0,#0x102]        ;343
0002fa  f8d40cdc          LDR      r0,[r4,#0xcdc]        ;344
0002fe  1c41              ADDS     r1,r0,#1              ;344
000300  f8c41cdc          STR      r1,[r4,#0xcdc]        ;344
000304  f8d40ce0          LDR      r0,[r4,#0xce0]        ;345
000308  4281              CMP      r1,r0                 ;345
00030a  db0a              BLT      |L1.802|
00030c  f5b05f80          CMP      r0,#0x1000            ;345
000310  da07              BGE      |L1.802|
000312  0040              LSLS     r0,r0,#1              ;346
000314  f8c40ce0          STR      r0,[r4,#0xce0]        ;346
000318  f8d40cd4          LDR      r0,[r4,#0xcd4]        ;347
00031c  1c40              ADDS     r0,r0,#1              ;347
00031e  f8c40cd4          STR      r0,[r4,#0xcd4]        ;347
                  |L1.802|
000322  f8c43cf0          STR      r3,[r4,#0xcf0]        ;350
000326  f8d40cbc          LDR      r0,[r4,#0xcbc]        ;351
00032a  42a8              CMP      r0,r5                 ;351
00032c  d907              BLS      |L1.830|
00032e  f8d40cbc          LDR      r0,[r4,#0xcbc]        ;352
000332  1e40              SUBS     r0,r0,#1              ;352
000334  f8c40cbc          STR      r0,[r4,#0xcbc]        ;352
000338  7800              LDRB     r0,[r0,#0]            ;352
00033a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.830|
00033e  f7fffffe          BL       _GetNextCode
000342  2800              CMP      r0,#0                 ;298
000344  f6bfaf3d          BGE      |L1.450|
000348  e8bd81f0          POP      {r4-r8,pc}
;;;357    
                          ENDP

                  _ReadExtension PROC
;;;365    */
;;;366    static int _ReadExtension(int * pTransIndex, GUI_GIF_IMAGE_INFO * pInfo, U8 * pDisposal) {
00034c  b570              PUSH     {r4-r6,lr}
00034e  4604              MOV      r4,r0
000350  460d              MOV      r5,r1
000352  4616              MOV      r6,r2
;;;367      U8 Label;
;;;368      Label = _ReadU8();
000354  f7fffffe          BL       _ReadU8
;;;369      switch (Label) {
000358  2801              CMP      r0,#1
00035a  d007              BEQ      |L1.876|
00035c  28f9              CMP      r0,#0xf9
00035e  d00c              BEQ      |L1.890|
000360  28fe              CMP      r0,#0xfe
000362  d003              BEQ      |L1.876|
000364  28ff              CMP      r0,#0xff
000366  d001              BEQ      |L1.876|
;;;370      case GIF_PLAINTEXT:
;;;371      case GIF_APPLICATION:
;;;372      case GIF_COMMENT:
;;;373        while (_GetDataBlock(_aBuffer) > 0);
;;;374        return 0;
;;;375      case GIF_GRAPHICCTL:
;;;376        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;377          return 1;
;;;378        }
;;;379        if (pInfo) {
;;;380          pInfo->Delay    = (_aBuffer[2] << 8) | _aBuffer[1];
;;;381        }
;;;382        if (pDisposal) {
;;;383          *pDisposal = (_aBuffer[0] >> 2) & 0x7;
;;;384        }
;;;385        if (pTransIndex) {
;;;386          if ((_aBuffer[0] & 0x1) != 0) {
;;;387            *pTransIndex = _aBuffer[3];
;;;388          }
;;;389        }
;;;390        if (_ReadU8() != 0) { /* Read block terminator */
;;;391          return 1;
;;;392        }
;;;393        return 0;
;;;394      }
;;;395      return 1; /* Error */
000368  2001              MOVS     r0,#1
;;;396    }
00036a  bd70              POP      {r4-r6,pc}
                  |L1.876|
00036c  4825              LDR      r0,|L1.1028|
00036e  f7fffffe          BL       _GetDataBlock
000372  2800              CMP      r0,#0                 ;373
000374  dcfa              BGT      |L1.876|
000376  2000              MOVS     r0,#0                 ;374
000378  bd70              POP      {r4-r6,pc}
                  |L1.890|
00037a  4822              LDR      r0,|L1.1028|
00037c  f7fffffe          BL       _GetDataBlock
000380  2804              CMP      r0,#4                 ;376
000382  d001              BEQ      |L1.904|
000384  2001              MOVS     r0,#1                 ;377
000386  bd70              POP      {r4-r6,pc}
                  |L1.904|
000388  481e              LDR      r0,|L1.1028|
00038a  b125              CBZ      r5,|L1.918|
00038c  7841              LDRB     r1,[r0,#1]            ;380  ; _aBuffer
00038e  7882              LDRB     r2,[r0,#2]            ;380  ; _aBuffer
000390  ea412102          ORR      r1,r1,r2,LSL #8       ;380
000394  6129              STR      r1,[r5,#0x10]         ;380
                  |L1.918|
000396  b11e              CBZ      r6,|L1.928|
000398  7801              LDRB     r1,[r0,#0]            ;383  ; _aBuffer
00039a  f3c10182          UBFX     r1,r1,#2,#3           ;383
00039e  7031              STRB     r1,[r6,#0]            ;383
                  |L1.928|
0003a0  b12c              CBZ      r4,|L1.942|
0003a2  7801              LDRB     r1,[r0,#0]            ;386  ; _aBuffer
0003a4  f0110f01          TST      r1,#1                 ;386
0003a8  d001              BEQ      |L1.942|
0003aa  78c0              LDRB     r0,[r0,#3]            ;387  ; _aBuffer
0003ac  6020              STR      r0,[r4,#0]            ;387
                  |L1.942|
0003ae  f7fffffe          BL       _ReadU8
0003b2  b108              CBZ      r0,|L1.952|
0003b4  2001              MOVS     r0,#1                 ;391
0003b6  bd70              POP      {r4-r6,pc}
                  |L1.952|
0003b8  2000              MOVS     r0,#0                 ;393
0003ba  bd70              POP      {r4-r6,pc}
;;;397    
                          ENDP

                  _ReadComment PROC
;;;405    */
;;;406    static int _ReadComment(U8 * pBuffer, int MaxSize, int * pSize) {
0003bc  b570              PUSH     {r4-r6,lr}
0003be  4605              MOV      r5,r0
0003c0  460c              MOV      r4,r1
0003c2  4616              MOV      r6,r2
;;;407      U8 Label;
;;;408      int Size;
;;;409      Label = _ReadU8();
0003c4  f7fffffe          BL       _ReadU8
;;;410      switch (Label) {
0003c8  2801              CMP      r0,#1
0003ca  d007              BEQ      |L1.988|
0003cc  28f9              CMP      r0,#0xf9
0003ce  d02a              BEQ      |L1.1062|
0003d0  28fe              CMP      r0,#0xfe
0003d2  d019              BEQ      |L1.1032|
0003d4  28ff              CMP      r0,#0xff
0003d6  d001              BEQ      |L1.988|
;;;411      case GIF_PLAINTEXT:
;;;412      case GIF_APPLICATION:
;;;413        while (_GetDataBlock(_aBuffer) > 0);
;;;414        return 0;
;;;415      case GIF_COMMENT:
;;;416        Size = _GetDataBlock(_aBuffer);
;;;417        if (Size > MaxSize) {
;;;418          Size = MaxSize;
;;;419        }
;;;420        if (pBuffer) {
;;;421          *pSize = Size;
;;;422          memcpy(pBuffer, _aBuffer, Size);
;;;423        }
;;;424        return 0;
;;;425      case GIF_GRAPHICCTL:
;;;426        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;427          return 1;
;;;428        }
;;;429        if (_ReadU8() != 0) { /* Read block terminator, must be 0 */
;;;430          return 1;
;;;431        }
;;;432        return 0;
;;;433      }
;;;434      return 1; /* Error */
0003d8  2001              MOVS     r0,#1
;;;435    }
0003da  bd70              POP      {r4-r6,pc}
                  |L1.988|
0003dc  4809              LDR      r0,|L1.1028|
0003de  f7fffffe          BL       _GetDataBlock
0003e2  2800              CMP      r0,#0                 ;413
0003e4  dcfa              BGT      |L1.988|
0003e6  2000              MOVS     r0,#0                 ;414
                  |L1.1000|
0003e8  bd70              POP      {r4-r6,pc}
0003ea  0000              DCW      0x0000
                  |L1.1004|
                          DCD      ||.data||
                  |L1.1008|
                          DCD      ||.bss||
                  |L1.1012|
                          DCD      ||.bss||+0x3000
                  |L1.1016|
                          DCD      ||.bss||-0x2
                  |L1.1020|
                          DCD      ||.bss||-0x1
                  |L1.1024|
                          DCD      ||.constdata||
                  |L1.1028|
                          DCD      ||.bss||+0x40f4
                  |L1.1032|
000408  48fb              LDR      r0,|L1.2040|
00040a  f7fffffe          BL       _GetDataBlock
00040e  4602              MOV      r2,r0                 ;416
000410  42a2              CMP      r2,r4                 ;417
000412  dd00              BLE      |L1.1046|
000414  4622              MOV      r2,r4                 ;418
                  |L1.1046|
000416  b125              CBZ      r5,|L1.1058|
000418  6032              STR      r2,[r6,#0]            ;421
00041a  49f7              LDR      r1,|L1.2040|
00041c  4628              MOV      r0,r5                 ;422
00041e  f7fffffe          BL       __aeabi_memcpy
                  |L1.1058|
000422  2000              MOVS     r0,#0                 ;424
000424  e7e0              B        |L1.1000|
                  |L1.1062|
000426  48f4              LDR      r0,|L1.2040|
000428  f7fffffe          BL       _GetDataBlock
00042c  2804              CMP      r0,#4                 ;426
00042e  d001              BEQ      |L1.1076|
000430  2001              MOVS     r0,#1                 ;427
000432  e7d9              B        |L1.1000|
                  |L1.1076|
000434  f7fffffe          BL       _ReadU8
000438  b108              CBZ      r0,|L1.1086|
00043a  2001              MOVS     r0,#1                 ;430
00043c  e7d4              B        |L1.1000|
                  |L1.1086|
00043e  2000              MOVS     r0,#0                 ;432
000440  e7d2              B        |L1.1000|
;;;436    
                          ENDP

                  _DispGIFImage PROC
;;;455    */
;;;456    static int _DispGIFImage(IMAGE_DESCRIPTOR * pDescriptor, int x0, int y0, int Transparency, int Disposal) {
000442  e92d4fff          PUSH     {r0-r11,lr}
000446  b08d              SUB      sp,sp,#0x34
000448  4604              MOV      r4,r0
00044a  f8ddb068          LDR      r11,[sp,#0x68]
00044e  4699              MOV      r9,r3
;;;457      int Codesize, Index, OldIndex, XPos, YPos, YCnt, Pass, Interlace, XEnd;
;;;458      int Width, Height, NumColors, Cnt, BkColorIndex, ColorIndex;
;;;459      LCD_LOGPALETTE LogPalette;
;;;460      const LCD_PIXELINDEX * pTrans;
;;;461      Width     = pDescriptor->XSize;
000450  68a0              LDR      r0,[r4,#8]
;;;462      Height    = pDescriptor->YSize;
000452  68e1              LDR      r1,[r4,#0xc]
000454  9107              STR      r1,[sp,#0x1c]
;;;463      NumColors = pDescriptor->NumColors;
000456  6961              LDR      r1,[r4,#0x14]
000458  9106              STR      r1,[sp,#0x18]
;;;464      XEnd      = Width + x0 - 1;
00045a  990e              LDR      r1,[sp,#0x38]
00045c  4408              ADD      r0,r0,r1
00045e  f1a00a01          SUB      r10,r0,#1
;;;465      BkColorIndex = LCD_GetBkColorIndex();
000462  f7fffffe          BL       LCD_GetBkColorIndex
000466  9005              STR      r0,[sp,#0x14]
;;;466      /* Get color translation table  */
;;;467      LogPalette.NumEntries  = NumColors;
000468  9906              LDR      r1,[sp,#0x18]
00046a  9102              STR      r1,[sp,#8]
;;;468      LogPalette.HasTrans    = 0;
00046c  2000              MOVS     r0,#0
00046e  f88d000c          STRB     r0,[sp,#0xc]
;;;469      LogPalette.pPalEntries = _aColorTable;
000472  48e2              LDR      r0,|L1.2044|
000474  9004              STR      r0,[sp,#0x10]
;;;470      if ((pTrans = LCD_GetpPalConvTable((const LCD_LOGPALETTE *)&LogPalette)) == NULL) {
000476  a802              ADD      r0,sp,#8
000478  f7fffffe          BL       LCD_GetpPalConvTable
00047c  9001              STR      r0,[sp,#4]
00047e  b340              CBZ      r0,|L1.1234|
;;;471        return 1; /* Error */
;;;472      }
;;;473      Codesize  = _ReadU8();                 /* Read the LZW codesize */
000480  f7fffffe          BL       _ReadU8
;;;474      _InitLZW(Codesize);                    /* Initialize the LZW stack with the LZW codesize */
000484  f7fffffe          BL       _InitLZW
;;;475      Interlace = pDescriptor->Flags & 0x40; /* Evaluate if image is interlaced */
000488  6920              LDR      r0,[r4,#0x10]
00048a  f0000040          AND      r0,r0,#0x40
00048e  9008              STR      r0,[sp,#0x20]
;;;476      for (YCnt = 0, YPos = y0, Pass = 0; YCnt < Height; YCnt++) {
000490  2000              MOVS     r0,#0
000492  900a              STR      r0,[sp,#0x28]
000494  f8dd803c          LDR      r8,[sp,#0x3c]
000498  9009              STR      r0,[sp,#0x24]
00049a  9807              LDR      r0,[sp,#0x1c]
00049c  2800              CMP      r0,#0
00049e  dd74              BLE      |L1.1418|
;;;477        Cnt      = 0;
;;;478        OldIndex = -1;    
;;;479        for (XPos = x0; XPos <= XEnd; XPos++) {
;;;480          if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
0004a0  48d7              LDR      r0,|L1.2048|
0004a2  f2431102          MOV      r1,#0x3102
0004a6  4401              ADD      r1,r1,r0
0004a8  f5005040          ADD      r0,r0,#0x3000
0004ac  910c              STR      r1,[sp,#0x30]
0004ae  900b              STR      r0,[sp,#0x2c]
                  |L1.1200|
0004b0  2600              MOVS     r6,#0                 ;477
0004b2  1e75              SUBS     r5,r6,#1              ;478
0004b4  9c0e              LDR      r4,[sp,#0x38]         ;479
0004b6  4554              CMP      r4,r10                ;479
0004b8  dc5c              BGT      |L1.1396|
                  |L1.1210|
0004ba  980b              LDR      r0,[sp,#0x2c]
0004bc  990c              LDR      r1,[sp,#0x30]
0004be  f8d00cbc          LDR      r0,[r0,#0xcbc]
0004c2  4288              CMP      r0,r1
0004c4  d909              BLS      |L1.1242|
;;;481            Index = *--(_LZWContext.sp);
0004c6  990b              LDR      r1,[sp,#0x2c]
0004c8  1e40              SUBS     r0,r0,#1
0004ca  f8c10cbc          STR      r0,[r1,#0xcbc]
0004ce  7807              LDRB     r7,[r0,#0]
0004d0  e006              B        |L1.1248|
                  |L1.1234|
;;;482          } else {
;;;483            Index = _GetNextByte();
;;;484          }
;;;485          if (Index == -2) {
;;;486            return 0; /* End code */
;;;487          }
;;;488          if ((Index < 0) || (Index >= NumColors)) {
;;;489            /* If Index out of legal range stop decompressing */
;;;490            return 1; /* Error */
;;;491          }
;;;492          /* If current index equals old index increment counter */
;;;493          if ((Index == OldIndex) && (XPos <= XEnd)) {
;;;494            Cnt++;
;;;495          } else {
;;;496            if (Cnt) {
;;;497              if (OldIndex != Transparency) {
;;;498                LCD_SetColorIndex(*(pTrans + OldIndex));
;;;499                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;500              } else if (Disposal == 2) {
;;;501                LCD_SetColorIndex(BkColorIndex);
;;;502                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;503              }
;;;504              Cnt = 0;
;;;505            } else {
;;;506              if (OldIndex >= 0) {
;;;507                if (OldIndex != Transparency) {
;;;508                  LCD_SetPixelIndex(XPos - 1, YPos, *(pTrans + OldIndex));
;;;509                } else if (Disposal == 2) {
;;;510                  LCD_SetPixelIndex(XPos - 1, YPos, BkColorIndex);
;;;511                }
;;;512              }
;;;513            }
;;;514          }
;;;515          OldIndex = Index;
;;;516        }
;;;517        if ((OldIndex != Transparency) || (Disposal == 2)) {
;;;518          if (OldIndex != Transparency) {
;;;519            ColorIndex = *(pTrans + OldIndex);
;;;520          } else {
;;;521            ColorIndex = BkColorIndex;
;;;522          }
;;;523          if (Cnt) {
;;;524            LCD_SetColorIndex(ColorIndex);
;;;525            LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;526          } else {
;;;527            LCD_SetPixelIndex(XEnd, YPos, ColorIndex);
;;;528          }
;;;529        }
;;;530        /* Adjust YPos if image is interlaced */
;;;531        if (Interlace) {
;;;532          YPos += _aInterlaceOffset[Pass];
;;;533          if ((YPos - y0) >= Height) {
;;;534            ++Pass;
;;;535            YPos = _aInterlaceYPos[Pass] + y0;
;;;536          }
;;;537        } else {
;;;538          YPos++;
;;;539        }
;;;540      }
;;;541      return 0;
;;;542    }
0004d2  b011              ADD      sp,sp,#0x44
0004d4  2001              MOVS     r0,#1                 ;471
0004d6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1242|
0004da  f7fffffe          BL       _GetNextByte
0004de  4607              MOV      r7,r0                 ;483
                  |L1.1248|
0004e0  1cb8              ADDS     r0,r7,#2              ;485
0004e2  d008              BEQ      |L1.1270|
0004e4  2f00              CMP      r7,#0                 ;488
0004e6  db02              BLT      |L1.1262|
0004e8  9806              LDR      r0,[sp,#0x18]         ;488
0004ea  4287              CMP      r7,r0                 ;488
0004ec  db07              BLT      |L1.1278|
                  |L1.1262|
0004ee  b011              ADD      sp,sp,#0x44
0004f0  2001              MOVS     r0,#1                 ;490
0004f2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1270|
0004f6  b011              ADD      sp,sp,#0x44
0004f8  2000              MOVS     r0,#0                 ;486
0004fa  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1278|
0004fe  42af              CMP      r7,r5                 ;493
000500  d103              BNE      |L1.1290|
000502  4554              CMP      r4,r10                ;493
000504  dc01              BGT      |L1.1290|
000506  1c76              ADDS     r6,r6,#1              ;494
000508  e030              B        |L1.1388|
                  |L1.1290|
00050a  b1de              CBZ      r6,|L1.1348|
00050c  454d              CMP      r5,r9                 ;497
00050e  d00b              BEQ      |L1.1320|
000510  9801              LDR      r0,[sp,#4]            ;498
000512  f8300015          LDRH     r0,[r0,r5,LSL #1]     ;498
000516  f7fffffe          BL       LCD_SetColorIndex
00051a  1ba0              SUBS     r0,r4,r6              ;499
00051c  1e40              SUBS     r0,r0,#1              ;499
00051e  1e62              SUBS     r2,r4,#1              ;499
000520  4641              MOV      r1,r8                 ;499
000522  f7fffffe          BL       LCD_DrawHLine
000526  e00b              B        |L1.1344|
                  |L1.1320|
000528  f1bb0f02          CMP      r11,#2                ;500
00052c  d108              BNE      |L1.1344|
00052e  9805              LDR      r0,[sp,#0x14]         ;501
000530  f7fffffe          BL       LCD_SetColorIndex
000534  1ba0              SUBS     r0,r4,r6              ;502
000536  1e40              SUBS     r0,r0,#1              ;502
000538  1e62              SUBS     r2,r4,#1              ;502
00053a  4641              MOV      r1,r8                 ;502
00053c  f7fffffe          BL       LCD_DrawHLine
                  |L1.1344|
000540  2600              MOVS     r6,#0                 ;504
000542  e013              B        |L1.1388|
                  |L1.1348|
000544  2d00              CMP      r5,#0                 ;506
000546  db11              BLT      |L1.1388|
000548  454d              CMP      r5,r9                 ;507
00054a  d007              BEQ      |L1.1372|
00054c  9801              LDR      r0,[sp,#4]            ;508
00054e  4641              MOV      r1,r8                 ;508
000550  f8302015          LDRH     r2,[r0,r5,LSL #1]     ;508
000554  1e60              SUBS     r0,r4,#1              ;508
000556  f7fffffe          BL       LCD_SetPixelIndex
00055a  e007              B        |L1.1388|
                  |L1.1372|
00055c  f1bb0f02          CMP      r11,#2                ;509
000560  d104              BNE      |L1.1388|
000562  4641              MOV      r1,r8                 ;510
000564  1e60              SUBS     r0,r4,#1              ;510
000566  9a05              LDR      r2,[sp,#0x14]         ;510
000568  f7fffffe          BL       LCD_SetPixelIndex
                  |L1.1388|
00056c  463d              MOV      r5,r7                 ;515
00056e  1c64              ADDS     r4,r4,#1              ;479
000570  4554              CMP      r4,r10                ;479
000572  dda2              BLE      |L1.1210|
                  |L1.1396|
000574  454d              CMP      r5,r9                 ;517
000576  d102              BNE      |L1.1406|
000578  f1bb0f02          CMP      r11,#2                ;517
00057c  d116              BNE      |L1.1452|
                  |L1.1406|
00057e  454d              CMP      r5,r9                 ;518
000580  d004              BEQ      |L1.1420|
000582  9801              LDR      r0,[sp,#4]            ;519
000584  f8300015          LDRH     r0,[r0,r5,LSL #1]     ;519
000588  e001              B        |L1.1422|
                  |L1.1418|
00058a  e031              B        |L1.1520|
                  |L1.1420|
00058c  9805              LDR      r0,[sp,#0x14]         ;521
                  |L1.1422|
00058e  b146              CBZ      r6,|L1.1442|
000590  f7fffffe          BL       LCD_SetColorIndex
000594  1ba0              SUBS     r0,r4,r6              ;525
000596  1e40              SUBS     r0,r0,#1              ;525
000598  1e62              SUBS     r2,r4,#1              ;525
00059a  4641              MOV      r1,r8                 ;525
00059c  f7fffffe          BL       LCD_DrawHLine
0005a0  e004              B        |L1.1452|
                  |L1.1442|
0005a2  4602              MOV      r2,r0                 ;527
0005a4  4641              MOV      r1,r8                 ;527
0005a6  4650              MOV      r0,r10                ;527
0005a8  f7fffffe          BL       LCD_SetPixelIndex
                  |L1.1452|
0005ac  9808              LDR      r0,[sp,#0x20]         ;531
0005ae  b1a8              CBZ      r0,|L1.1500|
0005b0  4894              LDR      r0,|L1.2052|
0005b2  9909              LDR      r1,[sp,#0x24]         ;532
0005b4  f8500021          LDR      r0,[r0,r1,LSL #2]     ;532
0005b8  4480              ADD      r8,r8,r0              ;532
0005ba  980f              LDR      r0,[sp,#0x3c]         ;533
0005bc  eba80100          SUB      r1,r8,r0              ;533
0005c0  9807              LDR      r0,[sp,#0x1c]         ;533
0005c2  4281              CMP      r1,r0                 ;533
0005c4  db0c              BLT      |L1.1504|
0005c6  9809              LDR      r0,[sp,#0x24]         ;534
0005c8  1c40              ADDS     r0,r0,#1              ;534
0005ca  9009              STR      r0,[sp,#0x24]         ;534
0005cc  488e              LDR      r0,|L1.2056|
0005ce  9909              LDR      r1,[sp,#0x24]         ;535
0005d0  f8501021          LDR      r1,[r0,r1,LSL #2]     ;535
0005d4  980f              LDR      r0,[sp,#0x3c]         ;535
0005d6  eb010800          ADD      r8,r1,r0              ;535
0005da  e001              B        |L1.1504|
                  |L1.1500|
0005dc  f1080801          ADD      r8,r8,#1              ;538
                  |L1.1504|
0005e0  980a              LDR      r0,[sp,#0x28]         ;476
0005e2  1c40              ADDS     r0,r0,#1              ;476
0005e4  900a              STR      r0,[sp,#0x28]         ;476
0005e6  9907              LDR      r1,[sp,#0x1c]         ;476
0005e8  980a              LDR      r0,[sp,#0x28]         ;476
0005ea  4288              CMP      r0,r1                 ;476
0005ec  f6ffaf60          BLT      |L1.1200|
                  |L1.1520|
0005f0  b011              ADD      sp,sp,#0x44
0005f2  2000              MOVS     r0,#0                 ;541
0005f4  e8bd8ff0          POP      {r4-r11,pc}
;;;543    
                          ENDP

                  _ReadColorMap PROC
;;;547    */
;;;548    static int _ReadColorMap(int NumColors) {
0005f8  e92d47f0          PUSH     {r4-r10,lr}
0005fc  4605              MOV      r5,r0
;;;549      int i;
;;;550      for (i = 0; i < NumColors; i++) {
0005fe  2400              MOVS     r4,#0
000600  2d00              CMP      r5,#0
000602  dd18              BLE      |L1.1590|
;;;551        U8 r, g, b;
;;;552        r = _ReadU8 ();
;;;553        g = _ReadU8 ();
;;;554        b = _ReadU8 ();
;;;555        if (_Source.RemBytes < 0) {
000604  4e81              LDR      r6,|L1.2060|
;;;556          return 1; /* Error */
;;;557        }
;;;558        _aColorTable[i] = r | ((U16)g << 8) | ((U32)b << 16);
000606  4f7d              LDR      r7,|L1.2044|
                  |L1.1544|
000608  f7fffffe          BL       _ReadU8
00060c  4680              MOV      r8,r0                 ;552
00060e  f7fffffe          BL       _ReadU8
000612  4681              MOV      r9,r0                 ;553
000614  f7fffffe          BL       _ReadU8
000618  6871              LDR      r1,[r6,#4]            ;555  ; _Source
00061a  2900              CMP      r1,#0                 ;555
00061c  da02              BGE      |L1.1572|
00061e  2001              MOVS     r0,#1                 ;556
;;;559      }
;;;560      return 0;
;;;561    }
000620  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1572|
000624  ea482109          ORR      r1,r8,r9,LSL #8       ;558
000628  ea414000          ORR      r0,r1,r0,LSL #16      ;558
00062c  f8470024          STR      r0,[r7,r4,LSL #2]     ;558
000630  1c64              ADDS     r4,r4,#1              ;550
000632  42ac              CMP      r4,r5                 ;550
000634  dbe8              BLT      |L1.1544|
                  |L1.1590|
000636  2000              MOVS     r0,#0                 ;560
000638  e8bd87f0          POP      {r4-r10,pc}
;;;562    
                          ENDP

                  _InitGIFDecoding PROC
;;;573    */
;;;574    static int _InitGIFDecoding(const U8 * pData, U32 NumBytes) {
00063c  b510              PUSH     {r4,lr}
00063e  b082              SUB      sp,sp,#8
;;;575      U8 acVersion[7] = {0};
000640  2200              MOVS     r2,#0
000642  9200              STR      r2,[sp,#0]
000644  9201              STR      r2,[sp,#4]
;;;576      _Source.pSrc     = pData;
000646  4c71              LDR      r4,|L1.2060|
000648  6020              STR      r0,[r4,#0]  ; _Source
;;;577      _Source.RemBytes = NumBytes;
00064a  6061              STR      r1,[r4,#4]  ; _Source
;;;578      /* Check if the file is a legal GIF file by checking the 6 byte file header */
;;;579      _ReadBytes(acVersion, 6); if (!_Source.RemBytes) { return 0; }
00064c  2106              MOVS     r1,#6
00064e  4668              MOV      r0,sp
000650  f7fffffe          BL       _ReadBytes
000654  6860              LDR      r0,[r4,#4]  ; _Source
000656  b120              CBZ      r0,|L1.1634|
;;;580      if ( (acVersion[0] != 'G') || 
000658  f89d0000          LDRB     r0,[sp,#0]
00065c  2847              CMP      r0,#0x47
00065e  d119              BNE      |L1.1684|
000660  e002              B        |L1.1640|
                  |L1.1634|
;;;581           (acVersion[1] != 'I') || 
;;;582           (acVersion[2] != 'F') || 
;;;583           (acVersion[3] != '8') ||
;;;584          ((acVersion[4] != '7') && (acVersion[4] != '9')) ||
;;;585           (acVersion[5] != 'a')) {
;;;586        return 1;
;;;587      }
;;;588      return 0;
;;;589    }
000662  b002              ADD      sp,sp,#8
000664  2000              MOVS     r0,#0                 ;579
000666  bd10              POP      {r4,pc}
                  |L1.1640|
000668  f89d0001          LDRB     r0,[sp,#1]            ;581
00066c  2849              CMP      r0,#0x49              ;581
00066e  d111              BNE      |L1.1684|
000670  f89d0002          LDRB     r0,[sp,#2]            ;582
000674  2846              CMP      r0,#0x46              ;582
000676  d10d              BNE      |L1.1684|
000678  f89d0003          LDRB     r0,[sp,#3]            ;583
00067c  2838              CMP      r0,#0x38              ;583
00067e  d109              BNE      |L1.1684|
000680  f89d0004          LDRB     r0,[sp,#4]            ;584
000684  2837              CMP      r0,#0x37              ;584
000686  d001              BEQ      |L1.1676|
000688  2839              CMP      r0,#0x39              ;584
00068a  d103              BNE      |L1.1684|
                  |L1.1676|
00068c  f89d0005          LDRB     r0,[sp,#5]            ;585
000690  2861              CMP      r0,#0x61              ;585
000692  d002              BEQ      |L1.1690|
                  |L1.1684|
000694  b002              ADD      sp,sp,#8
000696  2001              MOVS     r0,#1                 ;586
000698  bd10              POP      {r4,pc}
                  |L1.1690|
00069a  b002              ADD      sp,sp,#8
00069c  2000              MOVS     r0,#0                 ;588
00069e  bd10              POP      {r4,pc}
;;;590    
                          ENDP

                  _GetImageDimension PROC
;;;600    */
;;;601    static int _GetImageDimension(int * pxSize, int * pySize) {
0006a0  b570              PUSH     {r4-r6,lr}
0006a2  4604              MOV      r4,r0
0006a4  460d              MOV      r5,r1
;;;602      int XSize, YSize;
;;;603      /* Read image size */
;;;604      XSize = _ReadU16();
0006a6  f7fffffe          BL       _ReadU16
0006aa  4606              MOV      r6,r0
;;;605      YSize = _ReadU16();
0006ac  f7fffffe          BL       _ReadU16
;;;606      if ((XSize > 2000) || (YSize > 2000)) {
0006b0  f5b66ffa          CMP      r6,#0x7d0
0006b4  dc02              BGT      |L1.1724|
0006b6  f5b06ffa          CMP      r0,#0x7d0
0006ba  dd01              BLE      |L1.1728|
                  |L1.1724|
;;;607        return 1; /* Error if image is too large */
0006bc  2001              MOVS     r0,#1
;;;608      }
;;;609      if (pxSize) {
;;;610        *pxSize = XSize;
;;;611      }
;;;612      if (pySize) {
;;;613        *pySize = YSize;
;;;614      }
;;;615      return 0;
;;;616    }
0006be  bd70              POP      {r4-r6,pc}
                  |L1.1728|
0006c0  b104              CBZ      r4,|L1.1732|
0006c2  6026              STR      r6,[r4,#0]            ;610
                  |L1.1732|
0006c4  b105              CBZ      r5,|L1.1736|
0006c6  6028              STR      r0,[r5,#0]            ;613
                  |L1.1736|
0006c8  2000              MOVS     r0,#0                 ;615
0006ca  bd70              POP      {r4-r6,pc}
;;;617    
                          ENDP

                  _GetGlobalColorTable PROC
;;;628    */
;;;629    static int _GetGlobalColorTable(int * pNumColors) {
0006cc  b570              PUSH     {r4-r6,lr}
0006ce  4604              MOV      r4,r0
;;;630      U8 Flags;
;;;631      int NumColors;
;;;632      /* Read flags from logical screen descriptor */
;;;633      Flags = _ReadU8 ();
0006d0  f7fffffe          BL       _ReadU8
0006d4  4605              MOV      r5,r0
;;;634      _ReadU8 ();
0006d6  f7fffffe          BL       _ReadU8
;;;635      _ReadU8 ();
0006da  f7fffffe          BL       _ReadU8
;;;636      if (_Source.RemBytes < 0) {
0006de  484b              LDR      r0,|L1.2060|
0006e0  6840              LDR      r0,[r0,#4]  ; _Source
0006e2  2800              CMP      r0,#0
0006e4  da01              BGE      |L1.1770|
;;;637        return 1; /* Error */
0006e6  2001              MOVS     r0,#1
;;;638      }
;;;639      NumColors = 2 << (Flags & 0x7);
;;;640      if (Flags & 0x80) {
;;;641        /* Read global color table */
;;;642        if (_ReadColorMap(NumColors)) {
;;;643          return 1; /* Error */
;;;644        }
;;;645      }
;;;646      if (pNumColors) {
;;;647        *pNumColors = NumColors;
;;;648      }
;;;649      return 0;
;;;650    }
0006e8  bd70              POP      {r4-r6,pc}
                  |L1.1770|
0006ea  f0050007          AND      r0,r5,#7              ;639
0006ee  2102              MOVS     r1,#2                 ;639
0006f0  fa01f600          LSL      r6,r1,r0              ;639
0006f4  f0150f80          TST      r5,#0x80              ;640
0006f8  d005              BEQ      |L1.1798|
0006fa  4630              MOV      r0,r6                 ;642
0006fc  f7fffffe          BL       _ReadColorMap
000700  b108              CBZ      r0,|L1.1798|
000702  2001              MOVS     r0,#1                 ;643
000704  bd70              POP      {r4-r6,pc}
                  |L1.1798|
000706  b104              CBZ      r4,|L1.1802|
000708  6026              STR      r6,[r4,#0]            ;647
                  |L1.1802|
00070a  2000              MOVS     r0,#0                 ;649
00070c  bd70              POP      {r4-r6,pc}
;;;651    
                          ENDP

                  _GetSizeAndColorTable PROC
;;;655    */
;;;656    static int _GetSizeAndColorTable(const U8 * pData, U32 NumBytes, int * pxSize, int * pySize, int * pNumColors) {
00070e  b570              PUSH     {r4-r6,lr}
000710  4615              MOV      r5,r2
000712  461e              MOV      r6,r3
000714  9c04              LDR      r4,[sp,#0x10]
;;;657      /* Initialize decoding */
;;;658      if (_InitGIFDecoding(pData, NumBytes)) {
000716  f7fffffe          BL       _InitGIFDecoding
00071a  b108              CBZ      r0,|L1.1824|
;;;659        return 1; /* Error */
00071c  2001              MOVS     r0,#1
;;;660      }
;;;661      /* Get image size */
;;;662      if (_GetImageDimension(pxSize, pySize)) {
;;;663        return 1; /* Error */
;;;664      }
;;;665      /* Get global color table (if available) */
;;;666      if (_GetGlobalColorTable(pNumColors)) {
;;;667        return 1; /* Error */
;;;668      }
;;;669      return 0;
;;;670    }
00071e  bd70              POP      {r4-r6,pc}
                  |L1.1824|
000720  4631              MOV      r1,r6                 ;662
000722  4628              MOV      r0,r5                 ;662
000724  f7fffffe          BL       _GetImageDimension
000728  b108              CBZ      r0,|L1.1838|
00072a  2001              MOVS     r0,#1                 ;663
00072c  bd70              POP      {r4-r6,pc}
                  |L1.1838|
00072e  4620              MOV      r0,r4                 ;666
000730  f7fffffe          BL       _GetGlobalColorTable
000734  b108              CBZ      r0,|L1.1850|
000736  2001              MOVS     r0,#1                 ;667
000738  bd70              POP      {r4-r6,pc}
                  |L1.1850|
00073a  2000              MOVS     r0,#0                 ;669
00073c  bd70              POP      {r4-r6,pc}
;;;671    
                          ENDP

                  _GetGIFInfo PROC
;;;675    */
;;;676    static int _GetGIFInfo(const U8 * pData, U32 NumBytes, GUI_GIF_INFO * pInfo) {
00073e  b570              PUSH     {r4-r6,lr}
000740  b082              SUB      sp,sp,#8
000742  4616              MOV      r6,r2
;;;677      U8 Flags, Introducer;
;;;678      int NumColors, ImageCnt;
;;;679      /* Initialize decoding and get size and global color table */
;;;680      if (_GetSizeAndColorTable(pData, NumBytes, &pInfo->xSize, &pInfo->ySize, &NumColors)) {
000744  ab01              ADD      r3,sp,#4
000746  9300              STR      r3,[sp,#0]
000748  1d33              ADDS     r3,r6,#4
00074a  4632              MOV      r2,r6
00074c  f7fffffe          BL       _GetSizeAndColorTable
000750  b110              CBZ      r0,|L1.1880|
;;;681        return 1; /* Error */
;;;682      }
;;;683      ImageCnt = 0;
;;;684      /* Iterate over the blocks */
;;;685      do {
;;;686        Introducer = _ReadU8();
;;;687        switch (Introducer) {
;;;688        case GIF_INTRO_IMAGE:
;;;689          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;690          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;691          if (Flags & 0x80) {
;;;692            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;693          }
;;;694          _SkipBytes(1);                /* Skip codesize */
;;;695          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;696          ImageCnt++;
;;;697          break;
;;;698        case GIF_INTRO_TERMINATOR:
;;;699          break;
;;;700        case GIF_INTRO_EXTENSION:
;;;701          if (_ReadExtension(NULL, NULL, NULL)) { /* Skip image extension */
;;;702            return 1;
;;;703          }
;;;704          break;
;;;705        default:
;;;706          return 1;
;;;707        }
;;;708      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;709      pInfo->NumImages = ImageCnt;
;;;710      return 0;
;;;711    }
000752  b002              ADD      sp,sp,#8
000754  2001              MOVS     r0,#1                 ;681
000756  bd70              POP      {r4-r6,pc}
                  |L1.1880|
000758  2400              MOVS     r4,#0                 ;683
                  |L1.1882|
00075a  f7fffffe          BL       _ReadU8
00075e  4605              MOV      r5,r0                 ;686
000760  4628              MOV      r0,r5                 ;687
000762  2d21              CMP      r5,#0x21              ;687
000764  d01d              BEQ      |L1.1954|
000766  282c              CMP      r0,#0x2c              ;687
000768  d004              BEQ      |L1.1908|
00076a  283b              CMP      r0,#0x3b              ;687
00076c  d022              BEQ      |L1.1972|
00076e  b002              ADD      sp,sp,#8
000770  2001              MOVS     r0,#1                 ;706
000772  bd70              POP      {r4-r6,pc}
                  |L1.1908|
000774  2008              MOVS     r0,#8                 ;689
000776  f7fffffe          BL       _SkipBytes
00077a  f7fffffe          BL       _ReadU8
00077e  f0100f80          TST      r0,#0x80              ;691
000782  d004              BEQ      |L1.1934|
000784  9801              LDR      r0,[sp,#4]            ;692
000786  eb000040          ADD      r0,r0,r0,LSL #1       ;692
00078a  f7fffffe          BL       _SkipBytes
                  |L1.1934|
00078e  2001              MOVS     r0,#1                 ;694
000790  f7fffffe          BL       _SkipBytes
                  |L1.1940|
000794  2000              MOVS     r0,#0                 ;695
000796  f7fffffe          BL       _GetDataBlock
00079a  2800              CMP      r0,#0                 ;695
00079c  dcfa              BGT      |L1.1940|
00079e  1c64              ADDS     r4,r4,#1              ;696
0007a0  e008              B        |L1.1972|
                  |L1.1954|
0007a2  2200              MOVS     r2,#0                 ;701
0007a4  4611              MOV      r1,r2                 ;701
0007a6  4610              MOV      r0,r2                 ;701
0007a8  f7fffffe          BL       _ReadExtension
0007ac  b110              CBZ      r0,|L1.1972|
0007ae  b002              ADD      sp,sp,#8
0007b0  2001              MOVS     r0,#1                 ;702
0007b2  bd70              POP      {r4-r6,pc}
                  |L1.1972|
0007b4  2d3b              CMP      r5,#0x3b              ;708
0007b6  d1d0              BNE      |L1.1882|
0007b8  60b4              STR      r4,[r6,#8]            ;709
0007ba  b002              ADD      sp,sp,#8
0007bc  2000              MOVS     r0,#0                 ;710
0007be  bd70              POP      {r4-r6,pc}
;;;712    
                          ENDP

                  _GetImageInfo PROC
;;;716    */
;;;717    static int _GetImageInfo(const U8 * pData, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
0007c0  b5f0              PUSH     {r4-r7,lr}
0007c2  b083              SUB      sp,sp,#0xc
0007c4  4615              MOV      r5,r2
0007c6  461e              MOV      r6,r3
;;;718      U8 Flags, Introducer;
;;;719      int NumColors, ImageCnt;
;;;720      /* Initialize decoding and get size and global color table */
;;;721      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
0007c8  ab02              ADD      r3,sp,#8
0007ca  9300              STR      r3,[sp,#0]
0007cc  2300              MOVS     r3,#0
0007ce  461a              MOV      r2,r3
0007d0  f7fffffe          BL       _GetSizeAndColorTable
0007d4  b110              CBZ      r0,|L1.2012|
;;;722        return 1; /* Error */
;;;723      }
;;;724      ImageCnt = 0;
;;;725      /* Iterate over the blocks */
;;;726      do {
;;;727        Introducer = _ReadU8();
;;;728        switch (Introducer) {
;;;729        case GIF_INTRO_IMAGE:
;;;730          if (Index == ImageCnt) {
;;;731            pInfo->xPos  = _ReadU16();
;;;732            pInfo->xPos  = _ReadU16();
;;;733            pInfo->xSize = _ReadU16();
;;;734            pInfo->ySize = _ReadU16();
;;;735            return 0;
;;;736          }
;;;737          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;738          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;739          if (Flags & 0x80) {
;;;740            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;741          }
;;;742          _SkipBytes(1);                /* Skip codesize */
;;;743          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;744          ImageCnt++;
;;;745          break;
;;;746        case GIF_INTRO_TERMINATOR:
;;;747          break;
;;;748        case GIF_INTRO_EXTENSION:
;;;749          if (_ReadExtension(NULL, (Index == ImageCnt) ? pInfo : NULL, NULL)) {
;;;750            return 1;
;;;751          }
;;;752          break;
;;;753        default:
;;;754          return 1;
;;;755        }
;;;756      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;757      return 0;
;;;758    }
0007d6  b003              ADD      sp,sp,#0xc
0007d8  2001              MOVS     r0,#1                 ;722
0007da  bdf0              POP      {r4-r7,pc}
                  |L1.2012|
0007dc  2400              MOVS     r4,#0                 ;724
                  |L1.2014|
0007de  f7fffffe          BL       _ReadU8
0007e2  4607              MOV      r7,r0                 ;727
0007e4  4638              MOV      r0,r7                 ;728
0007e6  2f21              CMP      r7,#0x21              ;728
0007e8  d039              BEQ      |L1.2142|
0007ea  282c              CMP      r0,#0x2c              ;728
0007ec  d010              BEQ      |L1.2064|
0007ee  283b              CMP      r0,#0x3b              ;728
0007f0  d041              BEQ      |L1.2166|
0007f2  2001              MOVS     r0,#1                 ;754
                  |L1.2036|
0007f4  b003              ADD      sp,sp,#0xc
0007f6  bdf0              POP      {r4-r7,pc}
                  |L1.2040|
                          DCD      ||.bss||+0x40f4
                  |L1.2044|
                          DCD      ||.bss||+0x3cf4
                  |L1.2048|
                          DCD      ||.bss||
                  |L1.2052|
                          DCD      ||.constdata||+0x40
                  |L1.2056|
                          DCD      ||.constdata||+0x50
                  |L1.2060|
                          DCD      ||.data||
                  |L1.2064|
000810  42a6              CMP      r6,r4                 ;730
000812  d10d              BNE      |L1.2096|
000814  f7fffffe          BL       _ReadU16
000818  6028              STR      r0,[r5,#0]            ;731
00081a  f7fffffe          BL       _ReadU16
00081e  6028              STR      r0,[r5,#0]            ;732
000820  f7fffffe          BL       _ReadU16
000824  60a8              STR      r0,[r5,#8]            ;733
000826  f7fffffe          BL       _ReadU16
00082a  60e8              STR      r0,[r5,#0xc]          ;734
00082c  2000              MOVS     r0,#0                 ;735
00082e  e7e1              B        |L1.2036|
                  |L1.2096|
000830  2008              MOVS     r0,#8                 ;737
000832  f7fffffe          BL       _SkipBytes
000836  f7fffffe          BL       _ReadU8
00083a  f0100f80          TST      r0,#0x80              ;739
00083e  d004              BEQ      |L1.2122|
000840  9802              LDR      r0,[sp,#8]            ;740
000842  eb000040          ADD      r0,r0,r0,LSL #1       ;740
000846  f7fffffe          BL       _SkipBytes
                  |L1.2122|
00084a  2001              MOVS     r0,#1                 ;742
00084c  f7fffffe          BL       _SkipBytes
                  |L1.2128|
000850  2000              MOVS     r0,#0                 ;743
000852  f7fffffe          BL       _GetDataBlock
000856  2800              CMP      r0,#0                 ;743
000858  dcfa              BGT      |L1.2128|
00085a  1c64              ADDS     r4,r4,#1              ;744
00085c  e00b              B        |L1.2166|
                  |L1.2142|
00085e  42a6              CMP      r6,r4                 ;749
000860  d101              BNE      |L1.2150|
000862  4629              MOV      r1,r5                 ;749
000864  e000              B        |L1.2152|
                  |L1.2150|
000866  2100              MOVS     r1,#0                 ;749
                  |L1.2152|
000868  2200              MOVS     r2,#0                 ;749
00086a  4610              MOV      r0,r2                 ;749
00086c  f7fffffe          BL       _ReadExtension
000870  b108              CBZ      r0,|L1.2166|
000872  2001              MOVS     r0,#1                 ;750
000874  e7be              B        |L1.2036|
                  |L1.2166|
000876  2f3b              CMP      r7,#0x3b              ;756
000878  d1b1              BNE      |L1.2014|
00087a  2000              MOVS     r0,#0                 ;757
00087c  e7ba              B        |L1.2036|
;;;759    
                          ENDP

                  _GetGIFComment PROC
;;;776    */
;;;777    static int _GetGIFComment(const U8 * pData, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
00087e  e92d41f0          PUSH     {r4-r8,lr}
000882  b084              SUB      sp,sp,#0x10
000884  4616              MOV      r6,r2
000886  9d0a              LDR      r5,[sp,#0x28]
000888  461f              MOV      r7,r3
;;;778      U8 Flags, Introducer;
;;;779      int NumColors, CommentCnt, Size;
;;;780      /* Initialize decoding and skip size and global color table */
;;;781      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
00088a  ab03              ADD      r3,sp,#0xc
00088c  9300              STR      r3,[sp,#0]
00088e  2300              MOVS     r3,#0
000890  461a              MOV      r2,r3
000892  f7fffffe          BL       _GetSizeAndColorTable
000896  b118              CBZ      r0,|L1.2208|
;;;782        return 1; /* Error */
;;;783      }
;;;784      CommentCnt = Size = 0;
;;;785      /* Iterate over the blocks */
;;;786      do {
;;;787        Introducer = _ReadU8();
;;;788        switch (Introducer) {
;;;789        case GIF_INTRO_IMAGE:
;;;790          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;791          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;792          if (Flags & 0x80) {
;;;793            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;794          }
;;;795          _SkipBytes(1);                /* Skip codesize */
;;;796          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;797          break;
;;;798        case GIF_INTRO_TERMINATOR:
;;;799          break;
;;;800        case GIF_INTRO_EXTENSION:
;;;801          _ReadComment((Index == CommentCnt) ? pBuffer : NULL, MaxSize, &Size);
;;;802          if ((Size) && (Index == CommentCnt)) {
;;;803            return 0;
;;;804          }
;;;805          break;
;;;806        default:
;;;807          return 1;
;;;808        }
;;;809      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;810      return 1;
;;;811    }
000898  b004              ADD      sp,sp,#0x10
00089a  2001              MOVS     r0,#1                 ;782
00089c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2208|
0008a0  2400              MOVS     r4,#0                 ;784
0008a2  9402              STR      r4,[sp,#8]            ;784
                  |L1.2212|
0008a4  f7fffffe          BL       _ReadU8
0008a8  4680              MOV      r8,r0                 ;787
0008aa  4640              MOV      r0,r8                 ;788
0008ac  f1b80f21          CMP      r8,#0x21              ;788
0008b0  d01d              BEQ      |L1.2286|
0008b2  282c              CMP      r0,#0x2c              ;788
0008b4  d005              BEQ      |L1.2242|
0008b6  283b              CMP      r0,#0x3b              ;788
0008b8  d02a              BEQ      |L1.2320|
0008ba  b004              ADD      sp,sp,#0x10
0008bc  2001              MOVS     r0,#1                 ;807
0008be  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2242|
0008c2  2008              MOVS     r0,#8                 ;790
0008c4  f7fffffe          BL       _SkipBytes
0008c8  f7fffffe          BL       _ReadU8
0008cc  f0100f80          TST      r0,#0x80              ;792
0008d0  d004              BEQ      |L1.2268|
0008d2  9803              LDR      r0,[sp,#0xc]          ;793
0008d4  eb000040          ADD      r0,r0,r0,LSL #1       ;793
0008d8  f7fffffe          BL       _SkipBytes
                  |L1.2268|
0008dc  2001              MOVS     r0,#1                 ;795
0008de  f7fffffe          BL       _SkipBytes
                  |L1.2274|
0008e2  2000              MOVS     r0,#0                 ;796
0008e4  f7fffffe          BL       _GetDataBlock
0008e8  2800              CMP      r0,#0                 ;796
0008ea  dcfa              BGT      |L1.2274|
0008ec  e010              B        |L1.2320|
                  |L1.2286|
0008ee  42a5              CMP      r5,r4                 ;801
0008f0  d101              BNE      |L1.2294|
0008f2  4630              MOV      r0,r6                 ;801
0008f4  e000              B        |L1.2296|
                  |L1.2294|
0008f6  2000              MOVS     r0,#0                 ;801
                  |L1.2296|
0008f8  aa02              ADD      r2,sp,#8              ;801
0008fa  4639              MOV      r1,r7                 ;801
0008fc  f7fffffe          BL       _ReadComment
000900  9802              LDR      r0,[sp,#8]            ;802
000902  b128              CBZ      r0,|L1.2320|
000904  42a5              CMP      r5,r4                 ;802
000906  d103              BNE      |L1.2320|
000908  b004              ADD      sp,sp,#0x10
00090a  2000              MOVS     r0,#0                 ;803
00090c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2320|
000910  f1b80f3b          CMP      r8,#0x3b              ;809
000914  d1c6              BNE      |L1.2212|
000916  b004              ADD      sp,sp,#0x10
000918  2001              MOVS     r0,#1                 ;810
00091a  e8bd81f0          POP      {r4-r8,pc}
;;;812    
                          ENDP

                  _ClearUnusedPixels PROC
;;;820    */
;;;821    static void _ClearUnusedPixels(int x0, int y0, IMAGE_DESCRIPTOR * pDescriptor, GUI_GIF_IMAGE_INFO * pInfo) {
00091e  e92d47f0          PUSH     {r4-r10,lr}
000922  4681              MOV      r9,r0
000924  4688              MOV      r8,r1
000926  4615              MOV      r5,r2
000928  461c              MOV      r4,r3
;;;822      LCD_SetColorIndex(LCD_GetBkColorIndex());
00092a  f7fffffe          BL       LCD_GetBkColorIndex
00092e  f7fffffe          BL       LCD_SetColorIndex
;;;823      if (pDescriptor->YPos > pInfo->yPos) {
000932  6868              LDR      r0,[r5,#4]
000934  6862              LDR      r2,[r4,#4]
;;;824        LCD_FillRect(x0 + pInfo->xPos,
000936  f1a90601          SUB      r6,r9,#1
00093a  f1a80701          SUB      r7,r8,#1
00093e  4290              CMP      r0,r2                 ;823
000940  dd0d              BLE      |L1.2398|
000942  68a3              LDR      r3,[r4,#8]
000944  6821              LDR      r1,[r4,#0]
000946  eb020a08          ADD      r10,r2,r8
00094a  440b              ADD      r3,r3,r1
00094c  eb030c06          ADD      r12,r3,r6
000950  19c3              ADDS     r3,r0,r7
000952  eb010009          ADD      r0,r1,r9
000956  4662              MOV      r2,r12
000958  4651              MOV      r1,r10
00095a  f7fffffe          BL       LCD_FillRect
                  |L1.2398|
;;;825                     y0 + pInfo->yPos,
;;;826                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;827                     y0 + pDescriptor->YPos - 1);
;;;828      }
;;;829      if (pDescriptor->XPos > pInfo->xPos) {
00095e  6829              LDR      r1,[r5,#0]
000960  6822              LDR      r2,[r4,#0]
000962  4291              CMP      r1,r2
000964  dd0c              BLE      |L1.2432|
;;;830        LCD_FillRect(x0 + pInfo->xPos,
000966  6860              LDR      r0,[r4,#4]
000968  68e3              LDR      r3,[r4,#0xc]
00096a  eb000c08          ADD      r12,r0,r8
00096e  4403              ADD      r3,r3,r0
000970  4431              ADD      r1,r1,r6
000972  eb020009          ADD      r0,r2,r9
000976  460a              MOV      r2,r1
000978  443b              ADD      r3,r3,r7
00097a  4661              MOV      r1,r12
00097c  f7fffffe          BL       LCD_FillRect
                  |L1.2432|
;;;831                     y0 + pInfo->yPos,
;;;832                     x0 + pDescriptor->XPos - 1,
;;;833                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;834      }
;;;835      if ((pDescriptor->YPos + pDescriptor->YSize) < (pInfo->yPos + pInfo->ySize)) {
000980  68e9              LDR      r1,[r5,#0xc]
000982  6868              LDR      r0,[r5,#4]
000984  68e2              LDR      r2,[r4,#0xc]
000986  4401              ADD      r1,r1,r0
000988  6860              LDR      r0,[r4,#4]
00098a  4410              ADD      r0,r0,r2
00098c  4281              CMP      r1,r0
00098e  da08              BGE      |L1.2466|
;;;836        LCD_FillRect(x0 + pInfo->xPos,
000990  19c3              ADDS     r3,r0,r7
000992  68a2              LDR      r2,[r4,#8]
000994  6820              LDR      r0,[r4,#0]
000996  4439              ADD      r1,r1,r7
000998  4402              ADD      r2,r2,r0
00099a  4432              ADD      r2,r2,r6
00099c  4448              ADD      r0,r0,r9
00099e  f7fffffe          BL       LCD_FillRect
                  |L1.2466|
;;;837                     y0 + pDescriptor->YPos + pDescriptor->YSize - 1,
;;;838                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;839                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;840      }
;;;841      if ((pDescriptor->XPos + pDescriptor->XSize) < (pInfo->xPos + pInfo->xSize)) {
0009a2  68a9              LDR      r1,[r5,#8]
0009a4  6828              LDR      r0,[r5,#0]
0009a6  68a2              LDR      r2,[r4,#8]
0009a8  4408              ADD      r0,r0,r1
0009aa  6821              LDR      r1,[r4,#0]
0009ac  440a              ADD      r2,r2,r1
0009ae  4290              CMP      r0,r2
0009b0  da0a              BGE      |L1.2504|
;;;842        LCD_FillRect(x0 + pDescriptor->XPos + pDescriptor->XSize - 1,
0009b2  68e3              LDR      r3,[r4,#0xc]
0009b4  6861              LDR      r1,[r4,#4]
0009b6  4432              ADD      r2,r2,r6
0009b8  440b              ADD      r3,r3,r1
0009ba  443b              ADD      r3,r3,r7
0009bc  4430              ADD      r0,r0,r6
0009be  4441              ADD      r1,r1,r8
0009c0  e8bd47f0          POP      {r4-r10,lr}
0009c4  f7ffbffe          B.W      LCD_FillRect
                  |L1.2504|
;;;843                     y0 + pInfo->yPos,
;;;844                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;845                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;846      }
;;;847    }
0009c8  e8bd87f0          POP      {r4-r10,pc}
;;;848    
                          ENDP

                  _DrawGIFImage PROC
;;;865    */
;;;866    static int _DrawGIFImage(const U8 * pData, U32 NumBytes, int x0, int y0, int Index) {
0009cc  e92d47f0          PUSH     {r4-r10,lr}
0009d0  b090              SUB      sp,sp,#0x40
0009d2  4684              MOV      r12,r0
0009d4  9d18              LDR      r5,[sp,#0x60]
0009d6  4617              MOV      r7,r2
0009d8  4698              MOV      r8,r3
;;;867      U8 Disposal;
;;;868      int XSize, YSize, TransIndex, ImageCnt;
;;;869      IMAGE_DESCRIPTOR Descriptor = {0};
0009da  2000              MOVS     r0,#0
0009dc  9006              STR      r0,[sp,#0x18]
0009de  9007              STR      r0,[sp,#0x1c]
0009e0  9008              STR      r0,[sp,#0x20]
0009e2  9009              STR      r0,[sp,#0x24]
0009e4  900a              STR      r0,[sp,#0x28]
0009e6  900b              STR      r0,[sp,#0x2c]
;;;870      GUI_GIF_IMAGE_INFO Info = {0};
0009e8  9001              STR      r0,[sp,#4]
0009ea  9002              STR      r0,[sp,#8]
0009ec  9003              STR      r0,[sp,#0xc]
0009ee  9004              STR      r0,[sp,#0x10]
0009f0  9005              STR      r0,[sp,#0x14]
;;;871      U8 Introducer;
;;;872      ImageCnt   =  0;
0009f2  2400              MOVS     r4,#0
;;;873      TransIndex = -1;
0009f4  1e40              SUBS     r0,r0,#1
0009f6  900c              STR      r0,[sp,#0x30]
;;;874      /* Initialize decoding and get size and global color table */
;;;875      if (_GetSizeAndColorTable(pData, NumBytes, &XSize, &YSize, &Descriptor.NumColors)) {
0009f8  ab0b              ADD      r3,sp,#0x2c
0009fa  9300              STR      r3,[sp,#0]
0009fc  ab0d              ADD      r3,sp,#0x34
0009fe  aa0e              ADD      r2,sp,#0x38
000a00  4660              MOV      r0,r12
000a02  f7fffffe          BL       _GetSizeAndColorTable
000a06  b118              CBZ      r0,|L1.2576|
;;;876        return 1; /* Error */
;;;877      }
;;;878      /* Iterate over the blocks */
;;;879      do {
;;;880        Introducer = _ReadU8();
;;;881        switch (Introducer) {
;;;882        case GIF_INTRO_IMAGE:
;;;883          /* Read image descriptor */
;;;884          Descriptor.XPos  = _ReadU16();
;;;885          Descriptor.YPos  = _ReadU16();
;;;886          Descriptor.XSize = _ReadU16();
;;;887          Descriptor.YSize = _ReadU16();
;;;888          Descriptor.Flags = _ReadU8 ();
;;;889          if (_Source.RemBytes < 0) {
;;;890            return 1; /* Error */
;;;891          }
;;;892          if (Descriptor.Flags & 0x80) {
;;;893            /* Read local color table */
;;;894            if (_ReadColorMap(Descriptor.NumColors)) {
;;;895              return 1; /* Error */
;;;896            }
;;;897          }
;;;898          if (ImageCnt == Index - 1) {
;;;899            Info.xPos  = Descriptor.XPos;
;;;900            Info.yPos  = Descriptor.YPos;
;;;901            Info.xSize = Descriptor.XSize;
;;;902            Info.ySize = Descriptor.YSize;
;;;903          }
;;;904          if (Index == ImageCnt) {
;;;905            if (Disposal == 2) {
;;;906              _ClearUnusedPixels(x0, y0, &Descriptor, &Info);
;;;907            }
;;;908            if (_DispGIFImage(&Descriptor, x0 + Descriptor.XPos, y0 + Descriptor.YPos, TransIndex, Disposal)) {
;;;909              return 1; /* Error */
;;;910            }
;;;911            if (_ReadU8() != 0) {
;;;912              return 1; /* Error */
;;;913            }
;;;914            return 0;
;;;915          } else {
;;;916            _ReadU8();                    /* Skip codesize */
;;;917            while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;918          }
;;;919          ImageCnt++;
;;;920          break;
;;;921        case GIF_INTRO_TERMINATOR:
;;;922          break;
;;;923        case GIF_INTRO_EXTENSION:
;;;924          /* Read image extension */
;;;925          if (_ReadExtension(&TransIndex, (Index == ImageCnt) ? &Info : NULL, (Index == ImageCnt) ? &Disposal : NULL)) {
;;;926            return 1;
;;;927          }
;;;928          break;
;;;929        default:
;;;930          return 1;
;;;931        }
;;;932      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;933      return 0;
;;;934    }
000a08  b010              ADD      sp,sp,#0x40
000a0a  2001              MOVS     r0,#1                 ;876
000a0c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2576|
000a10  f8df9208          LDR      r9,|L1.3100|
000a14  1e6e              SUBS     r6,r5,#1              ;898
                  |L1.2582|
000a16  f7fffffe          BL       _ReadU8
000a1a  4682              MOV      r10,r0                ;880
000a1c  4650              MOV      r0,r10                ;881
000a1e  f1ba0f21          CMP      r10,#0x21             ;881
000a22  d065              BEQ      |L1.2800|
000a24  282c              CMP      r0,#0x2c              ;881
000a26  d005              BEQ      |L1.2612|
000a28  283b              CMP      r0,#0x3b              ;881
000a2a  d073              BEQ      |L1.2836|
000a2c  b010              ADD      sp,sp,#0x40
000a2e  2001              MOVS     r0,#1                 ;930
000a30  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2612|
000a34  f7fffffe          BL       _ReadU16
000a38  9006              STR      r0,[sp,#0x18]         ;884
000a3a  f7fffffe          BL       _ReadU16
000a3e  9007              STR      r0,[sp,#0x1c]         ;885
000a40  f7fffffe          BL       _ReadU16
000a44  9008              STR      r0,[sp,#0x20]         ;886
000a46  f7fffffe          BL       _ReadU16
000a4a  9009              STR      r0,[sp,#0x24]         ;887
000a4c  f7fffffe          BL       _ReadU8
000a50  900a              STR      r0,[sp,#0x28]         ;888
000a52  f8d90004          LDR      r0,[r9,#4]            ;889  ; _Source
000a56  2800              CMP      r0,#0                 ;889
000a58  da03              BGE      |L1.2658|
000a5a  b010              ADD      sp,sp,#0x40
000a5c  2001              MOVS     r0,#1                 ;890
000a5e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2658|
000a62  980a              LDR      r0,[sp,#0x28]         ;892
000a64  f0100f80          TST      r0,#0x80              ;892
000a68  d007              BEQ      |L1.2682|
000a6a  980b              LDR      r0,[sp,#0x2c]         ;894
000a6c  f7fffffe          BL       _ReadColorMap
000a70  b118              CBZ      r0,|L1.2682|
000a72  b010              ADD      sp,sp,#0x40
000a74  2001              MOVS     r0,#1                 ;895
000a76  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2682|
000a7a  42b4              CMP      r4,r6                 ;898
000a7c  d107              BNE      |L1.2702|
000a7e  9806              LDR      r0,[sp,#0x18]         ;899
000a80  9001              STR      r0,[sp,#4]            ;899
000a82  9807              LDR      r0,[sp,#0x1c]         ;900
000a84  9002              STR      r0,[sp,#8]            ;900
000a86  9808              LDR      r0,[sp,#0x20]         ;901
000a88  9003              STR      r0,[sp,#0xc]          ;901
000a8a  9809              LDR      r0,[sp,#0x24]         ;902
000a8c  9004              STR      r0,[sp,#0x10]         ;902
                  |L1.2702|
000a8e  42a5              CMP      r5,r4                 ;904
000a90  d125              BNE      |L1.2782|
000a92  f89d003c          LDRB     r0,[sp,#0x3c]         ;905
000a96  2802              CMP      r0,#2                 ;905
000a98  d105              BNE      |L1.2726|
000a9a  ab01              ADD      r3,sp,#4              ;906
000a9c  aa06              ADD      r2,sp,#0x18           ;906
000a9e  4641              MOV      r1,r8                 ;906
000aa0  4638              MOV      r0,r7                 ;906
000aa2  f7fffffe          BL       _ClearUnusedPixels
                  |L1.2726|
000aa6  9807              LDR      r0,[sp,#0x1c]         ;908
000aa8  f89d303c          LDRB     r3,[sp,#0x3c]         ;908
000aac  eb000208          ADD      r2,r0,r8              ;908
000ab0  9806              LDR      r0,[sp,#0x18]         ;908
000ab2  9300              STR      r3,[sp,#0]            ;908
000ab4  19c1              ADDS     r1,r0,r7              ;908
000ab6  a806              ADD      r0,sp,#0x18           ;908
000ab8  9b0c              LDR      r3,[sp,#0x30]         ;908
000aba  f7fffffe          BL       _DispGIFImage
000abe  b118              CBZ      r0,|L1.2760|
000ac0  b010              ADD      sp,sp,#0x40
000ac2  2001              MOVS     r0,#1                 ;909
000ac4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2760|
000ac8  f7fffffe          BL       _ReadU8
000acc  b118              CBZ      r0,|L1.2774|
000ace  b010              ADD      sp,sp,#0x40
000ad0  2001              MOVS     r0,#1                 ;912
000ad2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2774|
000ad6  b010              ADD      sp,sp,#0x40
000ad8  2000              MOVS     r0,#0                 ;914
000ada  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2782|
000ade  f7fffffe          BL       _ReadU8
                  |L1.2786|
000ae2  2000              MOVS     r0,#0                 ;917
000ae4  f7fffffe          BL       _GetDataBlock
000ae8  2800              CMP      r0,#0                 ;917
000aea  dcfa              BGT      |L1.2786|
000aec  1c64              ADDS     r4,r4,#1              ;919
000aee  e011              B        |L1.2836|
                  |L1.2800|
000af0  42a5              CMP      r5,r4                 ;925
000af2  d101              BNE      |L1.2808|
000af4  aa0f              ADD      r2,sp,#0x3c           ;925
000af6  e001              B        |L1.2812|
                  |L1.2808|
000af8  f04f0200          MOV      r2,#0                 ;925
                  |L1.2812|
000afc  d101              BNE      |L1.2818|
000afe  a901              ADD      r1,sp,#4              ;925
000b00  e000              B        |L1.2820|
                  |L1.2818|
000b02  2100              MOVS     r1,#0                 ;925
                  |L1.2820|
000b04  a80c              ADD      r0,sp,#0x30           ;925
000b06  f7fffffe          BL       _ReadExtension
000b0a  b118              CBZ      r0,|L1.2836|
000b0c  b010              ADD      sp,sp,#0x40
000b0e  2001              MOVS     r0,#1                 ;926
000b10  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2836|
000b14  f1ba0f3b          CMP      r10,#0x3b             ;932
000b18  f47faf7d          BNE      |L1.2582|
000b1c  b010              ADD      sp,sp,#0x40
000b1e  2000              MOVS     r0,#0                 ;933
000b20  e8bd87f0          POP      {r4-r10,pc}
;;;935    
                          ENDP

                  GUI_GIF_GetXSize PROC
;;;948    */
;;;949    int GUI_GIF_GetXSize(const void * pGIF) {
000b24  b508              PUSH     {r3,lr}
;;;950      const U8 * pSrc;
;;;951      if (!pGIF) {
000b26  b128              CBZ      r0,|L1.2868|
;;;952        return 0;
;;;953      }
;;;954      pSrc = (const U8 *)pGIF + 6;
000b28  1d80              ADDS     r0,r0,#6
000b2a  9000              STR      r0,[sp,#0]
;;;955      return GUI__Read16(&pSrc);
000b2c  4668              MOV      r0,sp
000b2e  f7fffffe          BL       GUI__Read16
;;;956    }
000b32  bd08              POP      {r3,pc}
                  |L1.2868|
000b34  2000              MOVS     r0,#0                 ;952
000b36  bd08              POP      {r3,pc}
;;;957    
                          ENDP

                  GUI_GIF_GetYSize PROC
;;;964    */
;;;965    int GUI_GIF_GetYSize(const void * pGIF) {
000b38  b508              PUSH     {r3,lr}
;;;966      const U8 * pSrc;
;;;967      if (!pGIF) {
000b3a  b128              CBZ      r0,|L1.2888|
;;;968        return 0;
;;;969      }
;;;970      pSrc = (const U8 *)pGIF + 8;
000b3c  3008              ADDS     r0,r0,#8
000b3e  9000              STR      r0,[sp,#0]
;;;971      return GUI__Read16(&pSrc);
000b40  4668              MOV      r0,sp
000b42  f7fffffe          BL       GUI__Read16
;;;972    }
000b46  bd08              POP      {r3,pc}
                  |L1.2888|
000b48  2000              MOVS     r0,#0                 ;968
000b4a  bd08              POP      {r3,pc}
;;;973    
                          ENDP

                  GUI_GIF_DrawEx PROC
;;;977    */
;;;978    int GUI_GIF_DrawEx(const void * pGIF, U32 NumBytes, int x0, int y0, int Index) {
000b4c  e92d4ff0          PUSH     {r4-r11,lr}
000b50  b085              SUB      sp,sp,#0x14
000b52  4607              MOV      r7,r0
000b54  f8dd8038          LDR      r8,[sp,#0x38]
000b58  4689              MOV      r9,r1
000b5a  4614              MOV      r4,r2
000b5c  461d              MOV      r5,r3
;;;979      const U8 * pSrc;
;;;980      int Result, OldColorIndex;
;;;981      #if (GUI_WINSUPPORT)
;;;982        int Width, Height;
;;;983        GUI_RECT r;
;;;984        Width  = GUI_GIF_GetXSize(pGIF);
000b5e  4638              MOV      r0,r7
000b60  f7fffffe          BL       GUI_GIF_GetXSize
000b64  4682              MOV      r10,r0
;;;985        Height = GUI_GIF_GetYSize(pGIF);
000b66  4638              MOV      r0,r7
000b68  f7fffffe          BL       GUI_GIF_GetYSize
000b6c  4683              MOV      r11,r0
;;;986      #endif
;;;987      GUI_LOCK();
000b6e  f7fffffe          BL       GUI_Lock
;;;988      OldColorIndex = LCD_GetColorIndex();
000b72  f7fffffe          BL       LCD_GetColorIndex
000b76  9004              STR      r0,[sp,#0x10]
;;;989      pSrc          = (const U8 *)pGIF;
;;;990      #if (GUI_WINSUPPORT)
;;;991        WM_ADDORG(x0,y0);
000b78  4829              LDR      r0,|L1.3104|
000b7a  6c41              LDR      r1,[r0,#0x44]  ; GUI_Context
000b7c  440c              ADD      r4,r4,r1
000b7e  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000b80  4405              ADD      r5,r5,r0
;;;992        r.x1 = (r.x0 = x0) + Width - 1;
000b82  eb04000a          ADD      r0,r4,r10
000b86  1e40              SUBS     r0,r0,#1
000b88  f8ad4008          STRH     r4,[sp,#8]
000b8c  f8ad000c          STRH     r0,[sp,#0xc]
;;;993        r.y1 = (r.y0 = y0) + Height - 1;
000b90  eb05000b          ADD      r0,r5,r11
000b94  1e40              SUBS     r0,r0,#1
000b96  f8ad500a          STRH     r5,[sp,#0xa]
000b9a  f8ad000e          STRH     r0,[sp,#0xe]
;;;994        WM_ITERATE_START(&r) {
000b9e  a802              ADD      r0,sp,#8
000ba0  f7fffffe          BL       WM__InitIVRSearch
000ba4  b160              CBZ      r0,|L1.3008|
                  |L1.2982|
;;;995      #endif
;;;996      Result = _DrawGIFImage(pSrc, NumBytes, x0, y0, Index);
000ba6  462b              MOV      r3,r5
000ba8  4622              MOV      r2,r4
000baa  4649              MOV      r1,r9
000bac  4638              MOV      r0,r7
000bae  f8cd8000          STR      r8,[sp,#0]
000bb2  f7fffffe          BL       _DrawGIFImage
000bb6  4606              MOV      r6,r0
;;;997      #if (GUI_WINSUPPORT)
;;;998        } WM_ITERATE_END();
000bb8  f7fffffe          BL       WM__GetNextIVR
000bbc  2800              CMP      r0,#0
000bbe  d1f2              BNE      |L1.2982|
                  |L1.3008|
;;;999      #endif
;;;1000     LCD_SetColorIndex(OldColorIndex);
000bc0  9804              LDR      r0,[sp,#0x10]
000bc2  f7fffffe          BL       LCD_SetColorIndex
;;;1001     GUI_UNLOCK();
000bc6  f7fffffe          BL       GUI_Unlock
;;;1002     return Result;
;;;1003   }
000bca  b005              ADD      sp,sp,#0x14
000bcc  4630              MOV      r0,r6                 ;1002
000bce  e8bd8ff0          POP      {r4-r11,pc}
;;;1004   
                          ENDP

                  GUI_GIF_Draw PROC
;;;1008   */
;;;1009   int GUI_GIF_Draw(const void * pGIF, U32 NumBytes, int x0, int y0) {
000bd2  b508              PUSH     {r3,lr}
000bd4  469c              MOV      r12,r3
;;;1010     return GUI_GIF_DrawEx(pGIF, NumBytes, x0, y0, 0);
000bd6  2300              MOVS     r3,#0
000bd8  9300              STR      r3,[sp,#0]
000bda  4663              MOV      r3,r12
000bdc  f7fffffe          BL       GUI_GIF_DrawEx
;;;1011   }
000be0  bd08              POP      {r3,pc}
;;;1012   
                          ENDP

                  GUI_GIF_GetInfo PROC
;;;1016   */
;;;1017   int GUI_GIF_GetInfo(const void * pGIF, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000be2  b510              PUSH     {r4,lr}
;;;1018     const U8 * pSrc;
;;;1019     pSrc = (const U8 *)pGIF;
;;;1020     if (_GetGIFInfo(pSrc, NumBytes, pInfo)) {
000be4  f7fffffe          BL       _GetGIFInfo
000be8  b108              CBZ      r0,|L1.3054|
;;;1021       return 1;
000bea  2001              MOVS     r0,#1
;;;1022     }
;;;1023     return 0;
;;;1024   }
000bec  bd10              POP      {r4,pc}
                  |L1.3054|
000bee  2000              MOVS     r0,#0                 ;1023
000bf0  bd10              POP      {r4,pc}
;;;1025   
                          ENDP

                  GUI_GIF_GetImageInfo PROC
;;;1029   */
;;;1030   int GUI_GIF_GetImageInfo(const void * pGIF, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
000bf2  b510              PUSH     {r4,lr}
;;;1031     const U8 * pSrc;
;;;1032     pSrc = (const U8 *)pGIF;
;;;1033     if (_GetImageInfo(pSrc, NumBytes, pInfo, Index)) {
000bf4  f7fffffe          BL       _GetImageInfo
000bf8  b108              CBZ      r0,|L1.3070|
;;;1034       return 1;
000bfa  2001              MOVS     r0,#1
;;;1035     }
;;;1036     return 0;
;;;1037   }
000bfc  bd10              POP      {r4,pc}
                  |L1.3070|
000bfe  2000              MOVS     r0,#0                 ;1036
000c00  bd10              POP      {r4,pc}
;;;1038   
                          ENDP

                  GUI_GIF_GetComment PROC
;;;1042   */
;;;1043   int GUI_GIF_GetComment(const void * pGIF, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
000c02  b508              PUSH     {r3,lr}
000c04  469c              MOV      r12,r3
000c06  9b02              LDR      r3,[sp,#8]
;;;1044     const U8 * pSrc;
;;;1045     pSrc = (const U8 *)pGIF;
;;;1046     if (_GetGIFComment(pSrc, NumBytes, pBuffer, MaxSize, Index)) {
000c08  9300              STR      r3,[sp,#0]
000c0a  4663              MOV      r3,r12
000c0c  f7fffffe          BL       _GetGIFComment
000c10  b108              CBZ      r0,|L1.3094|
;;;1047       return 1;
000c12  2001              MOVS     r0,#1
;;;1048     }
;;;1049     return 0;
;;;1050   }
000c14  bd08              POP      {r3,pc}
                  |L1.3094|
000c16  2000              MOVS     r0,#0                 ;1049
000c18  bd08              POP      {r3,pc}
;;;1051   
                          ENDP

000c1a  0000              DCW      0x0000
                  |L1.3100|
                          DCD      ||.data||
                  |L1.3104|
                          DCD      GUI_Context

                          AREA ||.bss||, DATA, NOINIT, ALIGN=6

                  _LZWContext
                          %        15604
                  _aColorTable
                          %        1024
                  _aBuffer
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aMaskTbl
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000003
                          DCD      0x00000007
                          DCD      0x0000000f
                          DCD      0x0000001f
                          DCD      0x0000003f
                          DCD      0x0000007f
                          DCD      0x000000ff
                          DCD      0x000001ff
                          DCD      0x000003ff
                          DCD      0x000007ff
                          DCD      0x00000fff
                          DCD      0x00001fff
                          DCD      0x00003fff
                          DCD      0x00007fff
                  _aInterlaceOffset
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000002
                  _aInterlaceYPos
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  _Source
                          %        8
