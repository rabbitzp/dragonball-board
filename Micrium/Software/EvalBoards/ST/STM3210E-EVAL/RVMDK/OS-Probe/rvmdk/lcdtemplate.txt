; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcdtemplate.o --depend=.\rvmdk\lcdtemplate.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcdtemplate.crf ..\..\..\..\..\uCGUI\GUI\LCDDriver\LCDTemplate.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_L0_SetPixelIndex PROC
;;;387    */
;;;388    void LCD_L0_SetPixelIndex(int x, int y, int PixelIndex) {
000000  b292              UXTH     r2,r2
;;;389      GUI_USE_PARA(x);
;;;390      GUI_USE_PARA(y);
;;;391      GUI_USE_PARA(PixelIndex);
;;;392      /* Convert logical into physical coordinates (Dep. on LCDConf.h) */
;;;393      #if LCD_SWAP_XY | LCD_MIRROR_X| LCD_MIRROR_Y
;;;394        int xPhys = LOG2PHYS_X(x, y);
;;;395        int yPhys = LOG2PHYS_Y(x, y);
;;;396      #else
;;;397        #define xPhys x
;;;398        #define yPhys y
;;;399      #endif
;;;400      /* Write into hardware ... Adapt to your system */
;;;401      {
;;;402        LCD_R61505W_SetPoint(xPhys, yPhys, PixelIndex);/* ... */
000002  b289              UXTH     r1,r1
000004  b280              UXTH     r0,r0
000006  f7ffbffe          B.W      LCD_R61505W_SetPoint
;;;403      }
;;;404    }
;;;405    
                          ENDP

                  LCD_L0_GetPixelIndex PROC
;;;414    */
;;;415    unsigned int LCD_L0_GetPixelIndex(int x, int y) {
00000a  b289              UXTH     r1,r1
;;;416      LCD_PIXELINDEX PixelIndex;
;;;417      GUI_USE_PARA(x);
;;;418      GUI_USE_PARA(y);
;;;419      /* Convert logical into physical coordinates (Dep. on LCDConf.h) */
;;;420      #if LCD_SWAP_XY | LCD_MIRROR_X| LCD_MIRROR_Y
;;;421        int xPhys = LOG2PHYS_X(x, y);
;;;422        int yPhys = LOG2PHYS_Y(x, y);
;;;423      #else
;;;424        #define xPhys x
;;;425        #define yPhys y
;;;426      #endif
;;;427      /* Read from hardware ... Adapt to your system */
;;;428      {
;;;429        PixelIndex = LCD_R61505W_GetPoint(xPhys, yPhys);/* ... */
00000c  b280              UXTH     r0,r0
00000e  f7ffbffe          B.W      LCD_R61505W_GetPoint
;;;430      }
;;;431      return PixelIndex;
;;;432    }
;;;433    
                          ENDP

                  _DrawBitLine1BPP PROC
;;;114    */
;;;115    static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000012  e92d5ff0          PUSH     {r4-r12,lr}
000016  468b              MOV      r11,r1
000018  9f0a              LDR      r7,[sp,#0x28]
00001a  990b              LDR      r1,[sp,#0x2c]
00001c  4615              MOV      r5,r2
00001e  461c              MOV      r4,r3
;;;116      LCD_PIXELINDEX Index0 = *(pTrans+0);
000020  f8b19000          LDRH     r9,[r1,#0]
;;;117      LCD_PIXELINDEX Index1 = *(pTrans+1);
000024  f8b18002          LDRH     r8,[r1,#2]
;;;118      x += Diff;
000028  1906              ADDS     r6,r0,r4
;;;119      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00002a  48f8              LDR      r0,|L1.1036|
;;;120        case 0:
;;;121          do {
;;;122            LCD_L0_SetPixelIndex(x++, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
00002c  f04f0a80          MOV      r10,#0x80
000030  7c00              LDRB     r0,[r0,#0x10]         ;119  ; GUI_Context
000032  f0100003          ANDS     r0,r0,#3              ;119
000036  d01b              BEQ      |L1.112|
000038  2801              CMP      r0,#1                 ;119
00003a  d003              BEQ      |L1.68|
00003c  2802              CMP      r0,#2                 ;119
00003e  d02d              BEQ      |L1.156|
000040  2803              CMP      r0,#3                 ;119
000042  d129              BNE      |L1.152|
                  |L1.68|
;;;123    			  if (++Diff == 8) {
;;;124              Diff = 0;
;;;125    				  p++;
;;;126    			  }
;;;127    		  } while (--xsize);
;;;128          break;
;;;129        case LCD_DRAWMODE_TRANS:
;;;130          do {
;;;131      		  if (*p & (0x80 >> Diff))
;;;132              LCD_L0_SetPixelIndex(x, y, Index1);
;;;133            x++;
;;;134    			  if (++Diff == 8) {
;;;135              Diff = 0;
;;;136    				  p++;
;;;137    			  }
;;;138    		  } while (--xsize);
;;;139          break;
;;;140        case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
;;;141        case LCD_DRAWMODE_XOR:
;;;142          do {
;;;143      		  if (*p & (0x80 >> Diff)) {
;;;144              int Pixel = LCD_L0_GetPixelIndex(x, y);
;;;145              LCD_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
000044  f64f78ff          MOV      r8,#0xffff
                  |L1.72|
000048  7828              LDRB     r0,[r5,#0]            ;143
00004a  fa2af104          LSR      r1,r10,r4             ;143
00004e  4208              TST      r0,r1                 ;143
000050  d009              BEQ      |L1.102|
000052  4659              MOV      r1,r11                ;144
000054  4630              MOV      r0,r6                 ;144
000056  f7fffffe          BL       LCD_L0_GetPixelIndex
00005a  eba80200          SUB      r2,r8,r0
00005e  4659              MOV      r1,r11
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.102|
;;;146            }
;;;147            x++;
000066  1c76              ADDS     r6,r6,#1
;;;148    			  if (++Diff == 8) {
000068  1c64              ADDS     r4,r4,#1
00006a  2c08              CMP      r4,#8
00006c  d02a              BEQ      |L1.196|
00006e  e02b              B        |L1.200|
                  |L1.112|
000070  7828              LDRB     r0,[r5,#0]            ;122
000072  fa2af104          LSR      r1,r10,r4             ;122
000076  4208              TST      r0,r1                 ;122
000078  d001              BEQ      |L1.126|
00007a  4642              MOV      r2,r8                 ;122
00007c  e000              B        |L1.128|
                  |L1.126|
00007e  464a              MOV      r2,r9                 ;122
                  |L1.128|
000080  4630              MOV      r0,r6                 ;122
000082  1c76              ADDS     r6,r6,#1              ;122
000084  4659              MOV      r1,r11                ;122
000086  f7fffffe          BL       LCD_L0_SetPixelIndex
00008a  1c64              ADDS     r4,r4,#1              ;123
00008c  2c08              CMP      r4,#8                 ;123
00008e  d101              BNE      |L1.148|
000090  2400              MOVS     r4,#0                 ;124
000092  1c6d              ADDS     r5,r5,#1              ;125
                  |L1.148|
000094  1e7f              SUBS     r7,r7,#1              ;127
000096  d1eb              BNE      |L1.112|
                  |L1.152|
;;;149              Diff = 0;
;;;150    				  p++;
;;;151    			  }
;;;152    		  } while (--xsize);
;;;153          break;
;;;154    	}
;;;155    }
000098  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.156|
00009c  7828              LDRB     r0,[r5,#0]            ;131
00009e  fa2af104          LSR      r1,r10,r4             ;131
0000a2  4208              TST      r0,r1                 ;131
0000a4  d004              BEQ      |L1.176|
0000a6  4642              MOV      r2,r8                 ;132
0000a8  4659              MOV      r1,r11                ;132
0000aa  4630              MOV      r0,r6                 ;132
0000ac  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.176|
0000b0  1c76              ADDS     r6,r6,#1              ;133
0000b2  1c64              ADDS     r4,r4,#1              ;134
0000b4  2c08              CMP      r4,#8                 ;134
0000b6  d101              BNE      |L1.188|
0000b8  2400              MOVS     r4,#0                 ;135
0000ba  1c6d              ADDS     r5,r5,#1              ;136
                  |L1.188|
0000bc  1e7f              SUBS     r7,r7,#1              ;138
0000be  d1ed              BNE      |L1.156|
0000c0  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.196|
0000c4  2400              MOVS     r4,#0                 ;149
0000c6  1c6d              ADDS     r5,r5,#1              ;150
                  |L1.200|
0000c8  1e7f              SUBS     r7,r7,#1              ;152
0000ca  d1bd              BNE      |L1.72|
0000cc  e8bd9ff0          POP      {r4-r12,pc}
;;;156    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;161    #if (LCD_MAX_LOG_COLORS > 2)
;;;162    static void  _DrawBitLine2BPP(int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
0000d0  e92d5ff0          PUSH     {r4-r12,lr}
0000d4  468b              MOV      r11,r1
0000d6  f8dd902c          LDR      r9,[sp,#0x2c]
0000da  f8dd8028          LDR      r8,[sp,#0x28]
0000de  4616              MOV      r6,r2
;;;163      LCD_PIXELINDEX Pixels = *p;
0000e0  7837              LDRB     r7,[r6,#0]
;;;164      int CurrentPixel = Diff;
0000e2  461c              MOV      r4,r3
;;;165      x += Diff;
0000e4  18c5              ADDS     r5,r0,r3
;;;166      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0000e6  48c9              LDR      r0,|L1.1036|
;;;167        case 0:
;;;168          if (pTrans) {
;;;169            do {
;;;170              int Shift = (3 - CurrentPixel) << 1;
;;;171              int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
0000e8  f04f0ac0          MOV      r10,#0xc0
0000ec  7c00              LDRB     r0,[r0,#0x10]         ;166  ; GUI_Context
0000ee  f0100003          ANDS     r0,r0,#3              ;166
0000f2  d01a              BEQ      |L1.298|
0000f4  2802              CMP      r0,#2                 ;166
0000f6  d135              BNE      |L1.356|
;;;172              LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
;;;173              LCD_L0_SetPixelIndex(x++, y, PixelIndex);
;;;174              if (++CurrentPixel == 4) {
;;;175                CurrentPixel = 0;
;;;176                Pixels = *(++p);
;;;177              }
;;;178    		    } while (--xsize);
;;;179          } else {
;;;180            do {
;;;181              int Shift = (3 - CurrentPixel) << 1;
;;;182              int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
;;;183              LCD_L0_SetPixelIndex(x++, y, Index);
;;;184              if (++CurrentPixel == 4) {
;;;185                CurrentPixel = 0;
;;;186                Pixels = *(++p);
;;;187              }
;;;188    		    } while (--xsize);
;;;189          }
;;;190          break;
;;;191        case LCD_DRAWMODE_TRANS:
;;;192          if (pTrans) {
0000f8  f1b90f00          CMP      r9,#0
0000fc  d056              BEQ      |L1.428|
                  |L1.254|
;;;193            do {
;;;194              int Shift = (3 - CurrentPixel) << 1;
0000fe  f1c40003          RSB      r0,r4,#3
000102  0040              LSLS     r0,r0,#1
;;;195              int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000104  f1c00106          RSB      r1,r0,#6
000108  fa2af101          LSR      r1,r10,r1
00010c  4039              ANDS     r1,r1,r7
00010e  fa21f000          LSR      r0,r1,r0
;;;196              if (Index) {
000112  b128              CBZ      r0,|L1.288|
;;;197                LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
000114  f8392010          LDRH     r2,[r9,r0,LSL #1]
;;;198                LCD_L0_SetPixelIndex(x, y, PixelIndex);
000118  4659              MOV      r1,r11
00011a  4628              MOV      r0,r5
00011c  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.288|
;;;199              }
;;;200              x++;
000120  1c6d              ADDS     r5,r5,#1
;;;201              if (++CurrentPixel == 4) {
000122  1c64              ADDS     r4,r4,#1
000124  2c04              CMP      r4,#4
000126  d039              BEQ      |L1.412|
000128  e03b              B        |L1.418|
                  |L1.298|
00012a  f1b90f00          CMP      r9,#0                 ;168
00012e  d01b              BEQ      |L1.360|
                  |L1.304|
000130  f1c40003          RSB      r0,r4,#3              ;170
000134  0040              LSLS     r0,r0,#1              ;170
000136  f1c00106          RSB      r1,r0,#6              ;171
00013a  fa2af101          LSR      r1,r10,r1             ;171
00013e  4039              ANDS     r1,r1,r7              ;171
000140  fa21f000          LSR      r0,r1,r0              ;171
000144  f8392010          LDRH     r2,[r9,r0,LSL #1]     ;172
000148  4628              MOV      r0,r5                 ;173
00014a  1c6d              ADDS     r5,r5,#1              ;173
00014c  4659              MOV      r1,r11                ;173
00014e  f7fffffe          BL       LCD_L0_SetPixelIndex
000152  1c64              ADDS     r4,r4,#1              ;174
000154  2c04              CMP      r4,#4                 ;174
000156  d102              BNE      |L1.350|
000158  2400              MOVS     r4,#0                 ;175
00015a  f8167f01          LDRB     r7,[r6,#1]!           ;176
                  |L1.350|
00015e  f1b80801          SUBS     r8,r8,#1              ;178
000162  d1e5              BNE      |L1.304|
                  |L1.356|
;;;202                CurrentPixel = 0;
;;;203                Pixels = *(++p);
;;;204              }
;;;205    		    } while (--xsize);
;;;206          } else {
;;;207            do {
;;;208              int Shift = (3 - CurrentPixel) << 1;
;;;209              int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
;;;210              if (Index) {
;;;211                LCD_L0_SetPixelIndex(x, y, Index);
;;;212              }
;;;213              x++;
;;;214              if (++CurrentPixel == 4) {
;;;215                CurrentPixel = 0;
;;;216                Pixels = *(++p);
;;;217              }
;;;218    		    } while (--xsize);
;;;219          }
;;;220          break;
;;;221      }
;;;222    }
000164  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.360|
000168  f1c40003          RSB      r0,r4,#3              ;181
00016c  0040              LSLS     r0,r0,#1              ;181
00016e  f1c00106          RSB      r1,r0,#6              ;182
000172  fa2af101          LSR      r1,r10,r1             ;182
000176  4039              ANDS     r1,r1,r7              ;182
000178  fa21f200          LSR      r2,r1,r0              ;182
00017c  4628              MOV      r0,r5                 ;183
00017e  1c6d              ADDS     r5,r5,#1              ;183
000180  4659              MOV      r1,r11                ;183
000182  f7fffffe          BL       LCD_L0_SetPixelIndex
000186  1c64              ADDS     r4,r4,#1              ;184
000188  2c04              CMP      r4,#4                 ;184
00018a  d102              BNE      |L1.402|
00018c  2400              MOVS     r4,#0                 ;185
00018e  f8167f01          LDRB     r7,[r6,#1]!           ;186
                  |L1.402|
000192  f1b80801          SUBS     r8,r8,#1              ;188
000196  d1e7              BNE      |L1.360|
000198  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.412|
00019c  2400              MOVS     r4,#0                 ;202
00019e  f8167f01          LDRB     r7,[r6,#1]!           ;203
                  |L1.418|
0001a2  f1b80801          SUBS     r8,r8,#1              ;205
0001a6  d1aa              BNE      |L1.254|
0001a8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.428|
0001ac  f1c40003          RSB      r0,r4,#3              ;208
0001b0  0040              LSLS     r0,r0,#1              ;208
0001b2  f1c00106          RSB      r1,r0,#6              ;209
0001b6  fa2af101          LSR      r1,r10,r1             ;209
0001ba  4039              ANDS     r1,r1,r7              ;209
0001bc  fa21f200          LSR      r2,r1,r0              ;209
0001c0  b11a              CBZ      r2,|L1.458|
0001c2  4659              MOV      r1,r11                ;211
0001c4  4628              MOV      r0,r5                 ;211
0001c6  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.458|
0001ca  1c6d              ADDS     r5,r5,#1              ;213
0001cc  1c64              ADDS     r4,r4,#1              ;214
0001ce  2c04              CMP      r4,#4                 ;214
0001d0  d102              BNE      |L1.472|
0001d2  2400              MOVS     r4,#0                 ;215
0001d4  f8167f01          LDRB     r7,[r6,#1]!           ;216
                  |L1.472|
0001d8  f1b80801          SUBS     r8,r8,#1              ;218
0001dc  d1e6              BNE      |L1.428|
0001de  e8bd9ff0          POP      {r4-r12,pc}
;;;223    #endif
                          ENDP

                  _DrawBitLine4BPP PROC
;;;229    #if (LCD_MAX_LOG_COLORS > 4)
;;;230    static void  _DrawBitLine4BPP(int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
0001e2  e92d5ff0          PUSH     {r4-r12,lr}
0001e6  468b              MOV      r11,r1
0001e8  f8dd902c          LDR      r9,[sp,#0x2c]
0001ec  f8dd8028          LDR      r8,[sp,#0x28]
0001f0  4616              MOV      r6,r2
;;;231      LCD_PIXELINDEX Pixels = *p;
0001f2  7837              LDRB     r7,[r6,#0]
;;;232      int CurrentPixel = Diff;
0001f4  461c              MOV      r4,r3
;;;233      x += Diff;
0001f6  18c5              ADDS     r5,r0,r3
;;;234      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0001f8  4884              LDR      r0,|L1.1036|
;;;235        case 0:
;;;236          if (pTrans) {
;;;237            do {
;;;238              int Shift = (1 - CurrentPixel) << 2;
;;;239              int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
0001fa  f04f0af0          MOV      r10,#0xf0
0001fe  7c00              LDRB     r0,[r0,#0x10]         ;234  ; GUI_Context
000200  f0100003          ANDS     r0,r0,#3              ;234
000204  d01a              BEQ      |L1.572|
000206  2802              CMP      r0,#2                 ;234
000208  d135              BNE      |L1.630|
;;;240              LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
;;;241              LCD_L0_SetPixelIndex(x++, y, PixelIndex);
;;;242              if (++CurrentPixel == 2) {
;;;243                CurrentPixel = 0;
;;;244                Pixels = *(++p);
;;;245              }
;;;246    		    } while (--xsize);
;;;247          } else {
;;;248            do {
;;;249              int Shift = (1 - CurrentPixel) << 2;
;;;250              int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
;;;251              LCD_L0_SetPixelIndex(x++, y, Index);
;;;252              if (++CurrentPixel == 2) {
;;;253                CurrentPixel = 0;
;;;254                Pixels = *(++p);
;;;255              }
;;;256    		    } while (--xsize);
;;;257          }
;;;258          break;
;;;259        case LCD_DRAWMODE_TRANS:
;;;260          if (pTrans) {
00020a  f1b90f00          CMP      r9,#0
00020e  d056              BEQ      |L1.702|
                  |L1.528|
;;;261            do {
;;;262              int Shift = (1 - CurrentPixel) << 2;
000210  f1c40001          RSB      r0,r4,#1
000214  0080              LSLS     r0,r0,#2
;;;263              int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000216  f1c00104          RSB      r1,r0,#4
00021a  fa2af101          LSR      r1,r10,r1
00021e  4039              ANDS     r1,r1,r7
000220  fa21f000          LSR      r0,r1,r0
;;;264              if (Index) {
000224  b128              CBZ      r0,|L1.562|
;;;265                LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
000226  f8392010          LDRH     r2,[r9,r0,LSL #1]
;;;266                LCD_L0_SetPixelIndex(x, y, PixelIndex);
00022a  4659              MOV      r1,r11
00022c  4628              MOV      r0,r5
00022e  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.562|
;;;267              }
;;;268              x++;
000232  1c6d              ADDS     r5,r5,#1
;;;269              if (++CurrentPixel == 2) {
000234  1c64              ADDS     r4,r4,#1
000236  2c02              CMP      r4,#2
000238  d039              BEQ      |L1.686|
00023a  e03b              B        |L1.692|
                  |L1.572|
00023c  f1b90f00          CMP      r9,#0                 ;236
000240  d01b              BEQ      |L1.634|
                  |L1.578|
000242  f1c40001          RSB      r0,r4,#1              ;238
000246  0080              LSLS     r0,r0,#2              ;238
000248  f1c00104          RSB      r1,r0,#4              ;239
00024c  fa2af101          LSR      r1,r10,r1             ;239
000250  4039              ANDS     r1,r1,r7              ;239
000252  fa21f000          LSR      r0,r1,r0              ;239
000256  f8392010          LDRH     r2,[r9,r0,LSL #1]     ;240
00025a  4628              MOV      r0,r5                 ;241
00025c  1c6d              ADDS     r5,r5,#1              ;241
00025e  4659              MOV      r1,r11                ;241
000260  f7fffffe          BL       LCD_L0_SetPixelIndex
000264  1c64              ADDS     r4,r4,#1              ;242
000266  2c02              CMP      r4,#2                 ;242
000268  d102              BNE      |L1.624|
00026a  2400              MOVS     r4,#0                 ;243
00026c  f8167f01          LDRB     r7,[r6,#1]!           ;244
                  |L1.624|
000270  f1b80801          SUBS     r8,r8,#1              ;246
000274  d1e5              BNE      |L1.578|
                  |L1.630|
;;;270                CurrentPixel = 0;
;;;271                Pixels = *(++p);
;;;272              }
;;;273    		    } while (--xsize);
;;;274          } else {
;;;275            do {
;;;276              int Shift = (1 - CurrentPixel) << 2;
;;;277              int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
;;;278              if (Index) {
;;;279                LCD_L0_SetPixelIndex(x, y, Index);
;;;280              }
;;;281              x++;
;;;282              if (++CurrentPixel == 2) {
;;;283                CurrentPixel = 0;
;;;284                Pixels = *(++p);
;;;285              }
;;;286    		    } while (--xsize);
;;;287          }
;;;288          break;
;;;289      }
;;;290    }
000276  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.634|
00027a  f1c40001          RSB      r0,r4,#1              ;249
00027e  0080              LSLS     r0,r0,#2              ;249
000280  f1c00104          RSB      r1,r0,#4              ;250
000284  fa2af101          LSR      r1,r10,r1             ;250
000288  4039              ANDS     r1,r1,r7              ;250
00028a  fa21f200          LSR      r2,r1,r0              ;250
00028e  4628              MOV      r0,r5                 ;251
000290  1c6d              ADDS     r5,r5,#1              ;251
000292  4659              MOV      r1,r11                ;251
000294  f7fffffe          BL       LCD_L0_SetPixelIndex
000298  1c64              ADDS     r4,r4,#1              ;252
00029a  2c02              CMP      r4,#2                 ;252
00029c  d102              BNE      |L1.676|
00029e  2400              MOVS     r4,#0                 ;253
0002a0  f8167f01          LDRB     r7,[r6,#1]!           ;254
                  |L1.676|
0002a4  f1b80801          SUBS     r8,r8,#1              ;256
0002a8  d1e7              BNE      |L1.634|
0002aa  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.686|
0002ae  2400              MOVS     r4,#0                 ;270
0002b0  f8167f01          LDRB     r7,[r6,#1]!           ;271
                  |L1.692|
0002b4  f1b80801          SUBS     r8,r8,#1              ;273
0002b8  d1aa              BNE      |L1.528|
0002ba  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.702|
0002be  f1c40001          RSB      r0,r4,#1              ;276
0002c2  0080              LSLS     r0,r0,#2              ;276
0002c4  f1c00104          RSB      r1,r0,#4              ;277
0002c8  fa2af101          LSR      r1,r10,r1             ;277
0002cc  4039              ANDS     r1,r1,r7              ;277
0002ce  fa21f200          LSR      r2,r1,r0              ;277
0002d2  b11a              CBZ      r2,|L1.732|
0002d4  4659              MOV      r1,r11                ;279
0002d6  4628              MOV      r0,r5                 ;279
0002d8  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.732|
0002dc  1c6d              ADDS     r5,r5,#1              ;281
0002de  1c64              ADDS     r4,r4,#1              ;282
0002e0  2c02              CMP      r4,#2                 ;282
0002e2  d102              BNE      |L1.746|
0002e4  2400              MOVS     r4,#0                 ;283
0002e6  f8167f01          LDRB     r7,[r6,#1]!           ;284
                  |L1.746|
0002ea  f1b80801          SUBS     r8,r8,#1              ;286
0002ee  d1e6              BNE      |L1.702|
0002f0  e8bd9ff0          POP      {r4-r12,pc}
;;;291    #endif
                          ENDP

                  _DrawBitLine8BPP PROC
;;;297    #if (LCD_MAX_LOG_COLORS > 16)
;;;298    static void  _DrawBitLine8BPP(int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
0002f4  e92d41f0          PUSH     {r4-r8,lr}
0002f8  4606              MOV      r6,r0
0002fa  9f06              LDR      r7,[sp,#0x18]
0002fc  4688              MOV      r8,r1
0002fe  4615              MOV      r5,r2
000300  461c              MOV      r4,r3
;;;299      LCD_PIXELINDEX Pixel;
;;;300      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000302  4842              LDR      r0,|L1.1036|
000304  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000306  f0100003          ANDS     r0,r0,#3
00030a  d013              BEQ      |L1.820|
00030c  2802              CMP      r0,#2
00030e  d10f              BNE      |L1.816|
;;;301        case 0:
;;;302          if (pTrans) {
;;;303            for (; xsize > 0; xsize--, x++, p++) {
;;;304              Pixel = *p;
;;;305              LCD_L0_SetPixelIndex(x, y, *(pTrans + Pixel));
;;;306            }
;;;307          } else {
;;;308            for (; xsize > 0; xsize--, x++, p++) {
;;;309              LCD_L0_SetPixelIndex(x, y, *p);
;;;310            }
;;;311          }
;;;312          break;
;;;313        case LCD_DRAWMODE_TRANS:
;;;314          if (pTrans) {
000310  b37f              CBZ      r7,|L1.882|
;;;315            for (; xsize > 0; xsize--, x++, p++) {
000312  2c00              CMP      r4,#0
000314  dd0c              BLE      |L1.816|
                  |L1.790|
;;;316              Pixel = *p;
000316  7828              LDRB     r0,[r5,#0]
;;;317              if (Pixel) {
000318  b128              CBZ      r0,|L1.806|
;;;318                LCD_L0_SetPixelIndex(x, y, *(pTrans + Pixel));
00031a  f8372010          LDRH     r2,[r7,r0,LSL #1]
00031e  4641              MOV      r1,r8
000320  4630              MOV      r0,r6
000322  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.806|
000326  1e64              SUBS     r4,r4,#1              ;315
000328  1c76              ADDS     r6,r6,#1              ;315
00032a  1c6d              ADDS     r5,r5,#1              ;315
00032c  2c00              CMP      r4,#0                 ;315
00032e  dcf2              BGT      |L1.790|
                  |L1.816|
;;;319              }
;;;320            }
;;;321          } else {
;;;322            for (; xsize > 0; xsize--, x++, p++) {
;;;323              Pixel = *p;
;;;324              if (Pixel) {
;;;325                LCD_L0_SetPixelIndex(x, y, Pixel);
;;;326              }
;;;327            }
;;;328          }
;;;329          break;
;;;330      }
;;;331    }
000330  e8bd81f0          POP      {r4-r8,pc}
                  |L1.820|
000334  b17f              CBZ      r7,|L1.854|
000336  2c00              CMP      r4,#0                 ;303
000338  ddfa              BLE      |L1.816|
                  |L1.826|
00033a  7828              LDRB     r0,[r5,#0]            ;304
00033c  4641              MOV      r1,r8                 ;305
00033e  f8372010          LDRH     r2,[r7,r0,LSL #1]     ;305
000342  4630              MOV      r0,r6                 ;305
000344  f7fffffe          BL       LCD_L0_SetPixelIndex
000348  1e64              SUBS     r4,r4,#1              ;303
00034a  1c76              ADDS     r6,r6,#1              ;303
00034c  1c6d              ADDS     r5,r5,#1              ;303
00034e  2c00              CMP      r4,#0                 ;303
000350  dcf3              BGT      |L1.826|
                  |L1.850|
000352  e8bd81f0          POP      {r4-r8,pc}
                  |L1.854|
000356  2c00              CMP      r4,#0                 ;308
000358  ddfb              BLE      |L1.850|
                  |L1.858|
00035a  782a              LDRB     r2,[r5,#0]            ;309
00035c  4641              MOV      r1,r8                 ;309
00035e  4630              MOV      r0,r6                 ;309
000360  f7fffffe          BL       LCD_L0_SetPixelIndex
000364  1e64              SUBS     r4,r4,#1              ;308
000366  1c76              ADDS     r6,r6,#1              ;308
000368  1c6d              ADDS     r5,r5,#1              ;308
00036a  2c00              CMP      r4,#0                 ;308
00036c  dcf5              BGT      |L1.858|
                  |L1.878|
00036e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.882|
000372  e7ff              B        |L1.884|
                  |L1.884|
000374  2c00              CMP      r4,#0                 ;322
000376  ddfa              BLE      |L1.878|
                  |L1.888|
000378  782a              LDRB     r2,[r5,#0]            ;323
00037a  b11a              CBZ      r2,|L1.900|
00037c  4641              MOV      r1,r8                 ;325
00037e  4630              MOV      r0,r6                 ;325
000380  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.900|
000384  1e64              SUBS     r4,r4,#1              ;322
000386  1c76              ADDS     r6,r6,#1              ;322
000388  1c6d              ADDS     r5,r5,#1              ;322
00038a  2c00              CMP      r4,#0                 ;322
00038c  dcf4              BGT      |L1.888|
00038e  e8bd81f0          POP      {r4-r8,pc}
;;;332    #endif
                          ENDP

                  DrawBitLine16BPP PROC
;;;338    #if (LCD_BITSPERPIXEL > 8)
;;;339    static void  DrawBitLine16BPP(int x, int y, U16 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
000392  e92d41f0          PUSH     {r4-r8,lr}
000396  4606              MOV      r6,r0
000398  9f06              LDR      r7,[sp,#0x18]
00039a  4688              MOV      r8,r1
00039c  4615              MOV      r5,r2
00039e  461c              MOV      r4,r3
;;;340      LCD_PIXELINDEX pixel;
;;;341      if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
0003a0  481a              LDR      r0,|L1.1036|
0003a2  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0003a4  f0100f02          TST      r0,#2
0003a8  d011              BEQ      |L1.974|
;;;342        if (pTrans) {
;;;343          for (; xsize > 0; xsize--, x++, p++) {
;;;344            pixel = *p;
;;;345            LCD_L0_SetPixelIndex(x, y, *(pTrans + pixel));
;;;346          }
;;;347        } else {
;;;348          for (;xsize > 0; xsize--, x++, p++) {
;;;349            LCD_L0_SetPixelIndex(x, y, *p);
;;;350          }
;;;351        }
;;;352      } else {
;;;353        if (pTrans) {
0003aa  b38f              CBZ      r7,|L1.1040|
;;;354          for (; xsize > 0; xsize--, x++, p++) {
0003ac  2c00              CMP      r4,#0
0003ae  dd0c              BLE      |L1.970|
                  |L1.944|
;;;355            pixel = *p;
0003b0  8828              LDRH     r0,[r5,#0]
;;;356            if (pixel) {
0003b2  b128              CBZ      r0,|L1.960|
;;;357              LCD_L0_SetPixelIndex(x, y, *(pTrans + pixel));
0003b4  f8372010          LDRH     r2,[r7,r0,LSL #1]
0003b8  4641              MOV      r1,r8
0003ba  4630              MOV      r0,r6
0003bc  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.960|
0003c0  1e64              SUBS     r4,r4,#1              ;354
0003c2  1c76              ADDS     r6,r6,#1              ;354
0003c4  1cad              ADDS     r5,r5,#2              ;354
0003c6  2c00              CMP      r4,#0                 ;354
0003c8  dcf2              BGT      |L1.944|
                  |L1.970|
;;;358            }
;;;359          }
;;;360        } else {
;;;361          for (; xsize > 0; xsize--, x++, p++) {
;;;362            pixel = *p;
;;;363            if (pixel) {
;;;364              LCD_L0_SetPixelIndex(x, y, pixel);
;;;365            }
;;;366          }
;;;367        }
;;;368      }
;;;369    }
0003ca  e8bd81f0          POP      {r4-r8,pc}
                  |L1.974|
0003ce  b17f              CBZ      r7,|L1.1008|
0003d0  2c00              CMP      r4,#0                 ;343
0003d2  ddfa              BLE      |L1.970|
                  |L1.980|
0003d4  8828              LDRH     r0,[r5,#0]            ;344
0003d6  4641              MOV      r1,r8                 ;345
0003d8  f8372010          LDRH     r2,[r7,r0,LSL #1]     ;345
0003dc  4630              MOV      r0,r6                 ;345
0003de  f7fffffe          BL       LCD_L0_SetPixelIndex
0003e2  1e64              SUBS     r4,r4,#1              ;343
0003e4  1c76              ADDS     r6,r6,#1              ;343
0003e6  1cad              ADDS     r5,r5,#2              ;343
0003e8  2c00              CMP      r4,#0                 ;343
0003ea  dcf3              BGT      |L1.980|
                  |L1.1004|
0003ec  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1008|
0003f0  2c00              CMP      r4,#0                 ;348
0003f2  ddfb              BLE      |L1.1004|
                  |L1.1012|
0003f4  882a              LDRH     r2,[r5,#0]            ;349
0003f6  4641              MOV      r1,r8                 ;349
0003f8  4630              MOV      r0,r6                 ;349
0003fa  f7fffffe          BL       LCD_L0_SetPixelIndex
0003fe  1e64              SUBS     r4,r4,#1              ;348
000400  1c76              ADDS     r6,r6,#1              ;348
000402  1cad              ADDS     r5,r5,#2              ;348
000404  2c00              CMP      r4,#0                 ;348
000406  dcf5              BGT      |L1.1012|
                  |L1.1032|
000408  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1036|
                          DCD      GUI_Context
                  |L1.1040|
000410  e7ff              B        |L1.1042|
                  |L1.1042|
000412  2c00              CMP      r4,#0                 ;361
000414  ddf8              BLE      |L1.1032|
                  |L1.1046|
000416  882a              LDRH     r2,[r5,#0]            ;362
000418  b11a              CBZ      r2,|L1.1058|
00041a  4641              MOV      r1,r8                 ;364
00041c  4630              MOV      r0,r6                 ;364
00041e  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.1058|
000422  1e64              SUBS     r4,r4,#1              ;361
000424  1c76              ADDS     r6,r6,#1              ;361
000426  1cad              ADDS     r5,r5,#2              ;361
000428  2c00              CMP      r4,#0                 ;361
00042a  dcf4              BGT      |L1.1046|
00042c  e7ec              B        |L1.1032|
;;;370    #endif
                          ENDP

                  LCD_L0_XorPixel PROC
;;;437    */
;;;438    void LCD_L0_XorPixel(int x, int y) {
00042e  b570              PUSH     {r4-r6,lr}
000430  4604              MOV      r4,r0
000432  460d              MOV      r5,r1
;;;439      LCD_PIXELINDEX PixelIndex = LCD_L0_GetPixelIndex(x, y);
000434  4629              MOV      r1,r5
000436  4620              MOV      r0,r4
000438  f7fffffe          BL       LCD_L0_GetPixelIndex
00043c  b280              UXTH     r0,r0
;;;440      LCD_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - PixelIndex - 1);
00043e  f64f72ff          MOV      r2,#0xffff
000442  1a12              SUBS     r2,r2,r0
000444  4629              MOV      r1,r5
000446  4620              MOV      r0,r4
000448  e8bd4070          POP      {r4-r6,lr}
00044c  e7fe              B        LCD_L0_SetPixelIndex
;;;441    }
;;;442    
                          ENDP

                  LCD_L0_DrawHLine PROC
;;;446    */
;;;447    void LCD_L0_DrawHLine  (int x0, int y,  int x1) {
00044e  e92d41f0          PUSH     {r4-r8,lr}
000452  4604              MOV      r4,r0
000454  460f              MOV      r7,r1
000456  4615              MOV      r5,r2
;;;448      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000458  4e58              LDR      r6,|L1.1468|
00045a  7c30              LDRB     r0,[r6,#0x10]  ; GUI_Context
00045c  f0100f01          TST      r0,#1
000460  d00a              BEQ      |L1.1144|
;;;449        for (; x0 <= x1; x0++) {
000462  42ac              CMP      r4,r5
000464  dc06              BGT      |L1.1140|
                  |L1.1126|
;;;450          LCD_L0_XorPixel(x0, y);
000466  4639              MOV      r1,r7
000468  4620              MOV      r0,r4
00046a  f7fffffe          BL       LCD_L0_XorPixel
00046e  1c64              ADDS     r4,r4,#1              ;449
000470  42ac              CMP      r4,r5                 ;449
000472  ddf8              BLE      |L1.1126|
                  |L1.1140|
;;;451        }
;;;452      } else {
;;;453        for (; x0 <= x1; x0++) {
;;;454          LCD_L0_SetPixelIndex(x0, y, LCD_COLORINDEX);
;;;455        }
;;;456      }
;;;457    }
000474  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1144|
000478  42ac              CMP      r4,r5                 ;453
00047a  dcfb              BGT      |L1.1140|
                  |L1.1148|
00047c  8872              LDRH     r2,[r6,#2]            ;454  ; GUI_Context
00047e  4639              MOV      r1,r7                 ;454
000480  4620              MOV      r0,r4                 ;454
000482  f7fffffe          BL       LCD_L0_SetPixelIndex
000486  1c64              ADDS     r4,r4,#1              ;453
000488  42ac              CMP      r4,r5                 ;453
00048a  ddf7              BLE      |L1.1148|
00048c  e8bd81f0          POP      {r4-r8,pc}
;;;458    
                          ENDP

                  LCD_L0_DrawVLine PROC
;;;462    */
;;;463    void LCD_L0_DrawVLine  (int x, int y0,  int y1) {
000490  e92d41f0          PUSH     {r4-r8,lr}
000494  4607              MOV      r7,r0
000496  460c              MOV      r4,r1
000498  4615              MOV      r5,r2
;;;464      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
00049a  4e48              LDR      r6,|L1.1468|
00049c  7c30              LDRB     r0,[r6,#0x10]  ; GUI_Context
00049e  f0100f01          TST      r0,#1
0004a2  d00a              BEQ      |L1.1210|
;;;465        for (; y0 <= y1; y0++) {
0004a4  42ac              CMP      r4,r5
0004a6  dc06              BGT      |L1.1206|
                  |L1.1192|
;;;466          LCD_L0_XorPixel(x, y0);
0004a8  4621              MOV      r1,r4
0004aa  4638              MOV      r0,r7
0004ac  f7fffffe          BL       LCD_L0_XorPixel
0004b0  1c64              ADDS     r4,r4,#1              ;465
0004b2  42ac              CMP      r4,r5                 ;465
0004b4  ddf8              BLE      |L1.1192|
                  |L1.1206|
;;;467        }
;;;468      } else {
;;;469        for (; y0 <= y1; y0++) {
;;;470          LCD_L0_SetPixelIndex(x, y0, LCD_COLORINDEX);
;;;471        }
;;;472      }
;;;473    }
0004b6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1210|
0004ba  42ac              CMP      r4,r5                 ;469
0004bc  dcfb              BGT      |L1.1206|
                  |L1.1214|
0004be  8872              LDRH     r2,[r6,#2]            ;470  ; GUI_Context
0004c0  4621              MOV      r1,r4                 ;470
0004c2  4638              MOV      r0,r7                 ;470
0004c4  f7fffffe          BL       LCD_L0_SetPixelIndex
0004c8  1c64              ADDS     r4,r4,#1              ;469
0004ca  42ac              CMP      r4,r5                 ;469
0004cc  ddf7              BLE      |L1.1214|
0004ce  e8bd81f0          POP      {r4-r8,pc}
;;;474    
                          ENDP

                  LCD_L0_FillRect PROC
;;;478    */
;;;479    void LCD_L0_FillRect(int x0, int y0, int x1, int y1) {
0004d2  e92d41f0          PUSH     {r4-r8,lr}
0004d6  4606              MOV      r6,r0
0004d8  460c              MOV      r4,r1
0004da  4617              MOV      r7,r2
0004dc  461d              MOV      r5,r3
;;;480      for (; y0 <= y1; y0++) {
0004de  42ac              CMP      r4,r5
0004e0  dc07              BGT      |L1.1266|
                  |L1.1250|
;;;481        LCD_L0_DrawHLine(x0, y0, x1);
0004e2  463a              MOV      r2,r7
0004e4  4621              MOV      r1,r4
0004e6  4630              MOV      r0,r6
0004e8  f7fffffe          BL       LCD_L0_DrawHLine
0004ec  1c64              ADDS     r4,r4,#1              ;480
0004ee  42ac              CMP      r4,r5                 ;480
0004f0  ddf7              BLE      |L1.1250|
                  |L1.1266|
;;;482      }
;;;483    }
0004f2  e8bd81f0          POP      {r4-r8,pc}
;;;484    
                          ENDP

                  LCD_L0_DrawBitmap PROC
;;;488    */
;;;489    void LCD_L0_DrawBitmap(int x0, int y0,
0004f6  e92d4fff          PUSH     {r0-r11,lr}
;;;490                           int xsize, int ysize,
;;;491                           int BitsPerPixel, 
;;;492                           int BytesPerLine,
;;;493                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;494                           const LCD_PIXELINDEX* pTrans)
;;;495    {
0004fa  b083              SUB      sp,sp,#0xc
0004fc  460e              MOV      r6,r1
0004fe  f8ddb050          LDR      r11,[sp,#0x50]
000502  f8dda04c          LDR      r10,[sp,#0x4c]
000506  f8dd9044          LDR      r9,[sp,#0x44]
00050a  9f12              LDR      r7,[sp,#0x48]
00050c  9d10              LDR      r5,[sp,#0x40]
00050e  4698              MOV      r8,r3
;;;496      int i;
;;;497      /* Use _DrawBitLineXBPP */
;;;498      for (i=0; i<ysize; i++) {
000510  2400              MOVS     r4,#0
000512  f1b80f00          CMP      r8,#0
000516  dd42              BLE      |L1.1438|
                  |L1.1304|
;;;499        switch (BitsPerPixel) {
000518  2d04              CMP      r5,#4
00051a  d020              BEQ      |L1.1374|
00051c  dc04              BGT      |L1.1320|
00051e  2d01              CMP      r5,#1
000520  d007              BEQ      |L1.1330|
000522  2d02              CMP      r5,#2
000524  d137              BNE      |L1.1430|
000526  e00f              B        |L1.1352|
                  |L1.1320|
000528  2d08              CMP      r5,#8
00052a  d023              BEQ      |L1.1396|
00052c  2d10              CMP      r5,#0x10
00052e  d132              BNE      |L1.1430|
000530  e029              B        |L1.1414|
                  |L1.1330|
;;;500        case 1:
;;;501          _DrawBitLine1BPP(x0, i + y0, pData, Diff, xsize, pTrans);
000532  9a05              LDR      r2,[sp,#0x14]
000534  9200              STR      r2,[sp,#0]
000536  19a1              ADDS     r1,r4,r6
000538  4653              MOV      r3,r10
00053a  f8cdb004          STR      r11,[sp,#4]
00053e  463a              MOV      r2,r7
000540  9803              LDR      r0,[sp,#0xc]
000542  f7fffffe          BL       _DrawBitLine1BPP
;;;502          break;
000546  e026              B        |L1.1430|
                  |L1.1352|
;;;503        #if (LCD_MAX_LOG_COLORS > 2)
;;;504          case 2:
;;;505            _DrawBitLine2BPP(x0, i + y0, pData, Diff, xsize, pTrans);
000548  9a05              LDR      r2,[sp,#0x14]
00054a  9200              STR      r2,[sp,#0]
00054c  19a1              ADDS     r1,r4,r6
00054e  4653              MOV      r3,r10
000550  f8cdb004          STR      r11,[sp,#4]
000554  463a              MOV      r2,r7
000556  9803              LDR      r0,[sp,#0xc]
000558  f7fffffe          BL       _DrawBitLine2BPP
;;;506            break;
00055c  e01b              B        |L1.1430|
                  |L1.1374|
;;;507        #endif
;;;508        #if (LCD_MAX_LOG_COLORS > 4)
;;;509          case 4:
;;;510            _DrawBitLine4BPP(x0, i + y0, pData, Diff, xsize, pTrans);
00055e  9a05              LDR      r2,[sp,#0x14]
000560  9200              STR      r2,[sp,#0]
000562  19a1              ADDS     r1,r4,r6
000564  4653              MOV      r3,r10
000566  f8cdb004          STR      r11,[sp,#4]
00056a  463a              MOV      r2,r7
00056c  9803              LDR      r0,[sp,#0xc]
00056e  f7fffffe          BL       _DrawBitLine4BPP
;;;511            break;
000572  e010              B        |L1.1430|
                  |L1.1396|
;;;512        #endif
;;;513        #if (LCD_MAX_LOG_COLORS > 16)
;;;514          case 8:
;;;515            _DrawBitLine8BPP(x0, i + y0, pData, xsize, pTrans);
000574  f8cdb000          STR      r11,[sp,#0]
000578  19a1              ADDS     r1,r4,r6
00057a  463a              MOV      r2,r7
00057c  9b05              LDR      r3,[sp,#0x14]
00057e  9803              LDR      r0,[sp,#0xc]
000580  f7fffffe          BL       _DrawBitLine8BPP
;;;516            break;
000584  e007              B        |L1.1430|
                  |L1.1414|
;;;517        #endif
;;;518        #if (LCD_BITSPERPIXEL > 8)
;;;519          case 16:
;;;520            DrawBitLine16BPP(x0, i + y0, (const U16 *)pData, xsize, pTrans);
000586  f8cdb000          STR      r11,[sp,#0]
00058a  19a1              ADDS     r1,r4,r6
00058c  463a              MOV      r2,r7
00058e  9b05              LDR      r3,[sp,#0x14]
000590  9803              LDR      r0,[sp,#0xc]
000592  f7fffffe          BL       DrawBitLine16BPP
                  |L1.1430|
;;;521            break;
;;;522        #endif
;;;523        }
;;;524        pData += BytesPerLine;
000596  444f              ADD      r7,r7,r9
000598  1c64              ADDS     r4,r4,#1              ;498
00059a  4544              CMP      r4,r8                 ;498
00059c  dbbc              BLT      |L1.1304|
                  |L1.1438|
;;;525      }
;;;526    }
00059e  b007              ADD      sp,sp,#0x1c
0005a0  e8bd8ff0          POP      {r4-r11,pc}
;;;527    
                          ENDP

                  LCD_L0_SetOrg PROC
;;;531    */
;;;532    void LCD_L0_SetOrg(int x, int y) {
0005a4  4770              BX       lr
;;;533      LCD_SET_ORG(x, y);
;;;534    }
;;;535    
                          ENDP

                  LCD_L0_On PROC
;;;539    */
;;;540    void LCD_On (void) {
0005a6  4770              BX       lr
;;;541    #ifdef LCD_ON
;;;542      LCD_ON();
;;;543    #endif
;;;544    }
;;;545    
                          ENDP

                  LCD_L0_Off PROC
;;;546    void LCD_Off (void) {
0005a8  4770              BX       lr
;;;547    #ifdef LCD_OFF
;;;548      LCD_OFF();
;;;549    #endif
;;;550    }
;;;551    
                          ENDP

                  LCD_L0_Init PROC
;;;558    */
;;;559    int  LCD_L0_Init(void) {
0005aa  b510              PUSH     {r4,lr}
;;;560      LCD_INIT_CONTROLLER();
0005ac  f7fffffe          BL       LCD_R61505W_Init
;;;561      return 0;
0005b0  2000              MOVS     r0,#0
;;;562    }
0005b2  bd10              POP      {r4,pc}
;;;563    
                          ENDP

                  LCD_L0_SetLUTEntry PROC
;;;567    */
;;;568    void LCD_L0_SetLUTEntry(U8 Pos, LCD_COLOR Color) {
0005b4  4770              BX       lr
;;;569      GUI_USE_PARA(Pos);
;;;570      GUI_USE_PARA(Color);
;;;571    }
;;;572    
                          ENDP

                  LCD_L0_GetDevFunc PROC
;;;576    */
;;;577    void * LCD_L0_GetDevFunc(int Index) {
0005b6  2000              MOVS     r0,#0
;;;578      GUI_USE_PARA(Index);
;;;579      return NULL;
;;;580    }
0005b8  4770              BX       lr
;;;581    
                          ENDP

0005ba  0000              DCW      0x0000
                  |L1.1468|
                          DCD      GUI_Context
