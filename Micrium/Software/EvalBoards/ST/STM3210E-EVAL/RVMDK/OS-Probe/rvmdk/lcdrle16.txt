; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcdrle16.o --depend=.\rvmdk\lcdrle16.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcdrle16.crf ..\..\..\..\..\uCGUI\GUI\Core\LCDRLE16.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Read16 PROC
;;;51     */
;;;52     static U16 _Read16(const U8 GUI_UNI_PTR ** ppData) {
000000  6801              LDR      r1,[r0,#0]
;;;53       const U8 GUI_UNI_PTR * pData;
;;;54       U16  Value;
;;;55       pData = *ppData;
;;;56       Value = *pData;
000002  780a              LDRB     r2,[r1,#0]
;;;57       Value |= (U16)(*(pData + 1) << 8);
000004  784b              LDRB     r3,[r1,#1]
000006  ea422203          ORR      r2,r2,r3,LSL #8
;;;58       pData += 2;
00000a  1c89              ADDS     r1,r1,#2
;;;59       *ppData = pData;
00000c  6001              STR      r1,[r0,#0]
;;;60       return Value;
00000e  4610              MOV      r0,r2
;;;61     }
000010  4770              BX       lr
;;;62     
                          ENDP

                  _GetPixelIndex PROC
;;;66     */
;;;67     static LCD_PIXELINDEX _GetPixelIndex(const U8 GUI_UNI_PTR ** ppPixel) {
000012  b510              PUSH     {r4,lr}
;;;68       U16 Data = _Read16(ppPixel);
000014  f7fffffe          BL       _Read16
;;;69       if ((_DisplayMode == 565) && (_DisplaySwapRB == _BitmapSwapRB)) {
000018  4991              LDR      r1,|L1.608|
00001a  684a              LDR      r2,[r1,#4]  ; _DisplayMode
00001c  f5a27300          SUB      r3,r2,#0x200
000020  3b35              SUBS     r3,r3,#0x35
000022  d103              BNE      |L1.44|
000024  780a              LDRB     r2,[r1,#0]  ; _DisplaySwapRB
000026  784b              LDRB     r3,[r1,#1]  ; _BitmapSwapRB
000028  429a              CMP      r2,r3
00002a  d006              BEQ      |L1.58|
                  |L1.44|
;;;70         return (LCD_PIXELINDEX)Data;
;;;71       }
;;;72       if (_BitmapSwapRB) {
00002c  7849              LDRB     r1,[r1,#1]  ; _BitmapSwapRB
00002e  b129              CBZ      r1,|L1.60|
;;;73         return LCD_Color2Index(LCD_Index2Color_M565(Data));
000030  f7fffffe          BL       LCD_Index2Color_M565
000034  f7fffffe          BL       LCD_Color2Index
000038  b280              UXTH     r0,r0
                  |L1.58|
;;;74       }
;;;75       return LCD_Color2Index(LCD_Index2Color_565(Data));
;;;76     }
00003a  bd10              POP      {r4,pc}
                  |L1.60|
00003c  f7fffffe          BL       LCD_Index2Color_565
000040  f7fffffe          BL       LCD_Color2Index
000044  b280              UXTH     r0,r0                 ;75
000046  bd10              POP      {r4,pc}
;;;77     
                          ENDP

                  _DrawBitmap_RLE PROC
;;;81     */
;;;82     static void _DrawBitmap_RLE(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, int xMag, int yMag) {
000048  e92d4fff          PUSH     {r0-r11,lr}
00004c  b085              SUB      sp,sp,#0x14
00004e  4607              MOV      r7,r0
000050  f8ddb04c          LDR      r11,[sp,#0x4c]
000054  f8dd9050          LDR      r9,[sp,#0x50]
000058  468a              MOV      r10,r1
;;;83       LCD_PIXELINDEX OldColorIndex, PixelIndex;
;;;84       int xi, y, xL, yL;
;;;85       const U8 GUI_UNI_PTR * pPixelOrg;
;;;86       char NoTrans, IsMagnified;
;;;87       pPixelOrg     = pPixel;
00005a  9e12              LDR      r6,[sp,#0x48]
;;;88       NoTrans       = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
00005c  4981              LDR      r1,|L1.612|
00005e  2201              MOVS     r2,#1
000060  7c08              LDRB     r0,[r1,#0x10]  ; GUI_Context
000062  ea220050          BIC      r0,r2,r0,LSR #1
000066  9002              STR      r0,[sp,#8]
;;;89       IsMagnified   = ((yMag | xMag) != 1);
000068  ea49000b          ORR      r0,r9,r11
00006c  2801              CMP      r0,#1
00006e  d001              BEQ      |L1.116|
000070  2001              MOVS     r0,#1
000072  e000              B        |L1.118|
                  |L1.116|
000074  2000              MOVS     r0,#0
                  |L1.118|
000076  9001              STR      r0,[sp,#4]
;;;90       OldColorIndex = LCD_ACOLORINDEX[1];
000078  4d7a              LDR      r5,|L1.612|
00007a  8868              LDRH     r0,[r5,#2]  ; GUI_Context
00007c  9003              STR      r0,[sp,#0xc]
;;;91       _DisplayMode   = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
00007e  7c68              LDRB     r0,[r5,#0x11]  ; GUI_Context
000080  f7fffffe          BL       LCD_GetFixedPaletteEx
000084  4c76              LDR      r4,|L1.608|
000086  6060              STR      r0,[r4,#4]  ; _DisplayMode
;;;92       _DisplaySwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
000088  7c68              LDRB     r0,[r5,#0x11]  ; GUI_Context
00008a  f7fffffe          BL       LCD_GetSwapRBEx
00008e  7020              STRB     r0,[r4,#0]
;;;93      /* Check if we can limit the number of lines due to clipping) */
;;;94       if (yMag == 1) {
000090  f1b90f01          CMP      r9,#1
000094  d10a              BNE      |L1.172|
;;;95         if (ysize > GUI_Context.ClipRect.y1 - y0 + 1) {
000096  4628              MOV      r0,r5
000098  9908              LDR      r1,[sp,#0x20]
00009a  f9b0000e          LDRSH    r0,[r0,#0xe]  ; GUI_Context
00009e  eba0000a          SUB      r0,r0,r10
0000a2  1c42              ADDS     r2,r0,#1
0000a4  428a              CMP      r2,r1
0000a6  da01              BGE      |L1.172|
;;;96           ysize = GUI_Context.ClipRect.y1 - y0 + 1;
0000a8  1c40              ADDS     r0,r0,#1
0000aa  9008              STR      r0,[sp,#0x20]
                  |L1.172|
;;;97         }
;;;98       }
;;;99       /* Init variables for looping */
;;;100      xi = y = 0;
0000ac  2400              MOVS     r4,#0
0000ae  4625              MOV      r5,r4
;;;101      /* Check if we can use the cache to save some unnecessary iterations */
;;;102      if (!IsMagnified) {
;;;103        int yDiff = GUI_Context.ClipRect.y0 - y0;
;;;104        if ((_Cache.pPixelStart == pPixel) && (yDiff > _Cache.y)) {
0000b0  496d              LDR      r1,|L1.616|
0000b2  9801              LDR      r0,[sp,#4]            ;102
0000b4  b978              CBNZ     r0,|L1.214|
0000b6  486b              LDR      r0,|L1.612|
0000b8  f9b0000a          LDRSH    r0,[r0,#0xa]          ;103  ; GUI_Context
0000bc  eba0020a          SUB      r2,r0,r10             ;103
0000c0  68c8              LDR      r0,[r1,#0xc]  ; _Cache
0000c2  9b12              LDR      r3,[sp,#0x48]
0000c4  4298              CMP      r0,r3
0000c6  d106              BNE      |L1.214|
0000c8  6848              LDR      r0,[r1,#4]  ; _Cache
0000ca  4290              CMP      r0,r2
0000cc  da03              BGE      |L1.214|
;;;105          /* Accept cache values */
;;;106          y      = _Cache.y;
0000ce  4605              MOV      r5,r0
;;;107          xi     = _Cache.x;
0000d0  680c              LDR      r4,[r1,#0]  ; _Cache
;;;108          pPixel = _Cache.pPixel;
0000d2  6888              LDR      r0,[r1,#8]  ; _Cache
0000d4  9012              STR      r0,[sp,#0x48]
                  |L1.214|
;;;109        }
;;;110      }
;;;111      /* Init values for caching */
;;;112      _Cache.pPixel = _Cache.pPixelStart = pPixelOrg;
0000d6  60ce              STR      r6,[r1,#0xc]  ; _Cache
0000d8  608e              STR      r6,[r1,#8]  ; _Cache
;;;113      _Cache.x = _Cache.y = 0;
0000da  2000              MOVS     r0,#0
0000dc  6048              STR      r0,[r1,#4]  ; _Cache
0000de  6008              STR      r0,[r1,#0]  ; _Cache
;;;114      /* Repeat until we have reached bottom */
;;;115      for (; y < ysize; ) {
0000e0  9808              LDR      r0,[sp,#0x20]
0000e2  4285              CMP      r5,r0
0000e4  da7e              BGE      |L1.484|
                  |L1.230|
;;;116        U8 NumCompressedPixels = *pPixel++;
0000e6  9812              LDR      r0,[sp,#0x48]
0000e8  f8108b01          LDRB     r8,[r0],#1
0000ec  9012              STR      r0,[sp,#0x48]
;;;117        if (NumCompressedPixels) {
0000ee  f1b80f00          CMP      r8,#0
0000f2  d03c              BEQ      |L1.366|
;;;118          PixelIndex = _GetPixelIndex(&pPixel);
0000f4  a812              ADD      r0,sp,#0x48
0000f6  f7fffffe          BL       _GetPixelIndex
;;;119          /* Save cache info */
;;;120          _Cache.pPixel = pPixel - 3;
0000fa  9912              LDR      r1,[sp,#0x48]
0000fc  1eca              SUBS     r2,r1,#3
0000fe  495a              LDR      r1,|L1.616|
000100  608a              STR      r2,[r1,#8]  ; _Cache
;;;121          _Cache.x      = xi;
000102  600c              STR      r4,[r1,#0]  ; _Cache
;;;122          _Cache.y      = y;
000104  604d              STR      r5,[r1,#4]  ; _Cache
;;;123          LCD_ACOLORINDEX[1] = PixelIndex;
000106  4957              LDR      r1,|L1.612|
000108  8048              STRH     r0,[r1,#2]
;;;124          while (NumCompressedPixels) {
;;;125            int xi1 = xi + NumCompressedPixels;
;;;126            if (xi1 >= xsize) {
;;;127              xi1 = xsize;
;;;128            }
;;;129            NumCompressedPixels -= (xi1 - xi);
;;;130            if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
00010a  9902              LDR      r1,[sp,#8]
00010c  4308              ORRS     r0,r0,r1
00010e  9004              STR      r0,[sp,#0x10]
                  |L1.272|
000110  eb040608          ADD      r6,r4,r8              ;125
000114  9807              LDR      r0,[sp,#0x1c]         ;126
000116  4286              CMP      r6,r0                 ;126
000118  db00              BLT      |L1.284|
00011a  9e07              LDR      r6,[sp,#0x1c]         ;127
                  |L1.284|
00011c  1b30              SUBS     r0,r6,r4              ;129
00011e  eba80100          SUB      r1,r8,r0              ;129
000122  f00108ff          AND      r8,r1,#0xff           ;129
000126  9904              LDR      r1,[sp,#0x10]
000128  b1b9              CBZ      r1,|L1.346|
;;;131              if (IsMagnified) {
00012a  9901              LDR      r1,[sp,#4]
00012c  b171              CBZ      r1,|L1.332|
;;;132                xL = xMag * xi + x0;
00012e  fb0b7c04          MLA      r12,r11,r4,r7
;;;133                yL = yMag * y + y0;
000132  fb09a105          MLA      r1,r9,r5,r10
;;;134                LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
000136  eb010209          ADD      r2,r1,r9
00013a  1e53              SUBS     r3,r2,#1
00013c  f1ac0201          SUB      r2,r12,#1
000140  fb0b2200          MLA      r2,r11,r0,r2
000144  4660              MOV      r0,r12
000146  f7fffffe          BL       LCD_FillRect
00014a  e006              B        |L1.346|
                  |L1.332|
;;;135              } else {
;;;136                LCD_DrawHLine(x0 + xi, y + y0, xi1 + x0 - 1);
00014c  19f0              ADDS     r0,r6,r7
00014e  1e42              SUBS     r2,r0,#1
000150  eb05010a          ADD      r1,r5,r10
000154  1938              ADDS     r0,r7,r4
000156  f7fffffe          BL       LCD_DrawHLine
                  |L1.346|
;;;137              }
;;;138            }
;;;139            xi = xi1;
;;;140            if (xi1 == xsize) {
00015a  9807              LDR      r0,[sp,#0x1c]
00015c  4634              MOV      r4,r6
00015e  4286              CMP      r6,r0
000160  d101              BNE      |L1.358|
;;;141              y++;
000162  1c6d              ADDS     r5,r5,#1
;;;142              xi = 0;
000164  2400              MOVS     r4,#0
                  |L1.358|
000166  f1b80f00          CMP      r8,#0                 ;124
00016a  d1d1              BNE      |L1.272|
00016c  e040              B        |L1.496|
                  |L1.366|
;;;143            }
;;;144          }
;;;145        } else {
;;;146          U8 NumPixels = *pPixel++;
00016e  f8106b01          LDRB     r6,[r0],#1
000172  9012              STR      r0,[sp,#0x48]
000174  f8df80ec          LDR      r8,|L1.612|
                  |L1.376|
;;;147          do {
;;;148            PixelIndex = _GetPixelIndex(&pPixel);
000178  a812              ADD      r0,sp,#0x48
00017a  f7fffffe          BL       _GetPixelIndex
00017e  4602              MOV      r2,r0
;;;149            if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
000180  9902              LDR      r1,[sp,#8]
000182  ea520001          ORRS     r0,r2,r1
000186  d024              BEQ      |L1.466|
;;;150              int x = x0 + xi;
000188  1938              ADDS     r0,r7,r4
;;;151              if (IsMagnified) {
00018a  9901              LDR      r1,[sp,#4]
00018c  b179              CBZ      r1,|L1.430|
;;;152                LCD_SetColorIndex(PixelIndex);
00018e  4610              MOV      r0,r2
000190  f7fffffe          BL       LCD_SetColorIndex
;;;153                xL = xMag * xi + x0;
000194  fb0b7004          MLA      r0,r11,r4,r7
;;;154                yL = yMag * y + y0;
000198  fb09a105          MLA      r1,r9,r5,r10
;;;155                LCD_FillRect(xL, yL, xL + xMag - 1 , yL + yMag - 1);
00019c  eb010209          ADD      r2,r1,r9
0001a0  1e53              SUBS     r3,r2,#1
0001a2  eb00020b          ADD      r2,r0,r11
0001a6  1e52              SUBS     r2,r2,#1
0001a8  f7fffffe          BL       LCD_FillRect
0001ac  e011              B        |L1.466|
                  |L1.430|
;;;156              } else {
;;;157                if ((y + y0) >= GUI_Context.ClipRect.y0) {
0001ae  f9b8c00a          LDRSH    r12,[r8,#0xa]  ; GUI_Context
0001b2  eb05010a          ADD      r1,r5,r10
0001b6  4643              MOV      r3,r8
0001b8  4561              CMP      r1,r12
0001ba  db0a              BLT      |L1.466|
;;;158                  if (x >= GUI_Context.ClipRect.x0) {
0001bc  f9b3c008          LDRSH    r12,[r3,#8]  ; GUI_Context
0001c0  4584              CMP      r12,r0
0001c2  dc06              BGT      |L1.466|
;;;159                    if (x <= GUI_Context.ClipRect.x1) {
0001c4  f9b3c00c          LDRSH    r12,[r3,#0xc]  ; GUI_Context
0001c8  4584              CMP      r12,r0
0001ca  db02              BLT      |L1.466|
;;;160                      LCDDEV_L0_SetPixelIndex(x, y + y0, PixelIndex);
0001cc  6cdb              LDR      r3,[r3,#0x4c]  ; GUI_Context
0001ce  6a5b              LDR      r3,[r3,#0x24]
0001d0  4798              BLX      r3
                  |L1.466|
;;;161                    }
;;;162                  }
;;;163                }
;;;164              }
;;;165            }
;;;166            if (++xi >= xsize) {
0001d2  9807              LDR      r0,[sp,#0x1c]
0001d4  1c64              ADDS     r4,r4,#1
0001d6  4284              CMP      r4,r0
0001d8  db06              BLT      |L1.488|
;;;167              y++;
0001da  1c6d              ADDS     r5,r5,#1
;;;168              xi = 0;
0001dc  2400              MOVS     r4,#0
;;;169              if (y >= ysize) {
0001de  9808              LDR      r0,[sp,#0x20]
0001e0  4285              CMP      r5,r0
0001e2  e000              B        |L1.486|
                  |L1.484|
0001e4  e008              B        |L1.504|
                  |L1.486|
0001e6  da03              BGE      |L1.496|
                  |L1.488|
;;;170                break;
;;;171              }
;;;172            }
;;;173          } while (--NumPixels);
0001e8  1e70              SUBS     r0,r6,#1
0001ea  f01006ff          ANDS     r6,r0,#0xff
0001ee  d1c3              BNE      |L1.376|
                  |L1.496|
0001f0  9808              LDR      r0,[sp,#0x20]         ;115
0001f2  4285              CMP      r5,r0                 ;115
0001f4  f6ffaf77          BLT      |L1.230|
                  |L1.504|
;;;174        }
;;;175      }
;;;176      LCD_ACOLORINDEX[1] = OldColorIndex;
0001f8  491a              LDR      r1,|L1.612|
0001fa  9803              LDR      r0,[sp,#0xc]
0001fc  8048              STRH     r0,[r1,#2]
;;;177    }
0001fe  b009              ADD      sp,sp,#0x24
000200  e8bd8ff0          POP      {r4-r11,pc}
;;;178    
                          ENDP

                  _DrawBitmap_RLE16 PROC
;;;182    */
;;;183    static void _DrawBitmap_RLE16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000204  b5f0              PUSH     {r4-r7,lr}
000206  b083              SUB      sp,sp,#0xc
000208  460d              MOV      r5,r1
00020a  4616              MOV      r6,r2
00020c  461f              MOV      r7,r3
00020e  9b0b              LDR      r3,[sp,#0x2c]
000210  9a0a              LDR      r2,[sp,#0x28]
000212  9908              LDR      r1,[sp,#0x20]
;;;184      GUI_USE_PARA(pLogPal);
;;;185      _BitmapSwapRB = 0;
000214  4c12              LDR      r4,|L1.608|
000216  f04f0c00          MOV      r12,#0
00021a  f884c001          STRB     r12,[r4,#1]
;;;186      _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
00021e  9302              STR      r3,[sp,#8]
000220  9201              STR      r2,[sp,#4]
000222  9100              STR      r1,[sp,#0]
000224  463b              MOV      r3,r7
000226  4632              MOV      r2,r6
000228  4629              MOV      r1,r5
00022a  f7fffffe          BL       _DrawBitmap_RLE
;;;187    }
00022e  b003              ADD      sp,sp,#0xc
000230  bdf0              POP      {r4-r7,pc}
;;;188    
                          ENDP

                  _DrawBitmap_RLEM16 PROC
;;;192    */
;;;193    static void _DrawBitmap_RLEM16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000232  b5f0              PUSH     {r4-r7,lr}
000234  b083              SUB      sp,sp,#0xc
000236  460d              MOV      r5,r1
000238  4616              MOV      r6,r2
00023a  461f              MOV      r7,r3
00023c  9b0b              LDR      r3,[sp,#0x2c]
00023e  9a0a              LDR      r2,[sp,#0x28]
000240  9908              LDR      r1,[sp,#0x20]
;;;194      GUI_USE_PARA(pLogPal);
;;;195      _BitmapSwapRB = 1;
000242  4c07              LDR      r4,|L1.608|
000244  f04f0c01          MOV      r12,#1
000248  f884c001          STRB     r12,[r4,#1]
;;;196      _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
00024c  9302              STR      r3,[sp,#8]
00024e  9201              STR      r2,[sp,#4]
000250  9100              STR      r1,[sp,#0]
000252  463b              MOV      r3,r7
000254  4632              MOV      r2,r6
000256  4629              MOV      r1,r5
000258  f7fffffe          BL       _DrawBitmap_RLE
;;;197    }
00025c  b003              ADD      sp,sp,#0xc
00025e  bdf0              POP      {r4-r7,pc}
;;;198    
                          ENDP

                  |L1.608|
                          DCD      ||.data||
                  |L1.612|
                          DCD      GUI_Context
                  |L1.616|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=6

                  _Cache
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethodsRLE16
                          DCD      _DrawBitmap_RLE16
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.constdata||
                  GUI_BitmapMethodsRLEM16
                          DCD      _DrawBitmap_RLEM16
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  _DisplaySwapRB
000000  00                DCB      0x00
                  _BitmapSwapRB
000001  000000            DCB      0x00,0x00,0x00
                  _DisplayMode
                          DCD      0x00000000
