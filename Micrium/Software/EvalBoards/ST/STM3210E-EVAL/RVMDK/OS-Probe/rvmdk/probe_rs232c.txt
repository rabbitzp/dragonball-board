; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\probe_rs232c.o --depend=.\rvmdk\probe_rs232c.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\probe_rs232c.crf ..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\probe_rs232c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ProbeRS232_RxTxISRHandler PROC
;;;330    
;;;331    void  ProbeRS232_RxTxISRHandler (void)
000000  b510              PUSH     {r4,lr}
;;;332    {
;;;333        USART_TypeDef  *usart;
;;;334        CPU_INT08U      rx_data;
;;;335        CPU_SR          cpu_sr;
;;;336    
;;;337    
;;;338        CPU_CRITICAL_ENTER();                                       /* Tell uC/OS-II that we are starting an ISR            */
000002  f7fffffe          BL       CPU_SR_Save
;;;339        OSIntNesting++;
000006  494a              LDR      r1,|L1.304|
000008  780a              LDRB     r2,[r1,#0]  ; OSIntNesting
00000a  1c52              ADDS     r2,r2,#1
00000c  700a              STRB     r2,[r1,#0]
;;;340        CPU_CRITICAL_EXIT();
00000e  f7fffffe          BL       CPU_SR_Restore
;;;341    
;;;342    
;;;343    #if   (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_1)
;;;344        usart = USART1;
000012  4848              LDR      r0,|L1.308|
000014  4604              MOV      r4,r0
;;;345    #elif (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_2)
;;;346        usart = USART2;
;;;347    #elif (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_3)
;;;348        usart = USART3;
;;;349    #else
;;;350        OSIntExit();
;;;351        return;
;;;352    #endif
;;;353    
;;;354        if (USART_GetITStatus(usart, USART_IT_RXNE) != RESET) {
000016  f2405125          MOV      r1,#0x525
00001a  f7fffffe          BL       USART_GetITStatus
00001e  b150              CBZ      r0,|L1.54|
;;;355            rx_data = USART_ReceiveData(usart) & 0xFF;              /* Read one byte from the receive data register         */
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       USART_ReceiveData
000026  b2c0              UXTB     r0,r0
;;;356            ProbeRS232_RxHandler(rx_data);
000028  f7fffffe          BL       ProbeRS232_RxHandler
;;;357    
;;;358            USART_ClearITPendingBit(usart, USART_IT_RXNE);          /* Clear the USART1 Receive interrupt                   */
00002c  f2405125          MOV      r1,#0x525
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       USART_ClearITPendingBit
                  |L1.54|
;;;359        }
;;;360    
;;;361        if (USART_GetITStatus(usart, USART_IT_TXE) != RESET) {
000036  f2407127          MOV      r1,#0x727
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       USART_GetITStatus
000040  b130              CBZ      r0,|L1.80|
;;;362            ProbeRS232_TxHandler();
000042  f7fffffe          BL       ProbeRS232_TxHandler
;;;363    
;;;364            USART_ClearITPendingBit(usart, USART_IT_TXE);           /* Clear the USART1 transmit interrupt                  */
000046  f2407127          MOV      r1,#0x727
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       USART_ClearITPendingBit
                  |L1.80|
;;;365        }
;;;366    
;;;367        OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
000050  e8bd4010          POP      {r4,lr}
000054  f7ffbffe          B.W      OSIntExit
;;;368    }
;;;369    
                          ENDP

                  ProbeRS232_InitTarget PROC
;;;142    
;;;143    void  ProbeRS232_InitTarget (CPU_INT32U baud_rate)
000058  b510              PUSH     {r4,lr}
;;;144    {
00005a  b088              SUB      sp,sp,#0x20
;;;145        GPIO_InitTypeDef        gpio_init;
;;;146        USART_InitTypeDef       usart_init;
;;;147        USART_ClockInitTypeDef  usart_clk_init;
;;;148    
;;;149    
;;;150                                                                    /* ----------------- INIT USART STRUCT ---------------- */
;;;151        usart_init.USART_BaudRate            = baud_rate;
00005c  9002              STR      r0,[sp,#8]
;;;152        usart_init.USART_WordLength          = USART_WordLength_8b;
00005e  2000              MOVS     r0,#0
000060  f8ad000c          STRH     r0,[sp,#0xc]
;;;153        usart_init.USART_StopBits            = USART_StopBits_1;
000064  f8ad000e          STRH     r0,[sp,#0xe]
;;;154        usart_init.USART_Parity              = USART_Parity_No ;
000068  f8ad0010          STRH     r0,[sp,#0x10]
;;;155        usart_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00006c  f8ad0014          STRH     r0,[sp,#0x14]
;;;156        usart_init.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
000070  210c              MOVS     r1,#0xc
000072  f8ad1012          STRH     r1,[sp,#0x12]
;;;157    
;;;158    
;;;159        usart_clk_init.USART_Clock           = USART_Clock_Disable;
000076  f8ad0000          STRH     r0,[sp,#0]
;;;160        usart_clk_init.USART_CPOL            = USART_CPOL_Low;
00007a  f8ad0002          STRH     r0,[sp,#2]
;;;161        usart_clk_init.USART_CPHA            = USART_CPHA_2Edge;
00007e  f44f7400          MOV      r4,#0x200
000082  f8ad4004          STRH     r4,[sp,#4]
;;;162        usart_clk_init.USART_LastBit         = USART_LastBit_Disable;
000086  f8ad0006          STRH     r0,[sp,#6]
;;;163    
;;;164    
;;;165    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_1)
;;;166        BSP_PeriphEn(BSP_PERIPH_ID_USART1);
00008a  202e              MOVS     r0,#0x2e
00008c  f7fffffe          BL       BSP_PeriphEn
;;;167    
;;;168                                                                    /* ----------------- SETUP USART1 GPIO ---------------- */
;;;169    #if (PROBE_RS232_UART_1_REMAP > 0)
;;;170        BSP_PeriphEn(BSP_PERIPH_ID_IOPB);
;;;171        BSP_PeriphEn(BSP_PERIPH_ID_IOPD);
;;;172        BSP_PeriphEn(BSP_PERIPH_ID_AFIO);
;;;173    
;;;174        GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
;;;175    
;;;176                                                                    /* Configure GPIOB.6 as push-pull                       */
;;;177        gpio_init.GPIO_Pin   = GPIO_Pin_6;
;;;178        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
;;;179        gpio_init.GPIO_Mode  = GPIO_Mode_AF_PP;
;;;180        GPIO_Init(GPIOD, &gpio_init);
;;;181    
;;;182                                                                    /* Configure GPIOB.7 as input floating                  */
;;;183        gpio_init.GPIO_Pin   = GPIO_Pin_7;
;;;184        gpio_init.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
;;;185        GPIO_Init(GPIOB, &gpio_init);
;;;186    #else
;;;187        BSP_PeriphEn(BSP_PERIPH_ID_IOPA);
000090  2022              MOVS     r0,#0x22
000092  f7fffffe          BL       BSP_PeriphEn
;;;188    
;;;189                                                                    /* Configure GPIOA.9 as push-pull                       */
;;;190        gpio_init.GPIO_Pin   = GPIO_Pin_9;
000096  f8ad4018          STRH     r4,[sp,#0x18]
;;;191        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
00009a  2003              MOVS     r0,#3
00009c  f88d001a          STRB     r0,[sp,#0x1a]
;;;192        gpio_init.GPIO_Mode  = GPIO_Mode_AF_PP;
0000a0  2018              MOVS     r0,#0x18
0000a2  f88d001b          STRB     r0,[sp,#0x1b]
;;;193        GPIO_Init(GPIOA, &gpio_init);
0000a6  4c24              LDR      r4,|L1.312|
0000a8  a906              ADD      r1,sp,#0x18
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       GPIO_Init
;;;194    
;;;195                                                                    /* Configure GPIOA.10 as input floating                 */
;;;196        gpio_init.GPIO_Pin   = GPIO_Pin_10;
0000b0  1521              ASRS     r1,r4,#20
0000b2  f8ad1018          STRH     r1,[sp,#0x18]
;;;197        gpio_init.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
0000b6  2104              MOVS     r1,#4
0000b8  f88d101b          STRB     r1,[sp,#0x1b]
;;;198        GPIO_Init(GPIOA, &gpio_init);
0000bc  a906              ADD      r1,sp,#0x18
0000be  4620              MOV      r0,r4
0000c0  f7fffffe          BL       GPIO_Init
;;;199    #endif
;;;200    
;;;201                                                                    /* ------------------ SETUP USART1 -------------------- */
;;;202        USART_Init(USART1, &usart_init);
0000c4  4c1b              LDR      r4,|L1.308|
0000c6  a902              ADD      r1,sp,#8
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       USART_Init
;;;203        USART_ClockInit(USART1, &usart_clk_init);
0000ce  4669              MOV      r1,sp
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       USART_ClockInit
;;;204        USART_Cmd(USART1, ENABLE);
0000d6  2101              MOVS     r1,#1
0000d8  4620              MOV      r0,r4
0000da  f7fffffe          BL       USART_Cmd
;;;205    
;;;206        BSP_IntVectSet(BSP_INT_ID_USART1, ProbeRS232_RxTxISRHandler);
0000de  f2af01df          ADR      r1,ProbeRS232_RxTxISRHandler + 1
0000e2  2025              MOVS     r0,#0x25
0000e4  f7fffffe          BL       BSP_IntVectSet
;;;207        BSP_IntEn(BSP_INT_ID_USART1);
0000e8  2025              MOVS     r0,#0x25
0000ea  f7fffffe          BL       BSP_IntEn
;;;208    #endif
;;;209    
;;;210    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_2)
;;;211        BSP_PeriphEn(BSP_PERIPH_ID_USART2);
;;;212    
;;;213                                                                    /* ----------------- SETUP USART2 GPIO ---------------- */
;;;214    #if (PROBE_RS232_UART_2_REMAP > 0)
;;;215        BSP_PeriphEn(BSP_PERIPH_ID_IOPD);
;;;216        BSP_PeriphEn(BSP_PERIPH_ID_AFIO);
;;;217        GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
;;;218    
;;;219                                                                    /* Configure GPIOD.4 as push-pull                       */
;;;220        gpio_init.GPIO_Pin   = GPIO_Pin_4;
;;;221        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
;;;222        gpio_init.GPIO_Mode  = GPIO_Mode_AF_PP;
;;;223        GPIO_Init(GPIOD, &gpio_init);
;;;224    
;;;225                                                                    /* Configure GPIOD.3 as input floating                  */
;;;226        gpio_init.GPIO_Pin   = GPIO_Pin_3;
;;;227        gpio_init.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
;;;228        GPIO_Init(GPIOD, &gpio_init);
;;;229    #else
;;;230        BSP_PeriphEn(BSP_PERIPH_ID_IOPA);
;;;231    
;;;232                                                                    /* Configure GPIOA.2 as push-pull                       */
;;;233        gpio_init.GPIO_Pin   = GPIO_Pin_2;
;;;234        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
;;;235        gpio_init.GPIO_Mode  = GPIO_Mode_AF_PP;
;;;236        GPIO_Init(GPIOA, &gpio_init);
;;;237    
;;;238                                                                    /* Configure GPIOA.3 as input floating                  */
;;;239        gpio_init.GPIO_Pin   = GPIO_Pin_3;
;;;240        gpio_init.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
;;;241        GPIO_Init(GPIOA, &gpio_init);
;;;242    #endif
;;;243    
;;;244                                                                    /* ------------------ SETUP USART2 -------------------- */
;;;245        USART_Init(USART2, &usart_init);
;;;246        USART_ClockInit(USART2, &usart_clk_init);
;;;247        USART_Cmd(USART2, ENABLE);
;;;248    
;;;249        BSP_IntVectSet(BSP_INT_ID_USART2, ProbeRS232_RxTxISRHandler);
;;;250        BSP_IntEn(BSP_INT_ID_USART2);
;;;251    #endif
;;;252    
;;;253    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_3)
;;;254        BSP_PeriphEn(BSP_PERIPH_ID_USART3);
;;;255    
;;;256                                                                    /* ----------------- SETUP USART3 GPIO ---------------- */
;;;257    #if (PROBE_RS232_UART_3_REMAP_PARTIAL > 0)
;;;258        BSP_PeriphEn(BSP_PERIPH_ID_IOPC);
;;;259        BSP_PeriphEn(BSP_PERIPH_ID_AFIO);
;;;260        GPIO_PinRemapConfig(GPIO_PartialRemap_USART3, ENABLE);
;;;261    
;;;262                                                                    /* Configure GPIOC.10 as push-pull                      */
;;;263        gpio_init.GPIO_Pin   = GPIO_Pin_10;
;;;264        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
;;;265        gpio_init.GPIO_Mode  = GPIO_Mode_AF_PP;
;;;266        GPIO_Init(GPIOC, &gpio_init);
;;;267    
;;;268                                                                    /* Configure GPIOC.11 as input floating                 */
;;;269        gpio_init.GPIO_Pin   = GPIO_Pin_11;
;;;270        gpio_init.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
;;;271        GPIO_Init(GPIOC, &gpio_init);
;;;272    
;;;273    #elif (PROBE_RS232_UART_3_REMAP_FULL > 0)
;;;274        BSP_PeriphEn(BSP_PERIPH_ID_IOPD);
;;;275        BSP_PeriphEn(BSP_PERIPH_ID_AFIO);
;;;276        GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);
;;;277    
;;;278                                                                    /* Configure GPIOD.8 as push-pull                       */
;;;279        gpio_init.GPIO_Pin   = GPIO_Pin_8;
;;;280        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
;;;281        gpio_init.GPIO_Mode  = GPIO_Mode_AF_PP;
;;;282        GPIO_Init(GPIOD, &gpio_init);
;;;283    
;;;284                                                                    /* Configure GPIOD.9 as input floating                  */
;;;285        gpio_init.GPIO_Pin   = GPIO_Pin_9;
;;;286        gpio_init.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
;;;287        GPIO_Init(GPIOD, &gpio_init);
;;;288    
;;;289    #else
;;;290        BSP_PeriphEn(BSP_PERIPH_ID_IOPB);
;;;291    
;;;292                                                                    /* Configure GPIOB.10 as push-pull                      */
;;;293        gpio_init.GPIO_Pin   = GPIO_Pin_10;
;;;294        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
;;;295        gpio_init.GPIO_Mode  = GPIO_Mode_AF_PP;
;;;296        GPIO_Init(GPIOB, &gpio_init);
;;;297    
;;;298                                                                    /* Configure GPIOB.11 as input floating                 */
;;;299        gpio_init.GPIO_Pin   = GPIO_Pin_11;
;;;300        gpio_init.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
;;;301        GPIO_Init(GPIOB, &gpio_init);
;;;302    #endif
;;;303    
;;;304                                                                    /* ------------------ SETUP USART3 -------------------- */
;;;305        USART_Init(USART3, &usart_init);
;;;306        USART_ClockInit(USART3, &usart_clk_init);
;;;307        USART_Cmd(USART3, ENABLE);
;;;308    
;;;309        BSP_IntVectSet(BSP_INT_ID_USART3, ProbeRS232_RxTxISRHandler);
;;;310        BSP_IntEn(BSP_INT_ID_USART3);
;;;311    #endif
;;;312    }
0000ee  b008              ADD      sp,sp,#0x20
0000f0  bd10              POP      {r4,pc}
;;;313    
                          ENDP

                  ProbeRS232_RxISRHandler PROC
;;;383    
;;;384    void  ProbeRS232_RxISRHandler (void)
0000f2  4770              BX       lr
;;;385    {
;;;386    }
;;;387    
                          ENDP

                  ProbeRS232_RxIntDis PROC
;;;400    
;;;401    void  ProbeRS232_RxIntDis (void)
0000f4  2200              MOVS     r2,#0
;;;402    {
;;;403    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_1)
;;;404        USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);
0000f6  f2405125          MOV      r1,#0x525
0000fa  480e              LDR      r0,|L1.308|
0000fc  f7ffbffe          B.W      USART_ITConfig
;;;405    #endif
;;;406    
;;;407    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_2)
;;;408        USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);
;;;409    #endif
;;;410    
;;;411    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_3)
;;;412        USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);
;;;413    #endif
;;;414    }
;;;415    
                          ENDP

                  ProbeRS232_RxIntEn PROC
;;;428    
;;;429    void  ProbeRS232_RxIntEn (void)
000100  2201              MOVS     r2,#1
;;;430    {
;;;431    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_1)
;;;432        USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
000102  f2405125          MOV      r1,#0x525
000106  480b              LDR      r0,|L1.308|
000108  f7ffbffe          B.W      USART_ITConfig
;;;433    #endif
;;;434    
;;;435    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_2)
;;;436        USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
;;;437    #endif
;;;438    
;;;439    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_3)
;;;440        USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
;;;441    #endif
;;;442    }
;;;443    
                          ENDP

                  ProbeRS232_TxISRHandler PROC
;;;458    
;;;459    void  ProbeRS232_TxISRHandler (void)
00010c  4770              BX       lr
;;;460    {
;;;461    }
;;;462    
                          ENDP

                  ProbeRS232_Tx1 PROC
;;;475    
;;;476    void  ProbeRS232_Tx1 (CPU_INT08U c)
00010e  4601              MOV      r1,r0
;;;477    {
;;;478    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_1)
;;;479        USART_SendData(USART1, c);
000110  4808              LDR      r0,|L1.308|
000112  f7ffbffe          B.W      USART_SendData
;;;480    #endif
;;;481    
;;;482    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_2)
;;;483        USART_SendData(USART2, c);
;;;484    #endif
;;;485    
;;;486    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_3)
;;;487        USART_SendData(USART3, c);
;;;488    #endif
;;;489    }
;;;490    
                          ENDP

                  ProbeRS232_TxIntDis PROC
;;;503    
;;;504    void  ProbeRS232_TxIntDis (void)
000116  2200              MOVS     r2,#0
;;;505    {
;;;506    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_1)
;;;507        USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
000118  f2407127          MOV      r1,#0x727
00011c  4805              LDR      r0,|L1.308|
00011e  f7ffbffe          B.W      USART_ITConfig
;;;508    #endif
;;;509    
;;;510    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_2)
;;;511        USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
;;;512    #endif
;;;513    
;;;514    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_3)
;;;515        USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
;;;516    #endif
;;;517    }
;;;518    
                          ENDP

                  ProbeRS232_TxIntEn PROC
;;;530    
;;;531    void  ProbeRS232_TxIntEn (void)
000122  2201              MOVS     r2,#1
;;;532    {
;;;533    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_1)
;;;534        USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
000124  f2407127          MOV      r1,#0x727
000128  4802              LDR      r0,|L1.308|
00012a  f7ffbffe          B.W      USART_ITConfig
;;;535    #endif
;;;536    
;;;537    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_2)
;;;538        USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
;;;539    #endif
;;;540    
;;;541    #if (PROBE_RS232_COMM_SEL == PROBE_RS232_UART_3)
;;;542        USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
;;;543    #endif
;;;544    }
                          ENDP

00012e  0000              DCW      0x0000
                  |L1.304|
                          DCD      OSIntNesting
                  |L1.308|
                          DCD      0x40013800
                  |L1.312|
                          DCD      0x40010800
