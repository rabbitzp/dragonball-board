; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\r61505w.o --depend=.\rvmdk\r61505w.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\r61505w.crf ..\..\..\..\..\uCGUI\LCDDriver\R61505W.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  LCD_R61505W_Delayms PROC
;;;64     
;;;65     void LCD_R61505W_Delayms(u16 ms)
000000  4bc9              LDR      r3,|L1.808|
;;;66     {
;;;67     	vu32 start_time = OSTime;
000002  681a              LDR      r2,[r3,#0]  ; OSTime
;;;68     	vu32 tick = 0;
000004  2100              MOVS     r1,#0
;;;69     
;;;70     	while (tick < 1+ms)
000006  f1100c01          ADDS     r12,r0,#1
00000a  d008              BEQ      |L1.30|
00000c  1c40              ADDS     r0,r0,#1
                  |L1.14|
;;;71     	{
;;;72     		if (start_time  != OSTime)
00000e  f8d3c000          LDR      r12,[r3,#0]  ; OSTime
000012  4562              CMP      r2,r12
000014  d001              BEQ      |L1.26|
;;;73     		{
;;;74     			tick++;
000016  1c49              ADDS     r1,r1,#1
;;;75     			start_time = OSTime;
000018  681a              LDR      r2,[r3,#0]  ; OSTime
                  |L1.26|
00001a  4281              CMP      r1,r0                 ;70
00001c  d3f7              BCC      |L1.14|
                  |L1.30|
;;;76     		}
;;;77     	}
;;;78     
;;;79     	return;
;;;80     }
00001e  4770              BX       lr
;;;81     
                          ENDP

                  LCD_R61505W_WriteReg PROC
;;;91     */
;;;92     static void LCD_R61505W_WriteReg(volatile u16 _usAddr, u16 _usValue)
000020  f04f42d0          MOV      r2,#0x68000000
;;;93     {
;;;94     	/* Write 16-bit Index, then Write Reg */
;;;95     	LCD_REG = _usAddr;
000024  8010              STRH     r0,[r2,#0]
;;;96     	/* Write 16-bit Reg */
;;;97     	LCD_RAM = _usValue;
000026  8051              STRH     r1,[r2,#2]
;;;98     }
000028  4770              BX       lr
;;;99     
                          ENDP

                  LCD_R61505W_ReadReg PROC
;;;109    */
;;;110    static u16 LCD_R61505W_ReadReg(volatile u16 _usAddr)
00002a  f04f41d0          MOV      r1,#0x68000000
;;;111    {
;;;112    	/* Write 16-bit Index (then Read Reg) */
;;;113    	LCD_REG = _usAddr;
00002e  8008              STRH     r0,[r1,#0]
;;;114    	/* Read 16-bit Reg */
;;;115    	return (LCD_RAM);
000030  8848              LDRH     r0,[r1,#2]
;;;116    }
000032  4770              BX       lr
;;;117    
                          ENDP

                  LCD_R61505W_BGR2RGB PROC
;;;125    */
;;;126    static u16 LCD_R61505W_BGR2RGB(u16 _usRGB)
000034  f3c01145          UBFX     r1,r0,#5,#6
;;;127    {
;;;128    	u16  r, g, b, rgb;
;;;129    
;;;130    	b = (_usRGB >> 0)  & 0x1F;
;;;131    	g = (_usRGB >> 5)  & 0x3F;
;;;132    	r = (_usRGB >> 11) & 0x1F;
000038  0ac2              LSRS     r2,r0,#11
;;;133    
;;;134    	rgb = (b<<11) + (g<<5) + (r<<0);
00003a  02c0              LSLS     r0,r0,#11
00003c  eb001041          ADD      r0,r0,r1,LSL #5
000040  4410              ADD      r0,r0,r2
000042  b280              UXTH     r0,r0
;;;135    
;;;136    	return( rgb );
;;;137    }
000044  4770              BX       lr
;;;138    
                          ENDP

                  LCD_R61505W_CtrlLinesConfig PROC
;;;146    */
;;;147    static void LCD_R61505W_CtrlLinesConfig(void)
000046  b508              PUSH     {r3,lr}
;;;148    {
;;;149    	GPIO_InitTypeDef GPIO_InitStructure;
;;;150    
;;;151    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
000048  2101              MOVS     r1,#1
00004a  0208              LSLS     r0,r1,#8
00004c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;152    
;;;153    	/* 使能 FSMC, GPIOD, GPIOE, GPIOF, GPIOG 和 AFIO 时钟 */
;;;154    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE |
000050  2101              MOVS     r1,#1
000052  f24010e1          MOV      r0,#0x1e1
000056  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;155    	                     RCC_APB2Periph_GPIOF | RCC_APB2Periph_GPIOG |
;;;156    	                     RCC_APB2Periph_AFIO, ENABLE);
;;;157    
;;;158    	/* 设置 PD.00(D2), PD.01(D3), PD.04(NOE), PD.05(NWE), PD.08(D13), PD.09(D14),
;;;159    	 PD.10(D15), PD.14(D0), PD.15(D1) 为复用推挽输出 */
;;;160    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5 |
00005a  f24c7033          MOV      r0,#0xc733
00005e  f8ad0000          STRH     r0,[sp,#0]
;;;161    	                            GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
;;;162    	                            GPIO_Pin_15;
;;;163    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000062  2003              MOVS     r0,#3
000064  f88d0002          STRB     r0,[sp,#2]
;;;164    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000068  2018              MOVS     r0,#0x18
00006a  f88d0003          STRB     r0,[sp,#3]
;;;165    	GPIO_Init(GPIOD, &GPIO_InitStructure);
00006e  4669              MOV      r1,sp
000070  48ae              LDR      r0,|L1.812|
000072  f7fffffe          BL       GPIO_Init
;;;166    
;;;167    	/* 设置 PE.07(D4), PE.08(D5), PE.09(D6), PE.10(D7), PE.11(D8), PE.12(D9), PE.13(D10),
;;;168    	 PE.14(D11), PE.15(D12) 为复用推挽输出 */
;;;169    	/* PE3,PE4 用于A19, A20, STM32F103ZE-EK(REV 1.0)必须使能 */
;;;170    	/* PE5,PE6 用于A19, A20, STM32F103ZE-EK(REV 2.0)必须使能 */
;;;171    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
000076  f64f70f8          MOV      r0,#0xfff8
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;172    	                            GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |
;;;173    	                            GPIO_Pin_15 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
;;;174    	GPIO_Init(GPIOE, &GPIO_InitStructure);
00007e  4669              MOV      r1,sp
000080  48ab              LDR      r0,|L1.816|
000082  f7fffffe          BL       GPIO_Init
;;;175    
;;;176    	/* 设置 PF.00(A0 (RS))  为复用推挽输出 */
;;;177    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000086  2001              MOVS     r0,#1
000088  f8ad0000          STRH     r0,[sp,#0]
;;;178    	GPIO_Init(GPIOF, &GPIO_InitStructure);
00008c  4669              MOV      r1,sp
00008e  48a9              LDR      r0,|L1.820|
000090  f7fffffe          BL       GPIO_Init
;;;179    
;;;180    	/* 设置 PG.12(NE4 (LCD/CS)) 为复用推挽输出 - CE3(LCD /CS) */
;;;181    	//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;182    	//GPIO_Init(GPIOG, &GPIO_InitStructure);
;;;183    
;;;184    	/* 设置 PG.10(NE3 (LCD/CS)) 为复用推挽输出 */
;;;185    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000094  f44f6080          MOV      r0,#0x400
000098  f8ad0000          STRH     r0,[sp,#0]
;;;186    	GPIO_Init(GPIOG, &GPIO_InitStructure);
00009c  4669              MOV      r1,sp
00009e  48a6              LDR      r0,|L1.824|
0000a0  f7fffffe          BL       GPIO_Init
;;;187    
;;;188    }
0000a4  bd08              POP      {r3,pc}
;;;189    
                          ENDP

                  LCD_R61505W_FSMCConfig PROC
;;;197    */
;;;198    static void LCD_R61505W_FSMCConfig(void)
0000a6  b500              PUSH     {lr}
;;;199    {
0000a8  b097              SUB      sp,sp,#0x5c
;;;200    	FSMC_NORSRAMInitTypeDef  init;
;;;201    	FSMC_NORSRAMTimingInitTypeDef  timing;
;;;202    
;;;203    	/*-- FSMC Configuration ------------------------------------------------------*/
;;;204    	/*----------------------- SRAM Bank 3 ----------------------------------------*/
;;;205    	/* FSMC_Bank1_NORSRAM3 configuration */
;;;206    	timing.FSMC_AddressSetupTime = 1;
0000aa  2001              MOVS     r0,#1
0000ac  9001              STR      r0,[sp,#4]
;;;207    	timing.FSMC_AddressHoldTime = 0;
0000ae  2000              MOVS     r0,#0
0000b0  9002              STR      r0,[sp,#8]
;;;208    	timing.FSMC_DataSetupTime = 2;
0000b2  2102              MOVS     r1,#2
0000b4  9103              STR      r1,[sp,#0xc]
;;;209    	timing.FSMC_BusTurnAroundDuration = 0;
0000b6  9004              STR      r0,[sp,#0x10]
;;;210    	timing.FSMC_CLKDivision = 0;
0000b8  9005              STR      r0,[sp,#0x14]
;;;211    	timing.FSMC_DataLatency = 0;
0000ba  9006              STR      r0,[sp,#0x18]
;;;212    	timing.FSMC_AccessMode = FSMC_AccessMode_A;
0000bc  9007              STR      r0,[sp,#0x1c]
;;;213    
;;;214    	/*
;;;215    	 LCD configured as follow:
;;;216    	    - Data/Address MUX = Disable
;;;217    	    - Memory Type = SRAM
;;;218    	    - Data Width = 16bit
;;;219    	    - Write Operation = Enable
;;;220    	    - Extended Mode = Enable
;;;221    	    - Asynchronous Wait = Disable
;;;222    	*/
;;;223    	init.FSMC_Bank = FSMC_Bank1_NORSRAM3;
0000be  2104              MOVS     r1,#4
0000c0  9108              STR      r1,[sp,#0x20]
;;;224    	init.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
0000c2  9009              STR      r0,[sp,#0x24]
;;;225    	init.FSMC_MemoryType = FSMC_MemoryType_SRAM;
0000c4  900a              STR      r0,[sp,#0x28]
;;;226    	init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
0000c6  2110              MOVS     r1,#0x10
0000c8  910b              STR      r1,[sp,#0x2c]
;;;227    	init.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
0000ca  900c              STR      r0,[sp,#0x30]
;;;228    //	init.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;	/* 注意旧库无这个成员 */
;;;229    	init.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
0000cc  900d              STR      r0,[sp,#0x34]
;;;230    	init.FSMC_WrapMode = FSMC_WrapMode_Disable;
0000ce  900e              STR      r0,[sp,#0x38]
;;;231    	init.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
0000d0  900f              STR      r0,[sp,#0x3c]
;;;232    	init.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
0000d2  0209              LSLS     r1,r1,#8
0000d4  9110              STR      r1,[sp,#0x40]
;;;233    	init.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
0000d6  9011              STR      r0,[sp,#0x44]
;;;234    	init.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
0000d8  9012              STR      r0,[sp,#0x48]
;;;235    	init.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
0000da  9014              STR      r0,[sp,#0x50]
;;;236    
;;;237    	init.FSMC_ReadWriteTimingStruct = &timing;
0000dc  a801              ADD      r0,sp,#4
0000de  9015              STR      r0,[sp,#0x54]
;;;238    	init.FSMC_WriteTimingStruct = &timing;
0000e0  9016              STR      r0,[sp,#0x58]
;;;239    
;;;240    	FSMC_NORSRAMInit(&init);
0000e2  a808              ADD      r0,sp,#0x20
0000e4  f7fffffe          BL       FSMC_NORSRAMInit
;;;241    
;;;242    	/* - BANK 3 (of NOR/SRAM Bank 1~4) is enabled */
;;;243    	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
0000e8  2101              MOVS     r1,#1
0000ea  2004              MOVS     r0,#4
0000ec  f7fffffe          BL       FSMC_NORSRAMCmd
;;;244    }
0000f0  b017              ADD      sp,sp,#0x5c
0000f2  bd00              POP      {pc}
;;;245    
                          ENDP

                  LCD_R61505W_GetID PROC
;;;253    */
;;;254    u16 LCD_R61505W_GetID(void)
0000f4  2000              MOVS     r0,#0
;;;255    {
;;;256    	return LCD_R61505W_ReadReg(0x0000);
0000f6  e7fe              B        LCD_R61505W_ReadReg
;;;257    }
;;;258    
                          ENDP

                  LCD_R61505W_InitHard PROC
;;;259    void LCD_R61505W_InitHard(void)
0000f8  b510              PUSH     {r4,lr}
;;;260    {
;;;261    	LCD_R61505W_Delayms(5);	//DelayNS(1000);
0000fa  2005              MOVS     r0,#5
0000fc  f7fffffe          BL       LCD_R61505W_Delayms
;;;262    	
;;;263    	LCD_R61505W_WriteReg( 0x00, 0x0000);
000100  2100              MOVS     r1,#0
000102  4608              MOV      r0,r1
000104  f7fffffe          BL       LCD_R61505W_WriteReg
;;;264    	LCD_R61505W_WriteReg( 0x00, 0x0000 );
000108  2100              MOVS     r1,#0
00010a  4608              MOV      r0,r1
00010c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;265    	LCD_R61505W_WriteReg( 0x00, 0x0000 );
000110  2100              MOVS     r1,#0
000112  4608              MOV      r0,r1
000114  f7fffffe          BL       LCD_R61505W_WriteReg
;;;266    	LCD_R61505W_WriteReg( 0x00, 0x0000 );
000118  2100              MOVS     r1,#0
00011a  4608              MOV      r0,r1
00011c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;267    	LCD_R61505W_WriteReg( 0x00, 0x0000 );
000120  2100              MOVS     r1,#0
000122  4608              MOV      r0,r1
000124  f7fffffe          BL       LCD_R61505W_WriteReg
;;;268    	
;;;269    	LCD_R61505W_WriteReg( 0xa4, 0x0001 );
000128  2101              MOVS     r1,#1
00012a  20a4              MOVS     r0,#0xa4
00012c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;270    	LCD_R61505W_Delayms(1);//DelayNS(20);
000130  2001              MOVS     r0,#1
000132  f7fffffe          BL       LCD_R61505W_Delayms
;;;271    
;;;272    	LCD_R61505W_WriteReg( 0x60, 0x2700 );
000136  f44f511c          MOV      r1,#0x2700
00013a  2060              MOVS     r0,#0x60
00013c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;273    	LCD_R61505W_WriteReg( 0x08, 0x0808 );
000140  f6400108          MOV      r1,#0x808
000144  2008              MOVS     r0,#8
000146  f7fffffe          BL       LCD_R61505W_WriteReg
;;;274    
;;;275    	LCD_R61505W_WriteReg( 0x30, 0x0b00 );
00014a  f44f6130          MOV      r1,#0xb00
00014e  2030              MOVS     r0,#0x30
000150  f7fffffe          BL       LCD_R61505W_WriteReg
;;;276    	LCD_R61505W_WriteReg( 0x31, 0x7d17 );
000154  f6475117          MOV      r1,#0x7d17
000158  2031              MOVS     r0,#0x31
00015a  f7fffffe          BL       LCD_R61505W_WriteReg
;;;277    	LCD_R61505W_WriteReg( 0x32, 0x00a01 );
00015e  f6402101          MOV      r1,#0xa01
000162  2032              MOVS     r0,#0x32
000164  f7fffffe          BL       LCD_R61505W_WriteReg
;;;278    	LCD_R61505W_WriteReg( 0x33, 0xa03);
000168  f6402103          MOV      r1,#0xa03
00016c  2033              MOVS     r0,#0x33
00016e  f7fffffe          BL       LCD_R61505W_WriteReg
;;;279    	LCD_R61505W_WriteReg( 0x34, 0x0000 );
000172  2100              MOVS     r1,#0
000174  2034              MOVS     r0,#0x34
000176  f7fffffe          BL       LCD_R61505W_WriteReg
;;;280    	LCD_R61505W_WriteReg( 0x35, 0x0030a );
00017a  f240310a          MOV      r1,#0x30a
00017e  2035              MOVS     r0,#0x35
000180  f7fffffe          BL       LCD_R61505W_WriteReg
;;;281    	LCD_R61505W_WriteReg( 0x36, 0x710a );
000184  f247110a          MOV      r1,#0x710a
000188  2036              MOVS     r0,#0x36
00018a  f7fffffe          BL       LCD_R61505W_WriteReg
;;;282    	LCD_R61505W_WriteReg( 0x37, 0x170d);
00018e  f241710d          MOV      r1,#0x170d
000192  2037              MOVS     r0,#0x37
000194  f7fffffe          BL       LCD_R61505W_WriteReg
;;;283    	LCD_R61505W_WriteReg( 0x38, 0x000b );
000198  210b              MOVS     r1,#0xb
00019a  2038              MOVS     r0,#0x38
00019c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;284    	LCD_R61505W_WriteReg( 0x39, 0x3333 );
0001a0  f2433133          MOV      r1,#0x3333
0001a4  2039              MOVS     r0,#0x39
0001a6  f7fffffe          BL       LCD_R61505W_WriteReg
;;;285    	
;;;286    	LCD_R61505W_WriteReg( 0x90, 0x0017 );
0001aa  2117              MOVS     r1,#0x17
0001ac  2090              MOVS     r0,#0x90
0001ae  f7fffffe          BL       LCD_R61505W_WriteReg
;;;287    	
;;;288    	LCD_R61505W_WriteReg( 0x0a, 0x0008);
0001b2  2108              MOVS     r1,#8
0001b4  200a              MOVS     r0,#0xa
0001b6  f7fffffe          BL       LCD_R61505W_WriteReg
;;;289    	LCD_R61505W_Delayms(1);//DelayNS(20);
0001ba  2001              MOVS     r0,#1
0001bc  f7fffffe          BL       LCD_R61505W_Delayms
;;;290    	LCD_R61505W_WriteReg( 0x10, 0x0730 );
0001c0  f44f61e6          MOV      r1,#0x730
0001c4  2010              MOVS     r0,#0x10
0001c6  f7fffffe          BL       LCD_R61505W_WriteReg
;;;291    	LCD_R61505W_Delayms(1);//	DelayNS(20);
0001ca  2001              MOVS     r0,#1
0001cc  f7fffffe          BL       LCD_R61505W_Delayms
;;;292    	LCD_R61505W_WriteReg( 0x11, 0x0247 );
0001d0  f2402147          MOV      r1,#0x247
0001d4  2011              MOVS     r0,#0x11
0001d6  f7fffffe          BL       LCD_R61505W_WriteReg
;;;293    	LCD_R61505W_Delayms(1);//DelayNS(150);
0001da  2001              MOVS     r0,#1
0001dc  f7fffffe          BL       LCD_R61505W_Delayms
;;;294    	LCD_R61505W_WriteReg( 0x0e, 0x0020 );
0001e0  2120              MOVS     r1,#0x20
0001e2  200e              MOVS     r0,#0xe
0001e4  f7fffffe          BL       LCD_R61505W_WriteReg
;;;295    
;;;296    	LCD_R61505W_WriteReg( 0x13, 0x1e00 );
0001e8  f44f51f0          MOV      r1,#0x1e00
0001ec  2013              MOVS     r0,#0x13
0001ee  f7fffffe          BL       LCD_R61505W_WriteReg
;;;297    	
;;;298    	LCD_R61505W_WriteReg( 0x2a, 0x0056 );
0001f2  2156              MOVS     r1,#0x56
0001f4  202a              MOVS     r0,#0x2a
0001f6  f7fffffe          BL       LCD_R61505W_WriteReg
;;;299    	LCD_R61505W_WriteReg( 0x12, 0x0199 );
0001fa  f2401199          MOV      r1,#0x199
0001fe  2012              MOVS     r0,#0x12
000200  f7fffffe          BL       LCD_R61505W_WriteReg
;;;300    	LCD_R61505W_WriteReg( 0x12, 0x01b9 );
000204  f24011b9          MOV      r1,#0x1b9
000208  2012              MOVS     r0,#0x12
00020a  f7fffffe          BL       LCD_R61505W_WriteReg
;;;301    
;;;302    
;;;303    	LCD_R61505W_WriteReg( 0x50, 0x0000 );
00020e  2100              MOVS     r1,#0
000210  2050              MOVS     r0,#0x50
000212  f7fffffe          BL       LCD_R61505W_WriteReg
;;;304    	LCD_R61505W_WriteReg( 0x51, 0x00ef );
000216  21ef              MOVS     r1,#0xef
000218  2051              MOVS     r0,#0x51
00021a  f7fffffe          BL       LCD_R61505W_WriteReg
;;;305    	LCD_R61505W_WriteReg( 0x52, 0x0000 );
00021e  2100              MOVS     r1,#0
000220  2052              MOVS     r0,#0x52
000222  f7fffffe          BL       LCD_R61505W_WriteReg
;;;306    	LCD_R61505W_WriteReg( 0x53, 0x013f );
000226  f240113f          MOV      r1,#0x13f
00022a  2053              MOVS     r0,#0x53
00022c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;307    	
;;;308    	LCD_R61505W_WriteReg( 0x61, 0x0001 );
000230  2101              MOVS     r1,#1
000232  2061              MOVS     r0,#0x61
000234  f7fffffe          BL       LCD_R61505W_WriteReg
;;;309    	LCD_R61505W_WriteReg( 0x6a, 0x0000 );
000238  2100              MOVS     r1,#0
00023a  206a              MOVS     r0,#0x6a
00023c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;310    	
;;;311    	LCD_R61505W_WriteReg( 0x80, 0x0000 );
000240  2100              MOVS     r1,#0
000242  2080              MOVS     r0,#0x80
000244  f7fffffe          BL       LCD_R61505W_WriteReg
;;;312    	LCD_R61505W_WriteReg( 0x81, 0x0000 );
000248  2100              MOVS     r1,#0
00024a  2081              MOVS     r0,#0x81
00024c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;313    	LCD_R61505W_WriteReg( 0x82, 0x0000 );
000250  2100              MOVS     r1,#0
000252  2082              MOVS     r0,#0x82
000254  f7fffffe          BL       LCD_R61505W_WriteReg
;;;314    	
;;;315    
;;;316    	LCD_R61505W_WriteReg( 0x92, 0x0300 );
000258  f44f7140          MOV      r1,#0x300
00025c  2092              MOVS     r0,#0x92
00025e  f7fffffe          BL       LCD_R61505W_WriteReg
;;;317    	LCD_R61505W_WriteReg( 0x93, 0x0005 );
000262  2105              MOVS     r1,#5
000264  2093              MOVS     r0,#0x93
000266  f7fffffe          BL       LCD_R61505W_WriteReg
;;;318    	LCD_R61505W_WriteReg( 0x01, 0x0100 );
00026a  f44f7180          MOV      r1,#0x100
00026e  2001              MOVS     r0,#1
000270  f7fffffe          BL       LCD_R61505W_WriteReg
;;;319    	LCD_R61505W_WriteReg( 0x02, 0x0200 );
000274  f44f7100          MOV      r1,#0x200
000278  2002              MOVS     r0,#2
00027a  f7fffffe          BL       LCD_R61505W_WriteReg
;;;320    	LCD_R61505W_WriteReg( 0x03, 0x1030 );
00027e  f2410130          MOV      r1,#0x1030
000282  2003              MOVS     r0,#3
000284  f7fffffe          BL       LCD_R61505W_WriteReg
;;;321    	LCD_R61505W_WriteReg( 0x0c, 0x0000 );
000288  2100              MOVS     r1,#0
00028a  200c              MOVS     r0,#0xc
00028c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;322    	LCD_R61505W_WriteReg( 0x0f, 0x0000 );
000290  2100              MOVS     r1,#0
000292  200f              MOVS     r0,#0xf
000294  f7fffffe          BL       LCD_R61505W_WriteReg
;;;323    
;;;324    	
;;;325    	LCD_R61505W_WriteReg( 0x20, 0x0000 );
000298  2100              MOVS     r1,#0
00029a  2020              MOVS     r0,#0x20
00029c  f7fffffe          BL       LCD_R61505W_WriteReg
;;;326    	LCD_R61505W_WriteReg( 0x21, 0x0000 );
0002a0  2100              MOVS     r1,#0
0002a2  2021              MOVS     r0,#0x21
0002a4  f7fffffe          BL       LCD_R61505W_WriteReg
;;;327    
;;;328    	LCD_R61505W_WriteReg( 0x07, 0x0100 );
0002a8  e8bd4010          POP      {r4,lr}
0002ac  f44f7180          MOV      r1,#0x100
0002b0  2007              MOVS     r0,#7
0002b2  e7fe              B        LCD_R61505W_WriteReg
;;;329    }
;;;330    
                          ENDP

                  LCD_R61505W_Init PROC
;;;338    */
;;;339    void LCD_R61505W_Init(void)
0002b4  b510              PUSH     {r4,lr}
;;;340    {
;;;341    	u16 id;
;;;342    
;;;343    	/* 配置LCD控制口线GPIO */
;;;344    	LCD_R61505W_CtrlLinesConfig();
0002b6  f7fffffe          BL       LCD_R61505W_CtrlLinesConfig
;;;345    
;;;346    	/* 配置FSMC接口，数据总线 */
;;;347    	LCD_R61505W_FSMCConfig();
0002ba  f7fffffe          BL       LCD_R61505W_FSMCConfig
;;;348    
;;;349    	/* FSMC重置后必须加延迟才能访问总线设备  */
;;;350    	LCD_R61505W_Delayms(5);
0002be  2005              MOVS     r0,#5
0002c0  f7fffffe          BL       LCD_R61505W_Delayms
;;;351    
;;;352    	id = LCD_R61505W_GetID();  	/* 读取LCD驱动芯片ID */
0002c4  f7fffffe          BL       LCD_R61505W_GetID
;;;353    
;;;354    	printf("芯片ID：0X%04X\r\n", id);
0002c8  4601              MOV      r1,r0
0002ca  a01c              ADR      r0,|L1.828|
0002cc  f7fffffe          BL       __2printf
;;;355    
;;;356    	printf("初始化LCD \r\n");
0002d0  a01f              ADR      r0,|L1.848|
0002d2  f7fffffe          BL       __2printf
;;;357    	LCD_R61505W_InitHard();
0002d6  e8bd4010          POP      {r4,lr}
0002da  e7fe              B        LCD_R61505W_InitHard
;;;358    }  
;;;359    
                          ENDP

                  LCD_R61505W_SetCursor PROC
;;;367    */
;;;368    static void LCD_R61505W_SetCursor(u16 _usX, u16 _usY)
0002dc  b510              PUSH     {r4,lr}
;;;369    {
0002de  460c              MOV      r4,r1
;;;370    	/*
;;;371    		px，py 是物理坐标， x，y是虚拟坐标
;;;372    		转换公式:
;;;373    		py = 399 - x;
;;;374    		px = y;
;;;375    	*/
;;;376        _usX += 10;
0002e0  300a              ADDS     r0,r0,#0xa
0002e2  b281              UXTH     r1,r0
;;;377    	LCD_R61505W_WriteReg(0x0020, _usX);        //列首址
0002e4  2020              MOVS     r0,#0x20
0002e6  f7fffffe          BL       LCD_R61505W_WriteReg
;;;378    	LCD_R61505W_WriteReg(0x0021, _usY);        //行首址
0002ea  4621              MOV      r1,r4
0002ec  e8bd4010          POP      {r4,lr}
0002f0  2021              MOVS     r0,#0x21
0002f2  e7fe              B        LCD_R61505W_WriteReg
;;;379    } 
;;;380    
                          ENDP

                  LCD_R61505W_GetPoint PROC
;;;390    */
;;;391    u16 LCD_R61505W_GetPoint(u16 _usX,u16 _usY)
0002f4  b510              PUSH     {r4,lr}
;;;392    {
;;;393    	u16 usRGB;
;;;394    
;;;395    	LCD_R61505W_SetCursor(_usX, _usY);	/* 设置光标位置 */
0002f6  f7fffffe          BL       LCD_R61505W_SetCursor
;;;396    
;;;397    	/* 准备写显存 */
;;;398    	LCD_REG = LR_GRAM;
0002fa  f04f40d0          MOV      r0,#0x68000000
0002fe  2122              MOVS     r1,#0x22
000300  8001              STRH     r1,[r0,#0]
;;;399    
;;;400    	usRGB = LCD_RAM;
000302  8840              LDRH     r0,[r0,#2]
;;;401    
;;;402    	/* 读 16-bit GRAM Reg */
;;;403    	if (s_RGBChgEn == 1)
000304  4916              LDR      r1,|L1.864|
000306  7809              LDRB     r1,[r1,#0]  ; s_RGBChgEn
000308  2901              CMP      r1,#1
00030a  d102              BNE      |L1.786|
;;;404    	{
;;;405    		usRGB = LCD_R61505W_BGR2RGB(usRGB);
00030c  e8bd4010          POP      {r4,lr}
000310  e7fe              B        LCD_R61505W_BGR2RGB
                  |L1.786|
;;;406    	}
;;;407    
;;;408    	return usRGB;
;;;409    }
000312  bd10              POP      {r4,pc}
;;;410    
                          ENDP

                  LCD_R61505W_SetPoint PROC
;;;420    */
;;;421    void LCD_R61505W_SetPoint(u16 _usX, u16 _usY, u16 _usColor)
000314  b510              PUSH     {r4,lr}
;;;422    {
000316  4614              MOV      r4,r2
;;;423    	LCD_R61505W_SetCursor(_usX, _usY);	/* 设置光标位置 */
000318  f7fffffe          BL       LCD_R61505W_SetCursor
;;;424    
;;;425    	/* 写显存 */
;;;426    	LCD_REG = LR_GRAM;
00031c  f04f40d0          MOV      r0,#0x68000000
000320  2122              MOVS     r1,#0x22
000322  8001              STRH     r1,[r0,#0]
;;;427    
;;;428    	/* Write 16-bit GRAM Reg */
;;;429    	LCD_RAM = _usColor;
000324  8044              STRH     r4,[r0,#2]
;;;430    }       
000326  bd10              POP      {r4,pc}
;;;431    
                          ENDP

                  |L1.808|
                          DCD      OSTime
                  |L1.812|
                          DCD      0x40011400
                  |L1.816|
                          DCD      0x40011800
                  |L1.820|
                          DCD      0x40011c00
                  |L1.824|
                          DCD      0x40012000
                  |L1.828|
00033c  d0bec6ac          DCB      208,190,198,172,"ID",163,186,"0X%04X\r\n",0
000340  4944a3ba
000344  30582530
000348  34580d0a
00034c  00      
00034d  00                DCB      0
00034e  00                DCB      0
00034f  00                DCB      0
                  |L1.848|
000350  b3f5cabc          DCB      179,245,202,188,187,175,"LCD \r\n",0
000354  bbaf4c43
000358  44200d0a
00035c  00      
00035d  00                DCB      0
00035e  00                DCB      0
00035f  00                DCB      0
                  |L1.864|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=0

                  s_RGBChgEn
000000  00                DCB      0x00
