; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_adddecshift.o --depend=.\rvmdk\gui_adddecshift.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_adddecshift.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_AddDecShift.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Check_NegLong PROC
;;;45     */
;;;46     static int _Check_NegLong(I32 *pv, char**ps) {
000000  6802              LDR      r2,[r0,#0]
;;;47       if (*pv < 0) {
000002  2a00              CMP      r2,#0
000004  da0b              BGE      |L1.30|
;;;48         *(*ps)++ = '-';
000006  680a              LDR      r2,[r1,#0]
000008  232d              MOVS     r3,#0x2d
00000a  f1020c01          ADD      r12,r2,#1
00000e  f8c1c000          STR      r12,[r1,#0]
000012  7013              STRB     r3,[r2,#0]
;;;49         *pv = -*pv;
000014  6801              LDR      r1,[r0,#0]
000016  4249              RSBS     r1,r1,#0
000018  6001              STR      r1,[r0,#0]
;;;50         return 1;
00001a  2001              MOVS     r0,#1
;;;51       }
;;;52       return 0;
;;;53     }
00001c  4770              BX       lr
                  |L1.30|
00001e  2000              MOVS     r0,#0                 ;52
000020  4770              BX       lr
;;;54     
                          ENDP

                  GUI_Long2Len PROC
;;;64     */
;;;65     int GUI_Long2Len(I32 vSign) {
000022  4601              MOV      r1,r0
;;;66       int Len = 1;
000024  2001              MOVS     r0,#1
;;;67       I32 v = (vSign > 0) ? vSign : -vSign;
000026  2900              CMP      r1,#0
000028  dd01              BLE      |L1.46|
00002a  460a              MOV      r2,r1
00002c  e000              B        |L1.48|
                  |L1.46|
00002e  424a              RSBS     r2,r1,#0
                  |L1.48|
;;;68       while (( ((U32)v) >= GUI_Pow10[Len]) && (Len < 9)) {
000030  4b2b              LDR      r3,|L1.224|
;;;69         Len++;
000032  e000              B        |L1.54|
                  |L1.52|
000034  1c40              ADDS     r0,r0,#1
                  |L1.54|
000036  f853c020          LDR      r12,[r3,r0,LSL #2]    ;68
00003a  4594              CMP      r12,r2                ;68
00003c  d801              BHI      |L1.66|
00003e  2809              CMP      r0,#9                 ;68
000040  dbf8              BLT      |L1.52|
                  |L1.66|
;;;70       }
;;;71       if (vSign < 0) {
000042  2900              CMP      r1,#0
000044  da00              BGE      |L1.72|
;;;72     		Len++;
000046  1c40              ADDS     r0,r0,#1
                  |L1.72|
;;;73       }
;;;74       return Len;
;;;75     }
000048  4770              BX       lr
;;;76     
                          ENDP

                  GUI_AddSign PROC
;;;80     */
;;;81     long GUI_AddSign(long v, char**ps) {
00004a  2800              CMP      r0,#0
;;;82       char c;
;;;83       if (v < 0) {
00004c  da02              BGE      |L1.84|
;;;84         c = '-';
00004e  222d              MOVS     r2,#0x2d
;;;85         v = -v;
000050  4240              RSBS     r0,r0,#0
000052  e000              B        |L1.86|
                  |L1.84|
;;;86       } else {
;;;87         c = '+';
000054  222b              MOVS     r2,#0x2b
                  |L1.86|
;;;88       }
;;;89       *(*ps)++ = c;
000056  680b              LDR      r3,[r1,#0]
000058  f1030c01          ADD      r12,r3,#1
00005c  f8c1c000          STR      r12,[r1,#0]
000060  701a              STRB     r2,[r3,#0]
;;;90       **ps     = '\0';
000062  6809              LDR      r1,[r1,#0]
000064  2200              MOVS     r2,#0
000066  700a              STRB     r2,[r1,#0]
;;;91       return v;
;;;92     }
000068  4770              BX       lr
;;;93     
                          ENDP

                  GUI_AddDecShift PROC
;;;103    */
;;;104    void GUI_AddDecShift(I32 v, U8 Len, U8 Shift, char**ps) {
00006a  b57f              PUSH     {r0-r6,lr}
00006c  460e              MOV      r6,r1
00006e  4615              MOV      r5,r2
000070  461c              MOV      r4,r3
;;;105      char c;
;;;106      long d;
;;;107      #ifndef _CM16C
;;;108        Len -= _Check_NegLong(&v, ps); /* TASKING: Tool internal error S003: asertion failed - please report */
000072  4621              MOV      r1,r4
000074  4668              MOV      r0,sp
000076  f7fffffe          BL       _Check_NegLong
00007a  1a30              SUBS     r0,r6,r0
00007c  b2c0              UXTB     r0,r0
;;;109      #else
;;;110        if (v < 0) {
;;;111          *(*ps)++ = '-';
;;;112          v = -v;
;;;113        }
;;;114      #endif
;;;115      if (Shift) {
00007e  b10d              CBZ      r5,|L1.132|
;;;116        Len--;
000080  1e40              SUBS     r0,r0,#1
000082  b2c0              UXTB     r0,r0
                  |L1.132|
;;;117      }
;;;118    #if GUI_DEBUG_LEVEL >1
;;;119      if (Len > 9) {
;;;120        Len = 9;
;;;121        GUI_DEBUG_ERROROUT("Can not display more than 9 dec. digits");
;;;122      }
;;;123    #endif
;;;124      if ((U32)v >= GUI_Pow10[Len])
000084  4a16              LDR      r2,|L1.224|
000086  9b00              LDR      r3,[sp,#0]
000088  f8521020          LDR      r1,[r2,r0,LSL #2]
00008c  4299              CMP      r1,r3
00008e  d801              BHI      |L1.148|
;;;125    	v = GUI_Pow10[Len] - 1;
000090  1e49              SUBS     r1,r1,#1
000092  9100              STR      r1,[sp,#0]
                  |L1.148|
;;;126      while (Len) {
000094  b1f8              CBZ      r0,|L1.214|
;;;127        if (Len-- == Shift)
;;;128          *(*ps)++ = GUI_DecChar;
000096  4e13              LDR      r6,|L1.228|
                  |L1.152|
000098  4601              MOV      r1,r0                 ;127
00009a  1e40              SUBS     r0,r0,#1              ;127
00009c  b2c0              UXTB     r0,r0                 ;127
00009e  42a9              CMP      r1,r5                 ;127
0000a0  d106              BNE      |L1.176|
0000a2  6821              LDR      r1,[r4,#0]
0000a4  7833              LDRB     r3,[r6,#0]  ; GUI_DecChar
0000a6  f1010c01          ADD      r12,r1,#1
0000aa  f8c4c000          STR      r12,[r4,#0]
0000ae  700b              STRB     r3,[r1,#0]
                  |L1.176|
;;;129        d = GUI_Pow10[Len];
0000b0  f8521020          LDR      r1,[r2,r0,LSL #2]
;;;130        c = (char) (v / d);
0000b4  f8ddc000          LDR      r12,[sp,#0]
0000b8  fb9cf3f1          SDIV     r3,r12,r1
0000bc  b2db              UXTB     r3,r3
;;;131        v -= c * d;
0000be  fb03c111          MLS      r1,r3,r1,r12
0000c2  9100              STR      r1,[sp,#0]
;;;132        *(*ps)++ = c + '0';
0000c4  6821              LDR      r1,[r4,#0]
0000c6  3330              ADDS     r3,r3,#0x30
0000c8  f1010c01          ADD      r12,r1,#1
0000cc  f8c4c000          STR      r12,[r4,#0]
0000d0  700b              STRB     r3,[r1,#0]
0000d2  2800              CMP      r0,#0                 ;126
0000d4  d1e0              BNE      |L1.152|
                  |L1.214|
;;;133      }
;;;134      **ps = 0;
0000d6  6821              LDR      r1,[r4,#0]
0000d8  2000              MOVS     r0,#0
0000da  7008              STRB     r0,[r1,#0]
;;;135    }
0000dc  b004              ADD      sp,sp,#0x10
0000de  bd70              POP      {r4-r6,pc}
;;;136    
                          ENDP

                  |L1.224|
                          DCD      ||.constdata||
                  |L1.228|
                          DCD      GUI_DecChar

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_Pow10
                          DCD      0x00000001
                          DCD      0x0000000a
                          DCD      0x00000064
                          DCD      0x000003e8
                          DCD      0x00002710
                          DCD      0x000186a0
                          DCD      0x000f4240
                          DCD      0x00989680
                          DCD      0x05f5e100
                          DCD      0x3b9aca00
