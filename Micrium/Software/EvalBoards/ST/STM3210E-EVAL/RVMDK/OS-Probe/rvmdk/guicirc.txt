; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guicirc.o --depend=.\rvmdk\guicirc.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guicirc.crf ..\..\..\..\..\uCGUI\GUI\Core\GUICirc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Draw8Point PROC
;;;46     */
;;;47     static void Draw8Point(int x0,int y0, int xoff, int yoff) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;48       LCD_HL_DrawPixel(x0+xoff,y0+yoff);
00000c  f8df8408          LDR      r8,|L1.1048|
000010  19e8              ADDS     r0,r5,r7
000012  9000              STR      r0,[sp,#0]
000014  f8d8005c          LDR      r0,[r8,#0x5c]  ; GUI_Context
000018  eb060a04          ADD      r10,r6,r4
00001c  4651              MOV      r1,r10
00001e  6842              LDR      r2,[r0,#4]
000020  9800              LDR      r0,[sp,#0]
000022  4790              BLX      r2
;;;49       LCD_HL_DrawPixel(x0-xoff,y0+yoff);
000024  f8d8005c          LDR      r0,[r8,#0x5c]  ; GUI_Context
000028  eba50907          SUB      r9,r5,r7
00002c  4651              MOV      r1,r10
00002e  6842              LDR      r2,[r0,#4]
000030  4648              MOV      r0,r9
000032  4790              BLX      r2
;;;50       LCD_HL_DrawPixel(x0+yoff,y0+xoff);
000034  f8d8005c          LDR      r0,[r8,#0x5c]  ; GUI_Context
000038  eb060b07          ADD      r11,r6,r7
00003c  eb050a04          ADD      r10,r5,r4
000040  6842              LDR      r2,[r0,#4]
000042  4659              MOV      r1,r11
000044  4650              MOV      r0,r10
000046  4790              BLX      r2
;;;51       LCD_HL_DrawPixel(x0+yoff,y0-xoff);
000048  f8d8005c          LDR      r0,[r8,#0x5c]  ; GUI_Context
00004c  1bf7              SUBS     r7,r6,r7
00004e  4639              MOV      r1,r7
000050  6842              LDR      r2,[r0,#4]
000052  4650              MOV      r0,r10
000054  4790              BLX      r2
;;;52       if (yoff) {
000056  2c00              CMP      r4,#0
000058  d01c              BEQ      |L1.148|
;;;53         LCD_HL_DrawPixel(x0+xoff,y0-yoff);
00005a  f8d8005c          LDR      r0,[r8,#0x5c]  ; GUI_Context
00005e  1b36              SUBS     r6,r6,r4
000060  4631              MOV      r1,r6
000062  6842              LDR      r2,[r0,#4]
000064  9800              LDR      r0,[sp,#0]
000066  4790              BLX      r2
;;;54         LCD_HL_DrawPixel(x0-xoff,y0-yoff);
000068  f8d8005c          LDR      r0,[r8,#0x5c]  ; GUI_Context
00006c  4631              MOV      r1,r6
00006e  6842              LDR      r2,[r0,#4]
000070  4648              MOV      r0,r9
000072  4790              BLX      r2
;;;55         LCD_HL_DrawPixel(x0-yoff,y0+xoff);
000074  f8d8005c          LDR      r0,[r8,#0x5c]  ; GUI_Context
000078  1b2c              SUBS     r4,r5,r4
00007a  4659              MOV      r1,r11
00007c  6842              LDR      r2,[r0,#4]
00007e  4620              MOV      r0,r4
000080  4790              BLX      r2
;;;56         LCD_HL_DrawPixel(x0-yoff,y0-xoff);
000082  f8d8005c          LDR      r0,[r8,#0x5c]  ; GUI_Context
000086  4639              MOV      r1,r7
000088  6842              LDR      r2,[r0,#4]
00008a  b001              ADD      sp,sp,#4
00008c  4620              MOV      r0,r4
00008e  e8bd4ff0          POP      {r4-r11,lr}
000092  4710              BX       r2
                  |L1.148|
;;;57       }
;;;58     }
000094  e8bd8ff8          POP      {r3-r11,pc}
;;;59     
                          ENDP

                  GL_DrawCircle PROC
;;;69     */
;;;70     void GL_DrawCircle(int x0, int y0, int r) {
000098  e92d47f0          PUSH     {r4-r10,lr}
00009c  4680              MOV      r8,r0
00009e  4689              MOV      r9,r1
;;;71       I32 i;
;;;72       int imax = ((I32)((I32)r*707))/1000+1;
0000a0  f24020c3          MOV      r0,#0x2c3
0000a4  4350              MULS     r0,r2,r0
0000a6  f44f717a          MOV      r1,#0x3e8
0000aa  fb90f0f1          SDIV     r0,r0,r1
0000ae  1c46              ADDS     r6,r0,#1
;;;73       I32 sqmax = (I32)r*(I32)r+(I32)r/2;
0000b0  eb0270d2          ADD      r0,r2,r2,LSR #31
0000b4  1040              ASRS     r0,r0,#1
0000b6  fb020702          MLA      r7,r2,r2,r0
;;;74       I32 y=r;
0000ba  4614              MOV      r4,r2
;;;75       Draw8Point(x0,y0,r,0);
0000bc  2300              MOVS     r3,#0
0000be  4649              MOV      r1,r9
0000c0  4640              MOV      r0,r8
0000c2  f7fffffe          BL       Draw8Point
;;;76       for (i=1; i<= imax; i++) {
0000c6  2501              MOVS     r5,#1
0000c8  2e01              CMP      r6,#1
0000ca  db15              BLT      |L1.248|
                  |L1.204|
;;;77         if ((i*i+y*y) >sqmax) {
0000cc  fb05f005          MUL      r0,r5,r5
0000d0  fb040004          MLA      r0,r4,r4,r0
0000d4  42b8              CMP      r0,r7
0000d6  dd06              BLE      |L1.230|
;;;78           Draw8Point(x0,y0,i,y);
0000d8  4623              MOV      r3,r4
0000da  462a              MOV      r2,r5
0000dc  4649              MOV      r1,r9
0000de  4640              MOV      r0,r8
0000e0  f7fffffe          BL       Draw8Point
;;;79           y--;
0000e4  1e64              SUBS     r4,r4,#1
                  |L1.230|
;;;80         }
;;;81         Draw8Point(x0,y0,i,y);
0000e6  4623              MOV      r3,r4
0000e8  462a              MOV      r2,r5
0000ea  4649              MOV      r1,r9
0000ec  4640              MOV      r0,r8
0000ee  f7fffffe          BL       Draw8Point
0000f2  1c6d              ADDS     r5,r5,#1              ;76
0000f4  42b5              CMP      r5,r6                 ;76
0000f6  dde9              BLE      |L1.204|
                  |L1.248|
;;;82       }
;;;83     }
0000f8  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP

                  GUI_DrawCircle PROC
;;;88     */
;;;89     void GUI_DrawCircle(int x0, int y0, int r) {
0000fc  b570              PUSH     {r4-r6,lr}
0000fe  b082              SUB      sp,sp,#8
000100  4606              MOV      r6,r0
000102  460d              MOV      r5,r1
000104  4614              MOV      r4,r2
;;;90       #if (GUI_WINSUPPORT)
;;;91         GUI_RECT Rect;
;;;92       #endif
;;;93       GUI_LOCK();
000106  f7fffffe          BL       GUI_Lock
;;;94       #if (GUI_WINSUPPORT)
;;;95         WM_ADDORG(x0,y0);
00010a  4ac3              LDR      r2,|L1.1048|
00010c  6c53              LDR      r3,[r2,#0x44]  ; GUI_Context
00010e  441e              ADD      r6,r6,r3
000110  6c90              LDR      r0,[r2,#0x48]  ; GUI_Context
000112  4405              ADD      r5,r5,r0
;;;96         Rect.x0 = x0-r;
000114  1b30              SUBS     r0,r6,r4
000116  f8ad0000          STRH     r0,[sp,#0]
;;;97         Rect.x1 = x0+r;
00011a  1930              ADDS     r0,r6,r4
00011c  f8ad0004          STRH     r0,[sp,#4]
;;;98         Rect.y0 = y0-r;
000120  1b28              SUBS     r0,r5,r4
000122  f8ad0002          STRH     r0,[sp,#2]
;;;99         Rect.y1 = y0+r;
000126  1928              ADDS     r0,r5,r4
000128  f8ad0006          STRH     r0,[sp,#6]
;;;100        WM_ITERATE_START(&Rect); {
00012c  4668              MOV      r0,sp
00012e  f7fffffe          BL       WM__InitIVRSearch
000132  b140              CBZ      r0,|L1.326|
                  |L1.308|
;;;101      #endif
;;;102        GL_DrawCircle( x0, y0, r);
000134  4622              MOV      r2,r4
000136  4629              MOV      r1,r5
000138  4630              MOV      r0,r6
00013a  f7fffffe          BL       GL_DrawCircle
;;;103      #if (GUI_WINSUPPORT)
;;;104        } WM_ITERATE_END();
00013e  f7fffffe          BL       WM__GetNextIVR
000142  2800              CMP      r0,#0
000144  d1f6              BNE      |L1.308|
                  |L1.326|
;;;105      #endif
;;;106      GUI_UNLOCK();
000146  f7fffffe          BL       GUI_Unlock
;;;107    }
00014a  b002              ADD      sp,sp,#8
00014c  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP

                  GL_FillCircle PROC
;;;112    */
;;;113    void GL_FillCircle(int x0, int y0, int r) {
00014e  e92d4ff8          PUSH     {r3-r11,lr}
000152  4606              MOV      r6,r0
000154  460f              MOV      r7,r1
;;;114      I32 i;
;;;115      int imax = ((I32)((I32)r*707))/1000+1;
000156  f24020c3          MOV      r0,#0x2c3
00015a  4350              MULS     r0,r2,r0
00015c  f44f717a          MOV      r1,#0x3e8
000160  fb90f0f1          SDIV     r0,r0,r1
000164  f1000801          ADD      r8,r0,#1
;;;116      I32 sqmax = (I32)r*(I32)r+(I32)r/2;
000168  eb0270d2          ADD      r0,r2,r2,LSR #31
00016c  1040              ASRS     r0,r0,#1
00016e  fb020002          MLA      r0,r2,r2,r0
000172  9000              STR      r0,[sp,#0]
;;;117      I32 x=r;
000174  4614              MOV      r4,r2
;;;118      LCD_HL_DrawHLine(x0-r,y0,x0+r);
000176  f8dfb2a0          LDR      r11,|L1.1048|
00017a  18b0              ADDS     r0,r6,r2
00017c  eba60c02          SUB      r12,r6,r2
000180  f8db105c          LDR      r1,[r11,#0x5c]  ; GUI_Context
000184  4602              MOV      r2,r0
000186  4660              MOV      r0,r12
000188  680b              LDR      r3,[r1,#0]
00018a  4639              MOV      r1,r7
00018c  4798              BLX      r3
;;;119      for (i=1; i<= imax; i++) {
00018e  2501              MOVS     r5,#1
000190  f1b80f01          CMP      r8,#1
000194  db34              BLT      |L1.512|
                  |L1.406|
;;;120        if ((i*i+x*x) >sqmax) {
000196  fb05f005          MUL      r0,r5,r5
00019a  fb040104          MLA      r1,r4,r4,r0
00019e  9800              LDR      r0,[sp,#0]
0001a0  4281              CMP      r1,r0
0001a2  dd18              BLE      |L1.470|
;;;121          /* draw lines from outside */
;;;122          if (x>imax) {
0001a4  4544              CMP      r4,r8
0001a6  dd15              BLE      |L1.468|
;;;123            LCD_HL_DrawHLine (x0-i+1,y0+x, x0+i-1);
0001a8  f8db305c          LDR      r3,[r11,#0x5c]  ; GUI_Context
0001ac  eb060905          ADD      r9,r6,r5
0001b0  eba60a05          SUB      r10,r6,r5
0001b4  681b              LDR      r3,[r3,#0]
0001b6  f1a90201          SUB      r2,r9,#1
0001ba  1939              ADDS     r1,r7,r4
0001bc  f10a0001          ADD      r0,r10,#1
0001c0  4798              BLX      r3
;;;124            LCD_HL_DrawHLine (x0-i+1,y0-x, x0+i-1);
0001c2  f8db305c          LDR      r3,[r11,#0x5c]  ; GUI_Context
0001c6  f1a90201          SUB      r2,r9,#1
0001ca  1b39              SUBS     r1,r7,r4
0001cc  681b              LDR      r3,[r3,#0]
0001ce  f10a0001          ADD      r0,r10,#1
0001d2  4798              BLX      r3
                  |L1.468|
;;;125          }
;;;126          x--;
0001d4  1e64              SUBS     r4,r4,#1
                  |L1.470|
;;;127        }
;;;128        /* draw lines from inside (center) */
;;;129        LCD_HL_DrawHLine(x0-x,y0+i, x0+x);
0001d6  f8db005c          LDR      r0,[r11,#0x5c]  ; GUI_Context
0001da  eb060904          ADD      r9,r6,r4
0001de  eba60a04          SUB      r10,r6,r4
0001e2  6803              LDR      r3,[r0,#0]
0001e4  1979              ADDS     r1,r7,r5
0001e6  464a              MOV      r2,r9
0001e8  4650              MOV      r0,r10
0001ea  4798              BLX      r3
;;;130        LCD_HL_DrawHLine(x0-x,y0-i, x0+x);
0001ec  f8db005c          LDR      r0,[r11,#0x5c]  ; GUI_Context
0001f0  1b79              SUBS     r1,r7,r5
0001f2  464a              MOV      r2,r9
0001f4  6803              LDR      r3,[r0,#0]
0001f6  4650              MOV      r0,r10
0001f8  4798              BLX      r3
0001fa  1c6d              ADDS     r5,r5,#1              ;119
0001fc  4545              CMP      r5,r8                 ;119
0001fe  ddca              BLE      |L1.406|
                  |L1.512|
;;;131      }
;;;132    }
000200  e8bd8ff8          POP      {r3-r11,pc}
;;;133    
                          ENDP

                  GUI_FillCircle PROC
;;;137    */
;;;138    void GUI_FillCircle(int x0, int y0, int r) {
000204  b570              PUSH     {r4-r6,lr}
000206  4604              MOV      r4,r0
000208  460d              MOV      r5,r1
00020a  4616              MOV      r6,r2
;;;139      GUI_LOCK();
00020c  f7fffffe          BL       GUI_Lock
;;;140      #if (GUI_WINSUPPORT)
;;;141        WM_ADDORG(x0,y0);
000210  4b81              LDR      r3,|L1.1048|
000212  6c5a              LDR      r2,[r3,#0x44]  ; GUI_Context
000214  4414              ADD      r4,r4,r2
000216  6c98              LDR      r0,[r3,#0x48]  ; GUI_Context
000218  4405              ADD      r5,r5,r0
;;;142        WM_ITERATE_START(NULL); {
00021a  2000              MOVS     r0,#0
00021c  f7fffffe          BL       WM__InitIVRSearch
000220  b140              CBZ      r0,|L1.564|
                  |L1.546|
;;;143      #endif
;;;144      GL_FillCircle(x0,y0,r);
000222  4632              MOV      r2,r6
000224  4629              MOV      r1,r5
000226  4620              MOV      r0,r4
000228  f7fffffe          BL       GL_FillCircle
;;;145      #if (GUI_WINSUPPORT)
;;;146        } WM_ITERATE_END();
00022c  f7fffffe          BL       WM__GetNextIVR
000230  2800              CMP      r0,#0
000232  d1f6              BNE      |L1.546|
                  |L1.564|
;;;147      #endif
;;;148      GUI_UNLOCK();
000234  e8bd4070          POP      {r4-r6,lr}
000238  f7ffbffe          B.W      GUI_Unlock
;;;149    }
;;;150    
                          ENDP

                  GL_FillEllipse PROC
;;;171    */
;;;172    void GL_FillEllipse(int x0, int y0, int rx, int ry) {
00023c  e92d4ff0          PUSH     {r4-r11,lr}
000240  b083              SUB      sp,sp,#0xc
000242  4681              MOV      r9,r0
000244  468a              MOV      r10,r1
000246  461e              MOV      r6,r3
;;;173      I32 OutConst, Sum, SumY;
;;;174      int x,y;
;;;175      U32 _rx = rx;
;;;176      U32 _ry = ry;
;;;177      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
000248  fb02f002          MUL      r0,r2,r2
00024c  9002              STR      r0,[sp,#8]
00024e  4370              MULS     r0,r6,r0
000250  fb00f106          MUL      r1,r0,r6
000254  eb010750          ADD      r7,r1,r0,LSR #1
;;;178                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;179      x = rx;
000258  4614              MOV      r4,r2
;;;180      for (y=0; y<=ry; y++) {
00025a  2500              MOVS     r5,#0
00025c  2e00              CMP      r6,#0
00025e  db29              BLT      |L1.692|
;;;181        SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
;;;182        while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
;;;183               (x>0) && (Sum>OutConst))
;;;184        {
;;;185          x--;
;;;186        }
;;;187        LCD_HL_DrawHLine(x0-x, y0+y, x0+x);
000260  f8dfb1b4          LDR      r11,|L1.1048|
000264  fb06f806          MUL      r8,r6,r6              ;182
                  |L1.616|
000268  9802              LDR      r0,[sp,#8]            ;181
00026a  fb05f105          MUL      r1,r5,r5              ;181
00026e  4341              MULS     r1,r0,r1              ;181
000270  e000              B        |L1.628|
                  |L1.626|
000272  1e64              SUBS     r4,r4,#1              ;185
                  |L1.628|
000274  fb04f004          MUL      r0,r4,r4              ;182
000278  fb081000          MLA      r0,r8,r0,r1           ;182
00027c  2c00              CMP      r4,#0                 ;182
00027e  dd01              BLE      |L1.644|
000280  42b8              CMP      r0,r7                 ;183
000282  dcf6              BGT      |L1.626|
                  |L1.644|
000284  eb090204          ADD      r2,r9,r4
000288  eba90004          SUB      r0,r9,r4
00028c  9201              STR      r2,[sp,#4]
00028e  9000              STR      r0,[sp,#0]
000290  f8db305c          LDR      r3,[r11,#0x5c]  ; GUI_Context
000294  eb0a0105          ADD      r1,r10,r5
000298  681b              LDR      r3,[r3,#0]
00029a  4798              BLX      r3
;;;188        if (y)
00029c  b13d              CBZ      r5,|L1.686|
;;;189          LCD_HL_DrawHLine(x0-x, y0-y, x0+x);
00029e  f8db005c          LDR      r0,[r11,#0x5c]  ; GUI_Context
0002a2  ebaa0105          SUB      r1,r10,r5
0002a6  9a01              LDR      r2,[sp,#4]
0002a8  6803              LDR      r3,[r0,#0]
0002aa  9800              LDR      r0,[sp,#0]
0002ac  4798              BLX      r3
                  |L1.686|
0002ae  1c6d              ADDS     r5,r5,#1              ;180
0002b0  42b5              CMP      r5,r6                 ;180
0002b2  ddd9              BLE      |L1.616|
                  |L1.692|
;;;190      }
;;;191    }
0002b4  b003              ADD      sp,sp,#0xc
0002b6  e8bd8ff0          POP      {r4-r11,pc}
;;;192    
                          ENDP

                  GUI_FillEllipse PROC
;;;196    */
;;;197    void GUI_FillEllipse(int x0, int y0, int rx, int ry) {
0002ba  b5f0              PUSH     {r4-r7,lr}
0002bc  b083              SUB      sp,sp,#0xc
0002be  4604              MOV      r4,r0
0002c0  460d              MOV      r5,r1
0002c2  4616              MOV      r6,r2
0002c4  461f              MOV      r7,r3
;;;198      #if (GUI_WINSUPPORT)
;;;199        GUI_RECT r;
;;;200      #endif
;;;201      GUI_LOCK();
0002c6  f7fffffe          BL       GUI_Lock
;;;202      #if (GUI_WINSUPPORT)
;;;203        WM_ADDORG(x0,y0);
0002ca  4a53              LDR      r2,|L1.1048|
0002cc  6c51              LDR      r1,[r2,#0x44]  ; GUI_Context
0002ce  440c              ADD      r4,r4,r1
0002d0  6c90              LDR      r0,[r2,#0x48]  ; GUI_Context
0002d2  4405              ADD      r5,r5,r0
;;;204        /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;205        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
0002d4  1ba0              SUBS     r0,r4,r6
0002d6  f8ad0000          STRH     r0,[sp,#0]
0002da  19a0              ADDS     r0,r4,r6
0002dc  f8ad0004          STRH     r0,[sp,#4]
0002e0  1be8              SUBS     r0,r5,r7
0002e2  f8ad0002          STRH     r0,[sp,#2]
0002e6  19e8              ADDS     r0,r5,r7
0002e8  f8ad0006          STRH     r0,[sp,#6]
;;;206        WM_ITERATE_START(&r); {
0002ec  4668              MOV      r0,sp
0002ee  f7fffffe          BL       WM__InitIVRSearch
0002f2  b148              CBZ      r0,|L1.776|
                  |L1.756|
;;;207      #endif
;;;208      GL_FillEllipse (x0,y0, rx, ry);
0002f4  463b              MOV      r3,r7
0002f6  4632              MOV      r2,r6
0002f8  4629              MOV      r1,r5
0002fa  4620              MOV      r0,r4
0002fc  f7fffffe          BL       GL_FillEllipse
;;;209      #if (GUI_WINSUPPORT)
;;;210        } WM_ITERATE_END();
000300  f7fffffe          BL       WM__GetNextIVR
000304  2800              CMP      r0,#0
000306  d1f5              BNE      |L1.756|
                  |L1.776|
;;;211      #endif
;;;212      GUI_UNLOCK();
000308  f7fffffe          BL       GUI_Unlock
;;;213    }
00030c  b003              ADD      sp,sp,#0xc
00030e  bdf0              POP      {r4-r7,pc}
;;;214    
                          ENDP

                  GL_DrawEllipse PROC
;;;218    */
;;;219    void GL_DrawEllipse(int x0, int y0, int rx, int ry) {
000310  e92d4fff          PUSH     {r0-r11,lr}
000314  b085              SUB      sp,sp,#0x14
000316  4607              MOV      r7,r0
000318  461e              MOV      r6,r3
;;;220      I32 OutConst, Sum, SumY;
;;;221      int x,y;
;;;222      int xOld;
;;;223      U32 _rx = rx;
;;;224      U32 _ry = ry;
;;;225      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
00031a  fb02f002          MUL      r0,r2,r2
00031e  9004              STR      r0,[sp,#0x10]
000320  4370              MULS     r0,r6,r0
000322  fb00f106          MUL      r1,r0,r6
000326  eb010950          ADD      r9,r1,r0,LSR #1
;;;226                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;227      xOld = x = rx;
00032a  4614              MOV      r4,r2
00032c  4690              MOV      r8,r2
;;;228      for (y=0; y<=ry; y++) {
00032e  2500              MOVS     r5,#0
000330  2e00              CMP      r6,#0
000332  db43              BLT      |L1.956|
;;;229        if (y==ry) {
;;;230          x=0;
;;;231        } else {
;;;232          SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
;;;233          while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
000334  fb06f006          MUL      r0,r6,r6
000338  9003              STR      r0,[sp,#0xc]
                  |L1.826|
00033a  42b5              CMP      r5,r6                 ;229
00033c  d101              BNE      |L1.834|
00033e  2400              MOVS     r4,#0                 ;230
000340  e00e              B        |L1.864|
                  |L1.834|
000342  9804              LDR      r0,[sp,#0x10]         ;232
000344  fb05f105          MUL      r1,r5,r5              ;232
000348  4341              MULS     r1,r0,r1              ;232
00034a  e000              B        |L1.846|
                  |L1.844|
;;;234                 (x>0) && (Sum>OutConst)) x--;
00034c  1e64              SUBS     r4,r4,#1
                  |L1.846|
00034e  9803              LDR      r0,[sp,#0xc]          ;233
000350  fb04f204          MUL      r2,r4,r4              ;233
000354  fb001002          MLA      r0,r0,r2,r1           ;233
000358  2c00              CMP      r4,#0                 ;233
00035a  dd01              BLE      |L1.864|
00035c  4548              CMP      r0,r9
00035e  dcf5              BGT      |L1.844|
                  |L1.864|
;;;235        }
;;;236        /* Since we draw lines, we can not draw on the first
;;;237            iteration
;;;238        */
;;;239        if (y) {
000360  b345              CBZ      r5,|L1.948|
;;;240          GL_DrawLine1(x0-xOld,y0-y+1,x0-x,y0-y);
000362  9806              LDR      r0,[sp,#0x18]
000364  eba00a05          SUB      r10,r0,r5
000368  1b38              SUBS     r0,r7,r4
00036a  9002              STR      r0,[sp,#8]
00036c  eba70008          SUB      r0,r7,r8
000370  f10a0101          ADD      r1,r10,#1
000374  4653              MOV      r3,r10
000376  9001              STR      r0,[sp,#4]
000378  9a02              LDR      r2,[sp,#8]
00037a  f7fffffe          BL       GL_DrawLine1
;;;241          GL_DrawLine1(x0-xOld,y0+y-1,x0-x,y0+y);
00037e  9806              LDR      r0,[sp,#0x18]
000380  9a02              LDR      r2,[sp,#8]
000382  eb000b05          ADD      r11,r0,r5
000386  f1ab0101          SUB      r1,r11,#1
00038a  465b              MOV      r3,r11
00038c  9801              LDR      r0,[sp,#4]
00038e  f7fffffe          BL       GL_DrawLine1
;;;242          GL_DrawLine1(x0+xOld,y0-y+1,x0+x,y0-y);
000392  1938              ADDS     r0,r7,r4
000394  44b8              ADD      r8,r8,r7
000396  4602              MOV      r2,r0
000398  9000              STR      r0,[sp,#0]
00039a  f10a0101          ADD      r1,r10,#1
00039e  4653              MOV      r3,r10
0003a0  4640              MOV      r0,r8
0003a2  f7fffffe          BL       GL_DrawLine1
;;;243          GL_DrawLine1(x0+xOld,y0+y-1,x0+x,y0+y);
0003a6  f1ab0101          SUB      r1,r11,#1
0003aa  465b              MOV      r3,r11
0003ac  4640              MOV      r0,r8
0003ae  9a00              LDR      r2,[sp,#0]
0003b0  f7fffffe          BL       GL_DrawLine1
                  |L1.948|
;;;244        }
;;;245        xOld = x;
0003b4  46a0              MOV      r8,r4
0003b6  1c6d              ADDS     r5,r5,#1              ;228
0003b8  42b5              CMP      r5,r6                 ;228
0003ba  ddbe              BLE      |L1.826|
                  |L1.956|
;;;246      }
;;;247    }
0003bc  b009              ADD      sp,sp,#0x24
0003be  e8bd8ff0          POP      {r4-r11,pc}
;;;248    
                          ENDP

                  GUI_DrawEllipse PROC
;;;252    */
;;;253    void GUI_DrawEllipse(int x0, int y0, int rx, int ry) {
0003c2  b5f0              PUSH     {r4-r7,lr}
0003c4  b083              SUB      sp,sp,#0xc
0003c6  4604              MOV      r4,r0
0003c8  460d              MOV      r5,r1
0003ca  4616              MOV      r6,r2
0003cc  461f              MOV      r7,r3
;;;254      #if (GUI_WINSUPPORT)
;;;255        GUI_RECT r;
;;;256      #endif
;;;257      GUI_LOCK();
0003ce  f7fffffe          BL       GUI_Lock
;;;258      #if (GUI_WINSUPPORT)
;;;259        WM_ADDORG(x0,y0);
0003d2  4a11              LDR      r2,|L1.1048|
0003d4  6c51              LDR      r1,[r2,#0x44]  ; GUI_Context
0003d6  440c              ADD      r4,r4,r1
0003d8  6c90              LDR      r0,[r2,#0x48]  ; GUI_Context
0003da  4405              ADD      r5,r5,r0
;;;260      /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;261        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
0003dc  1ba0              SUBS     r0,r4,r6
0003de  f8ad0000          STRH     r0,[sp,#0]
0003e2  19a0              ADDS     r0,r4,r6
0003e4  f8ad0004          STRH     r0,[sp,#4]
0003e8  1be8              SUBS     r0,r5,r7
0003ea  f8ad0002          STRH     r0,[sp,#2]
0003ee  19e8              ADDS     r0,r5,r7
0003f0  f8ad0006          STRH     r0,[sp,#6]
;;;262        WM_ITERATE_START(&r); {
0003f4  4668              MOV      r0,sp
0003f6  f7fffffe          BL       WM__InitIVRSearch
0003fa  b148              CBZ      r0,|L1.1040|
                  |L1.1020|
;;;263      #endif
;;;264      GL_DrawEllipse(x0, y0, rx, ry);
0003fc  463b              MOV      r3,r7
0003fe  4632              MOV      r2,r6
000400  4629              MOV      r1,r5
000402  4620              MOV      r0,r4
000404  f7fffffe          BL       GL_DrawEllipse
;;;265      #if (GUI_WINSUPPORT)
;;;266        } WM_ITERATE_END();
000408  f7fffffe          BL       WM__GetNextIVR
00040c  2800              CMP      r0,#0
00040e  d1f5              BNE      |L1.1020|
                  |L1.1040|
;;;267      #endif
;;;268      GUI_UNLOCK();
000410  f7fffffe          BL       GUI_Unlock
;;;269    }
000414  b003              ADD      sp,sp,#0xc
000416  bdf0              POP      {r4-r7,pc}
;;;270    
                          ENDP

                  |L1.1048|
                          DCD      GUI_Context
