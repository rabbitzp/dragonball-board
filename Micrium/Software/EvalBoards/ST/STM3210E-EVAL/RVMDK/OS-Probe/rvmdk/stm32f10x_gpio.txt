; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\stm32f10x_gpio.o --depend=.\rvmdk\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\stm32f10x_gpio.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;52     *******************************************************************************/
;;;53     void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;54     {
;;;55       /* Check the parameters */
;;;56       assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;57       
;;;58       switch (*(u32*)&GPIOx)
000002  4aa1              LDR      r2,|L1.648|
000004  1a81              SUBS     r1,r0,r2
000006  4290              CMP      r0,r2
000008  d03b              BEQ      |L1.130|
00000a  dc12              BGT      |L1.50|
00000c  f5116040          ADDS     r0,r1,#0xc00
000010  d023              BEQ      |L1.90|
000012  f5b06f80          CMP      r0,#0x400
000016  d02a              BEQ      |L1.110|
000018  f5b06f00          CMP      r0,#0x800
00001c  d14f              BNE      |L1.190|
;;;59       {
;;;60         case GPIOA_BASE:
;;;61           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;62           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
;;;63           break;
;;;64     
;;;65         case GPIOB_BASE:
;;;66           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
;;;67           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
;;;68           break;
;;;69     
;;;70         case GPIOC_BASE:
;;;71           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
00001e  2101              MOVS     r1,#1
000020  2010              MOVS     r0,#0x10
000022  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;72           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000026  2100              MOVS     r1,#0
000028  e8bd4010          POP      {r4,lr}
00002c  2010              MOVS     r0,#0x10
00002e  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.50|
000032  f5b16f80          CMP      r1,#0x400             ;58
000036  d02e              BEQ      |L1.150|
000038  f5b16f00          CMP      r1,#0x800             ;58
00003c  d035              BEQ      |L1.170|
00003e  f5b16f40          CMP      r1,#0xc00             ;58
000042  d13c              BNE      |L1.190|
;;;73           break;
;;;74     
;;;75         case GPIOD_BASE:
;;;76           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
;;;77           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
;;;78           break;
;;;79           
;;;80         case GPIOE_BASE:
;;;81           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
;;;82           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
;;;83           break; 
;;;84     
;;;85         case GPIOF_BASE:
;;;86           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
;;;87           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
;;;88           break;
;;;89     
;;;90         case GPIOG_BASE:
;;;91           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
000044  2101              MOVS     r1,#1
000046  0208              LSLS     r0,r1,#8
000048  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;92           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
00004c  e8bd4010          POP      {r4,lr}
000050  2100              MOVS     r1,#0
000052  f44f7080          MOV      r0,#0x100
000056  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.90|
00005a  2101              MOVS     r1,#1                 ;61
00005c  2004              MOVS     r0,#4                 ;61
00005e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000062  2100              MOVS     r1,#0                 ;62
000064  e8bd4010          POP      {r4,lr}               ;62
000068  2004              MOVS     r0,#4                 ;62
00006a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.110|
00006e  2101              MOVS     r1,#1                 ;66
000070  2008              MOVS     r0,#8                 ;66
000072  f7fffffe          BL       RCC_APB2PeriphResetCmd
000076  2100              MOVS     r1,#0                 ;67
000078  e8bd4010          POP      {r4,lr}               ;67
00007c  2008              MOVS     r0,#8                 ;67
00007e  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.130|
000082  2101              MOVS     r1,#1                 ;76
000084  2020              MOVS     r0,#0x20              ;76
000086  f7fffffe          BL       RCC_APB2PeriphResetCmd
00008a  2100              MOVS     r1,#0                 ;77
00008c  e8bd4010          POP      {r4,lr}               ;77
000090  2020              MOVS     r0,#0x20              ;77
000092  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.150|
000096  2101              MOVS     r1,#1                 ;81
000098  2040              MOVS     r0,#0x40              ;81
00009a  f7fffffe          BL       RCC_APB2PeriphResetCmd
00009e  2100              MOVS     r1,#0                 ;82
0000a0  e8bd4010          POP      {r4,lr}               ;82
0000a4  2040              MOVS     r0,#0x40              ;82
0000a6  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.170|
0000aa  2101              MOVS     r1,#1                 ;86
0000ac  2080              MOVS     r0,#0x80              ;86
0000ae  f7fffffe          BL       RCC_APB2PeriphResetCmd
0000b2  2100              MOVS     r1,#0                 ;87
0000b4  e8bd4010          POP      {r4,lr}               ;87
0000b8  2080              MOVS     r0,#0x80              ;87
0000ba  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.190|
;;;93           break;                       
;;;94     
;;;95         default:
;;;96           break;
;;;97       }
;;;98     }
0000be  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  GPIO_AFIODeInit PROC
;;;108    *******************************************************************************/
;;;109    void GPIO_AFIODeInit(void)
0000c0  b510              PUSH     {r4,lr}
;;;110    {
;;;111      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
0000c2  2101              MOVS     r1,#1
0000c4  4608              MOV      r0,r1
0000c6  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;112      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
0000ca  2100              MOVS     r1,#0
0000cc  e8bd4010          POP      {r4,lr}
0000d0  2001              MOVS     r0,#1
0000d2  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;113    }
;;;114    
                          ENDP

                  GPIO_Init PROC
;;;125    *******************************************************************************/
;;;126    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
0000d6  e92d01f0          PUSH     {r4-r8}
;;;127    {
;;;128      u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
0000da  2200              MOVS     r2,#0
;;;129      u32 tmpreg = 0x00, pinmask = 0x00;
;;;130    
;;;131      /* Check the parameters */
;;;132      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;133      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;134      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;135      
;;;136    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;137      currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
0000dc  f891c003          LDRB     r12,[r1,#3]
0000e0  f00c030f          AND      r3,r12,#0xf
;;;138    
;;;139      if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
0000e4  f01c0f10          TST      r12,#0x10
0000e8  d003              BEQ      |L1.242|
;;;140      { 
;;;141        /* Check the parameters */
;;;142        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;143        /* Output mode */
;;;144        currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
0000ea  f891c002          LDRB     r12,[r1,#2]
0000ee  ea4c0303          ORR      r3,r12,r3
                  |L1.242|
;;;145      }
;;;146    
;;;147    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;148      /* Configure the eight low port pins */
;;;149      if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
0000f2  f8b1c000          LDRH     r12,[r1,#0]
;;;150      {
;;;151        tmpreg = GPIOx->CRL;
;;;152    
;;;153        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;154        {
;;;155          pos = ((u32)0x01) << pinpos;
;;;156          /* Get the port pins position */
;;;157          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;158    
;;;159          if (currentpin == pos)
;;;160          {
;;;161            pos = pinpos << 2;
;;;162            /* Clear the corresponding low control register bits */
;;;163            pinmask = ((u32)0x0F) << pos;
0000f6  f04f070f          MOV      r7,#0xf
0000fa  f01c0fff          TST      r12,#0xff             ;149
0000fe  f04f0601          MOV      r6,#1                 ;155
000102  d01d              BEQ      |L1.320|
000104  6804              LDR      r4,[r0,#0]            ;151
                  |L1.262|
000106  fa06fc02          LSL      r12,r6,r2             ;155
00010a  880d              LDRH     r5,[r1,#0]            ;157
00010c  ea05050c          AND      r5,r5,r12             ;157
000110  4565              CMP      r5,r12                ;159
000112  d111              BNE      |L1.312|
000114  0095              LSLS     r5,r2,#2              ;161
000116  fa07f805          LSL      r8,r7,r5
;;;164            tmpreg &= ~pinmask;
00011a  ea240408          BIC      r4,r4,r8
;;;165    
;;;166            /* Write the mode configuration in the corresponding bits */
;;;167            tmpreg |= (currentmode << pos);
00011e  fa03f505          LSL      r5,r3,r5
000122  432c              ORRS     r4,r4,r5
;;;168    
;;;169            /* Reset the corresponding ODR bit */
;;;170            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000124  78cd              LDRB     r5,[r1,#3]
000126  2d28              CMP      r5,#0x28
000128  d101              BNE      |L1.302|
;;;171            {
;;;172              GPIOx->BRR = (((u32)0x01) << pinpos);
00012a  f8c0c014          STR      r12,[r0,#0x14]
                  |L1.302|
;;;173            }
;;;174            /* Set the corresponding ODR bit */
;;;175            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00012e  78cd              LDRB     r5,[r1,#3]
000130  2d48              CMP      r5,#0x48
000132  d101              BNE      |L1.312|
;;;176            {
;;;177              GPIOx->BSRR = (((u32)0x01) << pinpos);
000134  f8c0c010          STR      r12,[r0,#0x10]
                  |L1.312|
000138  1c52              ADDS     r2,r2,#1              ;153
00013a  2a08              CMP      r2,#8                 ;153
00013c  d3e3              BCC      |L1.262|
;;;178            }
;;;179          }
;;;180        }
;;;181        GPIOx->CRL = tmpreg;
00013e  6004              STR      r4,[r0,#0]
                  |L1.320|
;;;182      }
;;;183    
;;;184    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;185      /* Configure the eight high port pins */
;;;186      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000140  880a              LDRH     r2,[r1,#0]
000142  2aff              CMP      r2,#0xff
000144  d920              BLS      |L1.392|
;;;187      {
;;;188        tmpreg = GPIOx->CRH;
000146  6844              LDR      r4,[r0,#4]
;;;189        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000148  2200              MOVS     r2,#0
                  |L1.330|
;;;190        {
;;;191          pos = (((u32)0x01) << (pinpos + 0x08));
00014a  f1020c08          ADD      r12,r2,#8
00014e  fa06fc0c          LSL      r12,r6,r12
;;;192          /* Get the port pins position */
;;;193          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
000152  880d              LDRH     r5,[r1,#0]
000154  ea05050c          AND      r5,r5,r12
;;;194          if (currentpin == pos)
000158  4565              CMP      r5,r12
00015a  d111              BNE      |L1.384|
;;;195          {
;;;196            pos = pinpos << 2;
00015c  0095              LSLS     r5,r2,#2
;;;197            /* Clear the corresponding high control register bits */
;;;198            pinmask = ((u32)0x0F) << pos;
00015e  fa07f805          LSL      r8,r7,r5
;;;199            tmpreg &= ~pinmask;
000162  ea240408          BIC      r4,r4,r8
;;;200    
;;;201            /* Write the mode configuration in the corresponding bits */
;;;202            tmpreg |= (currentmode << pos);
000166  fa03f505          LSL      r5,r3,r5
00016a  432c              ORRS     r4,r4,r5
;;;203    
;;;204            /* Reset the corresponding ODR bit */
;;;205            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
00016c  78cd              LDRB     r5,[r1,#3]
00016e  2d28              CMP      r5,#0x28
000170  d101              BNE      |L1.374|
;;;206            {
;;;207              GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
000172  f8c0c014          STR      r12,[r0,#0x14]
                  |L1.374|
;;;208            }
;;;209            /* Set the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000176  78cd              LDRB     r5,[r1,#3]
000178  2d48              CMP      r5,#0x48
00017a  d101              BNE      |L1.384|
;;;211            {
;;;212              GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
00017c  f8c0c010          STR      r12,[r0,#0x10]
                  |L1.384|
000180  1c52              ADDS     r2,r2,#1              ;189
000182  2a08              CMP      r2,#8                 ;189
000184  d3e1              BCC      |L1.330|
;;;213            }
;;;214          }
;;;215        }
;;;216        GPIOx->CRH = tmpreg;
000186  6044              STR      r4,[r0,#4]
                  |L1.392|
;;;217      }
;;;218    }
000188  e8bd01f0          POP      {r4-r8}
00018c  4770              BX       lr
;;;219    
                          ENDP

                  GPIO_StructInit PROC
;;;227    *******************************************************************************/
;;;228    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
00018e  f64f71ff          MOV      r1,#0xffff
;;;229    {
;;;230      /* Reset GPIO init structure parameters values */
;;;231      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000192  8001              STRH     r1,[r0,#0]
;;;232      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000194  2102              MOVS     r1,#2
000196  7081              STRB     r1,[r0,#2]
;;;233      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
000198  2104              MOVS     r1,#4
00019a  70c1              STRB     r1,[r0,#3]
;;;234    }
00019c  4770              BX       lr
;;;235    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;244    *******************************************************************************/
;;;245    u8 GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
00019e  4602              MOV      r2,r0
;;;246    {
;;;247      u8 bitstatus = 0x00;
0001a0  2000              MOVS     r0,#0
;;;248      
;;;249      /* Check the parameters */
;;;250      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;251      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;252      
;;;253      if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
0001a2  6892              LDR      r2,[r2,#8]
0001a4  420a              TST      r2,r1
0001a6  d000              BEQ      |L1.426|
;;;254      {
;;;255        bitstatus = (u8)Bit_SET;
0001a8  2001              MOVS     r0,#1
                  |L1.426|
;;;256      }
;;;257      else
;;;258      {
;;;259        bitstatus = (u8)Bit_RESET;
;;;260      }
;;;261      return bitstatus;
;;;262    }
0001aa  4770              BX       lr
;;;263    
                          ENDP

                  GPIO_ReadInputData PROC
;;;270    *******************************************************************************/
;;;271    u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
0001ac  6880              LDR      r0,[r0,#8]
;;;272    {
;;;273      /* Check the parameters */
;;;274      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;275      
;;;276      return ((u16)GPIOx->IDR);
0001ae  b280              UXTH     r0,r0
;;;277    }
0001b0  4770              BX       lr
;;;278    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;287    *******************************************************************************/
;;;288    u8 GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
0001b2  4602              MOV      r2,r0
;;;289    {
;;;290      u8 bitstatus = 0x00;
0001b4  2000              MOVS     r0,#0
;;;291    
;;;292      /* Check the parameters */
;;;293      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;294      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;295      
;;;296      if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
0001b6  68d2              LDR      r2,[r2,#0xc]
0001b8  420a              TST      r2,r1
0001ba  d000              BEQ      |L1.446|
;;;297      {
;;;298        bitstatus = (u8)Bit_SET;
0001bc  2001              MOVS     r0,#1
                  |L1.446|
;;;299      }
;;;300      else
;;;301      {
;;;302        bitstatus = (u8)Bit_RESET;
;;;303      }
;;;304      return bitstatus;
;;;305    }
0001be  4770              BX       lr
;;;306    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;313    *******************************************************************************/
;;;314    u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
0001c0  68c0              LDR      r0,[r0,#0xc]
;;;315    {
;;;316      /* Check the parameters */
;;;317      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;318        
;;;319      return ((u16)GPIOx->ODR);
0001c2  b280              UXTH     r0,r0
;;;320    }
0001c4  4770              BX       lr
;;;321    
                          ENDP

                  GPIO_SetBits PROC
;;;331    *******************************************************************************/
;;;332    void GPIO_SetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
0001c6  6101              STR      r1,[r0,#0x10]
;;;333    {
;;;334      /* Check the parameters */
;;;335      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;336      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;337      
;;;338      GPIOx->BSRR = GPIO_Pin;
;;;339    }
0001c8  4770              BX       lr
;;;340    
                          ENDP

                  GPIO_ResetBits PROC
;;;350    *******************************************************************************/
;;;351    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
0001ca  6141              STR      r1,[r0,#0x14]
;;;352    {
;;;353      /* Check the parameters */
;;;354      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;355      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;356      
;;;357      GPIOx->BRR = GPIO_Pin;
;;;358    }
0001cc  4770              BX       lr
;;;359    
                          ENDP

                  GPIO_WriteBit PROC
;;;372    *******************************************************************************/
;;;373    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin, BitAction BitVal)
0001ce  b10a              CBZ      r2,|L1.468|
;;;374    {
;;;375      /* Check the parameters */
;;;376      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;377      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;378      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;379      
;;;380      if (BitVal != Bit_RESET)
;;;381      {
;;;382        GPIOx->BSRR = GPIO_Pin;
0001d0  6101              STR      r1,[r0,#0x10]
;;;383      }
;;;384      else
;;;385      {
;;;386        GPIOx->BRR = GPIO_Pin;
;;;387      }
;;;388    }
0001d2  4770              BX       lr
                  |L1.468|
0001d4  6141              STR      r1,[r0,#0x14]         ;386
0001d6  4770              BX       lr
;;;389    
                          ENDP

                  GPIO_Write PROC
;;;398    *******************************************************************************/
;;;399    void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
0001d8  60c1              STR      r1,[r0,#0xc]
;;;400    {
;;;401      /* Check the parameters */
;;;402      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;403      
;;;404      GPIOx->ODR = PortVal;
;;;405    }
0001da  4770              BX       lr
;;;406    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;416    *******************************************************************************/
;;;417    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
0001dc  f4413280          ORR      r2,r1,#0x10000
;;;418    {
;;;419      u32 tmp = 0x00010000;
;;;420      
;;;421      /* Check the parameters */
;;;422      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;423      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;424      
;;;425      tmp |= GPIO_Pin;
;;;426      /* Set LCKK bit */
;;;427      GPIOx->LCKR = tmp;
0001e0  6182              STR      r2,[r0,#0x18]
;;;428      /* Reset LCKK bit */
;;;429      GPIOx->LCKR =  GPIO_Pin;
0001e2  6181              STR      r1,[r0,#0x18]
;;;430      /* Set LCKK bit */
;;;431      GPIOx->LCKR = tmp;
0001e4  6182              STR      r2,[r0,#0x18]
;;;432      /* Read LCKK bit*/
;;;433      tmp = GPIOx->LCKR;
0001e6  6981              LDR      r1,[r0,#0x18]
;;;434      /* Read LCKK bit*/
;;;435      tmp = GPIOx->LCKR;
0001e8  6980              LDR      r0,[r0,#0x18]
;;;436    }
0001ea  4770              BX       lr
;;;437    
                          ENDP

                  GPIO_EventOutputConfig PROC
;;;449    *******************************************************************************/
;;;450    void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
0001ec  4b27              LDR      r3,|L1.652|
;;;451    {
;;;452      u32 tmpreg = 0x00;
;;;453    
;;;454      /* Check the parameters */
;;;455      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;456      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;457        
;;;458      tmpreg = AFIO->EVCR;
0001ee  681a              LDR      r2,[r3,#0]
;;;459      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;460      tmpreg &= EVCR_PORTPINCONFIG_MASK;
0001f0  f64f7c80          MOV      r12,#0xff80
0001f4  ea02020c          AND      r2,r2,r12
;;;461      tmpreg |= (u32)GPIO_PortSource << 0x04;
0001f8  ea421000          ORR      r0,r2,r0,LSL #4
;;;462      tmpreg |= GPIO_PinSource;
0001fc  4308              ORRS     r0,r0,r1
;;;463    
;;;464      AFIO->EVCR = tmpreg;
0001fe  6018              STR      r0,[r3,#0]
;;;465    }
000200  4770              BX       lr
;;;466    
                          ENDP

                  GPIO_EventOutputCmd PROC
;;;474    *******************************************************************************/
;;;475    void GPIO_EventOutputCmd(FunctionalState NewState)
000202  4923              LDR      r1,|L1.656|
;;;476    {
;;;477      /* Check the parameters */
;;;478      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;479      
;;;480      *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
000204  61c8              STR      r0,[r1,#0x1c]
;;;481    }
000206  4770              BX       lr
;;;482    
                          ENDP

                  GPIO_PinRemapConfig PROC
;;;517    *******************************************************************************/
;;;518    void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
000208  b470              PUSH     {r4-r6}
;;;519    {
;;;520      u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;521    
;;;522      /* Check the parameters */
;;;523      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;524      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;525      
;;;526      tmpreg = AFIO->MAPR;
00020a  4c20              LDR      r4,|L1.652|
00020c  6862              LDR      r2,[r4,#4]
;;;527    
;;;528      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
00020e  f3c04c03          UBFX     r12,r0,#16,#4
;;;529      tmp = GPIO_Remap & LSB_MASK;
;;;530    
;;;531      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
000212  f44f1340          MOV      r3,#0x300000
000216  ea330500          BICS     r5,r3,r0
;;;532      {
;;;533        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;534        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;535      }
;;;536      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;537      {
;;;538        tmp1 = ((u32)0x03) << tmpmask;
;;;539        tmpreg &= ~tmp1;
;;;540        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;541      }
;;;542      else
;;;543      {
;;;544        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
00021a  ea4f5350          LSR      r3,r0,#21
00021e  ea4f1303          LSL      r3,r3,#4
000222  b286              UXTH     r6,r0                 ;529
000224  fa06f303          LSL      r3,r6,r3
000228  d00a              BEQ      |L1.576|
00022a  f4101f80          TST      r0,#0x100000          ;536
00022e  d00e              BEQ      |L1.590|
000230  2003              MOVS     r0,#3                 ;538
000232  fa00f00c          LSL      r0,r0,r12             ;538
000236  ea220000          BIC      r0,r2,r0              ;539
00023a  f0406070          ORR      r0,r0,#0xf000000      ;540
00023e  e00a              B        |L1.598|
                  |L1.576|
000240  f0226070          BIC      r0,r2,#0xf000000      ;533
000244  6862              LDR      r2,[r4,#4]            ;534
000246  f0226270          BIC      r2,r2,#0xf000000      ;534
00024a  6062              STR      r2,[r4,#4]            ;534
00024c  e003              B        |L1.598|
                  |L1.590|
00024e  ea220003          BIC      r0,r2,r3
;;;545        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000252  f0406070          ORR      r0,r0,#0xf000000
                  |L1.598|
;;;546      }
;;;547    
;;;548      if (NewState != DISABLE)
000256  b101              CBZ      r1,|L1.602|
;;;549      {
;;;550        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000258  4318              ORRS     r0,r0,r3
                  |L1.602|
;;;551      }
;;;552    
;;;553      AFIO->MAPR = tmpreg;
00025a  6060              STR      r0,[r4,#4]
;;;554    }
00025c  bc70              POP      {r4-r6}
00025e  4770              BX       lr
;;;555    
                          ENDP

                  GPIO_EXTILineConfig PROC
;;;567    *******************************************************************************/
;;;568    void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
000260  078a              LSLS     r2,r1,#30
;;;569    {
;;;570      u32 tmp = 0x00;
;;;571    
;;;572      /* Check the parameters */
;;;573      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;574      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;575      
;;;576      tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
000262  0f12              LSRS     r2,r2,#28
000264  230f              MOVS     r3,#0xf
000266  4093              LSLS     r3,r3,r2
;;;577    
;;;578      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000268  f0210103          BIC      r1,r1,#3
00026c  f1014180          ADD      r1,r1,#0x40000000
000270  f5013180          ADD      r1,r1,#0x10000
000274  f8d1c008          LDR      r12,[r1,#8]
000278  ea2c0303          BIC      r3,r12,r3
00027c  608b              STR      r3,[r1,#8]
;;;579      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
00027e  688b              LDR      r3,[r1,#8]
000280  4090              LSLS     r0,r0,r2
000282  4318              ORRS     r0,r0,r3
000284  6088              STR      r0,[r1,#8]
;;;580    }
000286  4770              BX       lr
;;;581    
                          ENDP

                  |L1.648|
                          DCD      0x40011400
                  |L1.652|
                          DCD      0x40010000
                  |L1.656|
                          DCD      0x42200000
