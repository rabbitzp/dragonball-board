; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui__drawbitmap16bpp.o --depend=.\rvmdk\gui__drawbitmap16bpp.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui__drawbitmap16bpp.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI__DrawBitmap16bpp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GUI__DrawBitmap16bpp PROC
;;;32     */
;;;33     void GUI__DrawBitmap16bpp(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4682              MOV      r10,r0
000008  9e1a              LDR      r6,[sp,#0x68]
00000a  4614              MOV      r4,r2
00000c  4699              MOV      r9,r3
;;;34       const U16 * pData;
;;;35       int y, OldIndex, PrevIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
00000e  f04f0b00          MOV      r11,#0
;;;36       GUI_USE_PARA(pLogPal);
;;;37       OldIndex = LCD_GetColorIndex();
000012  f7fffffe          BL       LCD_GetColorIndex
000016  9007              STR      r0,[sp,#0x1c]
;;;38       PrevIndex = OldIndex;
000018  9f07              LDR      r7,[sp,#0x1c]
;;;39       pData = (const U16 *)pPixel;
;;;40       Mag = (xMag | yMag);
00001a  991d              LDR      r1,[sp,#0x74]
00001c  981c              LDR      r0,[sp,#0x70]
00001e  ea400801          ORR      r8,r0,r1
;;;41       BytesPerLine = xsize * 2;
000022  0065              LSLS     r5,r4,#1
;;;42       /* Check if bitmaps color format fits to the current color conversion */
;;;43       if (Mag == 1) {
000024  f1b80f01          CMP      r8,#1
000028  d10f              BNE      |L1.74|
;;;44         tLCDDEV_Index2Color * pfIndex2ColorCompare = NULL;
;;;45         #if GUI_SUPPORT_MEMDEV
;;;46         if (GUI_Context.hDevData) {
00002a  496c              LDR      r1,|L1.476|
00002c  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000030  b118              CBZ      r0,|L1.58|
;;;47           /* If a memory device is selected, use the color conversion routine of the memory device */
;;;48           GUI_MEMDEV * pDevData;
;;;49           pDevData = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000032  f7fffffe          BL       GUI_ALLOC_h2p
;;;50           pfIndex2ColorCompare = pDevData->pfIndex2Color;
000036  6a00              LDR      r0,[r0,#0x20]
;;;51         } else {
000038  e002              B        |L1.64|
                  |L1.58|
;;;52         #else
;;;53         {
;;;54         #endif
;;;55           /* If no memory device is selected, use the color conversion routine of the current layer */
;;;56           pfIndex2ColorCompare = LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer);
00003a  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
00003c  f7fffffe          BL       LCD_GetpfIndex2ColorEx
                  |L1.64|
;;;57         }
;;;58         /* Check if color conversion routine fits  */
;;;59         if (pfIndex2ColorCompare == pfIndex2Color) {
000040  991e              LDR      r1,[sp,#0x78]
000042  4288              CMP      r0,r1
000044  d101              BNE      |L1.74|
;;;60           UseDrawBitmap = 1;
000046  f04f0b01          MOV      r11,#1
                  |L1.74|
;;;61         }
;;;62       }
;;;63       if (UseDrawBitmap) {
00004a  f1bb0f00          CMP      r11,#0
00004e  d011              BEQ      |L1.116|
;;;64         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
000050  2300              MOVS     r3,#0
000052  9305              STR      r3,[sp,#0x14]
000054  2301              MOVS     r3,#1
000056  2010              MOVS     r0,#0x10
000058  9604              STR      r6,[sp,#0x10]
00005a  9002              STR      r0,[sp,#8]
00005c  9300              STR      r3,[sp,#0]
00005e  9301              STR      r3,[sp,#4]
000060  9503              STR      r5,[sp,#0xc]
000062  464b              MOV      r3,r9
000064  4622              MOV      r2,r4
000066  4650              MOV      r0,r10
000068  990e              LDR      r1,[sp,#0x38]
00006a  f7fffffe          BL       LCD_DrawBitmap
                  |L1.110|
;;;65       } else {
;;;66         if (Mag == 1) {
;;;67           /* Perform clipping */
;;;68           int x1, y1, Diff;
;;;69           y1 = y0 + ysize - 1;
;;;70           x1 = x0 + xsize - 1;
;;;71           /* Clip Y */
;;;72           if (y0 < GUI_Context.ClipRect.y0) {
;;;73             Diff = GUI_Context.ClipRect.y0 -y0;
;;;74             y0   = GUI_Context.ClipRect.y0;
;;;75             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;76               pData += (U32)Diff * (U32)BytesPerLine / 2;
;;;77             #else
;;;78               pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
;;;79             #endif
;;;80             ysize -= Diff;
;;;81           }
;;;82           Diff = y1 - GUI_Context.ClipRect.y1;
;;;83           if (Diff > 0) {
;;;84             ysize -= Diff;
;;;85           }
;;;86           if (ysize <=0) {
;;;87     		    return;
;;;88           }
;;;89           /* Clip right side */
;;;90           Diff = x1 - GUI_Context.ClipRect.x1;
;;;91           if (Diff > 0) {
;;;92             xsize -= Diff;
;;;93           }
;;;94           /* Clip left side */
;;;95           if (x0 < GUI_Context.ClipRect.x0) {
;;;96             Diff = GUI_Context.ClipRect.x0-x0;
;;;97     			  xsize -= Diff;
;;;98             pData += Diff; 
;;;99             x0 += Diff; 
;;;100          }
;;;101          if (xsize <=0) {
;;;102    		    return;
;;;103          }
;;;104          /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;105          for (y = 0; y < ysize; y++) {
;;;106            int x;
;;;107            const U16 * p = pData;
;;;108            for (x = 0; x < xsize; x++) {
;;;109              U16 Index;
;;;110              Index = *p++;
;;;111              if (Index != PrevIndex) {
;;;112                LCD_SetColor(pfIndex2Color(Index));
;;;113                PrevIndex = Index;
;;;114              }
;;;115              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;116            }
;;;117            pData += BytesPerLine / 2;
;;;118          }
;;;119        } else {
;;;120          /* Magnified output using LCD_FillRect() */
;;;121          int x,y;
;;;122          int yi;
;;;123          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
;;;124            int yMax;
;;;125            yMax = y + yMag - 1;
;;;126            /* Draw if within clip area */
;;;127            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;128              int xi;
;;;129              const U16 GUI_UNI_PTR * p = pData;
;;;130              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;131                U16 Index;
;;;132                Index = *p++;
;;;133                if (Index != PrevIndex) {
;;;134                  LCD_SetColor(pfIndex2Color(Index));
;;;135                  PrevIndex = Index;
;;;136                }
;;;137                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;138              }
;;;139            }
;;;140            pData += BytesPerLine / 2;
;;;141          }
;;;142        }
;;;143        GUI_SetColorIndex(OldIndex);
;;;144      }
;;;145    }
00006e  b011              ADD      sp,sp,#0x44
000070  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.116|
000074  f1b80f01          CMP      r8,#1                 ;66
000078  d04d              BEQ      |L1.278|
00007a  980e              LDR      r0,[sp,#0x38]         ;123
00007c  9005              STR      r0,[sp,#0x14]         ;123
00007e  2000              MOVS     r0,#0                 ;123
000080  9004              STR      r0,[sp,#0x10]         ;123
000082  f1b90f00          CMP      r9,#0                 ;123
000086  dd40              BLE      |L1.266|
000088  eb0570d5          ADD      r0,r5,r5,LSR #31      ;117
00008c  f0200001          BIC      r0,r0,#1              ;117
000090  900a              STR      r0,[sp,#0x28]         ;117
                  |L1.146|
000092  991d              LDR      r1,[sp,#0x74]         ;125
000094  9805              LDR      r0,[sp,#0x14]         ;125
000096  4408              ADD      r0,r0,r1              ;125
000098  1e41              SUBS     r1,r0,#1              ;125
00009a  9103              STR      r1,[sp,#0xc]          ;125
00009c  9009              STR      r0,[sp,#0x24]         ;125
00009e  484f              LDR      r0,|L1.476|
0000a0  9903              LDR      r1,[sp,#0xc]          ;127
0000a2  f9b0200a          LDRSH    r2,[r0,#0xa]          ;127  ; GUI_Context
0000a6  428a              CMP      r2,r1                 ;127
0000a8  dc25              BGT      |L1.246|
0000aa  f9b0100e          LDRSH    r1,[r0,#0xe]          ;127  ; GUI_Context
0000ae  9805              LDR      r0,[sp,#0x14]         ;127
0000b0  4281              CMP      r1,r0                 ;127
0000b2  db20              BLT      |L1.246|
0000b4  4635              MOV      r5,r6                 ;129
0000b6  f8cda018          STR      r10,[sp,#0x18]        ;130
0000ba  f04f0800          MOV      r8,#0                 ;130
0000be  2c00              CMP      r4,#0                 ;130
0000c0  dd19              BLE      |L1.246|
                  |L1.194|
0000c2  f835bb02          LDRH     r11,[r5],#2           ;132
0000c6  45bb              CMP      r11,r7                ;133
0000c8  d005              BEQ      |L1.214|
0000ca  991e              LDR      r1,[sp,#0x78]         ;134
0000cc  4658              MOV      r0,r11                ;134
0000ce  4788              BLX      r1                    ;134
0000d0  f7fffffe          BL       LCD_SetColor
0000d4  465f              MOV      r7,r11                ;135
                  |L1.214|
0000d6  991c              LDR      r1,[sp,#0x70]         ;137
0000d8  9806              LDR      r0,[sp,#0x18]         ;137
0000da  9b03              LDR      r3,[sp,#0xc]          ;137
0000dc  eb000b01          ADD      r11,r0,r1             ;137
0000e0  f1ab0201          SUB      r2,r11,#1             ;137
0000e4  9905              LDR      r1,[sp,#0x14]         ;137
0000e6  f7fffffe          BL       LCD_FillRect
0000ea  f1080801          ADD      r8,r8,#1              ;130
0000ee  f8cdb018          STR      r11,[sp,#0x18]        ;130
0000f2  45a0              CMP      r8,r4                 ;130
0000f4  dbe5              BLT      |L1.194|
                  |L1.246|
0000f6  980a              LDR      r0,[sp,#0x28]         ;140
0000f8  4406              ADD      r6,r6,r0              ;140
0000fa  9804              LDR      r0,[sp,#0x10]         ;123
0000fc  1c40              ADDS     r0,r0,#1              ;123
0000fe  9004              STR      r0,[sp,#0x10]         ;123
000100  9809              LDR      r0,[sp,#0x24]         ;123
000102  9005              STR      r0,[sp,#0x14]         ;123
000104  9804              LDR      r0,[sp,#0x10]         ;123
000106  4548              CMP      r0,r9                 ;123
000108  dbc3              BLT      |L1.146|
                  |L1.266|
00010a  9807              LDR      r0,[sp,#0x1c]         ;143
00010c  b011              ADD      sp,sp,#0x44           ;143
00010e  e8bd4ff0          POP      {r4-r11,lr}           ;143
000112  f7ffbffe          B.W      GUI_SetColorIndex
                  |L1.278|
000116  980e              LDR      r0,[sp,#0x38]         ;69
000118  4448              ADD      r0,r0,r9              ;69
00011a  f1a00c01          SUB      r12,r0,#1             ;69
00011e  eb0a0004          ADD      r0,r10,r4             ;70
000122  1e43              SUBS     r3,r0,#1              ;70
000124  4a2d              LDR      r2,|L1.476|
000126  990e              LDR      r1,[sp,#0x38]         ;72
000128  f9b2000a          LDRSH    r0,[r2,#0xa]          ;72  ; GUI_Context
00012c  4288              CMP      r0,r1                 ;72
00012e  dd09              BLE      |L1.324|
000130  990e              LDR      r1,[sp,#0x38]         ;73
000132  1a41              SUBS     r1,r0,r1              ;73
000134  900e              STR      r0,[sp,#0x38]         ;74
000136  fb01f005          MUL      r0,r1,r5              ;78
00013a  f0200001          BIC      r0,r0,#1              ;78
00013e  4406              ADD      r6,r6,r0              ;78
000140  eba90901          SUB      r9,r9,r1              ;80
                  |L1.324|
000144  f9b2000e          LDRSH    r0,[r2,#0xe]          ;82  ; GUI_Context
000148  ebac0000          SUB      r0,r12,r0             ;82
00014c  2800              CMP      r0,#0                 ;83
00014e  dd01              BLE      |L1.340|
000150  eba90900          SUB      r9,r9,r0              ;84
                  |L1.340|
000154  f1b90f00          CMP      r9,#0                 ;86
000158  dd89              BLE      |L1.110|
00015a  f9b2000c          LDRSH    r0,[r2,#0xc]          ;90  ; GUI_Context
00015e  1a18              SUBS     r0,r3,r0              ;90
000160  2800              CMP      r0,#0                 ;91
000162  dd00              BLE      |L1.358|
000164  1a24              SUBS     r4,r4,r0              ;92
                  |L1.358|
000166  f9b20008          LDRSH    r0,[r2,#8]            ;95  ; GUI_Context
00016a  4550              CMP      r0,r10                ;95
00016c  dd05              BLE      |L1.378|
00016e  eba0000a          SUB      r0,r0,r10             ;96
000172  1a24              SUBS     r4,r4,r0              ;97
000174  eb060640          ADD      r6,r6,r0,LSL #1       ;98
000178  4482              ADD      r10,r10,r0            ;99
                  |L1.378|
00017a  2c00              CMP      r4,#0                 ;101
00017c  f77faf77          BLE      |L1.110|
000180  2000              MOVS     r0,#0                 ;105
000182  9008              STR      r0,[sp,#0x20]         ;105
000184  eb0570d5          ADD      r0,r5,r5,LSR #31      ;117
000188  f0200001          BIC      r0,r0,#1              ;117
00018c  900c              STR      r0,[sp,#0x30]         ;117
                  |L1.398|
00018e  46b0              MOV      r8,r6                 ;107
000190  2500              MOVS     r5,#0                 ;108
000192  2c00              CMP      r4,#0                 ;108
000194  dd19              BLE      |L1.458|
000196  9908              LDR      r1,[sp,#0x20]         ;115
000198  980e              LDR      r0,[sp,#0x38]         ;115
00019a  4408              ADD      r0,r0,r1              ;115
00019c  900b              STR      r0,[sp,#0x2c]         ;115
                  |L1.414|
00019e  f838bb02          LDRH     r11,[r8],#2           ;110
0001a2  45bb              CMP      r11,r7                ;111
0001a4  d005              BEQ      |L1.434|
0001a6  991e              LDR      r1,[sp,#0x78]         ;112
0001a8  4658              MOV      r0,r11                ;112
0001aa  4788              BLX      r1                    ;112
0001ac  f7fffffe          BL       LCD_SetColor
0001b0  465f              MOV      r7,r11                ;113
                  |L1.434|
0001b2  480a              LDR      r0,|L1.476|
0001b4  eb050c0a          ADD      r12,r5,r10            ;115
0001b8  990b              LDR      r1,[sp,#0x2c]         ;115
0001ba  8842              LDRH     r2,[r0,#2]            ;115  ; GUI_Context
0001bc  6cc0              LDR      r0,[r0,#0x4c]         ;115  ; GUI_Context
0001be  6a43              LDR      r3,[r0,#0x24]         ;115
0001c0  4660              MOV      r0,r12                ;115
0001c2  4798              BLX      r3                    ;115
0001c4  1c6d              ADDS     r5,r5,#1              ;108
0001c6  42a5              CMP      r5,r4                 ;108
0001c8  dbe9              BLT      |L1.414|
                  |L1.458|
0001ca  980c              LDR      r0,[sp,#0x30]         ;117
0001cc  4406              ADD      r6,r6,r0              ;117
0001ce  9808              LDR      r0,[sp,#0x20]         ;105
0001d0  1c40              ADDS     r0,r0,#1              ;105
0001d2  9008              STR      r0,[sp,#0x20]         ;105
0001d4  9808              LDR      r0,[sp,#0x20]         ;105
0001d6  4548              CMP      r0,r9                 ;105
0001d8  dbd9              BLT      |L1.398|
0001da  e796              B        |L1.266|
;;;146    
                          ENDP

                  |L1.476|
                          DCD      GUI_Context
