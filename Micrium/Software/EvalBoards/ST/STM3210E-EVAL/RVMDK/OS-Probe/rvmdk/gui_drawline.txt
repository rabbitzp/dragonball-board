; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_drawline.o --depend=.\rvmdk\gui_drawline.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_drawline.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_DrawLine.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SwapInt PROC
;;;42     */
;;;43     static void _SwapInt(int* pa, int* pb) {
000000  6802              LDR      r2,[r0,#0]
;;;44       int t;
;;;45       t = *pa;
;;;46       *pa = *pb;
000002  680b              LDR      r3,[r1,#0]
000004  6003              STR      r3,[r0,#0]
;;;47       *pb = t;
000006  600a              STR      r2,[r1,#0]
;;;48     }
000008  4770              BX       lr
;;;49     
                          ENDP

                  Abs PROC
;;;53     */
;;;54     static int Abs(int v) {
00000a  2800              CMP      r0,#0
;;;55       return ABS(v);
00000c  dc00              BGT      |L1.16|
00000e  4240              RSBS     r0,r0,#0
                  |L1.16|
;;;56     }
000010  4770              BX       lr
;;;57     
                          ENDP

                  GUI_sin PROC
;;;105    */
;;;106    int GUI_sin(int angle) {
000012  2200              MOVS     r2,#0
;;;107      char IsNeg =0;
;;;108      int i;
;;;109    	U16 Faktor;
;;;110      U32 t;
;;;111      angle &= ((1<<12)-1);  /* reduce to 0-360 degrees */
000014  f3c0000b          UBFX     r0,r0,#0,#12
;;;112      if (angle> 2* GUI_90DEG) {
000018  f5b06f00          CMP      r0,#0x800
00001c  dd02              BLE      |L1.36|
;;;113        angle -= 2* GUI_90DEG;
00001e  f5a06000          SUB      r0,r0,#0x800
;;;114        IsNeg =1;
000022  2201              MOVS     r2,#1
                  |L1.36|
;;;115      }
;;;116      if (angle> GUI_90DEG) {  /* between 90-180 */
000024  f5b06f80          CMP      r0,#0x400
000028  dd01              BLE      |L1.46|
;;;117        angle = 2*GUI_90DEG-angle;   /* use sine symetry */
00002a  f5c06000          RSB      r0,r0,#0x800
                  |L1.46|
;;;118      }
;;;119      /* Now angle is reduced to 0° <= <= 90° */
;;;120      i = angle>>6;
00002e  1183              ASRS     r3,r0,#6
;;;121      {
;;;122        Faktor = (U16)((1<<6)-(angle&((1<<6)-1)));
000030  f000003f          AND      r0,r0,#0x3f
000034  f1c00040          RSB      r0,r0,#0x40
;;;123        t = aSin[i]*(U32)Faktor;
000038  f8dfc418          LDR      r12,|L1.1108|
00003c  f83c1013          LDRH     r1,[r12,r3,LSL #1]
000040  4341              MULS     r1,r0,r1
;;;124        if (Faktor !=(1<<6)) {
000042  2840              CMP      r0,#0x40
000044  d006              BEQ      |L1.84|
;;;125          t += aSin[i+1]*((1<<6)-Faktor);
000046  1c5b              ADDS     r3,r3,#1
000048  f1c00040          RSB      r0,r0,#0x40
00004c  f83c3013          LDRH     r3,[r12,r3,LSL #1]
000050  fb031100          MLA      r1,r3,r0,r1
                  |L1.84|
;;;126        }
;;;127    	}
;;;128      t = (t+(1<<5)) >>6;   /* divide,incl. rounding */
000054  f1010020          ADD      r0,r1,#0x20
000058  0980              LSRS     r0,r0,#6
;;;129      return (IsNeg) ? 0-t : t;
00005a  2a00              CMP      r2,#0
00005c  d000              BEQ      |L1.96|
00005e  4240              RSBS     r0,r0,#0
                  |L1.96|
;;;130    }
000060  4770              BX       lr
;;;131    
                          ENDP

                  GUI_cos PROC
;;;135    */
;;;136    int GUI_cos(int angle) {
000062  f5006080          ADD      r0,r0,#0x400
;;;137      return GUI_sin(angle+GUI_90DEG);
000066  e7fe              B        GUI_sin
;;;138    }
;;;139    
                          ENDP

                  _atan0_45 PROC
;;;171    */
;;;172    static int _atan0_45(int q) {
000068  1080              ASRS     r0,r0,#2
;;;173      int r;
;;;174      int i, Faktor;
;;;175      /* Now angle is reduced to 0° <= <= 90° ==>  0 <= <= 256*/
;;;176      q >>=2;    /* make sure we do not exceed 16 bits in calculations */
;;;177      i = q>>4;
00006a  1102              ASRS     r2,r0,#4
;;;178      Faktor = (1<<4)-(q&((1<<4)-1));
00006c  f000000f          AND      r0,r0,#0xf
000070  f1c00010          RSB      r0,r0,#0x10
;;;179      r = aTan[i]*Faktor;
000074  4bf8              LDR      r3,|L1.1112|
000076  f9331012          LDRSH    r1,[r3,r2,LSL #1]
00007a  4341              MULS     r1,r0,r1
;;;180      if (Faktor !=(1<<4)) {
00007c  2810              CMP      r0,#0x10
00007e  d006              BEQ      |L1.142|
;;;181        r += aTan[i+1]*((1<<4)-Faktor);
000080  1c52              ADDS     r2,r2,#1
000082  f1c00010          RSB      r0,r0,#0x10
000086  f9332012          LDRSH    r2,[r3,r2,LSL #1]
00008a  fb021100          MLA      r1,r2,r0,r1
                  |L1.142|
;;;182      }
;;;183      r = (r+(1<<3))/(1<<4);   /* divide  incl. rounding */
00008e  f1010008          ADD      r0,r1,#8
000092  17c1              ASRS     r1,r0,#31
000094  eb007011          ADD      r0,r0,r1,LSR #28
000098  1100              ASRS     r0,r0,#4
;;;184      return r;
;;;185    }
00009a  4770              BX       lr
;;;186    
                          ENDP

                  _atan2 PROC
;;;190    */
;;;191    static int _atan2(I32 x, I32 y) {
00009c  b510              PUSH     {r4,lr}
;;;192      U8 q =0;
00009e  2400              MOVS     r4,#0
;;;193      int angle;
;;;194    /* first make sure we are in angle between 0 and 45° */
;;;195      if (x<0) {
0000a0  2800              CMP      r0,#0
0000a2  da01              BGE      |L1.168|
;;;196        q=1;
0000a4  2401              MOVS     r4,#1
;;;197        x=-x;
0000a6  4240              RSBS     r0,r0,#0
                  |L1.168|
;;;198      }
;;;199      if (y<0) {
0000a8  2900              CMP      r1,#0
0000aa  da02              BGE      |L1.178|
;;;200        q |= (1<<1);
0000ac  f0440402          ORR      r4,r4,#2
;;;201        y=-y;
0000b0  4249              RSBS     r1,r1,#0
                  |L1.178|
;;;202      }
;;;203      if (y>x) {
0000b2  4281              CMP      r1,r0
0000b4  dd04              BLE      |L1.192|
;;;204        int t = y;
0000b6  460a              MOV      r2,r1
;;;205        y=x;
0000b8  4601              MOV      r1,r0
;;;206        x=t;
0000ba  4610              MOV      r0,r2
;;;207        q |= (1<<2);
0000bc  f0440404          ORR      r4,r4,#4
                  |L1.192|
;;;208      }
;;;209      y <<=10;
0000c0  0289              LSLS     r1,r1,#10
;;;210      y += (x/2);
0000c2  eb0072d0          ADD      r2,r0,r0,LSR #31
0000c6  eb010162          ADD      r1,r1,r2,ASR #1
;;;211      y /= x;
0000ca  fb91f0f0          SDIV     r0,r1,r0
;;;212      angle = _atan0_45(y);
0000ce  f7fffffe          BL       _atan0_45
;;;213      if (q&(1<<2)) { /* y/x reverse ? */
0000d2  f0140f04          TST      r4,#4
0000d6  d001              BEQ      |L1.220|
;;;214        angle = GUI_90DEG-angle;
0000d8  f5c06080          RSB      r0,r0,#0x400
                  |L1.220|
;;;215      }
;;;216      if (q&1) {  /* xreverse ? */
0000dc  f0140f01          TST      r4,#1
0000e0  d001              BEQ      |L1.230|
;;;217        angle = GUI_180DEG-angle;
0000e2  f5c06000          RSB      r0,r0,#0x800
                  |L1.230|
;;;218      }
;;;219      if (q&(1<<1)) { /* y-reverse ? */
0000e6  f0140f02          TST      r4,#2
0000ea  d001              BEQ      |L1.240|
;;;220        angle = GUI_360DEG-angle;
0000ec  f5c05080          RSB      r0,r0,#0x1000
                  |L1.240|
;;;221      }
;;;222      return angle;
;;;223    }
0000f0  bd10              POP      {r4,pc}
;;;224    
                          ENDP

                  _SetLineColor PROC
;;;228    */
;;;229    static int _SetLineColor(int i) {
0000f2  49da              LDR      r1,|L1.1116|
;;;230      switch (GUI_Context.LineStyle) {
0000f4  7e89              LDRB     r1,[r1,#0x1a]  ; GUI_Context
0000f6  2901              CMP      r1,#1
0000f8  d007              BEQ      |L1.266|
0000fa  2902              CMP      r1,#2
0000fc  d012              BEQ      |L1.292|
0000fe  2903              CMP      r1,#3
000100  d01c              BEQ      |L1.316|
000102  2904              CMP      r1,#4
000104  d030              BEQ      |L1.360|
;;;231      case GUI_LS_DASH:
;;;232        i = (i + 6) % 16;
;;;233        return (i < 12);
;;;234      case GUI_LS_DOT:
;;;235        i %= 4;
;;;236        return (i < 2);
;;;237      case GUI_LS_DASHDOT:
;;;238        i %= 20;
;;;239        if (i < 12) {
;;;240          return 1;
;;;241        } else if ((i >= 16) && (i < 18)) {
;;;242          return 1;
;;;243        }
;;;244        return 0;
;;;245      case GUI_LS_DASHDOTDOT:
;;;246        i %= 24;
;;;247        if (i < 12) {
;;;248          return 1;
;;;249        } else if ((i >= 16) && (i < 18)) {
;;;250          return 1;
;;;251        } else if ((i >= 20) && (i < 22)) {
;;;252          return 1;
;;;253        } else {
;;;254          return 0;
;;;255        }
;;;256      }
;;;257      return 0;
000106  2000              MOVS     r0,#0
;;;258    }
000108  4770              BX       lr
                  |L1.266|
00010a  1d80              ADDS     r0,r0,#6              ;232
00010c  17c1              ASRS     r1,r0,#31             ;232
00010e  eb007111          ADD      r1,r0,r1,LSR #28      ;232
000112  f021010f          BIC      r1,r1,#0xf            ;232
000116  1a40              SUBS     r0,r0,r1              ;232
000118  280c              CMP      r0,#0xc               ;233
00011a  da01              BGE      |L1.288|
00011c  2001              MOVS     r0,#1                 ;233
00011e  4770              BX       lr
                  |L1.288|
000120  2000              MOVS     r0,#0                 ;233
000122  4770              BX       lr
                  |L1.292|
000124  17c1              ASRS     r1,r0,#31             ;235
000126  eb007191          ADD      r1,r0,r1,LSR #30      ;235
00012a  f0210103          BIC      r1,r1,#3              ;235
00012e  1a40              SUBS     r0,r0,r1              ;235
000130  2802              CMP      r0,#2                 ;236
000132  da01              BGE      |L1.312|
000134  2001              MOVS     r0,#1                 ;236
000136  4770              BX       lr
                  |L1.312|
000138  2000              MOVS     r0,#0                 ;236
00013a  4770              BX       lr
                  |L1.316|
00013c  49c8              LDR      r1,|L1.1120|
00013e  fb812100          SMULL    r2,r1,r1,r0           ;238
000142  10ca              ASRS     r2,r1,#3              ;238
000144  eba271e1          SUB      r1,r2,r1,ASR #31      ;238
000148  4249              RSBS     r1,r1,#0              ;238
00014a  eb010181          ADD      r1,r1,r1,LSL #2       ;238
00014e  eb000081          ADD      r0,r0,r1,LSL #2       ;238
000152  280c              CMP      r0,#0xc               ;239
000154  da01              BGE      |L1.346|
000156  2001              MOVS     r0,#1                 ;240
000158  4770              BX       lr
                  |L1.346|
00015a  3810              SUBS     r0,r0,#0x10           ;241
00015c  2802              CMP      r0,#2                 ;241
00015e  d201              BCS      |L1.356|
000160  2001              MOVS     r0,#1                 ;242
000162  4770              BX       lr
                  |L1.356|
000164  2000              MOVS     r0,#0                 ;244
000166  4770              BX       lr
                  |L1.360|
000168  49be              LDR      r1,|L1.1124|
00016a  fb812100          SMULL    r2,r1,r1,r0           ;246
00016e  108a              ASRS     r2,r1,#2              ;246
000170  eba271e1          SUB      r1,r2,r1,ASR #31      ;246
000174  eba10181          SUB      r1,r1,r1,LSL #2       ;246
000178  eb0000c1          ADD      r0,r0,r1,LSL #3       ;246
00017c  280c              CMP      r0,#0xc               ;247
00017e  da01              BGE      |L1.388|
000180  2001              MOVS     r0,#1                 ;248
000182  4770              BX       lr
                  |L1.388|
000184  f1a00110          SUB      r1,r0,#0x10           ;249
000188  2902              CMP      r1,#2                 ;249
00018a  d201              BCS      |L1.400|
00018c  2001              MOVS     r0,#1                 ;250
00018e  4770              BX       lr
                  |L1.400|
000190  3814              SUBS     r0,r0,#0x14           ;251
000192  2802              CMP      r0,#2                 ;251
000194  d201              BCS      |L1.410|
000196  2001              MOVS     r0,#1                 ;252
000198  4770              BX       lr
                  |L1.410|
00019a  2000              MOVS     r0,#0                 ;254
00019c  4770              BX       lr
;;;259    
                          ENDP

                  _CalcOrto PROC
;;;263    */
;;;264    static void _CalcOrto(int xDiff, int yDiff, I32 r, int*px, int*py) {
00019e  e92d41f0          PUSH     {r4-r8,lr}
0001a2  4615              MOV      r5,r2
0001a4  461f              MOV      r7,r3
0001a6  9e06              LDR      r6,[sp,#0x18]
;;;265      I32 x,y;
;;;266      int Angle = _atan2(xDiff, yDiff);
0001a8  f7fffffe          BL       _atan2
;;;267      Angle+= GUI_90DEG;
0001ac  f5006880          ADD      r8,r0,#0x400
;;;268      x = ( r*(I32)GUI_cos(Angle));
0001b0  4640              MOV      r0,r8
0001b2  f7fffffe          BL       GUI_cos
0001b6  fb00f405          MUL      r4,r0,r5
;;;269      y = ( r*(I32)GUI_sin(Angle));
0001ba  4640              MOV      r0,r8
0001bc  f7fffffe          BL       GUI_sin
0001c0  4368              MULS     r0,r5,r0
;;;270      x = (x<0) ? -((-x+512)>>10) : ((x+512)>>10);
0001c2  2c00              CMP      r4,#0
0001c4  da04              BGE      |L1.464|
0001c6  f5c47100          RSB      r1,r4,#0x200
0001ca  1289              ASRS     r1,r1,#10
0001cc  4249              RSBS     r1,r1,#0
0001ce  e002              B        |L1.470|
                  |L1.464|
0001d0  f5047100          ADD      r1,r4,#0x200
0001d4  1289              ASRS     r1,r1,#10
                  |L1.470|
;;;271      y = (y<0) ? -((-y+512)>>10) : ((y+512)>>10);
0001d6  2800              CMP      r0,#0
0001d8  da04              BGE      |L1.484|
0001da  f5c07000          RSB      r0,r0,#0x200
0001de  1280              ASRS     r0,r0,#10
0001e0  4240              RSBS     r0,r0,#0
0001e2  e002              B        |L1.490|
                  |L1.484|
0001e4  f5007000          ADD      r0,r0,#0x200
0001e8  1280              ASRS     r0,r0,#10
                  |L1.490|
;;;272      *px = x;
0001ea  6039              STR      r1,[r7,#0]
;;;273      *py = y;
0001ec  6030              STR      r0,[r6,#0]
;;;274    }
0001ee  e8bd81f0          POP      {r4-r8,pc}
;;;275    
                          ENDP

                  _DrawLineEnd PROC
;;;279    */
;;;280    static void _DrawLineEnd(int x0, int y0) {
0001f2  4a9a              LDR      r2,|L1.1116|
;;;281      switch (GUI_Context.PenShape) {
0001f4  7e52              LDRB     r2,[r2,#0x19]  ; GUI_Context
0001f6  2a00              CMP      r2,#0
0001f8  d101              BNE      |L1.510|
;;;282      case GUI_PS_ROUND:
;;;283        GL_DrawPoint(x0,y0);
0001fa  f7ffbffe          B.W      GL_DrawPoint
                  |L1.510|
;;;284        break;
;;;285      case GUI_PS_FLAT:
;;;286        break;
;;;287      }
;;;288    }
0001fe  4770              BX       lr
;;;289    
                          ENDP

                  GL_DrawLine1Ex PROC
;;;299    */
;;;300    void GL_DrawLine1Ex(int x0, int y0, int x1, int y1, unsigned * pPixelCnt) {
000200  e92d47ff          PUSH     {r0-r10,lr}
000204  b082              SUB      sp,sp,#8
000206  9d0e              LDR      r5,[sp,#0x38]
;;;301      int xdiff = x1 - x0;
000208  9a02              LDR      r2,[sp,#8]
00020a  9804              LDR      r0,[sp,#0x10]
00020c  1a80              SUBS     r0,r0,r2
00020e  9001              STR      r0,[sp,#4]
;;;302      int ydiff = y1 - y0;
000210  9b05              LDR      r3,[sp,#0x14]
000212  9903              LDR      r1,[sp,#0xc]
000214  1a5b              SUBS     r3,r3,r1
000216  9300              STR      r3,[sp,#0]
;;;303      int xdiffby2;
;;;304      int i;
;;;305      char XYSwapped = 0;
000218  2700              MOVS     r7,#0
;;;306      int Dir;
;;;307      int PixelCnt = * pPixelCnt;
00021a  682c              LDR      r4,[r5,#0]
;;;308    /* check if no line */
;;;309      if (!(xdiff | ydiff)) {
00021c  4303              ORRS     r3,r3,r0
00021e  d02a              BEQ      |L1.630|
;;;310        GL_DrawPoint(x0, y0);
;;;311        return;
;;;312      }
;;;313    /* check if we swap x and y for calculation */
;;;314      if (Abs(xdiff) < Abs(ydiff)) {
000220  f7fffffe          BL       Abs
000224  4606              MOV      r6,r0
000226  9800              LDR      r0,[sp,#0]
000228  f7fffffe          BL       Abs
00022c  4286              CMP      r6,r0
00022e  da0c              BGE      |L1.586|
;;;315        _SwapInt(&xdiff, &ydiff);
000230  4669              MOV      r1,sp
000232  a801              ADD      r0,sp,#4
000234  f7fffffe          BL       _SwapInt
;;;316        _SwapInt(&x0, &y0);
000238  a903              ADD      r1,sp,#0xc
00023a  a802              ADD      r0,sp,#8
00023c  f7fffffe          BL       _SwapInt
;;;317        _SwapInt(&x1, &y1);
000240  a905              ADD      r1,sp,#0x14
000242  a804              ADD      r0,sp,#0x10
000244  f7fffffe          BL       _SwapInt
;;;318        XYSwapped = 1;
000248  2701              MOVS     r7,#1
                  |L1.586|
;;;319      }
;;;320    /* make sure line direction is positive */
;;;321      if (xdiff != Abs(xdiff)) {
00024a  9801              LDR      r0,[sp,#4]
00024c  f7fffffe          BL       Abs
000250  9901              LDR      r1,[sp,#4]
000252  4288              CMP      r0,r1
000254  d015              BEQ      |L1.642|
;;;322        xdiff = -xdiff;
000256  4248              RSBS     r0,r1,#0
000258  9001              STR      r0,[sp,#4]
;;;323        ydiff = -ydiff;
00025a  9800              LDR      r0,[sp,#0]
00025c  4240              RSBS     r0,r0,#0
00025e  9000              STR      r0,[sp,#0]
;;;324        _SwapInt(&x0, &x1);
000260  a904              ADD      r1,sp,#0x10
000262  a802              ADD      r0,sp,#8
000264  f7fffffe          BL       _SwapInt
;;;325        _SwapInt(&y0, &y1);
000268  a905              ADD      r1,sp,#0x14
00026a  a803              ADD      r0,sp,#0xc
00026c  f7fffffe          BL       _SwapInt
;;;326        Dir = -1;
000270  f04f36ff          MOV      r6,#0xffffffff
000274  e006              B        |L1.644|
                  |L1.630|
000276  4610              MOV      r0,r2                 ;310
000278  f7fffffe          BL       GL_DrawPoint
;;;327      } else {
;;;328        Dir = 1;
;;;329      }
;;;330    /* Draw horizontal or vertical line if possible */
;;;331      if (ydiff == 0) {
;;;332        if (XYSwapped) {
;;;333          if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;334            LCD_DrawVLine(y0, x0, x1);
;;;335          } else {
;;;336            for (i = 0; i <= xdiff; i++) {
;;;337              if (!_SetLineColor(PixelCnt++)) {
;;;338                LCD_HL_DrawPixel(y0, x0 + i);
;;;339              }
;;;340            }
;;;341            *pPixelCnt = PixelCnt - 1;
;;;342          }
;;;343        } else {
;;;344          if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;345            LCD_HL_DrawHLine(x0, y0, x1);
;;;346          } else {
;;;347            for (i = 0; i <= xdiff; i++) {
;;;348              if (!_SetLineColor(PixelCnt++)) {
;;;349                LCD_HL_DrawPixel(x0 + i, y0);
;;;350              }
;;;351            }
;;;352            *pPixelCnt = PixelCnt - 1;
;;;353          }
;;;354        }
;;;355        return;
;;;356      }
;;;357      xdiffby2 = xdiff / 2;
;;;358      if (ydiff < 0) {
;;;359        xdiffby2 = -xdiffby2;
;;;360      }
;;;361    /* Draw pixel by pixel solid*/
;;;362      if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;363        for (i = 0; i <= xdiff; i++) {
;;;364          I32 l = ((I32)ydiff) * i + xdiffby2;
;;;365          int y = (ABS(l) < 32767) ? (y0 + ((int)l) / xdiff) : (y0 + l / xdiff);
;;;366          if (!XYSwapped) {
;;;367            LCD_HL_DrawPixel(x0+ i , y);
;;;368          } else {
;;;369            LCD_HL_DrawPixel(y, x0 + i);
;;;370          }
;;;371        }
;;;372    /* Draw pixel by pixel with fill style */
;;;373      } else {
;;;374        if (Dir < 0) {
;;;375          *pPixelCnt += xdiff;
;;;376        }
;;;377        for (i = 0; i <= xdiff; i++) {
;;;378          long l = ((long)ydiff) * i + xdiffby2;
;;;379          int y = (ABS(l) < 32767) ? (y0 + ((int)l) / xdiff) : (y0 + l / xdiff);
;;;380          if (!_SetLineColor((*pPixelCnt) += Dir)) {
;;;381            if (!XYSwapped) {
;;;382              LCD_HL_DrawPixel(x0 + i, y);
;;;383            } else {
;;;384              LCD_HL_DrawPixel(y, x0 + i);
;;;385            }
;;;386          }
;;;387        }
;;;388        if (Dir < 0) {
;;;389          *pPixelCnt += xdiff;
;;;390        }
;;;391        *pPixelCnt -= Dir;
;;;392      }
;;;393    }
00027c  b006              ADD      sp,sp,#0x18
00027e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.642|
000282  2601              MOVS     r6,#1                 ;328
                  |L1.644|
000284  9800              LDR      r0,[sp,#0]            ;331
000286  f8df91d4          LDR      r9,|L1.1116|
00028a  2800              CMP      r0,#0                 ;331
00028c  d022              BEQ      |L1.724|
00028e  9801              LDR      r0,[sp,#4]            ;357
000290  eb0071d0          ADD      r1,r0,r0,LSR #31      ;357
000294  ea4f0861          ASR      r8,r1,#1              ;357
000298  da01              BGE      |L1.670|
00029a  f1c80800          RSB      r8,r8,#0              ;359
                  |L1.670|
00029e  f899101a          LDRB     r1,[r9,#0x1a]         ;362  ; GUI_Context
0002a2  b3e9              CBZ      r1,|L1.800|
0002a4  2e00              CMP      r6,#0                 ;374
0002a6  da02              BGE      |L1.686|
0002a8  6829              LDR      r1,[r5,#0]            ;375
0002aa  4401              ADD      r1,r1,r0              ;375
0002ac  6029              STR      r1,[r5,#0]            ;375
                  |L1.686|
0002ae  2400              MOVS     r4,#0                 ;377
0002b0  2800              CMP      r0,#0                 ;377
0002b2  db72              BLT      |L1.922|
                  |L1.692|
0002b4  9800              LDR      r0,[sp,#0]            ;378
0002b6  fb008004          MLA      r0,r0,r4,r8           ;378
0002ba  9901              LDR      r1,[sp,#4]            ;379
0002bc  fb90f0f1          SDIV     r0,r0,r1              ;379
0002c0  9903              LDR      r1,[sp,#0xc]          ;379
0002c2  eb000a01          ADD      r10,r0,r1             ;379
0002c6  6828              LDR      r0,[r5,#0]            ;380
0002c8  4430              ADD      r0,r0,r6              ;380
0002ca  6028              STR      r0,[r5,#0]            ;380
0002cc  f7fffffe          BL       _SetLineColor
0002d0  b338              CBZ      r0,|L1.802|
0002d2  e073              B        |L1.956|
                  |L1.724|
0002d4  b337              CBZ      r7,|L1.804|
0002d6  f899001a          LDRB     r0,[r9,#0x1a]         ;333  ; GUI_Context
0002da  b148              CBZ      r0,|L1.752|
0002dc  2600              MOVS     r6,#0                 ;336
0002de  9801              LDR      r0,[sp,#4]            ;336
0002e0  2800              CMP      r0,#0                 ;336
0002e2  db18              BLT      |L1.790|
                  |L1.740|
0002e4  4620              MOV      r0,r4                 ;337
0002e6  1c64              ADDS     r4,r4,#1              ;337
0002e8  f7fffffe          BL       _SetLineColor
0002ec  b140              CBZ      r0,|L1.768|
0002ee  e00e              B        |L1.782|
                  |L1.752|
0002f0  9a04              LDR      r2,[sp,#0x10]         ;334
0002f2  9902              LDR      r1,[sp,#8]            ;334
0002f4  9803              LDR      r0,[sp,#0xc]          ;334
0002f6  f7fffffe          BL       LCD_DrawVLine
0002fa  b006              ADD      sp,sp,#0x18
0002fc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.768|
000300  9802              LDR      r0,[sp,#8]            ;338
000302  1981              ADDS     r1,r0,r6              ;338
000304  f8d9005c          LDR      r0,[r9,#0x5c]         ;338  ; GUI_Context
000308  6842              LDR      r2,[r0,#4]            ;338
00030a  9803              LDR      r0,[sp,#0xc]          ;338
00030c  4790              BLX      r2                    ;338
                  |L1.782|
00030e  1c76              ADDS     r6,r6,#1              ;336
000310  9801              LDR      r0,[sp,#4]            ;336
000312  4286              CMP      r6,r0                 ;336
000314  dde6              BLE      |L1.740|
                  |L1.790|
000316  1e60              SUBS     r0,r4,#1              ;341
000318  6028              STR      r0,[r5,#0]            ;341
                  |L1.794|
00031a  b006              ADD      sp,sp,#0x18
00031c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.800|
000320  e023              B        |L1.874|
                  |L1.802|
000322  e043              B        |L1.940|
                  |L1.804|
000324  f899001a          LDRB     r0,[r9,#0x1a]         ;344  ; GUI_Context
000328  b148              CBZ      r0,|L1.830|
00032a  2600              MOVS     r6,#0                 ;347
00032c  9801              LDR      r0,[sp,#4]            ;347
00032e  2800              CMP      r0,#0                 ;347
000330  db18              BLT      |L1.868|
                  |L1.818|
000332  4620              MOV      r0,r4                 ;348
000334  1c64              ADDS     r4,r4,#1              ;348
000336  f7fffffe          BL       _SetLineColor
00033a  b140              CBZ      r0,|L1.846|
00033c  e00e              B        |L1.860|
                  |L1.830|
00033e  f8d9005c          LDR      r0,[r9,#0x5c]         ;345  ; GUI_Context
000342  9a04              LDR      r2,[sp,#0x10]         ;345
000344  9903              LDR      r1,[sp,#0xc]          ;345
000346  6803              LDR      r3,[r0,#0]            ;345
000348  9802              LDR      r0,[sp,#8]            ;345
00034a  4798              BLX      r3                    ;345
00034c  e7e5              B        |L1.794|
                  |L1.846|
00034e  f8d9105c          LDR      r1,[r9,#0x5c]         ;349  ; GUI_Context
000352  9802              LDR      r0,[sp,#8]            ;349
000354  684a              LDR      r2,[r1,#4]            ;349
000356  4430              ADD      r0,r0,r6              ;349
000358  9903              LDR      r1,[sp,#0xc]          ;349
00035a  4790              BLX      r2                    ;349
                  |L1.860|
00035c  1c76              ADDS     r6,r6,#1              ;347
00035e  9801              LDR      r0,[sp,#4]            ;347
000360  4286              CMP      r6,r0                 ;347
000362  dde6              BLE      |L1.818|
                  |L1.868|
000364  1e60              SUBS     r0,r4,#1              ;352
000366  6028              STR      r0,[r5,#0]            ;352
000368  e7d7              B        |L1.794|
                  |L1.874|
00036a  2400              MOVS     r4,#0                 ;363
00036c  2800              CMP      r0,#0                 ;363
00036e  dbd4              BLT      |L1.794|
                  |L1.880|
000370  9800              LDR      r0,[sp,#0]            ;364
000372  fb008004          MLA      r0,r0,r4,r8           ;364
000376  9901              LDR      r1,[sp,#4]            ;365
000378  fb90f0f1          SDIV     r0,r0,r1              ;365
00037c  9903              LDR      r1,[sp,#0xc]          ;365
00037e  1843              ADDS     r3,r0,r1              ;365
000380  b167              CBZ      r7,|L1.924|
000382  9802              LDR      r0,[sp,#8]            ;369
000384  1901              ADDS     r1,r0,r4              ;369
000386  f8d9005c          LDR      r0,[r9,#0x5c]         ;369  ; GUI_Context
00038a  6842              LDR      r2,[r0,#4]            ;369
00038c  4618              MOV      r0,r3                 ;369
00038e  4790              BLX      r2                    ;369
                  |L1.912|
000390  1c64              ADDS     r4,r4,#1              ;363
000392  9801              LDR      r0,[sp,#4]            ;363
000394  4284              CMP      r4,r0                 ;363
000396  ddeb              BLE      |L1.880|
000398  e7bf              B        |L1.794|
                  |L1.922|
00039a  e014              B        |L1.966|
                  |L1.924|
00039c  f8d9105c          LDR      r1,[r9,#0x5c]         ;367  ; GUI_Context
0003a0  9802              LDR      r0,[sp,#8]            ;367
0003a2  684a              LDR      r2,[r1,#4]            ;367
0003a4  4420              ADD      r0,r0,r4              ;367
0003a6  4619              MOV      r1,r3                 ;367
0003a8  4790              BLX      r2                    ;367
0003aa  e7f1              B        |L1.912|
                  |L1.940|
0003ac  b1af              CBZ      r7,|L1.986|
0003ae  9802              LDR      r0,[sp,#8]            ;384
0003b0  1901              ADDS     r1,r0,r4              ;384
0003b2  f8d9005c          LDR      r0,[r9,#0x5c]         ;384  ; GUI_Context
0003b6  6842              LDR      r2,[r0,#4]            ;384
0003b8  4650              MOV      r0,r10                ;384
0003ba  4790              BLX      r2                    ;384
                  |L1.956|
0003bc  1c64              ADDS     r4,r4,#1              ;377
0003be  9801              LDR      r0,[sp,#4]            ;377
0003c0  4284              CMP      r4,r0                 ;377
0003c2  f77faf77          BLE      |L1.692|
                  |L1.966|
0003c6  2e00              CMP      r6,#0                 ;388
0003c8  da03              BGE      |L1.978|
0003ca  6828              LDR      r0,[r5,#0]            ;389
0003cc  9901              LDR      r1,[sp,#4]            ;389
0003ce  4408              ADD      r0,r0,r1              ;389
0003d0  6028              STR      r0,[r5,#0]            ;389
                  |L1.978|
0003d2  6828              LDR      r0,[r5,#0]            ;391
0003d4  1b80              SUBS     r0,r0,r6              ;391
0003d6  6028              STR      r0,[r5,#0]            ;391
0003d8  e79f              B        |L1.794|
                  |L1.986|
0003da  f8d9105c          LDR      r1,[r9,#0x5c]         ;382  ; GUI_Context
0003de  9802              LDR      r0,[sp,#8]            ;382
0003e0  684a              LDR      r2,[r1,#4]            ;382
0003e2  4420              ADD      r0,r0,r4              ;382
0003e4  4651              MOV      r1,r10                ;382
0003e6  4790              BLX      r2                    ;382
0003e8  e7e8              B        |L1.956|
;;;394    
                          ENDP

                  GL_DrawLine1 PROC
;;;398    */
;;;399    void GL_DrawLine1(int x0, int y0, int x1, int y1) {
0003ea  b510              PUSH     {r4,lr}
0003ec  b082              SUB      sp,sp,#8
0003ee  461c              MOV      r4,r3
;;;400      unsigned PixelCnt;
;;;401      PixelCnt = 0;
0003f0  f04f0c00          MOV      r12,#0
0003f4  f8cdc004          STR      r12,[sp,#4]
;;;402      GL_DrawLine1Ex(x0, y0, x1, y1, &PixelCnt);
0003f8  ab01              ADD      r3,sp,#4
0003fa  9300              STR      r3,[sp,#0]
0003fc  4623              MOV      r3,r4
0003fe  f7fffffe          BL       GL_DrawLine1Ex
;;;403    }
000402  b002              ADD      sp,sp,#8
000404  bd10              POP      {r4,pc}
;;;404    
                          ENDP

                  GL_DrawLineEx PROC
;;;408    */
;;;409    void GL_DrawLineEx(int x0, int y0, int x1, int y1, unsigned * pPixelCnt) {
000406  e92d43f0          PUSH     {r4-r9,lr}
00040a  b089              SUB      sp,sp,#0x24
00040c  461f              MOV      r7,r3
00040e  9b10              LDR      r3,[sp,#0x40]
000410  4680              MOV      r8,r0
000412  4689              MOV      r9,r1
000414  4616              MOV      r6,r2
;;;410      if (GUI_Context.PenSize ==1) {
000416  4811              LDR      r0,|L1.1116|
000418  7e02              LDRB     r2,[r0,#0x18]  ; GUI_Context
00041a  2a01              CMP      r2,#1
00041c  d024              BEQ      |L1.1128|
;;;411        GL_DrawLine1Ex(x0,y0,x1,y1,pPixelCnt);
;;;412      } else {
;;;413        int xdiff, ydiff;
;;;414        xdiff = x0-x1;
00041e  eba80006          SUB      r0,r8,r6
;;;415        ydiff = y0-y1;
000422  eba90107          SUB      r1,r9,r7
;;;416        if (xdiff | ydiff) {
000426  ea500301          ORRS     r3,r0,r1
00042a  d024              BEQ      |L1.1142|
;;;417          GUI_POINT Poly[4];
;;;418          int xOff, yOff;
;;;419          int xOffP, yOffP, xOffM, yOffM;
;;;420          _CalcOrto(x0-x1,y0-y1, (I32)(GUI_Context.PenSize-1), &xOff, &yOff);
00042c  ab02              ADD      r3,sp,#8
00042e  9300              STR      r3,[sp,#0]
000430  1e52              SUBS     r2,r2,#1
000432  ab03              ADD      r3,sp,#0xc
000434  f7fffffe          BL       _CalcOrto
;;;421      /* Do rounding for offsets */
;;;422          if (xOff >0) {
000438  f8ddc00c          LDR      r12,[sp,#0xc]
00043c  f1bc0f00          CMP      r12,#0
000440  dd1c              BLE      |L1.1148|
;;;423            xOffP = (xOff+1)/2;
000442  f10c0001          ADD      r0,r12,#1
000446  eb0070d0          ADD      r0,r0,r0,LSR #31
00044a  1044              ASRS     r4,r0,#1
;;;424            xOffM =  xOff   /2;
00044c  eb0c70dc          ADD      r0,r12,r12,LSR #31
000450  1040              ASRS     r0,r0,#1
000452  e01b              B        |L1.1164|
                  |L1.1108|
                          DCD      ||.constdata||
                  |L1.1112|
                          DCD      ||.constdata||+0x22
                  |L1.1116|
                          DCD      GUI_Context
                  |L1.1120|
                          DCD      0x66666667
                  |L1.1124|
                          DCD      0x2aaaaaab
                  |L1.1128|
000468  9300              STR      r3,[sp,#0]            ;411
00046a  463b              MOV      r3,r7                 ;411
00046c  4632              MOV      r2,r6                 ;411
00046e  4649              MOV      r1,r9                 ;411
000470  4640              MOV      r0,r8                 ;411
000472  f7fffffe          BL       GL_DrawLine1Ex
                  |L1.1142|
;;;425          } else {
;;;426            xOffP =   xOff/2;
;;;427            xOffM =  (xOff-1)   /2;
;;;428          }
;;;429          if (yOff >0) {
;;;430            yOffP = (yOff+1)/2;
;;;431            yOffM =  yOff   /2;
;;;432          } else {
;;;433            yOffP =   yOff/2;
;;;434            yOffM =  (yOff-1)   /2;
;;;435          }
;;;436          Poly[0].x = x0+xOffP;
;;;437          Poly[0].y = y0+yOffP;
;;;438          Poly[1].x = x0-xOffM;
;;;439          Poly[1].y = y0-yOffM;
;;;440          Poly[2].x = x1-xOffM;
;;;441          Poly[2].y = y1-yOffM;
;;;442          Poly[3].x = x1+xOffP;
;;;443          Poly[3].y = y1+yOffP;
;;;444          GL_FillPolygon(&Poly[0], 4, 0,0);
;;;445          _DrawLineEnd(x0,y0);
;;;446          _DrawLineEnd(x1,y1);
;;;447        }
;;;448      }
;;;449    }
000476  b009              ADD      sp,sp,#0x24
000478  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1148|
00047c  eb0c70dc          ADD      r0,r12,r12,LSR #31    ;426
000480  1044              ASRS     r4,r0,#1              ;426
000482  f1ac0001          SUB      r0,r12,#1             ;427
000486  eb0070d0          ADD      r0,r0,r0,LSR #31      ;427
00048a  1040              ASRS     r0,r0,#1              ;427
                  |L1.1164|
00048c  f8ddc008          LDR      r12,[sp,#8]           ;429
000490  f1bc0f00          CMP      r12,#0                ;429
000494  dd08              BLE      |L1.1192|
000496  f10c0101          ADD      r1,r12,#1             ;430
00049a  eb0171d1          ADD      r1,r1,r1,LSR #31      ;430
00049e  104d              ASRS     r5,r1,#1              ;430
0004a0  eb0c71dc          ADD      r1,r12,r12,LSR #31    ;431
0004a4  1049              ASRS     r1,r1,#1              ;431
0004a6  e007              B        |L1.1208|
                  |L1.1192|
0004a8  eb0c71dc          ADD      r1,r12,r12,LSR #31    ;433
0004ac  104d              ASRS     r5,r1,#1              ;433
0004ae  f1ac0101          SUB      r1,r12,#1             ;434
0004b2  eb0171d1          ADD      r1,r1,r1,LSR #31      ;434
0004b6  1049              ASRS     r1,r1,#1              ;434
                  |L1.1208|
0004b8  eb080204          ADD      r2,r8,r4              ;436
0004bc  f8ad2010          STRH     r2,[sp,#0x10]         ;436
0004c0  eb090205          ADD      r2,r9,r5              ;437
0004c4  f8ad2012          STRH     r2,[sp,#0x12]         ;437
0004c8  eba80200          SUB      r2,r8,r0              ;438
0004cc  f8ad2014          STRH     r2,[sp,#0x14]         ;438
0004d0  eba90201          SUB      r2,r9,r1              ;439
0004d4  f8ad2016          STRH     r2,[sp,#0x16]         ;439
0004d8  1a30              SUBS     r0,r6,r0              ;440
0004da  f8ad0018          STRH     r0,[sp,#0x18]         ;440
0004de  1a78              SUBS     r0,r7,r1              ;441
0004e0  f8ad001a          STRH     r0,[sp,#0x1a]         ;441
0004e4  1930              ADDS     r0,r6,r4              ;442
0004e6  f8ad001c          STRH     r0,[sp,#0x1c]         ;442
0004ea  1978              ADDS     r0,r7,r5              ;443
0004ec  f8ad001e          STRH     r0,[sp,#0x1e]         ;443
0004f0  2300              MOVS     r3,#0                 ;444
0004f2  461a              MOV      r2,r3                 ;444
0004f4  2104              MOVS     r1,#4                 ;444
0004f6  a804              ADD      r0,sp,#0x10           ;444
0004f8  f7fffffe          BL       GL_FillPolygon
0004fc  4649              MOV      r1,r9                 ;445
0004fe  4640              MOV      r0,r8                 ;445
000500  f7fffffe          BL       _DrawLineEnd
000504  4639              MOV      r1,r7                 ;446
000506  4630              MOV      r0,r6                 ;446
000508  f7fffffe          BL       _DrawLineEnd
00050c  b009              ADD      sp,sp,#0x24
00050e  e8bd83f0          POP      {r4-r9,pc}
;;;450    
                          ENDP

                  GL_DrawLine PROC
;;;454    */
;;;455    void GL_DrawLine(int x0, int y0, int x1, int y1) {
000512  b510              PUSH     {r4,lr}
000514  b082              SUB      sp,sp,#8
000516  461c              MOV      r4,r3
;;;456      unsigned PixelCnt;
;;;457      PixelCnt = 0;
000518  f04f0c00          MOV      r12,#0
00051c  f8cdc004          STR      r12,[sp,#4]
;;;458      GL_DrawLineEx(x0, y0, x1, y1, &PixelCnt);
000520  ab01              ADD      r3,sp,#4
000522  9300              STR      r3,[sp,#0]
000524  4623              MOV      r3,r4
000526  f7fffffe          BL       GL_DrawLineEx
;;;459    }
00052a  b002              ADD      sp,sp,#8
00052c  bd10              POP      {r4,pc}
;;;460    
                          ENDP

                  GUI_DrawLine PROC
;;;464    */
;;;465    void GUI_DrawLine(int x0, int y0, int x1, int y1) {
00052e  e92d41f0          PUSH     {r4-r8,lr}
000532  4605              MOV      r5,r0
000534  460e              MOV      r6,r1
000536  4614              MOV      r4,r2
000538  461f              MOV      r7,r3
;;;466      GUI_LOCK();
00053a  f7fffffe          BL       GUI_Lock
;;;467      #if (GUI_WINSUPPORT)
;;;468        WM_ADDORG(x0,y0);
00053e  4939              LDR      r1,|L1.1572|
000540  f8d1c044          LDR      r12,[r1,#0x44]  ; GUI_Context
000544  4465              ADD      r5,r5,r12
000546  6c88              LDR      r0,[r1,#0x48]  ; GUI_Context
000548  4406              ADD      r6,r6,r0
;;;469        WM_ADDORG(x1,y1);
00054a  eb0c0804          ADD      r8,r12,r4
00054e  19c4              ADDS     r4,r0,r7
;;;470        WM_ITERATE_START(NULL); {
000550  2000              MOVS     r0,#0
000552  f7fffffe          BL       WM__InitIVRSearch
000556  b148              CBZ      r0,|L1.1388|
                  |L1.1368|
;;;471      #endif
;;;472      GL_DrawLine (x0, y0, x1, y1);
000558  4623              MOV      r3,r4
00055a  4642              MOV      r2,r8
00055c  4631              MOV      r1,r6
00055e  4628              MOV      r0,r5
000560  f7fffffe          BL       GL_DrawLine
;;;473      #if (GUI_WINSUPPORT)
;;;474        } WM_ITERATE_END();
000564  f7fffffe          BL       WM__GetNextIVR
000568  2800              CMP      r0,#0
00056a  d1f5              BNE      |L1.1368|
                  |L1.1388|
;;;475      #endif
;;;476      GUI_UNLOCK();
00056c  e8bd41f0          POP      {r4-r8,lr}
000570  f7ffbffe          B.W      GUI_Unlock
;;;477    }
;;;478    
                          ENDP

                  GUI_DrawLineRel PROC
;;;488    */
;;;489    void GUI_DrawLineRel(int dx, int dy) {
000574  b570              PUSH     {r4-r6,lr}
000576  4605              MOV      r5,r0
000578  460e              MOV      r6,r1
;;;490      GUI_LOCK();
00057a  f7fffffe          BL       GUI_Lock
;;;491      #if (GUI_WINSUPPORT)
;;;492        WM_ITERATE_START(NULL); {
00057e  2000              MOVS     r0,#0
000580  f7fffffe          BL       WM__InitIVRSearch
000584  b160              CBZ      r0,|L1.1440|
;;;493      #endif
;;;494      GL_DrawLine (GUI_Context.DrawPosX,    GUI_Context.DrawPosY,
000586  4c27              LDR      r4,|L1.1572|
                  |L1.1416|
000588  f9b4102c          LDRSH    r1,[r4,#0x2c]  ; GUI_Context
00058c  f9b4002a          LDRSH    r0,[r4,#0x2a]  ; GUI_Context
000590  198b              ADDS     r3,r1,r6
000592  1942              ADDS     r2,r0,r5
000594  f7fffffe          BL       GL_DrawLine
;;;495                   GUI_Context.DrawPosX+dx, GUI_Context.DrawPosY+dy);
;;;496      #if (GUI_WINSUPPORT)
;;;497        } WM_ITERATE_END();
000598  f7fffffe          BL       WM__GetNextIVR
00059c  2800              CMP      r0,#0
00059e  d1f3              BNE      |L1.1416|
                  |L1.1440|
;;;498      #endif
;;;499      GUI_MoveRel(dx,dy);
0005a0  4631              MOV      r1,r6
0005a2  4628              MOV      r0,r5
0005a4  f7fffffe          BL       GUI_MoveRel
;;;500      GUI_UNLOCK();
0005a8  e8bd4070          POP      {r4-r6,lr}
0005ac  f7ffbffe          B.W      GUI_Unlock
;;;501    }
;;;502    
                          ENDP

                  GL_DrawLineToEx PROC
;;;506    */
;;;507    void GL_DrawLineToEx(int x, int y, unsigned * pPixelCnt) {
0005b0  b5f8              PUSH     {r3-r7,lr}
0005b2  4605              MOV      r5,r0
0005b4  460e              MOV      r6,r1
;;;508      GL_DrawLineEx(GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y, pPixelCnt);
0005b6  4c1b              LDR      r4,|L1.1572|
0005b8  9200              STR      r2,[sp,#0]
0005ba  4633              MOV      r3,r6
0005bc  f9b4102c          LDRSH    r1,[r4,#0x2c]  ; GUI_Context
0005c0  f9b4002a          LDRSH    r0,[r4,#0x2a]  ; GUI_Context
0005c4  462a              MOV      r2,r5
0005c6  f7fffffe          BL       GL_DrawLineEx
;;;509      GUI_Context.DrawPosX = x;
0005ca  8565              STRH     r5,[r4,#0x2a]
;;;510      GUI_Context.DrawPosY = y;
0005cc  85a6              STRH     r6,[r4,#0x2c]
;;;511    }
0005ce  bdf8              POP      {r3-r7,pc}
;;;512    
                          ENDP

                  GL_DrawLineTo PROC
;;;516    */
;;;517    void GL_DrawLineTo(int x, int y) {
0005d0  b508              PUSH     {r3,lr}
;;;518      unsigned PixelCnt;
;;;519      PixelCnt = 0;
0005d2  2200              MOVS     r2,#0
0005d4  9200              STR      r2,[sp,#0]
;;;520      GL_DrawLineToEx(x, y, &PixelCnt);
0005d6  466a              MOV      r2,sp
0005d8  f7fffffe          BL       GL_DrawLineToEx
;;;521    }
0005dc  bd08              POP      {r3,pc}
;;;522    
                          ENDP

                  GUI_DrawLineTo PROC
;;;526    */
;;;527    void GUI_DrawLineTo(int x, int y) {
0005de  b570              PUSH     {r4-r6,lr}
0005e0  4605              MOV      r5,r0
0005e2  460e              MOV      r6,r1
;;;528      GUI_LOCK();
0005e4  f7fffffe          BL       GUI_Lock
;;;529      #if (GUI_WINSUPPORT)
;;;530        WM_ADDORG(x,y);
0005e8  4c0e              LDR      r4,|L1.1572|
0005ea  6c62              LDR      r2,[r4,#0x44]  ; GUI_Context
0005ec  4415              ADD      r5,r5,r2
0005ee  6ca0              LDR      r0,[r4,#0x48]  ; GUI_Context
0005f0  4406              ADD      r6,r6,r0
;;;531        WM_ITERATE_START(NULL); {
0005f2  2000              MOVS     r0,#0
0005f4  f7fffffe          BL       WM__InitIVRSearch
0005f8  b158              CBZ      r0,|L1.1554|
                  |L1.1530|
;;;532      #endif
;;;533      GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y);
0005fa  f9b4102c          LDRSH    r1,[r4,#0x2c]  ; GUI_Context
0005fe  f9b4002a          LDRSH    r0,[r4,#0x2a]  ; GUI_Context
000602  4633              MOV      r3,r6
000604  462a              MOV      r2,r5
000606  f7fffffe          BL       GL_DrawLine
;;;534      #if (GUI_WINSUPPORT)
;;;535        } WM_ITERATE_END();
00060a  f7fffffe          BL       WM__GetNextIVR
00060e  2800              CMP      r0,#0
000610  d1f3              BNE      |L1.1530|
                  |L1.1554|
;;;536      #endif
;;;537      GL_MoveTo(x,y);
000612  4631              MOV      r1,r6
000614  4628              MOV      r0,r5
000616  f7fffffe          BL       GL_MoveTo
;;;538      GUI_UNLOCK();
00061a  e8bd4070          POP      {r4-r6,lr}
00061e  f7ffbffe          B.W      GUI_Unlock
;;;539    }
;;;540    
                          ENDP

000622  0000              DCW      0x0000
                  |L1.1572|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aSin
000000  00000064          DCW      0x0000,0x0064
000004  00c80129          DCW      0x00c8,0x0129
000008  018801e3          DCW      0x0188,0x01e3
00000c  0239028a          DCW      0x0239,0x028a
000010  02d40318          DCW      0x02d4,0x0318
000014  03530387          DCW      0x0353,0x0387
000018  03b203d4          DCW      0x03b2,0x03d4
00001c  03ec03fb          DCW      0x03ec,0x03fb
000020  0400              DCW      0x0400
                  aTan
000022  0000              DCW      0x0000
000024  00290051          DCW      0x0029,0x0051
000028  007900a0          DCW      0x0079,0x00a0
00002c  00c500ea          DCW      0x00c5,0x00ea
000030  010d012e          DCW      0x010d,0x012e
000034  014e016c          DCW      0x014e,0x016c
000038  018901a3          DCW      0x0189,0x01a3
00003c  01bd01d5          DCW      0x01bd,0x01d5
000040  01eb0200          DCW      0x01eb,0x0200
