; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guidev_writeex.o --depend=.\rvmdk\guidev_writeex.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guidev_writeex.crf ..\..\..\..\..\uCGUI\GUI\MemDev\GUIDEV_WriteEx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetPixelIndex PROC
;;;41     */
;;;42     static int _GetPixelIndex(const U8* pData, int x, int y, int bpp, int BytesPerLine) {
000000  f8ddc000          LDR      r12,[sp,#0]
;;;43       if (bpp == 8) {
000004  2b08              CMP      r3,#8
;;;44         return (int)(*(pData + (y * BytesPerLine) + x));
000006  fb02f20c          MUL      r2,r2,r12
00000a  d003              BEQ      |L1.20|
;;;45       } else {
;;;46         return (int)(*(const U16*)(pData + (y * BytesPerLine) + (x << 1)));
00000c  eb000041          ADD      r0,r0,r1,LSL #1
000010  5a10              LDRH     r0,[r2,r0]
;;;47       }
;;;48     }
000012  4770              BX       lr
                  |L1.20|
000014  4408              ADD      r0,r0,r1              ;44
000016  5c10              LDRB     r0,[r2,r0]            ;44
000018  4770              BX       lr
;;;49     
                          ENDP

                  _DrawHLineAlpha PROC
;;;53     */
;;;54     static void _DrawHLineAlpha(int x0, int y, int x1, int Intens) {
00001a  e92d5ff0          PUSH     {r4-r12,lr}
00001e  4681              MOV      r9,r0
000020  468a              MOV      r10,r1
000022  4615              MOV      r5,r2
000024  461e              MOV      r6,r3
;;;55       GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000026  f8df84b0          LDR      r8,|L1.1240|
00002a  f9b80050          LDRSH    r0,[r8,#0x50]  ; GUI_Context
00002e  f7fffffe          BL       GUI_ALLOC_h2p
000032  4604              MOV      r4,r0
;;;56       GUI_USAGE_h hUsage = pDev->hUsage; 
000034  f9b47018          LDRSH    r7,[r4,#0x18]
;;;57       LCD_COLOR Color1, Color2;
;;;58       int Len = x1 - x0 + 1;
000038  eba50009          SUB      r0,r5,r9
00003c  1c45              ADDS     r5,r0,#1
;;;59       if (hUsage) {
00003e  b177              CBZ      r7,|L1.94|
;;;60         GUI_USAGE_AddHLine(GUI_USAGE_H2P(hUsage), x0, y, Len);
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       GUI_ALLOC_h2p
000046  4683              MOV      r11,r0
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       GUI_ALLOC_h2p
00004e  6880              LDR      r0,[r0,#8]
000050  462b              MOV      r3,r5
000052  4652              MOV      r2,r10
000054  f8d0c004          LDR      r12,[r0,#4]
000058  4649              MOV      r1,r9
00005a  4658              MOV      r0,r11
00005c  47e0              BLX      r12
                  |L1.94|
;;;61       }
;;;62       Color1 = LCD_Index2Color(LCD_COLORINDEX);
00005e  f8b80002          LDRH     r0,[r8,#2]  ; GUI_Context
000062  f7fffffe          BL       LCD_Index2Color
000066  4607              MOV      r7,r0
;;;63       if (pDev->BitsPerPixel == 8) {
000068  6920              LDR      r0,[r4,#0x10]
00006a  2808              CMP      r0,#8
00006c  d016              BEQ      |L1.156|
;;;64         U8* pData;
;;;65         pData  = (U8*) GUI_MEMDEV__XY2PTR(x0, y);
;;;66         while (Len--) {
;;;67           Color2 = LCD_Index2Color(*(pData));
;;;68           Color2 = LCD_MixColors256(Color1, Color2, Intens);
;;;69           *(pData++) = LCD_Color2Index(Color2);
;;;70         }
;;;71       } else {
;;;72         U16* pData;
;;;73         pData  = (U16*) GUI_MEMDEV__XY2PTR(x0, y);
00006e  4651              MOV      r1,r10
000070  4648              MOV      r0,r9
000072  f7fffffe          BL       GUI_MEMDEV__XY2PTR
000076  4604              MOV      r4,r0
;;;74         while (Len--) {
000078  1e6d              SUBS     r5,r5,#1
00007a  d30d              BCC      |L1.152|
                  |L1.124|
;;;75           Color2 = LCD_Index2Color(*(pData));
00007c  8820              LDRH     r0,[r4,#0]
00007e  f7fffffe          BL       LCD_Index2Color
;;;76           Color2 = LCD_MixColors256(Color1, Color2, Intens);
000082  4601              MOV      r1,r0
000084  4632              MOV      r2,r6
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       LCD_MixColors256
;;;77           *(pData++) = LCD_Color2Index(Color2);
00008c  f7fffffe          BL       LCD_Color2Index
000090  f8240b02          STRH     r0,[r4],#2
000094  1e6d              SUBS     r5,r5,#1              ;74
000096  d2f1              BCS      |L1.124|
                  |L1.152|
;;;78         }
;;;79       }
;;;80     }
000098  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.156|
00009c  4651              MOV      r1,r10                ;65
00009e  4648              MOV      r0,r9                 ;65
0000a0  f7fffffe          BL       GUI_MEMDEV__XY2PTR
0000a4  4604              MOV      r4,r0                 ;65
0000a6  1e6d              SUBS     r5,r5,#1              ;66
0000a8  d3f6              BCC      |L1.152|
                  |L1.170|
0000aa  7820              LDRB     r0,[r4,#0]            ;67
0000ac  f7fffffe          BL       LCD_Index2Color
0000b0  4601              MOV      r1,r0                 ;68
0000b2  4632              MOV      r2,r6                 ;68
0000b4  4638              MOV      r0,r7                 ;68
0000b6  f7fffffe          BL       LCD_MixColors256
0000ba  f7fffffe          BL       LCD_Color2Index
0000be  f8040b01          STRB     r0,[r4],#1            ;69
0000c2  1e6d              SUBS     r5,r5,#1              ;66
0000c4  d2f1              BCS      |L1.170|
0000c6  e8bd9ff0          POP      {r4-r12,pc}
;;;81     
                          ENDP

                  _DrawBitmapLineEx PROC
;;;85     */
;;;86     static void _DrawBitmapLineEx(int x0, int y0, int xOff, int yOff, int xSize, int xMag, int Alpha,
0000ca  e92d4fff          PUSH     {r0-r11,lr}
;;;87                                   int bpp, int BytesPerLine, const U8* pData) {
0000ce  b085              SUB      sp,sp,#0x14
0000d0  4607              MOV      r7,r0
0000d2  f8ddb048          LDR      r11,[sp,#0x48]
;;;88       int x, xi, xAct, xStart, xMagAbs, xiMag, xMin, xMax, Cached;
;;;89       LCD_PIXELINDEX Index = 0, IndexPrev = 0;
0000d6  f04f0a00          MOV      r10,#0
0000da  2000              MOVS     r0,#0
0000dc  9001              STR      r0,[sp,#4]
;;;90       /* Use clipping rect */
;;;91       xMin = GUI_Context.ClipRect.x0 - x0;
0000de  48fe              LDR      r0,|L1.1240|
0000e0  f9b01008          LDRSH    r1,[r0,#8]  ; GUI_Context
0000e4  eba10907          SUB      r9,r1,r7
;;;92       xMax = GUI_Context.ClipRect.x1 - x0;
0000e8  f9b0000c          LDRSH    r0,[r0,#0xc]  ; GUI_Context
0000ec  1bc0              SUBS     r0,r0,r7
0000ee  9003              STR      r0,[sp,#0xc]
;;;93       /* Init some values */
;;;94       xMagAbs =  (xMag > 0) ? xMag : -xMag;
0000f0  9813              LDR      r0,[sp,#0x4c]
0000f2  2800              CMP      r0,#0
0000f4  dd01              BLE      |L1.250|
0000f6  9813              LDR      r0,[sp,#0x4c]
0000f8  e001              B        |L1.254|
                  |L1.250|
0000fa  9813              LDR      r0,[sp,#0x4c]
0000fc  4240              RSBS     r0,r0,#0
                  |L1.254|
0000fe  9004              STR      r0,[sp,#0x10]
;;;95       x       =  (xOff * xMagAbs) / 1000;
000100  9907              LDR      r1,[sp,#0x1c]
000102  9804              LDR      r0,[sp,#0x10]
000104  4348              MULS     r0,r1,r0
000106  f44f717a          MOV      r1,#0x3e8
00010a  fb90f4f1          SDIV     r4,r0,r1
;;;96       xiMag   =  (xOff * xMagAbs) % 1000;
00010e  fb010614          MLS      r6,r1,r4,r0
;;;97       xStart  = -1;
000112  f04f35ff          MOV      r5,#0xffffffff
;;;98       Cached  =  0;
000116  2000              MOVS     r0,#0
000118  9002              STR      r0,[sp,#8]
;;;99       for (xi = 0; xi < xSize; xi++) {
00011a  4680              MOV      r8,r0
00011c  f1bb0f00          CMP      r11,#0
000120  dd47              BLE      |L1.434|
                  |L1.290|
;;;100        xiMag += xMagAbs;
000122  9804              LDR      r0,[sp,#0x10]
000124  4406              ADD      r6,r6,r0
;;;101        if (xiMag >= 1000) {  
000126  f5b67f7a          CMP      r6,#0x3e8
00012a  db3e              BLT      |L1.426|
;;;102          if (x <= xMax) {
00012c  9803              LDR      r0,[sp,#0xc]
00012e  4284              CMP      r4,r0
000130  dc65              BGT      |L1.510|
;;;103            xAct  = (xMag > 0) ? xi : xSize - xi - 1;
000132  9813              LDR      r0,[sp,#0x4c]
000134  2800              CMP      r0,#0
000136  dd01              BLE      |L1.316|
000138  4640              MOV      r0,r8
00013a  e002              B        |L1.322|
                  |L1.316|
00013c  ebab0008          SUB      r0,r11,r8
000140  1e40              SUBS     r0,r0,#1
                  |L1.322|
;;;104            Index = _GetPixelIndex(pData, xOff + xAct, yOff, bpp, BytesPerLine);
000142  9907              LDR      r1,[sp,#0x1c]
000144  9b16              LDR      r3,[sp,#0x58]
000146  9300              STR      r3,[sp,#0]
000148  4401              ADD      r1,r1,r0
00014a  9b15              LDR      r3,[sp,#0x54]
00014c  9a08              LDR      r2,[sp,#0x20]
00014e  9817              LDR      r0,[sp,#0x5c]
000150  f7fffffe          BL       _GetPixelIndex
000154  fa1ffa80          UXTH     r10,r0
;;;105            if ((Index != IndexPrev) || (xStart == -1)) {
000158  9801              LDR      r0,[sp,#4]
00015a  4582              CMP      r10,r0
00015c  d101              BNE      |L1.354|
00015e  1c68              ADDS     r0,r5,#1
000160  d11d              BNE      |L1.414|
                  |L1.354|
;;;106              if ((xStart != -1) && (x > xMin)) {
000162  1c68              ADDS     r0,r5,#1
000164  d016              BEQ      |L1.404|
000166  454c              CMP      r4,r9
000168  dd14              BLE      |L1.404|
;;;107                /* Clear cache */
;;;108                if (xStart < xMin) {
00016a  454d              CMP      r5,r9
00016c  da00              BGE      |L1.368|
;;;109                  xStart = xMin;
00016e  464d              MOV      r5,r9
                  |L1.368|
;;;110                }
;;;111                LCD_SetColorIndex(IndexPrev);
000170  9801              LDR      r0,[sp,#4]
000172  f7fffffe          BL       LCD_SetColorIndex
;;;112                if (Alpha == 256 || !GUI_Context.hDevData) {
000176  9814              LDR      r0,[sp,#0x50]
000178  f5b07f80          CMP      r0,#0x100
00017c  d036              BEQ      |L1.492|
00017e  48d6              LDR      r0,|L1.1240|
000180  f8b00050          LDRH     r0,[r0,#0x50]  ; GUI_Context
000184  b388              CBZ      r0,|L1.490|
;;;113                  LCDDEV_L0_DrawHLine(x0 + xStart, y0, x0 + x - 1);
;;;114                } else {
;;;115                  _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
000186  1938              ADDS     r0,r7,r4
000188  1e42              SUBS     r2,r0,#1
00018a  1978              ADDS     r0,r7,r5
00018c  9b14              LDR      r3,[sp,#0x50]
00018e  9906              LDR      r1,[sp,#0x18]
000190  f7fffffe          BL       _DrawHLineAlpha
                  |L1.404|
;;;116                }
;;;117              }
;;;118              IndexPrev = Index;
000194  f8cda004          STR      r10,[sp,#4]
;;;119              xStart    = x;
000198  4625              MOV      r5,r4
;;;120              Cached    = 1;
00019a  2001              MOVS     r0,#1
00019c  9002              STR      r0,[sp,#8]
                  |L1.414|
;;;121            }
;;;122            do {
;;;123              x++;
00019e  1c64              ADDS     r4,r4,#1
;;;124              xiMag -= 1000;
0001a0  f5a6767a          SUB      r6,r6,#0x3e8
;;;125            } while (xiMag >= 1000);
0001a4  f5b67f7a          CMP      r6,#0x3e8
0001a8  daf9              BGE      |L1.414|
                  |L1.426|
0001aa  f1080801          ADD      r8,r8,#1              ;99
0001ae  45d8              CMP      r8,r11                ;99
0001b0  dbb7              BLT      |L1.290|
                  |L1.434|
;;;126          } else {
;;;127            x = xMax + 1;
;;;128            break;
;;;129          }
;;;130        }
;;;131      }
;;;132      if (Cached && (x > xMin)) {
0001b2  9802              LDR      r0,[sp,#8]
0001b4  2800              CMP      r0,#0
0001b6  d030              BEQ      |L1.538|
0001b8  454c              CMP      r4,r9
0001ba  dd2e              BLE      |L1.538|
;;;133        /* Clear cache */
;;;134        if (xStart < xMin) {
0001bc  454d              CMP      r5,r9
0001be  da00              BGE      |L1.450|
;;;135          xStart = xMin;
0001c0  464d              MOV      r5,r9
                  |L1.450|
;;;136        }
;;;137        LCD_SetColorIndex(Index);
0001c2  4650              MOV      r0,r10
0001c4  f7fffffe          BL       LCD_SetColorIndex
;;;138        if (Alpha == 256 || !GUI_Context.hDevData) {
0001c8  9814              LDR      r0,[sp,#0x50]
0001ca  f5b07f80          CMP      r0,#0x100
0001ce  d019              BEQ      |L1.516|
0001d0  48c1              LDR      r0,|L1.1240|
0001d2  f8b00050          LDRH     r0,[r0,#0x50]  ; GUI_Context
0001d6  b1a8              CBZ      r0,|L1.516|
;;;139          LCDDEV_L0_DrawHLine(x0 + xStart, y0, x0 + x - 1);
;;;140        } else {
;;;141          _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
0001d8  1938              ADDS     r0,r7,r4
0001da  9b14              LDR      r3,[sp,#0x50]
0001dc  9906              LDR      r1,[sp,#0x18]
0001de  1e42              SUBS     r2,r0,#1
0001e0  b009              ADD      sp,sp,#0x24
0001e2  1978              ADDS     r0,r7,r5
0001e4  e8bd4ff0          POP      {r4-r11,lr}
0001e8  e7fe              B        _DrawHLineAlpha
                  |L1.490|
0001ea  e7ff              B        |L1.492|
                  |L1.492|
0001ec  49ba              LDR      r1,|L1.1240|
0001ee  1938              ADDS     r0,r7,r4              ;113
0001f0  1e42              SUBS     r2,r0,#1              ;113
0001f2  6cc9              LDR      r1,[r1,#0x4c]         ;113  ; GUI_Context
0001f4  1978              ADDS     r0,r7,r5              ;113
0001f6  690b              LDR      r3,[r1,#0x10]         ;113
0001f8  9906              LDR      r1,[sp,#0x18]         ;113
0001fa  4798              BLX      r3                    ;113
0001fc  e7ca              B        |L1.404|
                  |L1.510|
0001fe  9803              LDR      r0,[sp,#0xc]          ;127
000200  1c44              ADDS     r4,r0,#1              ;127
000202  e7d6              B        |L1.434|
                  |L1.516|
000204  49b4              LDR      r1,|L1.1240|
000206  1938              ADDS     r0,r7,r4              ;139
000208  1e42              SUBS     r2,r0,#1              ;139
00020a  6cc9              LDR      r1,[r1,#0x4c]         ;139  ; GUI_Context
00020c  1978              ADDS     r0,r7,r5              ;139
00020e  690b              LDR      r3,[r1,#0x10]         ;139
000210  9906              LDR      r1,[sp,#0x18]         ;139
000212  b009              ADD      sp,sp,#0x24           ;139
000214  e8bd4ff0          POP      {r4-r11,lr}           ;139
000218  4718              BX       r3                    ;139
                  |L1.538|
;;;142        }
;;;143      }
;;;144    }
00021a  b009              ADD      sp,sp,#0x24
00021c  e8bd8ff0          POP      {r4-r11,pc}
;;;145    
                          ENDP

                  _DrawBitmapEx PROC
;;;149    */
;;;150    static void _DrawBitmapEx(int x0, int y0, int xOff, int yOff, int xSize, int ySize, int xMag, int yMag,
000220  e92d4fff          PUSH     {r0-r11,lr}
;;;151                              int Alpha, int BmpSizeX, int BmpSizeY, int bpp, int BytesPerLine, const U8* pData) {
000224  b087              SUB      sp,sp,#0x1c
000226  4688              MOV      r8,r1
000228  9f17              LDR      r7,[sp,#0x5c]
00022a  9c15              LDR      r4,[sp,#0x54]
00022c  991a              LDR      r1,[sp,#0x68]
00022e  9819              LDR      r0,[sp,#0x64]
000230  461e              MOV      r6,r3
;;;152      int y, yi, yMin, yMax, yEnd, yPrev;
;;;153      yMin = GUI_Context.ClipRect.y0;
000232  4aa9              LDR      r2,|L1.1240|
000234  f9b2a00a          LDRSH    r10,[r2,#0xa]  ; GUI_Context
;;;154      yMax = GUI_Context.ClipRect.y1;
000238  f9b2b00e          LDRSH    r11,[r2,#0xe]  ; GUI_Context
;;;155      if (xMag < 0) {
00023c  9a16              LDR      r2,[sp,#0x58]
;;;156        x0 -= (BmpSizeX - (xOff << 1) - xSize) * xMag / 1000;
00023e  f44f737a          MOV      r3,#0x3e8
000242  2a00              CMP      r2,#0                 ;155
000244  da0b              BGE      |L1.606|
000246  9a09              LDR      r2,[sp,#0x24]
000248  eba00242          SUB      r2,r0,r2,LSL #1
00024c  9814              LDR      r0,[sp,#0x50]
00024e  1a12              SUBS     r2,r2,r0
000250  9816              LDR      r0,[sp,#0x58]
000252  4350              MULS     r0,r2,r0
000254  fb90f2f3          SDIV     r2,r0,r3
000258  9807              LDR      r0,[sp,#0x1c]
00025a  1a80              SUBS     r0,r0,r2
00025c  9007              STR      r0,[sp,#0x1c]
                  |L1.606|
;;;157      }
;;;158      if (yMag < 0) {
00025e  2f00              CMP      r7,#0
000260  da05              BGE      |L1.622|
;;;159        y0 -= (BmpSizeY - 1) * yMag / 1000;
000262  1e48              SUBS     r0,r1,#1
000264  4378              MULS     r0,r7,r0
000266  fb90f0f3          SDIV     r0,r0,r3
00026a  eba80800          SUB      r8,r8,r0
                  |L1.622|
;;;160      }
;;;161      yEnd  = y0 + GUI__DivideRound32(((I32)(yOff) * yMag), 1000);
00026e  fb06f007          MUL      r0,r6,r7
000272  f44f717a          MOV      r1,#0x3e8
000276  f7fffffe          BL       GUI__DivideRound32
00027a  eb000508          ADD      r5,r0,r8
;;;162      yPrev = yEnd + 1;
00027e  f1050901          ADD      r9,r5,#1
;;;163      for (yi = yOff; yi < (yOff + ySize); yi++) {
000282  1930              ADDS     r0,r6,r4
000284  9006              STR      r0,[sp,#0x18]
000286  42b0              CMP      r0,r6
000288  dd2e              BLE      |L1.744|
                  |L1.650|
;;;164        y = yEnd;
00028a  462c              MOV      r4,r5
;;;165        yEnd = y0 + GUI__DivideRound32(((I32)(yi + 1) * yMag), 1000);
00028c  1c70              ADDS     r0,r6,#1
00028e  4378              MULS     r0,r7,r0
000290  f44f717a          MOV      r1,#0x3e8
000294  f7fffffe          BL       GUI__DivideRound32
000298  eb000508          ADD      r5,r0,r8
;;;166        if (y != yPrev) {
00029c  454c              CMP      r4,r9
00029e  d01f              BEQ      |L1.736|
;;;167          yPrev = y;
0002a0  46a1              MOV      r9,r4
                  |L1.674|
;;;168          do {
;;;169            if ((y >= yMin) && (y <= yMax)) {
0002a2  4554              CMP      r4,r10
0002a4  db13              BLT      |L1.718|
0002a6  455c              CMP      r4,r11
0002a8  dc11              BGT      |L1.718|
;;;170              _DrawBitmapLineEx(x0, y, xOff, yi, xSize, xMag, Alpha, bpp, BytesPerLine, pData);
0002aa  9a1c              LDR      r2,[sp,#0x70]
0002ac  9818              LDR      r0,[sp,#0x60]
0002ae  9b1d              LDR      r3,[sp,#0x74]
0002b0  991b              LDR      r1,[sp,#0x6c]
0002b2  e9cd2304          STRD     r2,r3,[sp,#0x10]
0002b6  9002              STR      r0,[sp,#8]
0002b8  9b16              LDR      r3,[sp,#0x58]
0002ba  9a14              LDR      r2,[sp,#0x50]
0002bc  9103              STR      r1,[sp,#0xc]
0002be  9301              STR      r3,[sp,#4]
0002c0  9200              STR      r2,[sp,#0]
0002c2  4633              MOV      r3,r6
0002c4  4621              MOV      r1,r4
0002c6  9a09              LDR      r2,[sp,#0x24]
0002c8  9807              LDR      r0,[sp,#0x1c]
0002ca  f7fffffe          BL       _DrawBitmapLineEx
                  |L1.718|
;;;171            }
;;;172          } while ((yMag < 0) ? (--y > yEnd) : (++y < yEnd));
0002ce  2f00              CMP      r7,#0
0002d0  da03              BGE      |L1.730|
0002d2  1e64              SUBS     r4,r4,#1
0002d4  42ac              CMP      r4,r5
0002d6  dce4              BGT      |L1.674|
0002d8  e002              B        |L1.736|
                  |L1.730|
0002da  1c64              ADDS     r4,r4,#1
0002dc  42ac              CMP      r4,r5
0002de  dbe0              BLT      |L1.674|
                  |L1.736|
0002e0  1c76              ADDS     r6,r6,#1              ;163
0002e2  9806              LDR      r0,[sp,#0x18]         ;163
0002e4  42b0              CMP      r0,r6                 ;163
0002e6  dcd0              BGT      |L1.650|
                  |L1.744|
;;;173        }
;;;174      }
;;;175    }
0002e8  b00b              ADD      sp,sp,#0x2c
0002ea  e8bd8ff0          POP      {r4-r11,pc}
;;;176    
                          ENDP

                  _WriteExToActiveAt PROC
;;;180    */
;;;181    static void _WriteExToActiveAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
0002ee  e92d4fff          PUSH     {r0-r11,lr}
0002f2  b08f              SUB      sp,sp,#0x3c
0002f4  4690              MOV      r8,r2
0002f6  f8dd9070          LDR      r9,[sp,#0x70]
;;;182      GUI_MEMDEV* pDev;
;;;183      GUI_USAGE_h hUsage; 
;;;184      GUI_USAGE*  pUsage;
;;;185      U8* pData;
;;;186      int yAct, yPrev, ySize, yi;
;;;187      int BytesPerLine, bpp;
;;;188      pDev         = GUI_MEMDEV_H2P(hMem);
0002fa  f7fffffe          BL       GUI_ALLOC_h2p
0002fe  4605              MOV      r5,r0
;;;189      hUsage       = pDev->hUsage;
000300  f9b50018          LDRSH    r0,[r5,#0x18]
;;;190      ySize        = pDev->YSize;
000304  f9b5a006          LDRSH    r10,[r5,#6]
;;;191      BytesPerLine = pDev->BytesPerLine;
000308  68e9              LDR      r1,[r5,#0xc]
00030a  910d              STR      r1,[sp,#0x34]
;;;192      pData        = (U8*)(pDev + 1);
00030c  f105012c          ADD      r1,r5,#0x2c
000310  910e              STR      r1,[sp,#0x38]
;;;193      bpp          = pDev->BitsPerPixel;
000312  6929              LDR      r1,[r5,#0x10]
000314  910c              STR      r1,[sp,#0x30]
;;;194      yPrev = y + 1;
000316  f1080601          ADD      r6,r8,#1
;;;195      if (hUsage) {
00031a  b3f0              CBZ      r0,|L1.922|
;;;196        int xOff, xSize, y0;
;;;197        pUsage = GUI_USAGE_H2P(hUsage);
00031c  f7fffffe          BL       GUI_ALLOC_h2p
000320  4607              MOV      r7,r0
;;;198        for (yi = 0; yi < ySize; yi++) {
000322  2400              MOVS     r4,#0
000324  f1ba0f00          CMP      r10,#0
000328  dd7c              BLE      |L1.1060|
                  |L1.810|
;;;199          yAct = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
00032a  fb04f009          MUL      r0,r4,r9
00032e  f44f717a          MOV      r1,#0x3e8
000332  f7fffffe          BL       GUI__DivideRound32
000336  eb000b08          ADD      r11,r0,r8
;;;200          if (yAct != yPrev) {
00033a  45b3              CMP      r11,r6
00033c  d06f              BEQ      |L1.1054|
;;;201            xOff  = 0;
00033e  2000              MOVS     r0,#0
000340  900b              STR      r0,[sp,#0x2c]
;;;202            xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
000342  68b8              LDR      r0,[r7,#8]
000344  4622              MOV      r2,r4
000346  a90b              ADD      r1,sp,#0x2c
000348  6943              LDR      r3,[r0,#0x14]
00034a  4638              MOV      r0,r7
00034c  4798              BLX      r3
00034e  4606              MOV      r6,r0
;;;203            if (xSize == pDev->XSize) {
000350  f9b51004          LDRSH    r1,[r5,#4]
000354  42b1              CMP      r1,r6
000356  d139              BNE      |L1.972|
;;;204              /* If the entire line is affected, calculate the number of entire lines */
;;;205              y0 = yi;
000358  46a3              MOV      r11,r4
;;;206              while (GUI_USAGE_GetNextDirty(pUsage, &xOff, yi + 1) == xSize) {
00035a  68b8              LDR      r0,[r7,#8]
00035c  1c62              ADDS     r2,r4,#1
00035e  a90b              ADD      r1,sp,#0x2c
000360  6943              LDR      r3,[r0,#0x14]
000362  4638              MOV      r0,r7
000364  4798              BLX      r3
000366  42b0              CMP      r0,r6
000368  d108              BNE      |L1.892|
                  |L1.874|
;;;207                yi++;
00036a  1c64              ADDS     r4,r4,#1
00036c  68b8              LDR      r0,[r7,#8]            ;206
00036e  1c62              ADDS     r2,r4,#1              ;206
000370  a90b              ADD      r1,sp,#0x2c           ;206
000372  6943              LDR      r3,[r0,#0x14]         ;206
000374  4638              MOV      r0,r7                 ;206
000376  4798              BLX      r3                    ;206
000378  42b0              CMP      r0,r6                 ;206
00037a  d0f6              BEQ      |L1.874|
                  |L1.892|
;;;208              }
;;;209              _DrawBitmapEx(x, y, 0, y0, pDev->XSize, yi - y0 + 1, xMag, yMag, Alpha,
00037c  f9b50006          LDRSH    r0,[r5,#6]
000380  ae06              ADD      r6,sp,#0x18
000382  9b0e              LDR      r3,[sp,#0x38]
000384  9a0d              LDR      r2,[sp,#0x34]
000386  990c              LDR      r1,[sp,#0x30]
000388  c60f              STM      r6!,{r0-r3}
00038a  f9b53004          LDRSH    r3,[r5,#4]
00038e  9812              LDR      r0,[sp,#0x48]
000390  469c              MOV      r12,r3
000392  9a1d              LDR      r2,[sp,#0x74]
000394  f8cd900c          STR      r9,[sp,#0xc]
000398  e000              B        |L1.924|
                  |L1.922|
00039a  e046              B        |L1.1066|
                  |L1.924|
00039c  9305              STR      r3,[sp,#0x14]
00039e  9002              STR      r0,[sp,#8]
0003a0  eba4000b          SUB      r0,r4,r11
0003a4  1c43              ADDS     r3,r0,#1
0003a6  9301              STR      r3,[sp,#4]
0003a8  9204              STR      r2,[sp,#0x10]
0003aa  f8cdc000          STR      r12,[sp,#0]
0003ae  465b              MOV      r3,r11
0003b0  2200              MOVS     r2,#0
0003b2  4641              MOV      r1,r8
0003b4  9810              LDR      r0,[sp,#0x40]
0003b6  f7fffffe          BL       _DrawBitmapEx
;;;210                            pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;211              yPrev = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
0003ba  fb04f009          MUL      r0,r4,r9
0003be  f44f717a          MOV      r1,#0x3e8
0003c2  f7fffffe          BL       GUI__DivideRound32
0003c6  eb000608          ADD      r6,r0,r8
0003ca  e028              B        |L1.1054|
                  |L1.972|
;;;212            } else {
;;;213              /* Draw the partial line which needs to be drawn */
;;;214              while (xSize) {
0003cc  b336              CBZ      r6,|L1.1052|
                  |L1.974|
;;;215                _DrawBitmapEx(x, y, xOff, yi, xSize, 1, xMag, yMag, Alpha,
0003ce  f9b50006          LDRSH    r0,[r5,#6]
0003d2  9b0e              LDR      r3,[sp,#0x38]
0003d4  9a0d              LDR      r2,[sp,#0x34]
0003d6  990c              LDR      r1,[sp,#0x30]
0003d8  e9cd2308          STRD     r2,r3,[sp,#0x20]
0003dc  9107              STR      r1,[sp,#0x1c]
0003de  9006              STR      r0,[sp,#0x18]
0003e0  f9b53004          LDRSH    r3,[r5,#4]
0003e4  9305              STR      r3,[sp,#0x14]
0003e6  2301              MOVS     r3,#1
0003e8  9812              LDR      r0,[sp,#0x48]
0003ea  9301              STR      r3,[sp,#4]
0003ec  9a1d              LDR      r2,[sp,#0x74]
0003ee  9204              STR      r2,[sp,#0x10]
0003f0  9002              STR      r0,[sp,#8]
0003f2  f8cd900c          STR      r9,[sp,#0xc]
0003f6  9600              STR      r6,[sp,#0]
0003f8  4623              MOV      r3,r4
0003fa  4641              MOV      r1,r8
0003fc  9a0b              LDR      r2,[sp,#0x2c]
0003fe  9810              LDR      r0,[sp,#0x40]
000400  f7fffffe          BL       _DrawBitmapEx
;;;216                              pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;217                xOff += xSize;
000404  980b              LDR      r0,[sp,#0x2c]
000406  4430              ADD      r0,r0,r6
000408  900b              STR      r0,[sp,#0x2c]
;;;218                xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
00040a  68b8              LDR      r0,[r7,#8]
00040c  4622              MOV      r2,r4
00040e  a90b              ADD      r1,sp,#0x2c
000410  6943              LDR      r3,[r0,#0x14]
000412  4638              MOV      r0,r7
000414  4798              BLX      r3
000416  4606              MOV      r6,r0
000418  2e00              CMP      r6,#0                 ;214
00041a  d1d8              BNE      |L1.974|
                  |L1.1052|
;;;219              }
;;;220              yPrev = yAct;
00041c  465e              MOV      r6,r11
                  |L1.1054|
00041e  1c64              ADDS     r4,r4,#1              ;198
000420  4554              CMP      r4,r10                ;198
000422  db82              BLT      |L1.810|
                  |L1.1060|
;;;221            }
;;;222          }
;;;223        }
;;;224      } else {
;;;225        _DrawBitmapEx(x, y, 0, 0, pDev->XSize, ySize, xMag, yMag, Alpha,
;;;226                      pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;227      }
;;;228    }
000424  b013              ADD      sp,sp,#0x4c
000426  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1066|
00042a  9a0d              LDR      r2,[sp,#0x34]         ;225
00042c  9b0e              LDR      r3,[sp,#0x38]         ;225
00042e  990c              LDR      r1,[sp,#0x30]         ;225
000430  9208              STR      r2,[sp,#0x20]         ;225
000432  9309              STR      r3,[sp,#0x24]         ;225
000434  9107              STR      r1,[sp,#0x1c]         ;225
000436  f8cda018          STR      r10,[sp,#0x18]        ;225
00043a  f9b53004          LDRSH    r3,[r5,#4]            ;225
00043e  9812              LDR      r0,[sp,#0x48]         ;225
000440  469c              MOV      r12,r3                ;225
000442  f8cdc000          STR      r12,[sp,#0]           ;225
000446  9a1d              LDR      r2,[sp,#0x74]         ;225
000448  9305              STR      r3,[sp,#0x14]         ;225
00044a  f8cda004          STR      r10,[sp,#4]           ;225
00044e  9204              STR      r2,[sp,#0x10]         ;225
000450  9002              STR      r0,[sp,#8]            ;225
000452  2300              MOVS     r3,#0                 ;225
000454  f8cd900c          STR      r9,[sp,#0xc]          ;225
000458  461a              MOV      r2,r3                 ;225
00045a  4641              MOV      r1,r8                 ;225
00045c  9810              LDR      r0,[sp,#0x40]         ;225
00045e  f7fffffe          BL       _DrawBitmapEx
000462  b013              ADD      sp,sp,#0x4c
000464  e8bd8ff0          POP      {r4-r11,pc}
;;;229    
                          ENDP

                  GUI_MEMDEV_WriteExAt PROC
;;;239    */
;;;240    void GUI_MEMDEV_WriteExAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
000468  e92d47f0          PUSH     {r4-r10,lr}
00046c  b084              SUB      sp,sp,#0x10
00046e  4606              MOV      r6,r0
000470  f8dd9034          LDR      r9,[sp,#0x34]
000474  f8dd8030          LDR      r8,[sp,#0x30]
000478  460d              MOV      r5,r1
00047a  4617              MOV      r7,r2
00047c  469a              MOV      r10,r3
;;;241      if (hMem) {
00047e  2e00              CMP      r6,#0
000480  d026              BEQ      |L1.1232|
;;;242        GUI_MEMDEV* pDevData;
;;;243        GUI_RECT ClipRectPrev;
;;;244        GUI_LOCK();
000482  f7fffffe          BL       GUI_Lock
;;;245        pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);
000486  4630              MOV      r0,r6
000488  f7fffffe          BL       GUI_ALLOC_h2p
;;;246        if (x == GUI_POS_AUTO) {
00048c  f64071ff          MOV      r1,#0xfff
000490  1949              ADDS     r1,r1,r5
000492  d103              BNE      |L1.1180|
;;;247          x = pDevData->x0;
000494  f9b05000          LDRSH    r5,[r0,#0]
;;;248          y = pDevData->y0;
000498  f9b07002          LDRSH    r7,[r0,#2]
                  |L1.1180|
;;;249        }
;;;250        ClipRectPrev = GUI_Context.ClipRect;
00049c  4c0e              LDR      r4,|L1.1240|
00049e  68e1              LDR      r1,[r4,#0xc]  ; GUI_Context
0004a0  68a0              LDR      r0,[r4,#8]  ; GUI_Context
0004a2  9103              STR      r1,[sp,#0xc]
0004a4  9002              STR      r0,[sp,#8]
;;;251        LCD_SetClipRectMax();
0004a6  f7fffffe          BL       LCD_SetClipRectMax
;;;252        _WriteExToActiveAt(hMem, x, y, xMag, yMag, Alpha);
0004aa  4653              MOV      r3,r10
0004ac  463a              MOV      r2,r7
0004ae  4629              MOV      r1,r5
0004b0  4630              MOV      r0,r6
0004b2  f8cd9004          STR      r9,[sp,#4]
0004b6  f8cd8000          STR      r8,[sp,#0]
0004ba  f7fffffe          BL       _WriteExToActiveAt
;;;253        GUI_Context.ClipRect = ClipRectPrev;
0004be  9903              LDR      r1,[sp,#0xc]
0004c0  9802              LDR      r0,[sp,#8]
0004c2  60e1              STR      r1,[r4,#0xc]  ; GUI_Context
0004c4  60a0              STR      r0,[r4,#8]  ; GUI_Context
;;;254        GUI_UNLOCK();
0004c6  b004              ADD      sp,sp,#0x10
0004c8  e8bd47f0          POP      {r4-r10,lr}
0004cc  f7ffbffe          B.W      GUI_Unlock
                  |L1.1232|
;;;255      }
;;;256    }
0004d0  b004              ADD      sp,sp,#0x10
0004d2  e8bd87f0          POP      {r4-r10,pc}
0004d6  0000              DCW      0x0000
                  |L1.1240|
                          DCD      GUI_Context
                          ENDP

                  GUI_MEMDEV_WriteEx PROC
;;;261    */
;;;262    void GUI_MEMDEV_WriteEx(GUI_MEMDEV_Handle hMem, int xMag, int yMag, int Alpha) {
0004dc  b500              PUSH     {lr}
0004de  b083              SUB      sp,sp,#0xc
;;;263      GUI_MEMDEV_WriteExAt(hMem, GUI_POS_AUTO, GUI_POS_AUTO, xMag, yMag, Alpha);
0004e0  9301              STR      r3,[sp,#4]
0004e2  460b              MOV      r3,r1
0004e4  4903              LDR      r1,|L1.1268|
0004e6  9200              STR      r2,[sp,#0]
0004e8  460a              MOV      r2,r1
0004ea  f7fffffe          BL       GUI_MEMDEV_WriteExAt
;;;264    }
0004ee  b003              ADD      sp,sp,#0xc
0004f0  bd00              POP      {pc}
;;;265    
                          ENDP

0004f2  0000              DCW      0x0000
                  |L1.1268|
                          DCD      0xfffff001
