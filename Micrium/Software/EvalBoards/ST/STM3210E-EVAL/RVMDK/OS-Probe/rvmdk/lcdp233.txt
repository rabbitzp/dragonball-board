; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcdp233.o --depend=.\rvmdk\lcdp233.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcdp233.crf ..\..\..\..\..\uCGUI\GUI\ConvertColor\LCDP233.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_Color2Index_233 PROC
;;;33     */
;;;34     unsigned LCD_Color2Index_233(LCD_COLOR Color) {
000000  b410              PUSH     {r4}
;;;35       int r, g, b;
;;;36       r = Color & 255;
000002  b2c2              UXTB     r2,r0
;;;37       g = (Color >> 8 ) & 255;
000004  f3c02107          UBFX     r1,r0,#8,#8
;;;38       b = Color >> 16;
000008  0c03              LSRS     r3,r0,#16
;;;39       r = (r * 7 + 127) / 255;
00000a  ebc200c2          RSB      r0,r2,r2,LSL #3
00000e  4c21              LDR      r4,|L1.148|
000010  f04f0c00          MOV      r12,#0
000014  307f              ADDS     r0,r0,#0x7f
000016  4662              MOV      r2,r12
000018  fbc42000          SMLAL    r2,r0,r4,r0
00001c  11c2              ASRS     r2,r0,#7
00001e  eba272e0          SUB      r2,r2,r0,ASR #31
;;;40       g = (g * 7 + 127) / 255;
000022  ebc100c1          RSB      r0,r1,r1,LSL #3
000026  307f              ADDS     r0,r0,#0x7f
000028  fbc4c000          SMLAL    r12,r0,r4,r0
00002c  11c1              ASRS     r1,r0,#7
00002e  eba171e0          SUB      r1,r1,r0,ASR #31
;;;41       b = (b + 42) / 85;
000032  f103002a          ADD      r0,r3,#0x2a
000036  4b18              LDR      r3,|L1.152|
000038  fb833000          SMULL    r3,r0,r3,r0
00003c  1143              ASRS     r3,r0,#5
00003e  eba370e0          SUB      r0,r3,r0,ASR #31
;;;42       return r + (g << 3) + (b << 6);
000042  eb0201c1          ADD      r1,r2,r1,LSL #3
;;;43     }
000046  bc10              POP      {r4}
000048  eb011080          ADD      r0,r1,r0,LSL #6       ;42
00004c  4770              BX       lr
;;;44     
                          ENDP

                  LCD_Index2Color_233 PROC
;;;48     */
;;;49     LCD_COLOR LCD_Index2Color_233(int Index) {
00004e  f0000107          AND      r1,r0,#7
;;;50       int r, g, b;
;;;51       r = (Index & 7) * 255 / 7;
000052  ebc12101          RSB      r1,r1,r1,LSL #8
000056  eb011181          ADD      r1,r1,r1,LSL #6
00005a  eb0101c1          ADD      r1,r1,r1,LSL #3
00005e  f2012149          ADD      r1,r1,#0x249
000062  0b0a              LSRS     r2,r1,#12
;;;52       g = ((Index >> 3) & 7) * 255 / 7;
000064  f3c001c2          UBFX     r1,r0,#3,#3
000068  ebc12101          RSB      r1,r1,r1,LSL #8
00006c  eb011181          ADD      r1,r1,r1,LSL #6
000070  eb0101c1          ADD      r1,r1,r1,LSL #3
000074  f2012149          ADD      r1,r1,#0x249
000078  0b09              LSRS     r1,r1,#12
;;;53       b = ((Index >> 6) & 3) * 85;
00007a  f3c01081          UBFX     r0,r0,#6,#2
00007e  eb001000          ADD      r0,r0,r0,LSL #4
000082  eb000080          ADD      r0,r0,r0,LSL #2
;;;54       return r + (g << 8) + (((U32)b) << 16);
000086  eb022101          ADD      r1,r2,r1,LSL #8
00008a  eb014000          ADD      r0,r1,r0,LSL #16
;;;55     }
00008e  4770              BX       lr
;;;56     
                          ENDP

                  LCD_GetIndexMask_233 PROC
;;;60     */
;;;61     unsigned LCD_GetIndexMask_233(void) {
000090  20ff              MOVS     r0,#0xff
;;;62       return 0xff;
;;;63     }
000092  4770              BX       lr
;;;64     
                          ENDP

                  |L1.148|
                          DCD      0x80808081
                  |L1.152|
                          DCD      0x60606061
