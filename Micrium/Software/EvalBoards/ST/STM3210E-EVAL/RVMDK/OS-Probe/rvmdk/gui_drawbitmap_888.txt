; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_drawbitmap_888.o --depend=.\rvmdk\gui_drawbitmap_888.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_drawbitmap_888.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_DrawBitmap_888.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;33     */
;;;34     static void _DrawBitmap(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4682              MOV      r10,r0
000008  9e1a              LDR      r6,[sp,#0x68]
00000a  4614              MOV      r4,r2
00000c  4699              MOV      r9,r3
;;;35       const U32 * pData;
;;;36       int y, OldIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
00000e  f04f0b00          MOV      r11,#0
;;;37       U32 PrevColor;
;;;38       GUI_USE_PARA(pLogPal);
;;;39       OldIndex = LCD_GetColorIndex();
000012  f7fffffe          BL       LCD_GetColorIndex
000016  9007              STR      r0,[sp,#0x1c]
;;;40       PrevColor = GUI_INVALID_COLOR;
000018  f06f4770          MVN      r7,#0xf0000000
;;;41       pData = (const U32 *)pPixel;
;;;42       Mag = (xMag | yMag);
00001c  991c              LDR      r1,[sp,#0x70]
00001e  981d              LDR      r0,[sp,#0x74]
000020  ea410800          ORR      r8,r1,r0
;;;43       BytesPerLine = xsize * 4;
000024  00a5              LSLS     r5,r4,#2
;;;44       /* Check if bitmaps color format fits to the current color conversion */
;;;45       if (Mag == 1) {
000026  f1b80f01          CMP      r8,#1
00002a  d10b              BNE      |L1.68|
;;;46         #if GUI_SUPPORT_MEMDEV
;;;47         if (!GUI_Context.hDevData) {
00002c  4885              LDR      r0,|L1.580|
00002e  f8b01050          LDRH     r1,[r0,#0x50]  ; GUI_Context
000032  b939              CBNZ     r1,|L1.68|
;;;48         #else
;;;49         {
;;;50         #endif
;;;51           if (LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer) == pfIndex2Color) {
000034  7c40              LDRB     r0,[r0,#0x11]  ; GUI_Context
000036  f7fffffe          BL       LCD_GetpfIndex2ColorEx
00003a  991e              LDR      r1,[sp,#0x78]
00003c  4288              CMP      r0,r1
00003e  d101              BNE      |L1.68|
;;;52             UseDrawBitmap = 1;
000040  f04f0b01          MOV      r11,#1
                  |L1.68|
;;;53           }
;;;54         }
;;;55       }
;;;56       if (UseDrawBitmap) {
000044  f1bb0f00          CMP      r11,#0
000048  d011              BEQ      |L1.110|
;;;57         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 24, BytesPerLine, pPixel, 0);
00004a  2300              MOVS     r3,#0
00004c  9305              STR      r3,[sp,#0x14]
00004e  2301              MOVS     r3,#1
000050  2018              MOVS     r0,#0x18
000052  9604              STR      r6,[sp,#0x10]
000054  9002              STR      r0,[sp,#8]
000056  9300              STR      r3,[sp,#0]
000058  9301              STR      r3,[sp,#4]
00005a  9503              STR      r5,[sp,#0xc]
00005c  464b              MOV      r3,r9
00005e  4622              MOV      r2,r4
000060  4650              MOV      r0,r10
000062  990e              LDR      r1,[sp,#0x38]
000064  f7fffffe          BL       LCD_DrawBitmap
                  |L1.104|
;;;58       } else {
;;;59         if (Mag == 1) {
;;;60           /* Perform clipping */
;;;61           int x1, y1, Diff;
;;;62           y1 = y0 + ysize - 1;
;;;63           x1 = x0 + xsize - 1;
;;;64           /* Clip Y */
;;;65           if (y0 < GUI_Context.ClipRect.y0) {
;;;66             Diff = GUI_Context.ClipRect.y0 - y0;
;;;67             y0   = GUI_Context.ClipRect.y0;
;;;68             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;69               pData += (U32)Diff * (U32)BytesPerLine / 4;
;;;70             #else
;;;71               pData += (unsigned)Diff * (unsigned)BytesPerLine / 4;
;;;72             #endif
;;;73             ysize -= Diff;
;;;74           }
;;;75           Diff = y1 - GUI_Context.ClipRect.y1;
;;;76           if (Diff > 0) {
;;;77             ysize -= Diff;
;;;78           }
;;;79           if (ysize <=0) {
;;;80     		    return;
;;;81           }
;;;82           /* Clip right side */
;;;83           Diff = x1 - GUI_Context.ClipRect.x1;
;;;84           if (Diff > 0) {
;;;85             xsize -= Diff;
;;;86           }
;;;87           /* Clip left side */
;;;88           if (x0 < GUI_Context.ClipRect.x0) {
;;;89             Diff = GUI_Context.ClipRect.x0 - x0;
;;;90     			  xsize -= Diff;
;;;91             pData += Diff; 
;;;92             x0 += Diff; 
;;;93           }
;;;94           if (xsize <=0) {
;;;95     		    return;
;;;96           }
;;;97           /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;98           for (y = 0; y < ysize; y++) {
;;;99             int x;
;;;100            const U32 * p = pData;
;;;101            for (x = 0; x < xsize; x++) {
;;;102              U32 Color;
;;;103              Color = *p++;
;;;104              if (Color != PrevColor) {
;;;105                LCD_SetColor(pfIndex2Color(Color));
;;;106                PrevColor = Color;
;;;107              }
;;;108              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;109            }
;;;110            pData += BytesPerLine / 4;
;;;111          }
;;;112        } else {
;;;113          /* Magnified output using LCD_FillRect() */
;;;114          int x,y;
;;;115          int yi;
;;;116          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
;;;117            int yMax;
;;;118            yMax = y + yMag - 1;
;;;119            /* Draw if within clip area */
;;;120            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;121              int xi;
;;;122              const U32 GUI_UNI_PTR * p = pData;
;;;123              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;124                U32 Color;
;;;125                Color = *p++;
;;;126                if (Color != PrevColor) {
;;;127                  LCD_SetColor(pfIndex2Color(Color));
;;;128                  PrevColor = Color;
;;;129                }
;;;130                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;131              }
;;;132            }
;;;133            pData += BytesPerLine / 4;
;;;134          }
;;;135        }
;;;136        GUI_SetColorIndex(OldIndex);
;;;137      }
;;;138    }
000068  b011              ADD      sp,sp,#0x44
00006a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.110|
00006e  f1b80f01          CMP      r8,#1                 ;59
000072  d04e              BEQ      |L1.274|
000074  980e              LDR      r0,[sp,#0x38]         ;116
000076  9005              STR      r0,[sp,#0x14]         ;116
000078  2000              MOVS     r0,#0                 ;116
00007a  9004              STR      r0,[sp,#0x10]         ;116
00007c  f1b90f00          CMP      r9,#0                 ;116
000080  dd41              BLE      |L1.262|
000082  17e8              ASRS     r0,r5,#31             ;110
000084  eb057090          ADD      r0,r5,r0,LSR #30      ;110
000088  f0200003          BIC      r0,r0,#3              ;110
00008c  900a              STR      r0,[sp,#0x28]         ;110
                  |L1.142|
00008e  9905              LDR      r1,[sp,#0x14]         ;118
000090  981d              LDR      r0,[sp,#0x74]         ;118
000092  4408              ADD      r0,r0,r1              ;118
000094  9009              STR      r0,[sp,#0x24]         ;118
000096  1e40              SUBS     r0,r0,#1              ;118
000098  9003              STR      r0,[sp,#0xc]          ;118
00009a  496a              LDR      r1,|L1.580|
00009c  9803              LDR      r0,[sp,#0xc]          ;120
00009e  f9b1200a          LDRSH    r2,[r1,#0xa]          ;120  ; GUI_Context
0000a2  4282              CMP      r2,r0                 ;120
0000a4  dc25              BGT      |L1.242|
0000a6  f9b1100e          LDRSH    r1,[r1,#0xe]          ;120  ; GUI_Context
0000aa  9805              LDR      r0,[sp,#0x14]         ;120
0000ac  4281              CMP      r1,r0                 ;120
0000ae  db20              BLT      |L1.242|
0000b0  4635              MOV      r5,r6                 ;122
0000b2  f8cda018          STR      r10,[sp,#0x18]        ;123
0000b6  f04f0800          MOV      r8,#0                 ;123
0000ba  2c00              CMP      r4,#0                 ;123
0000bc  dd19              BLE      |L1.242|
                  |L1.190|
0000be  f855bb04          LDR      r11,[r5],#4           ;125
0000c2  45bb              CMP      r11,r7                ;126
0000c4  d005              BEQ      |L1.210|
0000c6  991e              LDR      r1,[sp,#0x78]         ;127
0000c8  4658              MOV      r0,r11                ;127
0000ca  4788              BLX      r1                    ;127
0000cc  f7fffffe          BL       LCD_SetColor
0000d0  465f              MOV      r7,r11                ;128
                  |L1.210|
0000d2  991c              LDR      r1,[sp,#0x70]         ;130
0000d4  9806              LDR      r0,[sp,#0x18]         ;130
0000d6  9b03              LDR      r3,[sp,#0xc]          ;130
0000d8  eb000b01          ADD      r11,r0,r1             ;130
0000dc  f1ab0201          SUB      r2,r11,#1             ;130
0000e0  9905              LDR      r1,[sp,#0x14]         ;130
0000e2  f7fffffe          BL       LCD_FillRect
0000e6  f1080801          ADD      r8,r8,#1              ;123
0000ea  f8cdb018          STR      r11,[sp,#0x18]        ;123
0000ee  45a0              CMP      r8,r4                 ;123
0000f0  dbe5              BLT      |L1.190|
                  |L1.242|
0000f2  980a              LDR      r0,[sp,#0x28]         ;133
0000f4  4406              ADD      r6,r6,r0              ;133
0000f6  9804              LDR      r0,[sp,#0x10]         ;116
0000f8  1c40              ADDS     r0,r0,#1              ;116
0000fa  9004              STR      r0,[sp,#0x10]         ;116
0000fc  9809              LDR      r0,[sp,#0x24]         ;116
0000fe  9005              STR      r0,[sp,#0x14]         ;116
000100  9804              LDR      r0,[sp,#0x10]         ;116
000102  4548              CMP      r0,r9                 ;116
000104  dbc3              BLT      |L1.142|
                  |L1.262|
000106  9807              LDR      r0,[sp,#0x1c]         ;136
000108  b011              ADD      sp,sp,#0x44           ;136
00010a  e8bd4ff0          POP      {r4-r11,lr}           ;136
00010e  f7ffbffe          B.W      GUI_SetColorIndex
                  |L1.274|
000112  980e              LDR      r0,[sp,#0x38]         ;62
000114  4448              ADD      r0,r0,r9              ;62
000116  f1a00c01          SUB      r12,r0,#1             ;62
00011a  eb0a0004          ADD      r0,r10,r4             ;63
00011e  1e43              SUBS     r3,r0,#1              ;63
000120  4a48              LDR      r2,|L1.580|
000122  990e              LDR      r1,[sp,#0x38]         ;65
000124  f9b2000a          LDRSH    r0,[r2,#0xa]          ;65  ; GUI_Context
000128  4288              CMP      r0,r1                 ;65
00012a  dd09              BLE      |L1.320|
00012c  990e              LDR      r1,[sp,#0x38]         ;66
00012e  1a41              SUBS     r1,r0,r1              ;66
000130  900e              STR      r0,[sp,#0x38]         ;67
000132  fb01f005          MUL      r0,r1,r5              ;71
000136  f0200003          BIC      r0,r0,#3              ;71
00013a  4406              ADD      r6,r6,r0              ;71
00013c  eba90901          SUB      r9,r9,r1              ;73
                  |L1.320|
000140  f9b2000e          LDRSH    r0,[r2,#0xe]          ;75  ; GUI_Context
000144  ebac0000          SUB      r0,r12,r0             ;75
000148  2800              CMP      r0,#0                 ;76
00014a  dd01              BLE      |L1.336|
00014c  eba90900          SUB      r9,r9,r0              ;77
                  |L1.336|
000150  f1b90f00          CMP      r9,#0                 ;79
000154  dd88              BLE      |L1.104|
000156  f9b2000c          LDRSH    r0,[r2,#0xc]          ;83  ; GUI_Context
00015a  1a18              SUBS     r0,r3,r0              ;83
00015c  2800              CMP      r0,#0                 ;84
00015e  dd00              BLE      |L1.354|
000160  1a24              SUBS     r4,r4,r0              ;85
                  |L1.354|
000162  f9b20008          LDRSH    r0,[r2,#8]            ;88  ; GUI_Context
000166  4550              CMP      r0,r10                ;88
000168  dd05              BLE      |L1.374|
00016a  eba0000a          SUB      r0,r0,r10             ;89
00016e  1a24              SUBS     r4,r4,r0              ;90
000170  eb060680          ADD      r6,r6,r0,LSL #2       ;91
000174  4482              ADD      r10,r10,r0            ;92
                  |L1.374|
000176  2c00              CMP      r4,#0                 ;94
000178  f77faf76          BLE      |L1.104|
00017c  2000              MOVS     r0,#0                 ;98
00017e  9008              STR      r0,[sp,#0x20]         ;98
000180  17e8              ASRS     r0,r5,#31             ;110
000182  eb057090          ADD      r0,r5,r0,LSR #30      ;110
000186  f0200003          BIC      r0,r0,#3              ;110
00018a  900c              STR      r0,[sp,#0x30]         ;110
                  |L1.396|
00018c  46b0              MOV      r8,r6                 ;100
00018e  2500              MOVS     r5,#0                 ;101
000190  2c00              CMP      r4,#0                 ;101
000192  dd19              BLE      |L1.456|
000194  9908              LDR      r1,[sp,#0x20]         ;108
000196  980e              LDR      r0,[sp,#0x38]         ;108
000198  4408              ADD      r0,r0,r1              ;108
00019a  900b              STR      r0,[sp,#0x2c]         ;108
                  |L1.412|
00019c  f858bb04          LDR      r11,[r8],#4           ;103
0001a0  45bb              CMP      r11,r7                ;104
0001a2  d005              BEQ      |L1.432|
0001a4  991e              LDR      r1,[sp,#0x78]         ;105
0001a6  4658              MOV      r0,r11                ;105
0001a8  4788              BLX      r1                    ;105
0001aa  f7fffffe          BL       LCD_SetColor
0001ae  465f              MOV      r7,r11                ;106
                  |L1.432|
0001b0  4824              LDR      r0,|L1.580|
0001b2  eb050c0a          ADD      r12,r5,r10            ;108
0001b6  990b              LDR      r1,[sp,#0x2c]         ;108
0001b8  8842              LDRH     r2,[r0,#2]            ;108  ; GUI_Context
0001ba  6cc0              LDR      r0,[r0,#0x4c]         ;108  ; GUI_Context
0001bc  6a43              LDR      r3,[r0,#0x24]         ;108
0001be  4660              MOV      r0,r12                ;108
0001c0  4798              BLX      r3                    ;108
0001c2  1c6d              ADDS     r5,r5,#1              ;101
0001c4  42a5              CMP      r5,r4                 ;101
0001c6  dbe9              BLT      |L1.412|
                  |L1.456|
0001c8  980c              LDR      r0,[sp,#0x30]         ;110
0001ca  4406              ADD      r6,r6,r0              ;110
0001cc  9808              LDR      r0,[sp,#0x20]         ;98
0001ce  1c40              ADDS     r0,r0,#1              ;98
0001d0  9008              STR      r0,[sp,#0x20]         ;98
0001d2  9808              LDR      r0,[sp,#0x20]         ;98
0001d4  4548              CMP      r0,r9                 ;98
0001d6  dbd9              BLT      |L1.396|
0001d8  e795              B        |L1.262|
;;;139    
                          ENDP

                  _DrawBitmap_888 PROC
;;;143    */
;;;144    static void _DrawBitmap_888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
0001da  b5f0              PUSH     {r4-r7,lr}
0001dc  b085              SUB      sp,sp,#0x14
0001de  4604              MOV      r4,r0
0001e0  460d              MOV      r5,r1
0001e2  4616              MOV      r6,r2
0001e4  f8ddc028          LDR      r12,[sp,#0x28]
0001e8  9a0d              LDR      r2,[sp,#0x34]
0001ea  990c              LDR      r1,[sp,#0x30]
0001ec  980b              LDR      r0,[sp,#0x2c]
0001ee  461f              MOV      r7,r3
;;;145      _DrawBitmap(x0, y0, xsize, ysize, pPixel, pLogPal, xMag, yMag, GUI_BitmapMethods888.pfIndex2Color);
0001f0  4b15              LDR      r3,|L1.584|
0001f2  f8cdc000          STR      r12,[sp,#0]
0001f6  e9cd2303          STRD     r2,r3,[sp,#0xc]
0001fa  9102              STR      r1,[sp,#8]
0001fc  9001              STR      r0,[sp,#4]
0001fe  463b              MOV      r3,r7
000200  4632              MOV      r2,r6
000202  4629              MOV      r1,r5
000204  4620              MOV      r0,r4
000206  f7fffffe          BL       _DrawBitmap
;;;146    }
00020a  b005              ADD      sp,sp,#0x14
00020c  bdf0              POP      {r4-r7,pc}
;;;147    
                          ENDP

                  _DrawBitmap_M888 PROC
;;;151    */
;;;152    static void _DrawBitmap_M888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
00020e  b5f0              PUSH     {r4-r7,lr}
000210  b085              SUB      sp,sp,#0x14
000212  4604              MOV      r4,r0
000214  460d              MOV      r5,r1
000216  4616              MOV      r6,r2
000218  f8ddc028          LDR      r12,[sp,#0x28]
00021c  9a0d              LDR      r2,[sp,#0x34]
00021e  990c              LDR      r1,[sp,#0x30]
000220  980b              LDR      r0,[sp,#0x2c]
000222  461f              MOV      r7,r3
;;;153      _DrawBitmap(x0, y0, xsize, ysize, pPixel, pLogPal, xMag, yMag, GUI_BitmapMethodsM888.pfIndex2Color);
000224  4b09              LDR      r3,|L1.588|
000226  f8cdc000          STR      r12,[sp,#0]
00022a  e9cd2303          STRD     r2,r3,[sp,#0xc]
00022e  9102              STR      r1,[sp,#8]
000230  9001              STR      r0,[sp,#4]
000232  463b              MOV      r3,r7
000234  4632              MOV      r2,r6
000236  4629              MOV      r1,r5
000238  4620              MOV      r0,r4
00023a  f7fffffe          BL       _DrawBitmap
;;;154    }
00023e  b005              ADD      sp,sp,#0x14
000240  bdf0              POP      {r4-r7,pc}
;;;155    
                          ENDP

000242  0000              DCW      0x0000
                  |L1.580|
                          DCD      GUI_Context
                  |L1.584|
                          DCD      LCD_Index2Color_888
                  |L1.588|
                          DCD      LCD_Index2Color_M888

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethods888
                          DCD      _DrawBitmap_888
                          DCD      LCD_Index2Color_888

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.constdata||
                  GUI_BitmapMethodsM888
                          DCD      _DrawBitmap_M888
                          DCD      LCD_Index2Color_M888
