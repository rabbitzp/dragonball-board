; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guidev_usagebm.o --depend=.\rvmdk\guidev_usagebm.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guidev_usagebm.crf ..\..\..\..\..\uCGUI\GUI\MemDev\GUIDEV_UsageBM.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GUI_USAGE_BM_AddPixel PROC
;;;54     */
;;;55     static void GUI_USAGE_BM_AddPixel(GUI_USAGE* p, int x, int y) {
000000  f9b03000          LDRSH    r3,[r0,#0]
;;;56       U8* pData;
;;;57       GUI_USAGE_BM * pThis = (GUI_USAGE_BM*)p;
;;;58       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;59         if ((x >= pThis->Public.x0 + pThis->Public.XSize) | (x < pThis->Public.x0)
;;;60           | (y >= pThis->Public.y0 + pThis->Public.YSize) | (y < pThis->Public.y0))
;;;61         {
;;;62           GUI_DEBUG_ERROROUT2("GUI_USAGE_BM_AddPixel: parameters out of bounds",x,y);
;;;63         }
;;;64       #endif
;;;65       x -= pThis->Public.x0;
000004  1ac9              SUBS     r1,r1,r3
;;;66       pData =  (U8*)(pThis+1); 
000006  f1000314          ADD      r3,r0,#0x14
;;;67       pData += (y-pThis->Public.y0) * pThis->Private.BytesPerLine;
00000a  f9b0c002          LDRSH    r12,[r0,#2]
00000e  6900              LDR      r0,[r0,#0x10]
000010  eba2020c          SUB      r2,r2,r12
000014  fb023000          MLA      r0,r2,r0,r3
;;;68       pData += x>>3;
000018  eb0000e1          ADD      r0,r0,r1,ASR #3
;;;69       *pData|= 0x80>>(x&7);
00001c  f0010107          AND      r1,r1,#7
000020  7802              LDRB     r2,[r0,#0]
000022  2380              MOVS     r3,#0x80
000024  fa23f101          LSR      r1,r3,r1
000028  4311              ORRS     r1,r1,r2
00002a  7001              STRB     r1,[r0,#0]
;;;70     }
00002c  4770              BX       lr
;;;71     
                          ENDP

                  GUI_USAGE_BM_AddHLine PROC
;;;75     */
;;;76     static void GUI_USAGE_BM_AddHLine(GUI_USAGE* p, int x, int y, int len) {
00002e  b570              PUSH     {r4-r6,lr}
;;;77     #if 0   /* Enable for the slower, but smaller version ... xxx*/
;;;78       while (len-- >0)
;;;79         GUI_USAGE_BM_AddPixel(h, x++,y);
;;;80     #else
;;;81       U8* pData;
;;;82       GUI_USAGE_BM * pThis = (GUI_USAGE_BM*)p;
;;;83       /* Asserts */
;;;84       GUI_DEBUG_ERROROUT3_IF( x<pThis->Public.x0, "GUIDEV.c: MarkPixels: negative x offset, Act= %d, Border= %d, Clip= %d"
;;;85                         ,x, pThis->Public.x0, GUI_Context.ClipRect.x0);
;;;86       /* Calculate pointers */
;;;87       x -= pThis->Public.x0;
000030  f9b0c000          LDRSH    r12,[r0,#0]
000034  eba1010c          SUB      r1,r1,r12
;;;88       pData =  (U8*)(pThis+1); 
000038  f1000c14          ADD      r12,r0,#0x14
;;;89       pData += (y-pThis->Public.y0) * pThis->Private.BytesPerLine;
00003c  f9b04002          LDRSH    r4,[r0,#2]
000040  6900              LDR      r0,[r0,#0x10]
000042  1b12              SUBS     r2,r2,r4
000044  fb02c000          MLA      r0,r2,r0,r12
;;;90       pData += x>>3;
000048  eb0000e1          ADD      r0,r0,r1,ASR #3
;;;91       /* Set bits */
;;;92       {  
;;;93         int x1 = x+len-1;   /* last pixel */
00004c  18ca              ADDS     r2,r1,r3
00004e  1e53              SUBS     r3,r2,#1
;;;94         int NumBytes = (x1>>3) - (x>>3);
000050  10da              ASRS     r2,r3,#3
000052  eba202e1          SUB      r2,r2,r1,ASR #3
;;;95         U8 Mask0 = 0xff >> (x&7);
000056  f0010107          AND      r1,r1,#7
00005a  f04f0cff          MOV      r12,#0xff
00005e  fa2cf101          LSR      r1,r12,r1
;;;96         U8 Mask1 = 0xff << (7-(x1&7));
000062  f0030307          AND      r3,r3,#7
000066  f1c30307          RSB      r3,r3,#7
00006a  fa0cf303          LSL      r3,r12,r3
00006e  b2dd              UXTB     r5,r3
;;;97         if (NumBytes ==0) {
000070  b182              CBZ      r2,|L1.148|
;;;98           *pData |= (Mask0&Mask1);
;;;99         } else {
;;;100          *pData++ |= Mask0;               /* Mark first byte */
000072  7803              LDRB     r3,[r0,#0]
000074  4319              ORRS     r1,r1,r3
000076  7001              STRB     r1,[r0,#0]
000078  1c44              ADDS     r4,r0,#1
;;;101          /* Mark middle bytes */
;;;102          if (--NumBytes > 0) {
00007a  1e56              SUBS     r6,r2,#1
00007c  2e00              CMP      r6,#0
00007e  dd05              BLE      |L1.140|
;;;103            memset (pData, 0xff, NumBytes);
000080  22ff              MOVS     r2,#0xff
000082  4631              MOV      r1,r6
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       __aeabi_memset
;;;104            pData += NumBytes;
00008a  4434              ADD      r4,r4,r6
                  |L1.140|
;;;105          }
;;;106          *pData |= Mask1;                 /* Mark last bytes */
00008c  7820              LDRB     r0,[r4,#0]
00008e  4328              ORRS     r0,r0,r5
000090  7020              STRB     r0,[r4,#0]
;;;107        }
;;;108      }
;;;109    #endif
;;;110    }
000092  bd70              POP      {r4-r6,pc}
                  |L1.148|
000094  7802              LDRB     r2,[r0,#0]            ;98
000096  4029              ANDS     r1,r1,r5              ;98
000098  4311              ORRS     r1,r1,r2              ;98
00009a  7001              STRB     r1,[r0,#0]            ;98
00009c  bd70              POP      {r4-r6,pc}
;;;111    
                          ENDP

                  GUI_USAGE_BM_Clear PROC
;;;115    */
;;;116    static void GUI_USAGE_BM_Clear(GUI_USAGE* p) {
00009e  f9b01006          LDRSH    r1,[r0,#6]
;;;117      GUI_USAGE_BM * pThis = (GUI_USAGE_BM*) p;
;;;118      memset (pThis+1, 0, pThis->Public.YSize * pThis->Private.BytesPerLine);
0000a2  6902              LDR      r2,[r0,#0x10]
0000a4  4351              MULS     r1,r2,r1
0000a6  3014              ADDS     r0,r0,#0x14
0000a8  f7ffbffe          B.W      __aeabi_memclr4
;;;119    }
;;;120    
                          ENDP

                  GUI_USAGE_BM_GetNextDirty PROC
;;;124    */
;;;125    static int GUI_USAGE_BM_GetNextDirty(GUI_USAGE* p, int *pxOff, int yOff) {
0000ac  b430              PUSH     {r4,r5}
;;;126      int x = *pxOff;
0000ae  680b              LDR      r3,[r1,#0]
;;;127      int xEnd;
;;;128      GUI_USAGE_BM * pThis = (GUI_USAGE_BM*)p;
;;;129      int xSize = pThis->Public.XSize;
0000b0  f9b0c004          LDRSH    r12,[r0,#4]
;;;130      U8* pData = (U8*)(pThis+1);
0000b4  f1000414          ADD      r4,r0,#0x14
;;;131      if (yOff >= pThis->Public.YSize) {
0000b8  f9b05006          LDRSH    r5,[r0,#6]
0000bc  4295              CMP      r5,r2
0000be  dc02              BGT      |L1.198|
;;;132        return 0;
;;;133      }
;;;134      pData += yOff * pThis->Private.BytesPerLine;
;;;135      pData += (x>>3);
;;;136      if (x>=xSize)
;;;137        return 0;
;;;138      {
;;;139    /* Find first bit */
;;;140        int BytesLeft = ((xSize-1) >>3) - (x>>3);
;;;141        /* Check first byte */
;;;142        U8 Data = (*pData++) << (x&7);
;;;143        while (Data == 0) {
;;;144          if (BytesLeft ==0)
;;;145            return 0;
;;;146          Data = *pData++;
;;;147          BytesLeft--;
;;;148          x= (x+8) & ~7;
;;;149        }
;;;150        while ((Data&0x80) ==0) {
;;;151          Data<<=1;
;;;152          x++;
;;;153        }
;;;154    /* Find last cleared byte */
;;;155        if (Data != 0xff) {   /* This line is simply a speed-opt and may be eliminated */
;;;156          xEnd =x;
;;;157          while (Data&0x40) {
;;;158            Data<<=1;
;;;159            xEnd++;
;;;160          }
;;;161        } else {
;;;162          xEnd =x+7;
;;;163        }
;;;164        if ((xEnd&7) ==7) {
;;;165          while (--BytesLeft >= 0) {
;;;166            if ((Data = *pData++) == 0xff) {
;;;167              xEnd+=8;
;;;168            } else {
;;;169              while (Data&0x80) {
;;;170                Data<<=1;
;;;171                xEnd++;
;;;172              }
;;;173              break;
;;;174            }
;;;175          }
;;;176        }
;;;177    
;;;178      }
;;;179      *pxOff =x;
;;;180      return xEnd-x+1;
;;;181    }
0000c0  bc30              POP      {r4,r5}
0000c2  2000              MOVS     r0,#0                 ;132
0000c4  4770              BX       lr
                  |L1.198|
0000c6  6900              LDR      r0,[r0,#0x10]         ;134
0000c8  fb024000          MLA      r0,r2,r0,r4           ;134
0000cc  eb0000e3          ADD      r0,r0,r3,ASR #3       ;135
0000d0  4563              CMP      r3,r12                ;136
0000d2  db02              BLT      |L1.218|
0000d4  bc30              POP      {r4,r5}
0000d6  2000              MOVS     r0,#0                 ;137
0000d8  4770              BX       lr
                  |L1.218|
0000da  f1ac0201          SUB      r2,r12,#1             ;140
0000de  10d2              ASRS     r2,r2,#3              ;140
0000e0  eba204e3          SUB      r4,r2,r3,ASR #3       ;140
0000e4  7802              LDRB     r2,[r0,#0]            ;142
0000e6  f1000c01          ADD      r12,r0,#1             ;142
0000ea  f0030007          AND      r0,r3,#7              ;142
0000ee  fa02f000          LSL      r0,r2,r0              ;142
0000f2  b2c0              UXTB     r0,r0                 ;142
0000f4  b948              CBNZ     r0,|L1.266|
                  |L1.246|
0000f6  b164              CBZ      r4,|L1.274|
0000f8  f81c0b01          LDRB     r0,[r12],#1           ;146
0000fc  1e64              SUBS     r4,r4,#1              ;147
0000fe  f1030208          ADD      r2,r3,#8              ;148
000102  f0220307          BIC      r3,r2,#7              ;148
000106  2800              CMP      r0,#0                 ;143
000108  d0f5              BEQ      |L1.246|
                  |L1.266|
00010a  f0100f80          TST      r0,#0x80              ;150
00010e  d003              BEQ      |L1.280|
000110  e008              B        |L1.292|
                  |L1.274|
000112  bc30              POP      {r4,r5}
000114  2000              MOVS     r0,#0                 ;145
000116  4770              BX       lr
                  |L1.280|
000118  0640              LSLS     r0,r0,#25             ;151
00011a  0e00              LSRS     r0,r0,#24             ;151
00011c  1c5b              ADDS     r3,r3,#1              ;152
00011e  f0100f80          TST      r0,#0x80              ;150
000122  d0f9              BEQ      |L1.280|
                  |L1.292|
000124  28ff              CMP      r0,#0xff              ;155
000126  d00a              BEQ      |L1.318|
000128  461a              MOV      r2,r3                 ;156
00012a  f0100f40          TST      r0,#0x40              ;157
00012e  d007              BEQ      |L1.320|
                  |L1.304|
000130  0640              LSLS     r0,r0,#25             ;158
000132  0e00              LSRS     r0,r0,#24             ;158
000134  1c52              ADDS     r2,r2,#1              ;159
000136  f0100f40          TST      r0,#0x40              ;157
00013a  d1f9              BNE      |L1.304|
00013c  e000              B        |L1.320|
                  |L1.318|
00013e  1dda              ADDS     r2,r3,#7              ;162
                  |L1.320|
000140  2007              MOVS     r0,#7                 ;164
000142  4390              BICS     r0,r0,r2              ;164
000144  d10e              BNE      |L1.356|
000146  1e64              SUBS     r4,r4,#1              ;165
000148  d40c              BMI      |L1.356|
                  |L1.330|
00014a  f81c0b01          LDRB     r0,[r12],#1           ;166
00014e  28ff              CMP      r0,#0xff              ;166
000150  d00d              BEQ      |L1.366|
000152  f0100f80          TST      r0,#0x80              ;169
000156  d005              BEQ      |L1.356|
                  |L1.344|
000158  0640              LSLS     r0,r0,#25             ;170
00015a  0e00              LSRS     r0,r0,#24             ;170
00015c  1c52              ADDS     r2,r2,#1              ;171
00015e  f0100f80          TST      r0,#0x80              ;169
000162  d1f9              BNE      |L1.344|
                  |L1.356|
000164  600b              STR      r3,[r1,#0]            ;179
000166  1ad0              SUBS     r0,r2,r3              ;180
000168  bc30              POP      {r4,r5}
00016a  1c40              ADDS     r0,r0,#1              ;180
00016c  4770              BX       lr
                  |L1.366|
00016e  3208              ADDS     r2,r2,#8              ;167
000170  1e64              SUBS     r4,r4,#1              ;165
000172  d5ea              BPL      |L1.330|
000174  e7f6              B        |L1.356|
;;;182    
                          ENDP

                  _GUI_USAGE_BM_Delete PROC
;;;186    */
;;;187    static void _GUI_USAGE_BM_Delete(GUI_MEMDEV_Handle hDevUsage) {
000176  f7ffbffe          B.W      GUI_ALLOC_Free
;;;188      GUI_ALLOC_Free(hDevUsage);
;;;189    }
;;;190    
                          ENDP

                  GUI_USAGE_BM_Create PROC
;;;214    */
;;;215    GUI_USAGE_Handle GUI_USAGE_BM_Create(int x0, int y0, int xsize, int ysize, int Flags) {
00017a  e92d47f0          PUSH     {r4-r10,lr}
00017e  4607              MOV      r7,r0
000180  4688              MOV      r8,r1
000182  4615              MOV      r5,r2
000184  461e              MOV      r6,r3
;;;216      int MemSize;
;;;217      int BytesPerLine;
;;;218      GUI_USAGE_Handle hMem;
;;;219      GUI_USE_PARA(Flags);
;;;220      BytesPerLine = ((xsize+15) >>4)<<1;  /* 2 byte alignment */
000186  f105000f          ADD      r0,r5,#0xf
00018a  1100              ASRS     r0,r0,#4
00018c  0044              LSLS     r4,r0,#1
;;;221      MemSize = ysize*BytesPerLine +sizeof(GUI_USAGE_BM);
00018e  fb06f004          MUL      r0,r6,r4
000192  3014              ADDS     r0,r0,#0x14
;;;222      hMem = GUI_ALLOC_AllocZero(MemSize);
000194  b200              SXTH     r0,r0
000196  f7fffffe          BL       GUI_ALLOC_AllocZero
00019a  4681              MOV      r9,r0
;;;223      /* Check if we can alloc sufficient memory */
;;;224      if (!hMem) {
00019c  f1b90f00          CMP      r9,#0
0001a0  d013              BEQ      |L1.458|
;;;225        GUI_DEBUG_ERROROUT("GUI_USAGE_BM_Create: Too little memory");
;;;226        return 0;    
;;;227      }
;;;228      {
;;;229        GUI_USAGE_BM * pUsage;
;;;230        GUI_LOCK();
0001a2  f7fffffe          BL       GUI_Lock
;;;231        pUsage = (GUI_USAGE_BM*)GUI_ALLOC_h2p(hMem);
0001a6  4648              MOV      r0,r9
0001a8  f7fffffe          BL       GUI_ALLOC_h2p
;;;232        pUsage->Public.x0    = x0;
0001ac  8007              STRH     r7,[r0,#0]
;;;233        pUsage->Public.y0    = y0;
0001ae  f8a08002          STRH     r8,[r0,#2]
;;;234        pUsage->Public.XSize = xsize;
0001b2  8085              STRH     r5,[r0,#4]
;;;235        pUsage->Public.YSize = ysize;
0001b4  80c6              STRH     r6,[r0,#6]
;;;236        pUsage->Public.pAPI  = &API;
0001b6  4906              LDR      r1,|L1.464|
0001b8  6081              STR      r1,[r0,#8]
;;;237        pUsage->Public.UseCnt= 1;
0001ba  2101              MOVS     r1,#1
0001bc  8181              STRH     r1,[r0,#0xc]
;;;238        pUsage->Private.BytesPerLine= BytesPerLine;
0001be  6104              STR      r4,[r0,#0x10]
;;;239        GUI_UNLOCK();
0001c0  f7fffffe          BL       GUI_Unlock
;;;240      }
;;;241      return hMem;
0001c4  4648              MOV      r0,r9
;;;242    }
0001c6  e8bd87f0          POP      {r4-r10,pc}
                  |L1.458|
0001ca  2000              MOVS     r0,#0                 ;226
0001cc  e8bd87f0          POP      {r4-r10,pc}
;;;243    
                          ENDP

                  |L1.464|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  API
                          DCD      GUI_USAGE_BM_AddPixel
                          DCD      GUI_USAGE_BM_AddHLine
                          DCD      GUI_USAGE_BM_Clear
                          DCD      0x00000000
                          DCD      _GUI_USAGE_BM_Delete
                          DCD      GUI_USAGE_BM_GetNextDirty
