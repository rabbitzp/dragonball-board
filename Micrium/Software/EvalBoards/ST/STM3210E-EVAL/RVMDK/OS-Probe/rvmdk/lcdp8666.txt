; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\lcdp8666.o --depend=.\rvmdk\lcdp8666.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\lcdp8666.crf ..\..\..\..\..\uCGUI\GUI\ConvertColor\LCDP8666.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_Color2Index_8666 PROC
;;;56     */
;;;57     unsigned LCD_Color2Index_8666(LCD_COLOR Color) {
000000  b410              PUSH     {r4}
;;;58       int r,g,b,Index;
;;;59       r = Color&255;
000002  b2c2              UXTB     r2,r0
;;;60       g = (Color>>8)&255;
000004  f3c02107          UBFX     r1,r0,#8,#8
;;;61       b = Color>>16;
000008  0c03              LSRS     r3,r0,#16
;;;62     /* Check if image is a gray scale ... */
;;;63     	if ((r==g) && (g==b)) {
00000a  428a              CMP      r2,r1
00000c  d10c              BNE      |L1.40|
00000e  4299              CMP      r1,r3
000010  d10a              BNE      |L1.40|
;;;64         return 120+ (r+8)/17;  /* Convert into colors from 120 - 135*/
000012  4937              LDR      r1,|L1.240|
000014  f1020008          ADD      r0,r2,#8
000018  fb811000          SMULL    r1,r0,r1,r0
00001c  10c1              ASRS     r1,r0,#3
00001e  eba170e0          SUB      r0,r1,r0,ASR #31
000022  3078              ADDS     r0,r0,#0x78
                  |L1.36|
;;;65     	}
;;;66     /* Convert into the 6*6*6 colors ... */
;;;67       r = (r*5+127)/255;
;;;68       g = (g*5+127)/255;
;;;69       b = (b*5+127)/255;
;;;70       Index = r+6*g+36*b;
;;;71       return (Index<108) ? Index : Index+40;
;;;72     }
000024  bc10              POP      {r4}
000026  4770              BX       lr
                  |L1.40|
000028  eb020082          ADD      r0,r2,r2,LSL #2       ;67
00002c  4c31              LDR      r4,|L1.244|
00002e  f04f0c00          MOV      r12,#0                ;67
000032  307f              ADDS     r0,r0,#0x7f           ;67
000034  4662              MOV      r2,r12                ;67
000036  fbc42000          SMLAL    r2,r0,r4,r0           ;67
00003a  11c2              ASRS     r2,r0,#7              ;67
00003c  eba272e0          SUB      r2,r2,r0,ASR #31      ;67
000040  eb010081          ADD      r0,r1,r1,LSL #2       ;68
000044  307f              ADDS     r0,r0,#0x7f           ;68
000046  4661              MOV      r1,r12                ;68
000048  fbc41000          SMLAL    r1,r0,r4,r0           ;68
00004c  11c1              ASRS     r1,r0,#7              ;68
00004e  eba171e0          SUB      r1,r1,r0,ASR #31      ;68
000052  eb030083          ADD      r0,r3,r3,LSL #2       ;69
000056  307f              ADDS     r0,r0,#0x7f           ;69
000058  fbc4c000          SMLAL    r12,r0,r4,r0          ;69
00005c  11c3              ASRS     r3,r0,#7              ;69
00005e  eba370e0          SUB      r0,r3,r0,ASR #31      ;69
000062  eb010141          ADD      r1,r1,r1,LSL #1       ;70
000066  eb020141          ADD      r1,r2,r1,LSL #1       ;70
00006a  eb0000c0          ADD      r0,r0,r0,LSL #3       ;70
00006e  eb010080          ADD      r0,r1,r0,LSL #2       ;70
000072  286c              CMP      r0,#0x6c              ;71
000074  dbd6              BLT      |L1.36|
000076  bc10              POP      {r4}
000078  3028              ADDS     r0,r0,#0x28           ;71
00007a  4770              BX       lr
;;;73     
                          ENDP

                  LCD_Index2Color_8666 PROC
;;;77     */
;;;78     LCD_COLOR LCD_Index2Color_8666(int Index) {
00007c  f1a00178          SUB      r1,r0,#0x78
;;;79       unsigned int r,g;
;;;80       U32 b;
;;;81       /* 16 Gray scale range ? */
;;;82       if ((Index>=120) && (Index<136)) {
000080  2910              CMP      r1,#0x10
000082  d202              BCS      |L1.138|
;;;83         return (U32)0x111111 * (U32)(Index-120);
000084  481c              LDR      r0,|L1.248|
000086  4348              MULS     r0,r1,r0
;;;84     	}
;;;85       if (Index>=108) {
;;;86         if (Index<148)
;;;87     			return 0;  /* Black for illegal indices */
;;;88     		Index -= 40;
;;;89     	}
;;;90       r = (Index%6)*(255/5);
;;;91       g = ((Index/6)%6)*(255/5);
;;;92       b = (Index/36)*(255/5);
;;;93       return r+(g<<8)+((U32)b<<16);
;;;94     }
000088  4770              BX       lr
                  |L1.138|
00008a  286c              CMP      r0,#0x6c              ;85
00008c  db04              BLT      |L1.152|
00008e  2894              CMP      r0,#0x94              ;86
000090  da01              BGE      |L1.150|
000092  2000              MOVS     r0,#0                 ;87
000094  4770              BX       lr
                  |L1.150|
000096  3828              SUBS     r0,r0,#0x28           ;88
                  |L1.152|
000098  f8dfc060          LDR      r12,|L1.252|
00009c  fb8c2100          SMULL    r2,r1,r12,r0          ;90
0000a0  eba171e1          SUB      r1,r1,r1,ASR #31      ;90
0000a4  eba10281          SUB      r2,r1,r1,LSL #2       ;90
0000a8  eb000242          ADD      r2,r0,r2,LSL #1       ;90
0000ac  eb021202          ADD      r2,r2,r2,LSL #4       ;90
0000b0  eb020342          ADD      r3,r2,r2,LSL #1       ;90
0000b4  fb8cc201          SMULL    r12,r2,r12,r1         ;91
0000b8  eba272e2          SUB      r2,r2,r2,ASR #31      ;91
0000bc  eba20282          SUB      r2,r2,r2,LSL #2       ;91
0000c0  eb010142          ADD      r1,r1,r2,LSL #1       ;91
0000c4  eb011101          ADD      r1,r1,r1,LSL #4       ;91
0000c8  eb010141          ADD      r1,r1,r1,LSL #1       ;91
0000cc  4a0c              LDR      r2,|L1.256|
0000ce  fb822000          SMULL    r2,r0,r2,r0           ;92
0000d2  10c2              ASRS     r2,r0,#3              ;92
0000d4  eba270e0          SUB      r0,r2,r0,ASR #31      ;92
0000d8  eb001000          ADD      r0,r0,r0,LSL #4       ;92
0000dc  eb000040          ADD      r0,r0,r0,LSL #1       ;92
0000e0  eb032101          ADD      r1,r3,r1,LSL #8       ;93
0000e4  eb014000          ADD      r0,r1,r0,LSL #16      ;93
0000e8  4770              BX       lr
;;;95     
                          ENDP

                  LCD_GetIndexMask_8666 PROC
;;;99     */
;;;100    unsigned LCD_GetIndexMask_8666(void) {
0000ea  20ff              MOVS     r0,#0xff
;;;101      return 0xff;
;;;102    }
0000ec  4770              BX       lr
;;;103    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L1.240|
                          DCD      0x78787879
                  |L1.244|
                          DCD      0x80808081
                  |L1.248|
                          DCD      0x00111111
                  |L1.252|
                          DCD      0x2aaaaaab
                  |L1.256|
                          DCD      0x38e38e39

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  LCD_API_ColorConv_8666
                          DCD      LCD_Color2Index_8666
                          DCD      LCD_Index2Color_8666
                          DCD      LCD_GetIndexMask_8666
