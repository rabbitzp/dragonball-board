; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\gui_bmp.o --depend=.\rvmdk\gui_bmp.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\gui_bmp.crf ..\..\..\..\..\uCGUI\GUI\Core\GUI_BMP.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetStep PROC
;;;33     */
;;;34     static int _GetStep(int * pYSize, int * pY) {
000000  6802              LDR      r2,[r0,#0]
;;;35       if (*pYSize > 0) {
000002  2a00              CMP      r2,#0
000004  dd05              BLE      |L1.18|
;;;36         *pY = *pYSize - 1;
000006  f1a20001          SUB      r0,r2,#1
00000a  6008              STR      r0,[r1,#0]
;;;37         return -1;
00000c  f04f30ff          MOV      r0,#0xffffffff
;;;38       } else if (*pYSize < 0) {
;;;39         *pYSize = -*pYSize;
;;;40         *pY = 0;
;;;41         return 1;
;;;42       } else {
;;;43         return 0;
;;;44       }
;;;45     }
000010  4770              BX       lr
                  |L1.18|
000012  da08              BGE      |L1.38|
000014  f1c20200          RSB      r2,r2,#0              ;39
000018  6002              STR      r2,[r0,#0]            ;39
00001a  f04f0000          MOV      r0,#0                 ;40
00001e  6008              STR      r0,[r1,#0]            ;40
000020  f04f0001          MOV      r0,#1                 ;41
000024  4770              BX       lr
                  |L1.38|
000026  2000              MOVS     r0,#0                 ;43
000028  4770              BX       lr
;;;46     
                          ENDP

                  _DrawBitmap_Pal PROC
;;;50     */
;;;51     static int _DrawBitmap_Pal(const U8 * pData, int x0, int y0, int XSize, int YSize, int Bpp, int NumColors) {
00002a  e92d4fff          PUSH     {r0-r11,lr}
00002e  b087              SUB      sp,sp,#0x1c
000030  4604              MOV      r4,r0
000032  f8ddb058          LDR      r11,[sp,#0x58]
000036  f8dda054          LDR      r10,[sp,#0x54]
00003a  4691              MOV      r9,r2
00003c  461f              MOV      r7,r3
;;;52       int i, y, Step;
;;;53       int BytesPerLine = 0;
00003e  2600              MOVS     r6,#0
;;;54       Step = _GetStep(&YSize, &y);
000040  a906              ADD      r1,sp,#0x18
000042  a814              ADD      r0,sp,#0x50
000044  f7fffffe          BL       _GetStep
000048  4680              MOV      r8,r0
;;;55       if (!Step) {
00004a  f1b80f00          CMP      r8,#0
00004e  d01d              BEQ      |L1.140|
;;;56         return 1;
;;;57       }
;;;58       for (i = 0; i < NumColors; i++) {
000050  2500              MOVS     r5,#0
000052  f1bb0f00          CMP      r11,#0
000056  dd0f              BLE      |L1.120|
                  |L1.88|
;;;59         U8 r, g, b;
;;;60         b = *(pData);
000058  7821              LDRB     r1,[r4,#0]
;;;61         g = *(pData + 1);
00005a  7860              LDRB     r0,[r4,#1]
;;;62         r = *(pData + 2);
00005c  78a2              LDRB     r2,[r4,#2]
;;;63         pData += 4;
00005e  1d24              ADDS     r4,r4,#4
;;;64         LCD__aConvTable[i] = LCD_Color2Index(((U32)b << 16) | (g << 8) | r);
000060  0409              LSLS     r1,r1,#16
000062  ea412000          ORR      r0,r1,r0,LSL #8
000066  4310              ORRS     r0,r0,r2
000068  f7fffffe          BL       LCD_Color2Index
00006c  499d              LDR      r1,|L1.740|
00006e  f8210015          STRH     r0,[r1,r5,LSL #1]
000072  1c6d              ADDS     r5,r5,#1              ;58
000074  455d              CMP      r5,r11                ;58
000076  dbef              BLT      |L1.88|
                  |L1.120|
;;;65       }
;;;66       switch (Bpp) {
000078  f1ba0f01          CMP      r10,#1
00007c  d00a              BEQ      |L1.148|
00007e  f1ba0f04          CMP      r10,#4
000082  d00c              BEQ      |L1.158|
000084  f1ba0f08          CMP      r10,#8
000088  d126              BNE      |L1.216|
00008a  e00e              B        |L1.170|
                  |L1.140|
;;;67         case 1:
;;;68           BytesPerLine = ((XSize + 31) >> 5) << 2;
;;;69           break;
;;;70         case 4:
;;;71           BytesPerLine = (((XSize << 2) + 31) >> 5) << 2;
;;;72           break;
;;;73         case 8:
;;;74           BytesPerLine = ((XSize +  3) >> 2) << 2;
;;;75           break;
;;;76       }
;;;77       for (; (y < YSize) && (y >= 0); y += Step) {
;;;78         LCD_DrawBitmap(x0, y0 + y, XSize, 1, 1, 1, Bpp, XSize, pData, LCD__aConvTable);
;;;79         pData += BytesPerLine;
;;;80       }
;;;81       return 0;
;;;82     }
00008c  b00b              ADD      sp,sp,#0x2c
00008e  2001              MOVS     r0,#1                 ;56
000090  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.148|
000094  f107001f          ADD      r0,r7,#0x1f           ;68
000098  1140              ASRS     r0,r0,#5              ;68
00009a  0086              LSLS     r6,r0,#2              ;68
00009c  e01c              B        |L1.216|
                  |L1.158|
00009e  201f              MOVS     r0,#0x1f              ;71
0000a0  eb000087          ADD      r0,r0,r7,LSL #2       ;71
0000a4  1140              ASRS     r0,r0,#5              ;71
0000a6  0086              LSLS     r6,r0,#2              ;71
0000a8  e016              B        |L1.216|
                  |L1.170|
0000aa  1cf8              ADDS     r0,r7,#3              ;74
0000ac  f0200603          BIC      r6,r0,#3              ;74
0000b0  e012              B        |L1.216|
                  |L1.178|
0000b2  4b8c              LDR      r3,|L1.740|
0000b4  9305              STR      r3,[sp,#0x14]         ;78
0000b6  2301              MOVS     r3,#1                 ;78
0000b8  9703              STR      r7,[sp,#0xc]          ;78
0000ba  f8cda008          STR      r10,[sp,#8]           ;78
0000be  9404              STR      r4,[sp,#0x10]         ;78
0000c0  9300              STR      r3,[sp,#0]            ;78
0000c2  eb09010c          ADD      r1,r9,r12             ;78
0000c6  463a              MOV      r2,r7                 ;78
0000c8  9301              STR      r3,[sp,#4]            ;78
0000ca  9808              LDR      r0,[sp,#0x20]         ;78
0000cc  f7fffffe          BL       LCD_DrawBitmap
0000d0  4434              ADD      r4,r4,r6              ;79
0000d2  9806              LDR      r0,[sp,#0x18]         ;77
0000d4  4440              ADD      r0,r0,r8              ;77
0000d6  9006              STR      r0,[sp,#0x18]         ;77
                  |L1.216|
0000d8  f8ddc018          LDR      r12,[sp,#0x18]        ;77
0000dc  9814              LDR      r0,[sp,#0x50]         ;77
0000de  4584              CMP      r12,r0                ;77
0000e0  da02              BGE      |L1.232|
0000e2  f1bc0f00          CMP      r12,#0                ;77
0000e6  dae4              BGE      |L1.178|
                  |L1.232|
0000e8  b00b              ADD      sp,sp,#0x2c
0000ea  2000              MOVS     r0,#0                 ;81
0000ec  e8bd8ff0          POP      {r4-r11,pc}
;;;83     
                          ENDP

                  _DrawBitmap_24bpp PROC
;;;87     */
;;;88     static int _DrawBitmap_24bpp(const U8 * pData, int x0, int y0, int XSize, int YSize) {
0000f0  e92d47ff          PUSH     {r0-r10,lr}
0000f4  b082              SUB      sp,sp,#8
0000f6  4605              MOV      r5,r0
0000f8  460f              MOV      r7,r1
0000fa  4690              MOV      r8,r2
0000fc  461e              MOV      r6,r3
;;;89       int x, y, BytesPerLine, Step;
;;;90       Step = _GetStep(&YSize, &y);
0000fe  a901              ADD      r1,sp,#4
000100  a80e              ADD      r0,sp,#0x38
000102  f7fffffe          BL       _GetStep
000106  4681              MOV      r9,r0
;;;91       if (!Step) {
000108  f1b90f00          CMP      r9,#0
00010c  d008              BEQ      |L1.288|
;;;92         return 1;
;;;93       }
;;;94       BytesPerLine = ((24 * XSize + 31) >> 5) << 2;
00010e  eb060046          ADD      r0,r6,r6,LSL #1
000112  211f              MOVS     r1,#0x1f
000114  eb0100c0          ADD      r0,r1,r0,LSL #3
000118  1140              ASRS     r0,r0,#5
00011a  ea4f0a80          LSL      r10,r0,#2
;;;95       for (; (y < YSize) && (y >= 0); y += Step) {
00011e  e020              B        |L1.354|
                  |L1.288|
;;;96         for (x = 0; x < XSize; x++) {
;;;97           const U8 * pColor = pData + 3 * x;
;;;98           U8 r, g, b;
;;;99           b = *(pColor);
;;;100          g = *(pColor + 1);
;;;101          r = *(pColor + 2);
;;;102          LCD_SetPixelIndex(x0 + x, y0 + y, LCD_Color2Index(((U32)b << 16) | (g << 8) | r));
;;;103        }
;;;104        pData += BytesPerLine;
;;;105      }
;;;106      return 0;
;;;107    }
000120  b006              ADD      sp,sp,#0x18
000122  2001              MOVS     r0,#1                 ;92
000124  e8bd87f0          POP      {r4-r10,pc}
                  |L1.296|
000128  2400              MOVS     r4,#0                 ;96
00012a  2e00              CMP      r6,#0                 ;96
00012c  dd15              BLE      |L1.346|
                  |L1.302|
00012e  eb040044          ADD      r0,r4,r4,LSL #1       ;97
000132  4428              ADD      r0,r0,r5              ;97
000134  7802              LDRB     r2,[r0,#0]            ;99
000136  7841              LDRB     r1,[r0,#1]            ;100
000138  7880              LDRB     r0,[r0,#2]            ;101
00013a  0412              LSLS     r2,r2,#16             ;102
00013c  ea422101          ORR      r1,r2,r1,LSL #8       ;102
000140  4308              ORRS     r0,r0,r1              ;102
000142  f7fffffe          BL       LCD_Color2Index
000146  9901              LDR      r1,[sp,#4]            ;102
000148  193b              ADDS     r3,r7,r4              ;102
00014a  4602              MOV      r2,r0                 ;102
00014c  4441              ADD      r1,r1,r8              ;102
00014e  4618              MOV      r0,r3                 ;102
000150  f7fffffe          BL       LCD_SetPixelIndex
000154  1c64              ADDS     r4,r4,#1              ;96
000156  42b4              CMP      r4,r6                 ;96
000158  dbe9              BLT      |L1.302|
                  |L1.346|
00015a  4455              ADD      r5,r5,r10             ;104
00015c  9801              LDR      r0,[sp,#4]            ;95
00015e  4448              ADD      r0,r0,r9              ;95
000160  9001              STR      r0,[sp,#4]            ;95
                  |L1.354|
000162  990e              LDR      r1,[sp,#0x38]         ;95
000164  9801              LDR      r0,[sp,#4]            ;95
000166  4288              CMP      r0,r1                 ;95
000168  da01              BGE      |L1.366|
00016a  2800              CMP      r0,#0                 ;95
00016c  dadc              BGE      |L1.296|
                  |L1.366|
00016e  b006              ADD      sp,sp,#0x18
000170  2000              MOVS     r0,#0                 ;106
000172  e8bd87f0          POP      {r4-r10,pc}
;;;108    
                          ENDP

                  GUI_BMP_GetXSize PROC
;;;118    */
;;;119    int GUI_BMP_GetXSize(const void * pBMP) {
000176  b508              PUSH     {r3,lr}
;;;120      const U8 * pSrc = (const U8 *)pBMP;
000178  9000              STR      r0,[sp,#0]
;;;121      if (!pBMP) {
00017a  b128              CBZ      r0,|L1.392|
;;;122        return 0;
;;;123      }
;;;124      pSrc += 18;                   /* skip rest of BITMAPFILEHEADER */
00017c  3012              ADDS     r0,r0,#0x12
00017e  9000              STR      r0,[sp,#0]
;;;125      return GUI__Read32(&pSrc);
000180  4668              MOV      r0,sp
000182  f7fffffe          BL       GUI__Read32
;;;126    }
000186  bd08              POP      {r3,pc}
                  |L1.392|
000188  2000              MOVS     r0,#0                 ;122
00018a  bd08              POP      {r3,pc}
;;;127    
                          ENDP

                  GUI_BMP_GetYSize PROC
;;;131    */
;;;132    int GUI_BMP_GetYSize(const void * pBMP) {
00018c  b508              PUSH     {r3,lr}
;;;133      const U8 * pSrc = (const U8 *)pBMP;
00018e  9000              STR      r0,[sp,#0]
;;;134      if (!pBMP) {
000190  b140              CBZ      r0,|L1.420|
;;;135        return 0;
;;;136      }
;;;137      pSrc += 22;
000192  3016              ADDS     r0,r0,#0x16
000194  9000              STR      r0,[sp,#0]
;;;138      return labs((int)GUI__Read32(&pSrc));
000196  4668              MOV      r0,sp
000198  f7fffffe          BL       GUI__Read32
00019c  2800              CMP      r0,#0
00019e  da00              BGE      |L1.418|
0001a0  4240              RSBS     r0,r0,#0
                  |L1.418|
;;;139    }
0001a2  bd08              POP      {r3,pc}
                  |L1.420|
0001a4  2000              MOVS     r0,#0                 ;135
0001a6  bd08              POP      {r3,pc}
;;;140    
                          ENDP

                  GUI_BMP_Draw PROC
;;;144    */
;;;145    int GUI_BMP_Draw(const void * pBMP, int x0, int y0) {
0001a8  e92d4ff0          PUSH     {r4-r11,lr}
0001ac  b089              SUB      sp,sp,#0x24
0001ae  4689              MOV      r9,r1
0001b0  4692              MOV      r10,r2
;;;146      #if (GUI_WINSUPPORT)
;;;147        GUI_RECT r;
;;;148      #endif
;;;149      int Ret = 0;
0001b2  2600              MOVS     r6,#0
;;;150      I32 Width, Height;
;;;151      U16 BitCount, Type;
;;;152      U32 ClrUsed, Compression;
;;;153      int NumColors;
;;;154      const U8 * pSrc = (const U8 *)pBMP;
0001b4  9004              STR      r0,[sp,#0x10]
;;;155      Type        = GUI__Read16(&pSrc); /* get type from BITMAPFILEHEADER */
0001b6  a804              ADD      r0,sp,#0x10
0001b8  f7fffffe          BL       GUI__Read16
0001bc  9005              STR      r0,[sp,#0x14]
;;;156      pSrc += 12;                   /* skip rest of BITMAPFILEHEADER */
0001be  9804              LDR      r0,[sp,#0x10]
;;;157      /* get values from BITMAPINFOHEADER */
;;;158      pSrc += 4;
0001c0  3010              ADDS     r0,r0,#0x10
0001c2  9004              STR      r0,[sp,#0x10]
;;;159      Width       = GUI__Read32(&pSrc);
0001c4  a804              ADD      r0,sp,#0x10
0001c6  f7fffffe          BL       GUI__Read32
0001ca  4680              MOV      r8,r0
;;;160      Height      = GUI__Read32(&pSrc);
0001cc  a804              ADD      r0,sp,#0x10
0001ce  f7fffffe          BL       GUI__Read32
0001d2  4607              MOV      r7,r0
;;;161      pSrc += 2;
0001d4  9804              LDR      r0,[sp,#0x10]
0001d6  1c80              ADDS     r0,r0,#2
0001d8  9004              STR      r0,[sp,#0x10]
;;;162      BitCount    = GUI__Read16(&pSrc);
0001da  a804              ADD      r0,sp,#0x10
0001dc  f7fffffe          BL       GUI__Read16
0001e0  4604              MOV      r4,r0
;;;163      Compression = GUI__Read32(&pSrc);
0001e2  a804              ADD      r0,sp,#0x10
0001e4  f7fffffe          BL       GUI__Read32
0001e8  4683              MOV      r11,r0
;;;164      pSrc += 12;
0001ea  9804              LDR      r0,[sp,#0x10]
0001ec  300c              ADDS     r0,r0,#0xc
0001ee  9004              STR      r0,[sp,#0x10]
;;;165      ClrUsed     = GUI__Read32(&pSrc);
0001f0  a804              ADD      r0,sp,#0x10
0001f2  f7fffffe          BL       GUI__Read32
0001f6  4601              MOV      r1,r0
;;;166      pSrc += 4;
0001f8  9804              LDR      r0,[sp,#0x10]
0001fa  1d00              ADDS     r0,r0,#4
0001fc  9004              STR      r0,[sp,#0x10]
;;;167      /* calculate number of colors */
;;;168      switch (BitCount) {
0001fe  4620              MOV      r0,r4
000200  2c04              CMP      r4,#4
000202  d012              BEQ      |L1.554|
000204  dc03              BGT      |L1.526|
000206  b150              CBZ      r0,|L1.542|
000208  2801              CMP      r0,#1
00020a  d104              BNE      |L1.534|
00020c  e00b              B        |L1.550|
                  |L1.526|
00020e  2808              CMP      r0,#8
000210  d00d              BEQ      |L1.558|
000212  2818              CMP      r0,#0x18
000214  d00e              BEQ      |L1.564|
                  |L1.534|
;;;169        case 0:   return 1; /* biBitCount = 0 (JPEG format) not supported. Please convert image ! */
;;;170        case 1:   NumColors = 2;   break;
;;;171        case 4:   NumColors = 16;  break;
;;;172        case 8:   NumColors = 256; break;
;;;173        case 24:  NumColors = 0;   break;
;;;174        default:
;;;175          return 1; /* biBitCount should be 1, 4, 8 or 24 */
;;;176      }
;;;177      if (NumColors && ClrUsed) {
;;;178        NumColors = ClrUsed;
;;;179      }
;;;180      /* check validity of bmp */
;;;181      if ((NumColors > LCD_MAX_LOG_COLORS) ||
;;;182          (Type != 0x4d42)                 || /* 'BM' */
;;;183          (Compression)                    || /* only uncompressed bitmaps */
;;;184          (Width  > 1024)                  ||
;;;185          (Height > 1024)) {
;;;186        return 1;
;;;187      }
;;;188      /* start output */
;;;189      GUI_LOCK();
;;;190      #if (GUI_WINSUPPORT)
;;;191        WM_ADDORG(x0,y0);
;;;192        r.x1 = (r.x0 = x0) + Width - 1;
;;;193        r.y1 = (r.y0 = y0) + Height - 1;
;;;194        WM_ITERATE_START(&r) {
;;;195      #endif
;;;196      /* Show bitmap */
;;;197      switch (BitCount) {
;;;198        case 1:
;;;199        case 4:
;;;200        case 8:
;;;201          Ret = _DrawBitmap_Pal(pSrc, x0, y0, Width, Height, BitCount, NumColors);
;;;202          break;
;;;203        case 24:
;;;204          Ret = _DrawBitmap_24bpp(pSrc, x0, y0, Width, Height);
;;;205          break;
;;;206      }
;;;207      #if (GUI_WINSUPPORT)
;;;208        } WM_ITERATE_END();
;;;209      #endif
;;;210      GUI_UNLOCK();
;;;211      return Ret;
;;;212    }
000216  b009              ADD      sp,sp,#0x24
000218  2001              MOVS     r0,#1                 ;175
00021a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.542|
00021e  b009              ADD      sp,sp,#0x24
000220  2001              MOVS     r0,#1                 ;169
000222  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.550|
000226  2502              MOVS     r5,#2                 ;170
000228  e005              B        |L1.566|
                  |L1.554|
00022a  2510              MOVS     r5,#0x10              ;171
00022c  e003              B        |L1.566|
                  |L1.558|
00022e  f44f7580          MOV      r5,#0x100             ;172
000232  e000              B        |L1.566|
                  |L1.564|
000234  2500              MOVS     r5,#0                 ;173
                  |L1.566|
000236  b10d              CBZ      r5,|L1.572|
000238  b101              CBZ      r1,|L1.572|
00023a  460d              MOV      r5,r1                 ;178
                  |L1.572|
00023c  f5b57f80          CMP      r5,#0x100             ;181
000240  dc0d              BGT      |L1.606|
000242  9805              LDR      r0,[sp,#0x14]         ;182
000244  f5a0419a          SUB      r1,r0,#0x4d00         ;182
000248  3942              SUBS     r1,r1,#0x42           ;182
00024a  d108              BNE      |L1.606|
00024c  f1bb0f00          CMP      r11,#0                ;183
000250  d105              BNE      |L1.606|
000252  f5b86f80          CMP      r8,#0x400             ;184
000256  dc02              BGT      |L1.606|
000258  f5b76f80          CMP      r7,#0x400             ;185
00025c  dd03              BLE      |L1.614|
                  |L1.606|
00025e  b009              ADD      sp,sp,#0x24
000260  2001              MOVS     r0,#1                 ;186
000262  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.614|
000266  f7fffffe          BL       GUI_Lock
00026a  481f              LDR      r0,|L1.744|
00026c  6c41              LDR      r1,[r0,#0x44]         ;191  ; GUI_Context
00026e  4489              ADD      r9,r9,r1              ;191
000270  6c80              LDR      r0,[r0,#0x48]         ;191  ; GUI_Context
000272  4482              ADD      r10,r10,r0            ;191
000274  eb090008          ADD      r0,r9,r8              ;192
000278  1e40              SUBS     r0,r0,#1              ;192
00027a  f8ad9018          STRH     r9,[sp,#0x18]         ;192
00027e  f8ad001c          STRH     r0,[sp,#0x1c]         ;192
000282  eb0a0007          ADD      r0,r10,r7             ;193
000286  1e40              SUBS     r0,r0,#1              ;193
000288  f8ada01a          STRH     r10,[sp,#0x1a]        ;193
00028c  f8ad001e          STRH     r0,[sp,#0x1e]         ;193
000290  a806              ADD      r0,sp,#0x18           ;194
000292  f7fffffe          BL       WM__InitIVRSearch
000296  b1f8              CBZ      r0,|L1.728|
                  |L1.664|
000298  2c01              CMP      r4,#1                 ;197
00029a  d006              BEQ      |L1.682|
00029c  2c04              CMP      r4,#4                 ;197
00029e  d004              BEQ      |L1.682|
0002a0  2c08              CMP      r4,#8                 ;197
0002a2  d002              BEQ      |L1.682|
0002a4  2c18              CMP      r4,#0x18              ;197
0002a6  d113              BNE      |L1.720|
0002a8  e00a              B        |L1.704|
                  |L1.682|
0002aa  4643              MOV      r3,r8                 ;201
0002ac  4652              MOV      r2,r10                ;201
0002ae  4649              MOV      r1,r9                 ;201
0002b0  9700              STR      r7,[sp,#0]            ;201
0002b2  9502              STR      r5,[sp,#8]            ;201
0002b4  9401              STR      r4,[sp,#4]            ;201
0002b6  9804              LDR      r0,[sp,#0x10]         ;201
0002b8  f7fffffe          BL       _DrawBitmap_Pal
0002bc  4606              MOV      r6,r0                 ;201
0002be  e007              B        |L1.720|
                  |L1.704|
0002c0  4643              MOV      r3,r8                 ;204
0002c2  4652              MOV      r2,r10                ;204
0002c4  4649              MOV      r1,r9                 ;204
0002c6  9700              STR      r7,[sp,#0]            ;204
0002c8  9804              LDR      r0,[sp,#0x10]         ;204
0002ca  f7fffffe          BL       _DrawBitmap_24bpp
0002ce  4606              MOV      r6,r0                 ;204
                  |L1.720|
0002d0  f7fffffe          BL       WM__GetNextIVR
0002d4  2800              CMP      r0,#0                 ;208
0002d6  d1df              BNE      |L1.664|
                  |L1.728|
0002d8  f7fffffe          BL       GUI_Unlock
0002dc  b009              ADD      sp,sp,#0x24
0002de  4630              MOV      r0,r6                 ;211
0002e0  e8bd8ff0          POP      {r4-r11,pc}
;;;213    
                          ENDP

                  |L1.740|
                          DCD      LCD__aConvTable
                  |L1.744|
                          DCD      GUI_Context
