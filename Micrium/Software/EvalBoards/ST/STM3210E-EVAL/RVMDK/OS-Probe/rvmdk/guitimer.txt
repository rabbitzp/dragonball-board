; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\rvmdk\guitimer.o --depend=.\rvmdk\guitimer.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I..\..\..\..\..\User\inc -I..\..\..\..\..\uCGUI\Config -I..\..\..\..\..\uCGUI\GUIDemo -I..\..\..\..\..\uCGUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\AntiAlias -I..\..\..\..\..\uCGUI\GUI\ConvertColor -I..\..\..\..\..\uCGUI\GUI\ConvertMono -I..\..\..\..\..\uCGUI\GUI\Core -I..\..\..\..\..\uCGUI\GUI\Font -I..\..\..\..\..\uCGUI\GUI\LCDDriver -I..\..\..\..\..\uCGUI\GUI\MemDev -I..\..\..\..\..\uCGUI\GUI\MultiLayer -I..\..\..\..\..\uCGUI\GUI\Widget -I..\..\..\..\..\uCGUI\GUI\WM -Id:\Keil-stm32\ARM\INC -Id:\Keil-stm32\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\rvmdk\guitimer.crf ..\..\..\..\..\uCGUI\GUI\Core\GUITimer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Unlink PROC
;;;68     */
;;;69     static void _Unlink(GUI_TIMER_HANDLE hTimer) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;70       GUI_TIMER_Obj* pTimer = GUI_TIMER_H2P(hTimer);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       GUI_ALLOC_h2p
00000a  4605              MOV      r5,r0
;;;71       GUI_TIMER_HANDLE hi;
;;;72       GUI_TIMER_Obj*   pi;
;;;73     /* Check if it is the first element */
;;;74       if (hFirstTimer == hTimer) {
00000c  4970              LDR      r1,|L1.464|
00000e  f9b10000          LDRSH    r0,[r1,#0]  ; hFirstTimer
000012  42a0              CMP      r0,r4
000014  d102              BNE      |L1.28|
;;;75         hFirstTimer = pTimer->hNext;
000016  88a8              LDRH     r0,[r5,#4]
000018  8008              STRH     r0,[r1,#0]
                  |L1.26|
;;;76         return;
;;;77     	}
;;;78       hi = hFirstTimer;
;;;79     /* Try to find it in the list ... */
;;;80       while(hi) {
;;;81         /* GUI_ASSERT(hi<1000,0); */
;;;82         pi = GUI_TIMER_H2P(hi);
;;;83         if (pi->hNext == hTimer) {
;;;84           pi->hNext = pTimer->hNext;
;;;85           break;
;;;86     		}        
;;;87         hi = pi->hNext;
;;;88       }  
;;;89     }
00001a  bd70              POP      {r4-r6,pc}
                  |L1.28|
00001c  2800              CMP      r0,#0                 ;80
00001e  d0fc              BEQ      |L1.26|
                  |L1.32|
000020  f7fffffe          BL       GUI_ALLOC_h2p
000024  f9b01004          LDRSH    r1,[r0,#4]            ;83
000028  42a1              CMP      r1,r4                 ;83
00002a  d102              BNE      |L1.50|
00002c  88a9              LDRH     r1,[r5,#4]            ;84
00002e  8081              STRH     r1,[r0,#4]            ;84
000030  bd70              POP      {r4-r6,pc}
                  |L1.50|
000032  4608              MOV      r0,r1                 ;87
000034  2800              CMP      r0,#0                 ;80
000036  d1f3              BNE      |L1.32|
000038  bd70              POP      {r4-r6,pc}
;;;90     
                          ENDP

                  _Link PROC
;;;99     */
;;;100    static void _Link(GUI_TIMER_HANDLE hNew) {
00003a  e92d41f0          PUSH     {r4-r8,lr}
00003e  4606              MOV      r6,r0
;;;101      GUI_TIMER_Obj*   pNew        = GUI_TIMER_H2P(hNew);
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       GUI_ALLOC_h2p
000046  4604              MOV      r4,r0
;;;102      GUI_TIMER_Obj*   pTimer;
;;;103      GUI_TIMER_Obj*   pNext;
;;;104      GUI_TIMER_HANDLE hNext;
;;;105      if (hFirstTimer ==0) { /* List is empty, make it the only element */
000048  4d61              LDR      r5,|L1.464|
00004a  f9b50000          LDRSH    r0,[r5,#0]  ; hFirstTimer
00004e  b158              CBZ      r0,|L1.104|
;;;106        hFirstTimer = hNew;
;;;107    	  pNew->hNext = 0;
;;;108      } else {
;;;109        GUI_TIMER_Obj* pFirstTimer      = GUI_TIMER_H2P(hFirstTimer);
000050  f7fffffe          BL       GUI_ALLOC_h2p
;;;110    /* Check if we have to make it the first element */
;;;111        if ((pNew->t0 - pFirstTimer->t0) <=0) {
000054  6921              LDR      r1,[r4,#0x10]
000056  6900              LDR      r0,[r0,#0x10]
000058  1a08              SUBS     r0,r1,r0
00005a  2800              CMP      r0,#0
00005c  dc09              BGT      |L1.114|
;;;112          pNew->hNext = hFirstTimer;
00005e  8828              LDRH     r0,[r5,#0]  ; hFirstTimer
000060  80a0              STRH     r0,[r4,#4]
;;;113          hFirstTimer = hNew;
000062  802e              STRH     r6,[r5,#0]
;;;114    			return;
;;;115    		} else {
;;;116          GUI_TIMER_HANDLE hTimer = hFirstTimer;
;;;117    /* Put it into the list */
;;;118          do {
;;;119            pTimer       = GUI_TIMER_H2P(hTimer);
;;;120            hNext        = pTimer->hNext;
;;;121            if (hNext ==0)
;;;122    					goto Append;
;;;123            pNext      = GUI_TIMER_H2P(hNext);
;;;124    				if ((pNew->t0 - pNext->t0) <=0) {
;;;125              pNew->hNext  = hNext;
;;;126              pTimer->hNext= hNew;
;;;127              return;
;;;128    				}
;;;129    			} while(1);
;;;130    /* Put it at the end of the list */
;;;131    Append:
;;;132          pNew->hNext  = hNext;
;;;133          pTimer->hNext= hNew;
;;;134          return;
;;;135    		}
;;;136      }
;;;137    }
000064  e8bd81f0          POP      {r4-r8,pc}
                  |L1.104|
000068  802e              STRH     r6,[r5,#0]            ;106
00006a  2000              MOVS     r0,#0                 ;107
00006c  80a0              STRH     r0,[r4,#4]            ;107
00006e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.114|
000072  f9b58000          LDRSH    r8,[r5,#0]            ;116  ; hFirstTimer
                  |L1.118|
000076  4640              MOV      r0,r8                 ;119
000078  f7fffffe          BL       GUI_ALLOC_h2p
00007c  4607              MOV      r7,r0                 ;119
00007e  f9b75004          LDRSH    r5,[r7,#4]            ;120
000082  b15d              CBZ      r5,|L1.156|
000084  4628              MOV      r0,r5                 ;123
000086  f7fffffe          BL       GUI_ALLOC_h2p
00008a  6921              LDR      r1,[r4,#0x10]         ;124
00008c  6900              LDR      r0,[r0,#0x10]         ;124
00008e  1a08              SUBS     r0,r1,r0              ;124
000090  2800              CMP      r0,#0                 ;124
000092  dcf0              BGT      |L1.118|
000094  80a5              STRH     r5,[r4,#4]            ;125
000096  80be              STRH     r6,[r7,#4]            ;126
000098  e8bd81f0          POP      {r4-r8,pc}
                  |L1.156|
00009c  80a5              STRH     r5,[r4,#4]            ;132
00009e  80be              STRH     r6,[r7,#4]            ;133
0000a0  e8bd81f0          POP      {r4-r8,pc}
;;;138    
                          ENDP

                  GUI_TIMER_Exec PROC
;;;148    */
;;;149    int GUI_TIMER_Exec(void) {
0000a4  b570              PUSH     {r4-r6,lr}
0000a6  b082              SUB      sp,sp,#8
;;;150      int r = 0;
0000a8  2600              MOVS     r6,#0
;;;151      GUI_TIMER_TIME t = GUI_GetTime();
0000aa  f7fffffe          BL       GUI_GetTime
0000ae  4604              MOV      r4,r0
;;;152      GUI_LOCK(); {
0000b0  f7fffffe          BL       GUI_Lock
;;;153        while (hFirstTimer) {
0000b4  4d46              LDR      r5,|L1.464|
0000b6  8828              LDRH     r0,[r5,#0]  ; hFirstTimer
0000b8  b1a8              CBZ      r0,|L1.230|
                  |L1.186|
;;;154         	GUI_TIMER_Obj* pTimer = GUI_TIMER_H2P(hFirstTimer);
0000ba  f9b50000          LDRSH    r0,[r5,#0]  ; hFirstTimer
0000be  f7fffffe          BL       GUI_ALLOC_h2p
;;;155          if ((pTimer->t0-t) <=0) {
0000c2  6901              LDR      r1,[r0,#0x10]
0000c4  1b09              SUBS     r1,r1,r4
0000c6  2900              CMP      r1,#0
0000c8  dc0d              BGT      |L1.230|
;;;156            GUI_TIMER_MESSAGE tm;
;;;157            tm.Time = t;
0000ca  9400              STR      r4,[sp,#0]
;;;158    				tm.Context = pTimer->Context;
0000cc  68c1              LDR      r1,[r0,#0xc]
0000ce  9101              STR      r1,[sp,#4]
;;;159            _hActiveTimer = hFirstTimer;
0000d0  8829              LDRH     r1,[r5,#0]  ; hFirstTimer
0000d2  8069              STRH     r1,[r5,#2]
;;;160            hFirstTimer = pTimer->hNext;
0000d4  8881              LDRH     r1,[r0,#4]
0000d6  8029              STRH     r1,[r5,#0]
;;;161            pTimer->cb(&tm);
0000d8  6801              LDR      r1,[r0,#0]
0000da  4668              MOV      r0,sp
0000dc  4788              BLX      r1
;;;162            r = 1;
0000de  2601              MOVS     r6,#1
0000e0  8828              LDRH     r0,[r5,#0]            ;153  ; hFirstTimer
0000e2  2800              CMP      r0,#0                 ;153
0000e4  d1e9              BNE      |L1.186|
                  |L1.230|
;;;163    			} else
;;;164    			  break;
;;;165        }
;;;166        /*
;;;167    		GUI_TIMER_Obj* pObj = GUI_TIMER_H2P(hObj);
;;;168        pObj->t0 = Time;
;;;169        */
;;;170      } GUI_UNLOCK(); 
0000e6  f7fffffe          BL       GUI_Unlock
;;;171      return r;
;;;172    }
0000ea  b002              ADD      sp,sp,#8
0000ec  4630              MOV      r0,r6                 ;171
0000ee  bd70              POP      {r4-r6,pc}
;;;173    
                          ENDP

                  GUI_TIMER_Create PROC
;;;177    */
;;;178    GUI_TIMER_HANDLE GUI_TIMER_Create(GUI_TIMER_CALLBACK* cb, int Time, U32 Context, int Flags) {
0000f0  b570              PUSH     {r4-r6,lr}
0000f2  4604              MOV      r4,r0
0000f4  4615              MOV      r5,r2
;;;179      GUI_TIMER_HANDLE hObj;
;;;180      GUI_TIMER_Obj* pObj;
;;;181      GUI_LOCK();
0000f6  f7fffffe          BL       GUI_Lock
;;;182      GUI_USE_PARA(Flags);
;;;183      GUI_USE_PARA(Time);
;;;184      GUI_pfTimerExec = GUI_TIMER_Exec;
0000fa  f2af0057          ADR      r0,GUI_TIMER_Exec + 1
0000fe  4935              LDR      r1,|L1.468|
000100  6008              STR      r0,[r1,#0]  ; GUI_pfTimerExec
;;;185    	{
;;;186        /* Alloc memory for obj */
;;;187        hObj = GUI_ALLOC_AllocZero(sizeof(GUI_TIMER_Obj));
000102  2018              MOVS     r0,#0x18
000104  f7fffffe          BL       GUI_ALLOC_AllocZero
000108  4606              MOV      r6,r0
;;;188        pObj = GUI_TIMER_H2P(hObj);
00010a  4630              MOV      r0,r6
00010c  f7fffffe          BL       GUI_ALLOC_h2p
;;;189        /* init member variables */
;;;190        pObj->cb = cb;
000110  6004              STR      r4,[r0,#0]
;;;191    		pObj->Context = Context;
000112  60c5              STR      r5,[r0,#0xc]
;;;192        /* Link it */
;;;193    		_Link(hObj);
000114  4630              MOV      r0,r6
000116  f7fffffe          BL       _Link
;;;194    	} GUI_UNLOCK();
00011a  f7fffffe          BL       GUI_Unlock
;;;195      return hObj;
00011e  4630              MOV      r0,r6
;;;196    }
000120  bd70              POP      {r4-r6,pc}
;;;197    
                          ENDP

                  GUI_TIMER_Delete PROC
;;;201    */
;;;202    void GUI_TIMER_Delete(GUI_TIMER_HANDLE hObj) {
000122  b510              PUSH     {r4,lr}
000124  4604              MOV      r4,r0
;;;203    /* Unlink Timer */
;;;204      GUI_LOCK();
000126  f7fffffe          BL       GUI_Lock
;;;205      _Unlink(hObj);
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       _Unlink
;;;206      GUI_ALLOC_Free(hObj);
000130  4620              MOV      r0,r4
000132  f7fffffe          BL       GUI_ALLOC_Free
;;;207      GUI_UNLOCK();
000136  e8bd4010          POP      {r4,lr}
00013a  f7ffbffe          B.W      GUI_Unlock
;;;208    }
;;;209    
                          ENDP

                  GUI_TIMER_SetPeriod PROC
;;;213    */
;;;214    void GUI_TIMER_SetPeriod(GUI_TIMER_HANDLE hObj, GUI_TIMER_TIME Period) {
00013e  b570              PUSH     {r4-r6,lr}
000140  4605              MOV      r5,r0
000142  460c              MOV      r4,r1
;;;215      GUI_LOCK(); {
000144  f7fffffe          BL       GUI_Lock
;;;216        GUI_TIMER_Obj* pObj = GUI_TIMER_H2P(hObj);
000148  4628              MOV      r0,r5
00014a  f7fffffe          BL       GUI_ALLOC_h2p
;;;217        pObj->Period = Period;
00014e  6144              STR      r4,[r0,#0x14]
;;;218      } GUI_UNLOCK(); 
000150  e8bd4070          POP      {r4-r6,lr}
000154  f7ffbffe          B.W      GUI_Unlock
;;;219    }
;;;220    
                          ENDP

                  GUI_TIMER_SetTime PROC
;;;224    */
;;;225    void GUI_TIMER_SetTime(GUI_TIMER_HANDLE hObj, GUI_TIMER_TIME Time) {
000158  b570              PUSH     {r4-r6,lr}
00015a  4605              MOV      r5,r0
00015c  460c              MOV      r4,r1
;;;226      GUI_LOCK(); {
00015e  f7fffffe          BL       GUI_Lock
;;;227       	GUI_TIMER_Obj* pObj = GUI_TIMER_H2P(hObj);
000162  4628              MOV      r0,r5
000164  f7fffffe          BL       GUI_ALLOC_h2p
;;;228        pObj->t0 = Time;
000168  6104              STR      r4,[r0,#0x10]
;;;229      } GUI_UNLOCK(); 
00016a  e8bd4070          POP      {r4-r6,lr}
00016e  f7ffbffe          B.W      GUI_Unlock
;;;230    }
;;;231    
                          ENDP

                  GUI_TIMER_SetDelay PROC
;;;235    */
;;;236    void GUI_TIMER_SetDelay(GUI_TIMER_HANDLE hObj, GUI_TIMER_TIME Delay) {
000172  b570              PUSH     {r4-r6,lr}
000174  4605              MOV      r5,r0
000176  460c              MOV      r4,r1
;;;237      GUI_LOCK(); {
000178  f7fffffe          BL       GUI_Lock
;;;238       	GUI_TIMER_Obj* pObj = GUI_TIMER_H2P(hObj);
00017c  4628              MOV      r0,r5
00017e  f7fffffe          BL       GUI_ALLOC_h2p
;;;239        pObj->t0 = Delay;
000182  6104              STR      r4,[r0,#0x10]
;;;240    		_Unlink(hObj);
000184  4628              MOV      r0,r5
000186  f7fffffe          BL       _Unlink
;;;241    		_Link(hObj);
00018a  4628              MOV      r0,r5
00018c  f7fffffe          BL       _Link
;;;242      } GUI_UNLOCK(); 
000190  e8bd4070          POP      {r4-r6,lr}
000194  f7ffbffe          B.W      GUI_Unlock
;;;243    }
;;;244    
                          ENDP

                  GUI_TIMER_Restart PROC
;;;248    */
;;;249    void GUI_TIMER_Restart(GUI_TIMER_HANDLE hObj) {
000198  b570              PUSH     {r4-r6,lr}
00019a  4604              MOV      r4,r0
;;;250      GUI_TIMER_Obj* pObj;
;;;251      GUI_LOCK();
00019c  f7fffffe          BL       GUI_Lock
;;;252      {
;;;253        if (hObj == 0) {
0001a0  b914              CBNZ     r4,|L1.424|
;;;254          hObj = _hActiveTimer;
0001a2  480b              LDR      r0,|L1.464|
0001a4  f9b04002          LDRSH    r4,[r0,#2]  ; _hActiveTimer
                  |L1.424|
;;;255        }
;;;256       	pObj = GUI_TIMER_H2P(hObj);
0001a8  4620              MOV      r0,r4
0001aa  f7fffffe          BL       GUI_ALLOC_h2p
0001ae  4605              MOV      r5,r0
;;;257        pObj->t0 = GUI_GetTime() +pObj->Period;
0001b0  f7fffffe          BL       GUI_GetTime
0001b4  6969              LDR      r1,[r5,#0x14]
0001b6  4408              ADD      r0,r0,r1
0001b8  6128              STR      r0,[r5,#0x10]
;;;258    		_Unlink(hObj);
0001ba  4620              MOV      r0,r4
0001bc  f7fffffe          BL       _Unlink
;;;259    		_Link(hObj);
0001c0  4620              MOV      r0,r4
0001c2  f7fffffe          BL       _Link
;;;260      } GUI_UNLOCK(); 
0001c6  e8bd4070          POP      {r4-r6,lr}
0001ca  f7ffbffe          B.W      GUI_Unlock
;;;261    }
;;;262    
                          ENDP

0001ce  0000              DCW      0x0000
                  |L1.464|
                          DCD      ||.data||
                  |L1.468|
                          DCD      GUI_pfTimerExec

                          AREA ||.data||, DATA, ALIGN=1

                  hFirstTimer
000000  0000              DCB      0x00,0x00
                  _hActiveTimer
000002  0000              DCB      0x00,0x00
